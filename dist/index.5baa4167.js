// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"hbj89":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "138b6a135baa4167";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && ![
        "localhost",
        "127.0.0.1",
        "0.0.0.0"
    ].includes(hostname) ? "wss" : "ws";
    var ws;
    try {
        ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    } catch (err) {
        if (err.message) console.error(err.message);
        ws = {};
    }
    // Web extension context
    var extCtx = typeof browser === "undefined" ? typeof chrome === "undefined" ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        if (e.message) console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"igcvL":[function(require,module,exports) {
/*
- **Fonctionnalités** :
    - Récupère et mélange les données des pays à partir d'une API externe.
    - Initialise l'objet `Game` avec les pays mélangés.
    - Gère les interactions utilisateur via un Event Listener pour la soumission du formulaire.
    - Met à jour et affiche les scores et les meilleurs scores.
- **Interaction avec d'autres composants** :
    - Utilise la classe `Game` de `Game.js`.
    - Manipule directement le DOM pour afficher les scores et les meilleurs scores.
    - Lance des appels API pour récupérer les données des pays
*/ //update pour Netlify
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _countryJs = require("./country.js");
var _countryJsDefault = parcelHelpers.interopDefault(_countryJs);
var _gameJs = require("./game.js");
var _gameJsDefault = parcelHelpers.interopDefault(_gameJs);
var _dataJs = require("./data.js");
// Cherche l'élément <form> dans le DOM
const formElement = document.querySelector("form");
let countries = (0, _dataJs.countries).map((country)=>new (0, _countryJsDefault.default)(country));
countries = (0, _dataJs.countries).sort(()=>Math.random() - 0.5);
let gameCountries = new (0, _gameJsDefault.default)((0, _dataJs.countries));
//create highscore in localstorage if it doesn't exist
if (localStorage.getItem("bestscore") === null) localStorage.setItem("bestscore", 0);
else document.getElementById("highscore").innerHTML = "<h1>Highscore: " + localStorage.getItem("bestscore") + "</h1>";
const handleForm = (e)=>{
    try {
        // Empêche le refresh lors de la soumission du formulaire
        e.preventDefault();
        // Cherche la valeur de l'élément <input>
        const inputValue = e.target.firstElementChild.value;
        console.log(inputValue);
        if (gameCountries.isFinished()) {
            alert(`Game over! Votre score est : ${gameCountries.score}`);
            return;
        } else if (gameCountries.currentCountry.isCorrect(inputValue)) {
            console.log("Correct!");
            gameCountries.addPoint();
            document.getElementById("score").innerHTML = "<h1>Score: " + gameCountries.score + "</h1>";
            if (gameCountries.score > localStorage.getItem("bestscore")) localStorage.setItem("bestscore", gameCountries.score);
            document.getElementById("highscore").innerHTML = "<h1>Highscore: " + localStorage.getItem("bestscore") + "</h1>";
            gameCountries.nextCountry();
            e.target.firstElementChild.value = "";
        } else {
            gameCountries.nextCountry();
            e.target.firstElementChild.value = "";
        }
    } catch (error) {
        console.error("Error:", error);
    }
};
formElement.addEventListener("submit", handleForm);

},{"./country.js":"ePDPD","./game.js":"5JiMD","./data.js":"5pclG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ePDPD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lodash = require("lodash");
/*
- **Rôle** : Ce fichier définit la classe `Country`, représentant le modèle de données et la présentation d'un pays individuel.
- **Fonctionnalités** :
    - Contient des données spécifiques au pays, telles que le drapeau et les réponses valides (dérivées des noms de pays dans différentes langues).
    - Fournit une méthode pour vérifier si une réponse donnée est correcte.
    - Gère l'affichage du drapeau du pays dans l'interface utilisateur.

    ### Propriétés

1. Une propriété contenant les données d’**un** pays. Ces données doivent correspondre à un objet du tableau retourné par l’API. Cet objet sera passé à chaque instance de Country par le `constructor`.
2. Une propriété contenant toutes les réponses possibles pour un pays (ce tableau sera construit dans une méthode décrite plus loin). 
3. Une propriété générée par un retournant uniquement le drapeau du pays.

*/ class Country {
    constructor(data){
        this.flag = data.flags.png;
        this.name = data.name.common;
        this.answers = this.answers(data.translations);
    }
    answers(translations) {
        let answers = new Set();
        for(let key in translations)answers.add((0, _lodash.toLower)(translations[key].common));
        return answers;
    }
    getFlag() {
        return this.flag;
    }
    showFlag() {
        document.getElementById("flag").innerHTML = "";
        let flag = document.createElement("img");
        flag.src = this.flag;
        flag.alt = `Flag of ${this.name}`;
        document.getElementById("flag").appendChild(flag);
    }
    //test if an answer is true
    isCorrect(answer) {
        return this.answers.has((0, _lodash.toLower)(answer));
    }
}
exports.default = Country;

},{"lodash":"3qBDj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3qBDj":[function(require,module,exports) {
var global = arguments[3];
(function() {
    /** Used as a safe reference for `undefined` in pre-ES5 environments. */ var undefined;
    /** Used as the semantic version number. */ var VERSION = "4.17.21";
    /** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
    /** Error message constants. */ var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
    /** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = "__lodash_hash_undefined__";
    /** Used as the maximum memoize cache size. */ var MAX_MEMOIZE_SIZE = 500;
    /** Used as the internal argument placeholder. */ var PLACEHOLDER = "__lodash_placeholder__";
    /** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
    /** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    /** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
    /** Used as default options for `_.truncate`. */ var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
    /** Used to detect hot functions by number of calls within a span of milliseconds. */ var HOT_COUNT = 800, HOT_SPAN = 16;
    /** Used to indicate the type of lazy iteratees. */ var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
    /** Used as references for various `Number` constants. */ var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 1.7976931348623157e+308, NAN = 0 / 0;
    /** Used as references for the maximum length and index of an array. */ var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    /** Used to associate wrap methods with their bit flags. */ var wrapFlags = [
        [
            "ary",
            WRAP_ARY_FLAG
        ],
        [
            "bind",
            WRAP_BIND_FLAG
        ],
        [
            "bindKey",
            WRAP_BIND_KEY_FLAG
        ],
        [
            "curry",
            WRAP_CURRY_FLAG
        ],
        [
            "curryRight",
            WRAP_CURRY_RIGHT_FLAG
        ],
        [
            "flip",
            WRAP_FLIP_FLAG
        ],
        [
            "partial",
            WRAP_PARTIAL_FLAG
        ],
        [
            "partialRight",
            WRAP_PARTIAL_RIGHT_FLAG
        ],
        [
            "rearg",
            WRAP_REARG_FLAG
        ]
    ];
    /** `Object#toString` result references. */ var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
    var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
    /** Used to match empty string literals in compiled template source. */ var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    /** Used to match HTML entities and HTML characters. */ var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    /** Used to match template delimiters. */ var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
    /** Used to match property names within property paths. */ var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */ var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
    /** Used to match leading whitespace. */ var reTrimStart = /^\s+/;
    /** Used to match a single whitespace character. */ var reWhitespace = /\s/;
    /** Used to match wrap detail comments. */ var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
    /** Used to match words composed of alphanumeric characters. */ var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */ var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
    /** Used to match backslashes in property paths. */ var reEscapeChar = /\\(\\)?/g;
    /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */ var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    /** Used to match `RegExp` flags from their coerced string values. */ var reFlags = /\w*$/;
    /** Used to detect bad signed hexadecimal string values. */ var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    /** Used to detect binary string values. */ var reIsBinary = /^0b[01]+$/i;
    /** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\[object .+?Constructor\]$/;
    /** Used to detect octal string values. */ var reIsOctal = /^0o[0-7]+$/i;
    /** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
    /** Used to match Latin Unicode letters (excluding mathematical operators). */ var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    /** Used to ensure capturing order of template delimiters. */ var reNoMatch = /($^)/;
    /** Used to match unescaped characters in compiled string literals. */ var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    /** Used to compose unicode character classes. */ var rsAstralRange = "\ud800-\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    /** Used to compose unicode capture groups. */ var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\ud83c[\udffb-\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\ud83c[\udde6-\uddff]){2}", rsSurrPair = "[\ud800-\udbff][\udc00-\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
    /** Used to compose unicode regexes. */ var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [
        rsNonAstral,
        rsRegional,
        rsSurrPair
    ].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [
        rsDingbat,
        rsRegional,
        rsSurrPair
    ].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [
        rsNonAstral + rsCombo + "?",
        rsCombo,
        rsRegional,
        rsSurrPair,
        rsAstral
    ].join("|") + ")";
    /** Used to match apostrophes. */ var reApos = RegExp(rsApos, "g");
    /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */ var reComboMark = RegExp(rsCombo, "g");
    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */ var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    /** Used to match complex or compound words. */ var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [
            rsBreak,
            rsUpper,
            "$"
        ].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [
            rsBreak,
            rsUpper + rsMiscLower,
            "$"
        ].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
    ].join("|"), "g");
    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */ var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
    /** Used to detect strings that need a more robust regexp to match words. */ var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    /** Used to assign default `context` object properties. */ var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
    ];
    /** Used to make template sourceURLs easier to identify. */ var templateCounter = -1;
    /** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    /** Used to identify `toStringTag` values supported by `_.clone`. */ var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    /** Used to map Latin Unicode letters to basic Latin letters. */ var deburredLetters = {
        // Latin-1 Supplement block.
        "\xc0": "A",
        "\xc1": "A",
        "\xc2": "A",
        "\xc3": "A",
        "\xc4": "A",
        "\xc5": "A",
        "\xe0": "a",
        "\xe1": "a",
        "\xe2": "a",
        "\xe3": "a",
        "\xe4": "a",
        "\xe5": "a",
        "\xc7": "C",
        "\xe7": "c",
        "\xd0": "D",
        "\xf0": "d",
        "\xc8": "E",
        "\xc9": "E",
        "\xca": "E",
        "\xcb": "E",
        "\xe8": "e",
        "\xe9": "e",
        "\xea": "e",
        "\xeb": "e",
        "\xcc": "I",
        "\xcd": "I",
        "\xce": "I",
        "\xcf": "I",
        "\xec": "i",
        "\xed": "i",
        "\xee": "i",
        "\xef": "i",
        "\xd1": "N",
        "\xf1": "n",
        "\xd2": "O",
        "\xd3": "O",
        "\xd4": "O",
        "\xd5": "O",
        "\xd6": "O",
        "\xd8": "O",
        "\xf2": "o",
        "\xf3": "o",
        "\xf4": "o",
        "\xf5": "o",
        "\xf6": "o",
        "\xf8": "o",
        "\xd9": "U",
        "\xda": "U",
        "\xdb": "U",
        "\xdc": "U",
        "\xf9": "u",
        "\xfa": "u",
        "\xfb": "u",
        "\xfc": "u",
        "\xdd": "Y",
        "\xfd": "y",
        "\xff": "y",
        "\xc6": "Ae",
        "\xe6": "ae",
        "\xde": "Th",
        "\xfe": "th",
        "\xdf": "ss",
        // Latin Extended-A block.
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
    };
    /** Used to map characters to HTML entities. */ var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
    };
    /** Used to map HTML entities to characters. */ var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
    };
    /** Used to escape characters for inclusion in compiled string literals. */ var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
    };
    /** Built-in method references without a dependency on `root`. */ var freeParseFloat = parseFloat, freeParseInt = parseInt;
    /** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    /** Detect free variable `self`. */ var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    /** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function("return this")();
    /** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;
    /** Used to access faster Node.js helpers. */ var nodeUtil = function() {
        try {
            // Use `util.types` for Node.js 10+.
            var types = freeModule && freeModule.require && freeModule.require("util").types;
            if (types) return types;
            // Legacy `process.binding('util')` for Node.js < 10.
            return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {}
    }();
    /* Node.js helper references. */ var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    /*--------------------------------------------------------------------------*/ /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */ function apply(func, thisArg, args) {
        switch(args.length){
            case 0:
                return func.call(thisArg);
            case 1:
                return func.call(thisArg, args[0]);
            case 2:
                return func.call(thisArg, args[0], args[1]);
            case 3:
                return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
    }
    /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */ function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            var value = array[index];
            setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
    }
    /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */ function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (iteratee(array[index], index, array) === false) break;
        }
        return array;
    }
    /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */ function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while(length--){
            if (iteratee(array[length], length, array) === false) break;
        }
        return array;
    }
    /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */ function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (!predicate(array[index], index, array)) return false;
        }
        return true;
    }
    /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */ function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while(++index < length){
            var value = array[index];
            if (predicate(value, index, array)) result[resIndex++] = value;
        }
        return result;
    }
    /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */ function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
    }
    /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */ function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (comparator(value, array[index])) return true;
        }
        return false;
    }
    /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */ function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while(++index < length)result[index] = iteratee(array[index], index, array);
        return result;
    }
    /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */ function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while(++index < length)array[offset + index] = values[index];
        return array;
    }
    /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */ function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) accumulator = array[++index];
        while(++index < length)accumulator = iteratee(accumulator, array[index], index, array);
        return accumulator;
    }
    /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */ function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) accumulator = array[--length];
        while(length--)accumulator = iteratee(accumulator, array[length], length, array);
        return accumulator;
    }
    /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */ function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (predicate(array[index], index, array)) return true;
        }
        return false;
    }
    /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */ var asciiSize = baseProperty("length");
    /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */ function asciiToArray(string) {
        return string.split("");
    }
    /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */ function asciiWords(string) {
        return string.match(reAsciiWord) || [];
    }
    /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */ function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection) {
            if (predicate(value, key, collection)) {
                result = key;
                return false;
            }
        });
        return result;
    }
    /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while(fromRight ? index-- : ++index < length){
            if (predicate(array[index], index, array)) return index;
        }
        return -1;
    }
    /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while(++index < length){
            if (comparator(array[index], value)) return index;
        }
        return -1;
    }
    /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */ function baseIsNaN(value) {
        return value !== value;
    }
    /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */ function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
    }
    /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */ function baseProperty(key) {
        return function(object) {
            return object == null ? undefined : object[key];
        };
    }
    /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */ function basePropertyOf(object) {
        return function(key) {
            return object == null ? undefined : object[key];
        };
    }
    /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */ function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
        });
        return accumulator;
    }
    /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */ function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while(length--)array[length] = array[length].value;
        return array;
    }
    /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */ function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while(++index < length){
            var current = iteratee(array[index]);
            if (current !== undefined) result = result === undefined ? current : result + current;
        }
        return result;
    }
    /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */ function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while(++index < n)result[index] = iteratee(index);
        return result;
    }
    /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */ function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
            return [
                key,
                object[key]
            ];
        });
    }
    /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */ function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */ function baseUnary(func) {
        return function(value) {
            return func(value);
        };
    }
    /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */ function baseValues(object, props) {
        return arrayMap(props, function(key) {
            return object[key];
        });
    }
    /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */ function cacheHas(cache, key) {
        return cache.has(key);
    }
    /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */ function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while(++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1);
        return index;
    }
    /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */ function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while(index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1);
        return index;
    }
    /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */ function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while(length--)if (array[length] === placeholder) ++result;
        return result;
    }
    /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */ var deburrLetter = basePropertyOf(deburredLetters);
    /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */ var escapeHtmlChar = basePropertyOf(htmlEscapes);
    /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */ function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
    }
    /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */ function getValue(object, key) {
        return object == null ? undefined : object[key];
    }
    /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */ function hasUnicode(string) {
        return reHasUnicode.test(string);
    }
    /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */ function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
    }
    /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */ function iteratorToArray(iterator) {
        var data, result = [];
        while(!(data = iterator.next()).done)result.push(data.value);
        return result;
    }
    /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */ function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
            result[++index] = [
                key,
                value
            ];
        });
        return result;
    }
    /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */ function overArg(func, transform) {
        return function(arg) {
            return func(transform(arg));
        };
    }
    /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */ function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while(++index < length){
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
                array[index] = PLACEHOLDER;
                result[resIndex++] = index;
            }
        }
        return result;
    }
    /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */ function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
            result[++index] = value;
        });
        return result;
    }
    /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */ function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
            result[++index] = [
                value,
                value
            ];
        });
        return result;
    }
    /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while(++index < length){
            if (array[index] === value) return index;
        }
        return -1;
    }
    /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while(index--){
            if (array[index] === value) return index;
        }
        return index;
    }
    /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */ function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }
    /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */ function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */ function trimmedEndIndex(string) {
        var index = string.length;
        while(index-- && reWhitespace.test(string.charAt(index)));
        return index;
    }
    /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */ var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
    /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */ function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while(reUnicode.test(string))++result;
        return result;
    }
    /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */ function unicodeToArray(string) {
        return string.match(reUnicode) || [];
    }
    /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */ function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
    }
    /*--------------------------------------------------------------------------*/ /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */ var runInContext = function runInContext(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
        /** Built-in constructor references. */ var Array1 = context.Array, Date = context.Date, Error = context.Error, Function1 = context.Function, Math = context.Math, Object1 = context.Object, RegExp1 = context.RegExp, String = context.String, TypeError = context.TypeError;
        /** Used for built-in method references. */ var arrayProto = Array1.prototype, funcProto = Function1.prototype, objectProto = Object1.prototype;
        /** Used to detect overreaching core-js shims. */ var coreJsData = context["__core-js_shared__"];
        /** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
        /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
        /** Used to generate unique IDs. */ var idCounter = 0;
        /** Used to detect methods masquerading as native. */ var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
            return uid ? "Symbol(src)_1." + uid : "";
        }();
        /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */ var nativeObjectToString = objectProto.toString;
        /** Used to infer the `Object` constructor. */ var objectCtorString = funcToString.call(Object1);
        /** Used to restore the original `_` reference in `_.noConflict`. */ var oldDash = root._;
        /** Used to detect if a method is native. */ var reIsNative = RegExp1("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        /** Built-in value references. */ var Buffer = moduleExports ? context.Buffer : undefined, Symbol = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined, getPrototype = overArg(Object1.getPrototypeOf, Object1), objectCreate = Object1.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined, symIterator = Symbol ? Symbol.iterator : undefined, symToStringTag = Symbol ? Symbol.toStringTag : undefined;
        var defineProperty = function() {
            try {
                var func = getNative(Object1, "defineProperty");
                func({}, "", {});
                return func;
            } catch (e) {}
        }();
        /** Mocked built-ins. */ var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date && Date.now !== root.Date.now && Date.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        /* Built-in method references for those with the same name as other `lodash` methods. */ var nativeCeil = Math.ceil, nativeFloor = Math.floor, nativeGetSymbols = Object1.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object1.keys, Object1), nativeMax = Math.max, nativeMin = Math.min, nativeNow = Date.now, nativeParseInt = context.parseInt, nativeRandom = Math.random, nativeReverse = arrayProto.reverse;
        /* Built-in method references that are verified to be native. */ var DataView = getNative(context, "DataView"), Map = getNative(context, "Map"), Promise = getNative(context, "Promise"), Set = getNative(context, "Set"), WeakMap = getNative(context, "WeakMap"), nativeCreate = getNative(Object1, "create");
        /** Used to store function metadata. */ var metaMap = WeakMap && new WeakMap;
        /** Used to lookup unminified function names. */ var realNames = {};
        /** Used to detect maps, sets, and weakmaps. */ var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
        /** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
        /*------------------------------------------------------------------------*/ /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */ function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                if (value instanceof LodashWrapper) return value;
                if (hasOwnProperty.call(value, "__wrapped__")) return wrapperClone(value);
            }
            return new LodashWrapper(value);
        }
        /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */ var baseCreate = function() {
            function object() {}
            return function(proto) {
                if (!isObject(proto)) return {};
                if (objectCreate) return objectCreate(proto);
                object.prototype = proto;
                var result = new object;
                object.prototype = undefined;
                return result;
            };
        }();
        /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */ function baseLodash() {
        // No operation performed.
        }
        /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */ function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined;
        }
        /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */ lodash.templateSettings = {
            /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */ "escape": reEscape,
            /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */ "evaluate": reEvaluate,
            /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */ "interpolate": reInterpolate,
            /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */ "variable": "",
            /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */ "imports": {
                /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */ "_": lodash
            }
        };
        // Ensure wrappers are instances of `baseLodash`.
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        /*------------------------------------------------------------------------*/ /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */ function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
        }
        /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */ function lazyClone() {
            var result = new LazyWrapper(this.__wrapped__);
            result.__actions__ = copyArray(this.__actions__);
            result.__dir__ = this.__dir__;
            result.__filtered__ = this.__filtered__;
            result.__iteratees__ = copyArray(this.__iteratees__);
            result.__takeCount__ = this.__takeCount__;
            result.__views__ = copyArray(this.__views__);
            return result;
        }
        /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */ function lazyReverse() {
            if (this.__filtered__) {
                var result = new LazyWrapper(this);
                result.__dir__ = -1;
                result.__filtered__ = true;
            } else {
                result = this.clone();
                result.__dir__ *= -1;
            }
            return result;
        }
        /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */ function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) return baseWrapperValue(array, this.__actions__);
            var result = [];
            outer: while(length-- && resIndex < takeCount){
                index += dir;
                var iterIndex = -1, value = array[index];
                while(++iterIndex < iterLength){
                    var data = iteratees[iterIndex], iteratee = data.iteratee, type = data.type, computed = iteratee(value);
                    if (type == LAZY_MAP_FLAG) value = computed;
                    else if (!computed) {
                        if (type == LAZY_FILTER_FLAG) continue outer;
                        else break outer;
                    }
                }
                result[resIndex++] = value;
            }
            return result;
        }
        // Ensure `LazyWrapper` is an instance of `baseLodash`.
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        /*------------------------------------------------------------------------*/ /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function Hash(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while(++index < length){
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */ function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
        }
        /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function hashDelete(key) {
            var result = this.has(key) && delete this.__data__[key];
            this.size -= result ? 1 : 0;
            return result;
        }
        /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }
        /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
        }
        /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */ function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
            return this;
        }
        // Add methods to `Hash`.
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        /*------------------------------------------------------------------------*/ /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function ListCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while(++index < length){
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */ function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
        }
        /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function listCacheDelete(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) return false;
            var lastIndex = data.length - 1;
            if (index == lastIndex) data.pop();
            else splice.call(data, index, 1);
            --this.size;
            return true;
        }
        /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function listCacheGet(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined : data[index][1];
        }
        /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
        }
        /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */ function listCacheSet(key, value) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
                ++this.size;
                data.push([
                    key,
                    value
                ]);
            } else data[index][1] = value;
            return this;
        }
        // Add methods to `ListCache`.
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        /*------------------------------------------------------------------------*/ /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function MapCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while(++index < length){
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */ function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
                "hash": new Hash,
                "map": new (Map || ListCache),
                "string": new Hash
            };
        }
        /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function mapCacheDelete(key) {
            var result = getMapData(this, key)["delete"](key);
            this.size -= result ? 1 : 0;
            return result;
        }
        /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function mapCacheGet(key) {
            return getMapData(this, key).get(key);
        }
        /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function mapCacheHas(key) {
            return getMapData(this, key).has(key);
        }
        /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */ function mapCacheSet(key, value) {
            var data = getMapData(this, key), size = data.size;
            data.set(key, value);
            this.size += data.size == size ? 0 : 1;
            return this;
        }
        // Add methods to `MapCache`.
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        /*------------------------------------------------------------------------*/ /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */ function SetCache(values) {
            var index = -1, length = values == null ? 0 : values.length;
            this.__data__ = new MapCache;
            while(++index < length)this.add(values[index]);
        }
        /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */ function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
        }
        /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */ function setCacheHas(value) {
            return this.__data__.has(value);
        }
        // Add methods to `SetCache`.
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        /*------------------------------------------------------------------------*/ /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
        }
        /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */ function stackClear() {
            this.__data__ = new ListCache;
            this.size = 0;
        }
        /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function stackDelete(key) {
            var data = this.__data__, result = data["delete"](key);
            this.size = data.size;
            return result;
        }
        /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function stackGet(key) {
            return this.__data__.get(key);
        }
        /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function stackHas(key) {
            return this.__data__.has(key);
        }
        /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */ function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
                var pairs = data.__data__;
                if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                    pairs.push([
                        key,
                        value
                    ]);
                    this.size = ++data.size;
                    return this;
                }
                data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
        }
        // Add methods to `Stack`.
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        /*------------------------------------------------------------------------*/ /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */ function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
            for(var key in value)if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length)))) result.push(key);
            return result;
        }
        /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */ function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined;
        }
        /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */ function arraySampleSize(array, n) {
            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */ function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
        }
        /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */ function assignMergeValue(object, key, value) {
            if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
        }
        /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */ function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
        }
        /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */ function assocIndexOf(array, key) {
            var length = array.length;
            while(length--){
                if (eq(array[length][0], key)) return length;
            }
            return -1;
        }
        /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */ function baseAggregator(collection, setter, iteratee, accumulator) {
            baseEach(collection, function(value, key, collection) {
                setter(accumulator, value, iteratee(value), collection);
            });
            return accumulator;
        }
        /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */ function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
        }
        /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */ function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
        }
        /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */ function baseAssignValue(object, key, value) {
            if (key == "__proto__" && defineProperty) defineProperty(object, key, {
                "configurable": true,
                "enumerable": true,
                "value": value,
                "writable": true
            });
            else object[key] = value;
        }
        /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */ function baseAt(object, paths) {
            var index = -1, length = paths.length, result = Array1(length), skip = object == null;
            while(++index < length)result[index] = skip ? undefined : get(object, paths[index]);
            return result;
        }
        /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */ function baseClamp(number, lower, upper) {
            if (number === number) {
                if (upper !== undefined) number = number <= upper ? number : upper;
                if (lower !== undefined) number = number >= lower ? number : lower;
            }
            return number;
        }
        /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */ function baseClone(value, bitmask, customizer, key, object, stack) {
            var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) result = object ? customizer(value, key, object, stack) : customizer(value);
            if (result !== undefined) return result;
            if (!isObject(value)) return value;
            var isArr = isArray(value);
            if (isArr) {
                result = initCloneArray(value);
                if (!isDeep) return copyArray(value, result);
            } else {
                var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
                if (isBuffer(value)) return cloneBuffer(value, isDeep);
                if (tag == objectTag || tag == argsTag || isFunc && !object) {
                    result = isFlat || isFunc ? {} : initCloneObject(value);
                    if (!isDeep) return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
                } else {
                    if (!cloneableTags[tag]) return object ? value : {};
                    result = initCloneByTag(value, tag, isDeep);
                }
            }
            // Check for circular references and return its corresponding clone.
            stack || (stack = new Stack);
            var stacked = stack.get(value);
            if (stacked) return stacked;
            stack.set(value, result);
            if (isSet(value)) value.forEach(function(subValue) {
                result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
            else if (isMap(value)) value.forEach(function(subValue, key) {
                result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined : keysFunc(value);
            arrayEach(props || value, function(subValue, key) {
                if (props) {
                    key = subValue;
                    subValue = value[key];
                }
                // Recursively populate clone (susceptible to call stack limits).
                assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
            return result;
        }
        /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */ function baseConforms(source) {
            var props = keys(source);
            return function(object) {
                return baseConformsTo(object, source, props);
            };
        }
        /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */ function baseConformsTo(object, source, props) {
            var length = props.length;
            if (object == null) return !length;
            object = Object1(object);
            while(length--){
                var key = props[length], predicate = source[key], value = object[key];
                if (value === undefined && !(key in object) || !predicate(value)) return false;
            }
            return true;
        }
        /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */ function baseDelay(func, wait, args) {
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            return setTimeout(function() {
                func.apply(undefined, args);
            }, wait);
        }
        /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */ function baseDifference(array, values, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
            if (!length) return result;
            if (iteratee) values = arrayMap(values, baseUnary(iteratee));
            if (comparator) {
                includes = arrayIncludesWith;
                isCommon = false;
            } else if (values.length >= LARGE_ARRAY_SIZE) {
                includes = cacheHas;
                isCommon = false;
                values = new SetCache(values);
            }
            outer: while(++index < length){
                var value = array[index], computed = iteratee == null ? value : iteratee(value);
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                    var valuesIndex = valuesLength;
                    while(valuesIndex--){
                        if (values[valuesIndex] === computed) continue outer;
                    }
                    result.push(value);
                } else if (!includes(values, computed, comparator)) result.push(value);
            }
            return result;
        }
        /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */ var baseEach = createBaseEach(baseForOwn);
        /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */ var baseEachRight = createBaseEach(baseForOwnRight, true);
        /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */ function baseEvery(collection, predicate) {
            var result = true;
            baseEach(collection, function(value, index, collection) {
                result = !!predicate(value, index, collection);
                return result;
            });
            return result;
        }
        /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */ function baseExtremum(array, iteratee, comparator) {
            var index = -1, length = array.length;
            while(++index < length){
                var value = array[index], current = iteratee(value);
                if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) var computed = current, result = value;
            }
            return result;
        }
        /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */ function baseFill(array, value, start, end) {
            var length = array.length;
            start = toInteger(start);
            if (start < 0) start = -start > length ? 0 : length + start;
            end = end === undefined || end > length ? length : toInteger(end);
            if (end < 0) end += length;
            end = start > end ? 0 : toLength(end);
            while(start < end)array[start++] = value;
            return array;
        }
        /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */ function baseFilter(collection, predicate) {
            var result = [];
            baseEach(collection, function(value, index, collection) {
                if (predicate(value, index, collection)) result.push(value);
            });
            return result;
        }
        /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */ function baseFlatten(array, depth, predicate, isStrict, result) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result || (result = []);
            while(++index < length){
                var value = array[index];
                if (depth > 0 && predicate(value)) {
                    if (depth > 1) // Recursively flatten arrays (susceptible to call stack limits).
                    baseFlatten(value, depth - 1, predicate, isStrict, result);
                    else arrayPush(result, value);
                } else if (!isStrict) result[result.length] = value;
            }
            return result;
        }
        /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */ var baseFor = createBaseFor();
        /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */ var baseForRight = createBaseFor(true);
        /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */ function baseForOwn(object, iteratee) {
            return object && baseFor(object, iteratee, keys);
        }
        /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */ function baseForOwnRight(object, iteratee) {
            return object && baseForRight(object, iteratee, keys);
        }
        /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */ function baseFunctions(object, props) {
            return arrayFilter(props, function(key) {
                return isFunction(object[key]);
            });
        }
        /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */ function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0, length = path.length;
            while(object != null && index < length)object = object[toKey(path[index++])];
            return index && index == length ? object : undefined;
        }
        /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }
        /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */ function baseGetTag(value) {
            if (value == null) return value === undefined ? undefinedTag : nullTag;
            return symToStringTag && symToStringTag in Object1(value) ? getRawTag(value) : objectToString(value);
        }
        /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */ function baseGt(value, other) {
            return value > other;
        }
        /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */ function baseHas(object, key) {
            return object != null && hasOwnProperty.call(object, key);
        }
        /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */ function baseHasIn(object, key) {
            return object != null && key in Object1(object);
        }
        /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */ function baseInRange(number, start, end) {
            return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */ function baseIntersection(arrays, iteratee, comparator) {
            var includes = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array1(othLength), maxLength = Infinity, result = [];
            while(othIndex--){
                var array = arrays[othIndex];
                if (othIndex && iteratee) array = arrayMap(array, baseUnary(iteratee));
                maxLength = nativeMin(array.length, maxLength);
                caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
            }
            array = arrays[0];
            var index = -1, seen = caches[0];
            outer: while(++index < length && result.length < maxLength){
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
                    othIndex = othLength;
                    while(--othIndex){
                        var cache = caches[othIndex];
                        if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) continue outer;
                    }
                    if (seen) seen.push(computed);
                    result.push(value);
                }
            }
            return result;
        }
        /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */ function baseInverter(object, setter, iteratee, accumulator) {
            baseForOwn(object, function(value, key, object) {
                setter(accumulator, iteratee(value), key, object);
            });
            return accumulator;
        }
        /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */ function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent(object, path);
            var func = object == null ? object : object[toKey(last(path))];
            return func == null ? undefined : apply(func, object, args);
        }
        /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */ function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */ function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */ function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */ function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) return true;
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) return value !== value && other !== other;
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */ function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object)) {
                if (!isBuffer(other)) return false;
                objIsArr = true;
                objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
                stack || (stack = new Stack);
                return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
                if (objIsWrapped || othIsWrapped) {
                    var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                    stack || (stack = new Stack);
                    return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                }
            }
            if (!isSameTag) return false;
            stack || (stack = new Stack);
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */ function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
        }
        /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */ function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) return !length;
            object = Object1(object);
            while(index--){
                var data = matchData[index];
                if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) return false;
            }
            while(++index < length){
                data = matchData[index];
                var key = data[0], objValue = object[key], srcValue = data[1];
                if (noCustomizer && data[2]) {
                    if (objValue === undefined && !(key in object)) return false;
                } else {
                    var stack = new Stack;
                    if (customizer) var result = customizer(objValue, srcValue, key, object, source, stack);
                    if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) return false;
                }
            }
            return true;
        }
        /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */ function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) return false;
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
        }
        /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */ function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */ function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
        }
        /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */ function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */ function baseIteratee(value) {
            // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
            // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
            if (typeof value == "function") return value;
            if (value == null) return identity;
            if (typeof value == "object") return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            return property(value);
        }
        /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */ function baseKeys(object) {
            if (!isPrototype(object)) return nativeKeys(object);
            var result = [];
            for(var key in Object1(object))if (hasOwnProperty.call(object, key) && key != "constructor") result.push(key);
            return result;
        }
        /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */ function baseKeysIn(object) {
            if (!isObject(object)) return nativeKeysIn(object);
            var isProto = isPrototype(object), result = [];
            for(var key in object)if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) result.push(key);
            return result;
        }
        /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */ function baseLt(value, other) {
            return value < other;
        }
        /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */ function baseMap(collection, iteratee) {
            var index = -1, result = isArrayLike(collection) ? Array1(collection.length) : [];
            baseEach(collection, function(value, key, collection) {
                result[++index] = iteratee(value, key, collection);
            });
            return result;
        }
        /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */ function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            return function(object) {
                return object === source || baseIsMatch(object, source, matchData);
            };
        }
        /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */ function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) return matchesStrictComparable(toKey(path), srcValue);
            return function(object) {
                var objValue = get(object, path);
                return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
        }
        /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */ function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) return;
            baseFor(source, function(srcValue, key) {
                stack || (stack = new Stack);
                if (isObject(srcValue)) baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                else {
                    var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined;
                    if (newValue === undefined) newValue = srcValue;
                    assignMergeValue(object, key, newValue);
                }
            }, keysIn);
        }
        /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */ function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
                assignMergeValue(object, key, stacked);
                return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined;
            var isCommon = newValue === undefined;
            if (isCommon) {
                var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
                newValue = srcValue;
                if (isArr || isBuff || isTyped) {
                    if (isArray(objValue)) newValue = objValue;
                    else if (isArrayLikeObject(objValue)) newValue = copyArray(objValue);
                    else if (isBuff) {
                        isCommon = false;
                        newValue = cloneBuffer(srcValue, true);
                    } else if (isTyped) {
                        isCommon = false;
                        newValue = cloneTypedArray(srcValue, true);
                    } else newValue = [];
                } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                    newValue = objValue;
                    if (isArguments(objValue)) newValue = toPlainObject(objValue);
                    else if (!isObject(objValue) || isFunction(objValue)) newValue = initCloneObject(srcValue);
                } else isCommon = false;
            }
            if (isCommon) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, newValue);
                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                stack["delete"](srcValue);
            }
            assignMergeValue(object, key, newValue);
        }
        /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */ function baseNth(array, n) {
            var length = array.length;
            if (!length) return;
            n += n < 0 ? length : 0;
            return isIndex(n, length) ? array[n] : undefined;
        }
        /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */ function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) iteratees = arrayMap(iteratees, function(iteratee) {
                if (isArray(iteratee)) return function(value) {
                    return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
                };
                return iteratee;
            });
            else iteratees = [
                identity
            ];
            var index = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result = baseMap(collection, function(value, key, collection) {
                var criteria = arrayMap(iteratees, function(iteratee) {
                    return iteratee(value);
                });
                return {
                    "criteria": criteria,
                    "index": ++index,
                    "value": value
                };
            });
            return baseSortBy(result, function(object, other) {
                return compareMultiple(object, other, orders);
            });
        }
        /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */ function basePick(object, paths) {
            return basePickBy(object, paths, function(value, path) {
                return hasIn(object, path);
            });
        }
        /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */ function basePickBy(object, paths, predicate) {
            var index = -1, length = paths.length, result = {};
            while(++index < length){
                var path = paths[index], value = baseGet(object, path);
                if (predicate(value, path)) baseSet(result, castPath(path, object), value);
            }
            return result;
        }
        /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */ function basePropertyDeep(path) {
            return function(object) {
                return baseGet(object, path);
            };
        }
        /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */ function basePullAll(array, values, iteratee, comparator) {
            var indexOf = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values.length, seen = array;
            if (array === values) values = copyArray(values);
            if (iteratee) seen = arrayMap(array, baseUnary(iteratee));
            while(++index < length){
                var fromIndex = 0, value = values[index], computed = iteratee ? iteratee(value) : value;
                while((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1){
                    if (seen !== array) splice.call(seen, fromIndex, 1);
                    splice.call(array, fromIndex, 1);
                }
            }
            return array;
        }
        /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */ function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0, lastIndex = length - 1;
            while(length--){
                var index = indexes[length];
                if (length == lastIndex || index !== previous) {
                    var previous = index;
                    if (isIndex(index)) splice.call(array, index, 1);
                    else baseUnset(array, index);
                }
            }
            return array;
        }
        /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */ function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */ function baseRange(start, end, step, fromRight) {
            var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array1(length);
            while(length--){
                result[fromRight ? length : ++index] = start;
                start += step;
            }
            return result;
        }
        /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */ function baseRepeat(string, n) {
            var result = "";
            if (!string || n < 1 || n > MAX_SAFE_INTEGER) return result;
            // Leverage the exponentiation by squaring algorithm for a faster repeat.
            // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
            do {
                if (n % 2) result += string;
                n = nativeFloor(n / 2);
                if (n) string += string;
            }while (n);
            return result;
        }
        /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */ function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + "");
        }
        /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */ function baseSample(collection) {
            return arraySample(values(collection));
        }
        /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */ function baseSampleSize(collection, n) {
            var array = values(collection);
            return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */ function baseSet(object, path, value, customizer) {
            if (!isObject(object)) return object;
            path = castPath(path, object);
            var index = -1, length = path.length, lastIndex = length - 1, nested = object;
            while(nested != null && ++index < length){
                var key = toKey(path[index]), newValue = value;
                if (key === "__proto__" || key === "constructor" || key === "prototype") return object;
                if (index != lastIndex) {
                    var objValue = nested[key];
                    newValue = customizer ? customizer(objValue, key, nested) : undefined;
                    if (newValue === undefined) newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                }
                assignValue(nested, key, newValue);
                nested = nested[key];
            }
            return object;
        }
        /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */ var baseSetData = !metaMap ? identity : function(func, data) {
            metaMap.set(func, data);
            return func;
        };
        /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */ var baseSetToString = !defineProperty ? identity : function(func, string) {
            return defineProperty(func, "toString", {
                "configurable": true,
                "enumerable": false,
                "value": constant(string),
                "writable": true
            });
        };
        /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */ function baseShuffle(collection) {
            return shuffleSelf(values(collection));
        }
        /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */ function baseSlice(array, start, end) {
            var index = -1, length = array.length;
            if (start < 0) start = -start > length ? 0 : length + start;
            end = end > length ? length : end;
            if (end < 0) end += length;
            length = start > end ? 0 : end - start >>> 0;
            start >>>= 0;
            var result = Array1(length);
            while(++index < length)result[index] = array[index + start];
            return result;
        }
        /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */ function baseSome(collection, predicate) {
            var result;
            baseEach(collection, function(value, index, collection) {
                result = predicate(value, index, collection);
                return !result;
            });
            return !!result;
        }
        /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */ function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                while(low < high){
                    var mid = low + high >>> 1, computed = array[mid];
                    if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) low = mid + 1;
                    else high = mid;
                }
                return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
        }
        /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */ function baseSortedIndexBy(array, value, iteratee, retHighest) {
            var low = 0, high = array == null ? 0 : array.length;
            if (high === 0) return 0;
            value = iteratee(value);
            var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined;
            while(low < high){
                var mid = nativeFloor((low + high) / 2), computed = iteratee(array[mid]), othIsDefined = computed !== undefined, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
                if (valIsNaN) var setLow = retHighest || othIsReflexive;
                else if (valIsUndefined) setLow = othIsReflexive && (retHighest || othIsDefined);
                else if (valIsNull) setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                else if (valIsSymbol) setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                else if (othIsNull || othIsSymbol) setLow = false;
                else setLow = retHighest ? computed <= value : computed < value;
                if (setLow) low = mid + 1;
                else high = mid;
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
        }
        /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */ function baseSortedUniq(array, iteratee) {
            var index = -1, length = array.length, resIndex = 0, result = [];
            while(++index < length){
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                if (!index || !eq(computed, seen)) {
                    var seen = computed;
                    result[resIndex++] = value === 0 ? 0 : value;
                }
            }
            return result;
        }
        /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */ function baseToNumber(value) {
            if (typeof value == "number") return value;
            if (isSymbol(value)) return NAN;
            return +value;
        }
        /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */ function baseToString(value) {
            // Exit early for strings to avoid a performance hit in some environments.
            if (typeof value == "string") return value;
            if (isArray(value)) // Recursively convert values (susceptible to call stack limits).
            return arrayMap(value, baseToString) + "";
            if (isSymbol(value)) return symbolToString ? symbolToString.call(value) : "";
            var result = value + "";
            return result == "0" && 1 / value == -INFINITY ? "-0" : result;
        }
        /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */ function baseUniq(array, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
            if (comparator) {
                isCommon = false;
                includes = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
                var set = iteratee ? null : createSet(array);
                if (set) return setToArray(set);
                isCommon = false;
                includes = cacheHas;
                seen = new SetCache;
            } else seen = iteratee ? [] : result;
            outer: while(++index < length){
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                    var seenIndex = seen.length;
                    while(seenIndex--){
                        if (seen[seenIndex] === computed) continue outer;
                    }
                    if (iteratee) seen.push(computed);
                    result.push(value);
                } else if (!includes(seen, computed, comparator)) {
                    if (seen !== result) seen.push(computed);
                    result.push(value);
                }
            }
            return result;
        }
        /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */ function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent(object, path);
            return object == null || delete object[toKey(last(path))];
        }
        /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */ function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */ function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index = fromRight ? length : -1;
            while((fromRight ? index-- : ++index < length) && predicate(array[index], index, array));
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */ function baseWrapperValue(value, actions) {
            var result = value;
            if (result instanceof LazyWrapper) result = result.value();
            return arrayReduce(actions, function(result, action) {
                return action.func.apply(action.thisArg, arrayPush([
                    result
                ], action.args));
            }, result);
        }
        /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */ function baseXor(arrays, iteratee, comparator) {
            var length = arrays.length;
            if (length < 2) return length ? baseUniq(arrays[0]) : [];
            var index = -1, result = Array1(length);
            while(++index < length){
                var array = arrays[index], othIndex = -1;
                while(++othIndex < length)if (othIndex != index) result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
            return baseUniq(baseFlatten(result, 1), iteratee, comparator);
        }
        /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */ function baseZipObject(props, values, assignFunc) {
            var index = -1, length = props.length, valsLength = values.length, result = {};
            while(++index < length){
                var value = index < valsLength ? values[index] : undefined;
                assignFunc(result, props[index], value);
            }
            return result;
        }
        /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */ function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
        }
        /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */ function castFunction(value) {
            return typeof value == "function" ? value : identity;
        }
        /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */ function castPath(value, object) {
            if (isArray(value)) return value;
            return isKey(value, object) ? [
                value
            ] : stringToPath(toString(value));
        }
        /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */ var castRest = baseRest;
        /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */ function castSlice(array, start, end) {
            var length = array.length;
            end = end === undefined ? length : end;
            return !start && end >= length ? array : baseSlice(array, start, end);
        }
        /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */ var clearTimeout = ctxClearTimeout || function(id) {
            return root.clearTimeout(id);
        };
        /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */ function cloneBuffer(buffer, isDeep) {
            if (isDeep) return buffer.slice();
            var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result);
            return result;
        }
        /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */ function cloneArrayBuffer(arrayBuffer) {
            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array(result).set(new Uint8Array(arrayBuffer));
            return result;
        }
        /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */ function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */ function cloneRegExp(regexp) {
            var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result.lastIndex = regexp.lastIndex;
            return result;
        }
        /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */ function cloneSymbol(symbol) {
            return symbolValueOf ? Object1(symbolValueOf.call(symbol)) : {};
        }
        /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */ function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */ function compareAscending(value, other) {
            if (value !== other) {
                var valIsDefined = value !== undefined, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
                var othIsDefined = other !== undefined, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
                if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) return 1;
                if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) return -1;
            }
            return 0;
        }
        /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */ function compareMultiple(object, other, orders) {
            var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while(++index < length){
                var result = compareAscending(objCriteria[index], othCriteria[index]);
                if (result) {
                    if (index >= ordersLength) return result;
                    var order = orders[index];
                    return result * (order == "desc" ? -1 : 1);
                }
            }
            // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
            // that causes it, under certain circumstances, to provide the same value for
            // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
            // for more details.
            //
            // This also ensures a stable sort in V8 and other engines.
            // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
            return object.index - other.index;
        }
        /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */ function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array1(leftLength + rangeLength), isUncurried = !isCurried;
            while(++leftIndex < leftLength)result[leftIndex] = partials[leftIndex];
            while(++argsIndex < holdersLength)if (isUncurried || argsIndex < argsLength) result[holders[argsIndex]] = args[argsIndex];
            while(rangeLength--)result[leftIndex++] = args[argsIndex++];
            return result;
        }
        /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */ function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array1(rangeLength + rightLength), isUncurried = !isCurried;
            while(++argsIndex < rangeLength)result[argsIndex] = args[argsIndex];
            var offset = argsIndex;
            while(++rightIndex < rightLength)result[offset + rightIndex] = partials[rightIndex];
            while(++holdersIndex < holdersLength)if (isUncurried || argsIndex < argsLength) result[offset + holders[holdersIndex]] = args[argsIndex++];
            return result;
        }
        /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */ function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array1(length));
            while(++index < length)array[index] = source[index];
            return array;
        }
        /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */ function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index = -1, length = props.length;
            while(++index < length){
                var key = props[index];
                var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
                if (newValue === undefined) newValue = source[key];
                if (isNew) baseAssignValue(object, key, newValue);
                else assignValue(object, key, newValue);
            }
            return object;
        }
        /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */ function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
        }
        /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */ function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
        }
        /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */ function createAggregator(setter, initializer) {
            return function(collection, iteratee) {
                var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
                return func(collection, setter, getIteratee(iteratee, 2), accumulator);
            };
        }
        /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */ function createAssigner(assigner) {
            return baseRest(function(object, sources) {
                var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
                customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined;
                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    customizer = length < 3 ? undefined : customizer;
                    length = 1;
                }
                object = Object1(object);
                while(++index < length){
                    var source = sources[index];
                    if (source) assigner(object, source, index, customizer);
                }
                return object;
            });
        }
        /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */ function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee) {
                if (collection == null) return collection;
                if (!isArrayLike(collection)) return eachFunc(collection, iteratee);
                var length = collection.length, index = fromRight ? length : -1, iterable = Object1(collection);
                while(fromRight ? index-- : ++index < length){
                    if (iteratee(iterable[index], index, iterable) === false) break;
                }
                return collection;
            };
        }
        /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */ function createBaseFor(fromRight) {
            return function(object, iteratee, keysFunc) {
                var index = -1, iterable = Object1(object), props = keysFunc(object), length = props.length;
                while(length--){
                    var key = props[fromRight ? length : ++index];
                    if (iteratee(iterable[key], key, iterable) === false) break;
                }
                return object;
            };
        }
        /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
                var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                return fn.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
        }
        /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */ function createCaseFirst(methodName) {
            return function(string) {
                string = toString(string);
                var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
                var chr = strSymbols ? strSymbols[0] : string.charAt(0);
                var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
                return chr[methodName]() + trailing;
            };
        }
        /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */ function createCompounder(callback) {
            return function(string) {
                return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
            };
        }
        /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */ function createCtor(Ctor) {
            return function() {
                // Use a `switch` statement to work with class constructors. See
                // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                // for more details.
                var args = arguments;
                switch(args.length){
                    case 0:
                        return new Ctor;
                    case 1:
                        return new Ctor(args[0]);
                    case 2:
                        return new Ctor(args[0], args[1]);
                    case 3:
                        return new Ctor(args[0], args[1], args[2]);
                    case 4:
                        return new Ctor(args[0], args[1], args[2], args[3]);
                    case 5:
                        return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                    case 6:
                        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                    case 7:
                        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                }
                var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
                // Mimic the constructor's `return` behavior.
                // See https://es5.github.io/#x13.2.2 for more details.
                return isObject(result) ? result : thisBinding;
            };
        }
        /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
                var length = arguments.length, args = Array1(length), index = length, placeholder = getHolder(wrapper);
                while(index--)args[index] = arguments[index];
                var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
                length -= holders.length;
                if (length < arity) return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
                var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                return apply(fn, this, args);
            }
            return wrapper;
        }
        /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */ function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
                var iterable = Object1(collection);
                if (!isArrayLike(collection)) {
                    var iteratee = getIteratee(predicate, 3);
                    collection = keys(collection);
                    predicate = function(key) {
                        return iteratee(iterable[key], key, iterable);
                    };
                }
                var index = findIndexFunc(collection, predicate, fromIndex);
                return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
            };
        }
        /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */ function createFlow(fromRight) {
            return flatRest(function(funcs) {
                var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
                if (fromRight) funcs.reverse();
                while(index--){
                    var func = funcs[index];
                    if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
                    if (prereq && !wrapper && getFuncName(func) == "wrapper") var wrapper = new LodashWrapper([], true);
                }
                index = wrapper ? index : length;
                while(++index < length){
                    func = funcs[index];
                    var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined;
                    if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                    else wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
                return function() {
                    var args = arguments, value = args[0];
                    if (wrapper && args.length == 1 && isArray(value)) return wrapper.plant(value).value();
                    var index = 0, result = length ? funcs[index].apply(this, args) : value;
                    while(++index < length)result = funcs[index].call(this, result);
                    return result;
                };
            });
        }
        /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined : createCtor(func);
            function wrapper() {
                var length = arguments.length, args = Array1(length), index = length;
                while(index--)args[index] = arguments[index];
                if (isCurried) var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
                if (partials) args = composeArgs(args, partials, holders, isCurried);
                if (partialsRight) args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                length -= holdersCount;
                if (isCurried && length < arity) {
                    var newHolders = replaceHolders(args, placeholder);
                    return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
                }
                var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
                length = args.length;
                if (argPos) args = reorder(args, argPos);
                else if (isFlip && length > 1) args.reverse();
                if (isAry && ary < length) args.length = ary;
                if (this && this !== root && this instanceof wrapper) fn = Ctor || createCtor(fn);
                return fn.apply(thisBinding, args);
            }
            return wrapper;
        }
        /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */ function createInverter(setter, toIteratee) {
            return function(object, iteratee) {
                return baseInverter(object, setter, toIteratee(iteratee), {});
            };
        }
        /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */ function createMathOperation(operator, defaultValue) {
            return function(value, other) {
                var result;
                if (value === undefined && other === undefined) return defaultValue;
                if (value !== undefined) result = value;
                if (other !== undefined) {
                    if (result === undefined) return other;
                    if (typeof value == "string" || typeof other == "string") {
                        value = baseToString(value);
                        other = baseToString(other);
                    } else {
                        value = baseToNumber(value);
                        other = baseToNumber(other);
                    }
                    result = operator(value, other);
                }
                return result;
            };
        }
        /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */ function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                return baseRest(function(args) {
                    var thisArg = this;
                    return arrayFunc(iteratees, function(iteratee) {
                        return apply(iteratee, thisArg, args);
                    });
                });
            });
        }
        /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */ function createPadding(length, chars) {
            chars = chars === undefined ? " " : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) return charsLength ? baseRepeat(chars, length) : chars;
            var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join("") : result.slice(0, length);
        }
        /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */ function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
                var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array1(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                while(++leftIndex < leftLength)args[leftIndex] = partials[leftIndex];
                while(argsLength--)args[leftIndex++] = arguments[++argsIndex];
                return apply(fn, isBind ? thisArg : this, args);
            }
            return wrapper;
        }
        /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */ function createRange(fromRight) {
            return function(start, end, step) {
                if (step && typeof step != "number" && isIterateeCall(start, end, step)) end = step = undefined;
                // Ensure the sign of `-0` is preserved.
                start = toFinite(start);
                if (end === undefined) {
                    end = start;
                    start = 0;
                } else end = toFinite(end);
                step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
                return baseRange(start, end, step, fromRight);
            };
        }
        /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */ function createRelationalOperation(operator) {
            return function(value, other) {
                if (!(typeof value == "string" && typeof other == "string")) {
                    value = toNumber(value);
                    other = toNumber(other);
                }
                return operator(value, other);
            };
        }
        /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined, newHoldersRight = isCurry ? undefined : holders, newPartials = isCurry ? partials : undefined, newPartialsRight = isCurry ? undefined : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            var newData = [
                func,
                bitmask,
                thisArg,
                newPartials,
                newHolders,
                newPartialsRight,
                newHoldersRight,
                argPos,
                ary,
                arity
            ];
            var result = wrapFunc.apply(undefined, newData);
            if (isLaziable(func)) setData(result, newData);
            result.placeholder = placeholder;
            return setWrapToString(result, func, bitmask);
        }
        /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */ function createRound(methodName) {
            var func = Math[methodName];
            return function(number, precision) {
                number = toNumber(number);
                precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                if (precision && nativeIsFinite(number)) {
                    // Shift with exponential notation to avoid floating-point issues.
                    // See [MDN](https://mdn.io/round#Examples) for more details.
                    var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
                    pair = (toString(value) + "e").split("e");
                    return +(pair[0] + "e" + (+pair[1] - precision));
                }
                return func(number);
            };
        }
        /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */ var createSet = !(Set && 1 / setToArray(new Set([
            ,
            -0
        ]))[1] == INFINITY) ? noop : function(values) {
            return new Set(values);
        };
        /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */ function createToPairs(keysFunc) {
            return function(object) {
                var tag = getTag(object);
                if (tag == mapTag) return mapToArray(object);
                if (tag == setTag) return setToPairs(object);
                return baseToPairs(object, keysFunc(object));
            };
        }
        /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            var length = partials ? partials.length : 0;
            if (!length) {
                bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                partials = holders = undefined;
            }
            ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
            arity = arity === undefined ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                var partialsRight = partials, holdersRight = holders;
                partials = holders = undefined;
            }
            var data = isBindKey ? undefined : getData(func);
            var newData = [
                func,
                bitmask,
                thisArg,
                partials,
                holders,
                partialsRight,
                holdersRight,
                argPos,
                ary,
                arity
            ];
            if (data) mergeData(newData, data);
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            if (!bitmask || bitmask == WRAP_BIND_FLAG) var result = createBind(func, bitmask, thisArg);
            else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) result = createCurry(func, bitmask, arity);
            else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) result = createPartial(func, bitmask, thisArg, partials);
            else result = createHybrid.apply(undefined, newData);
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result, newData), func, bitmask);
        }
        /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */ function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) return srcValue;
            return objValue;
        }
        /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */ function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, objValue);
                baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
                stack["delete"](srcValue);
            }
            return objValue;
        }
        /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */ function customOmitClone(value) {
            return isPlainObject(value) ? undefined : value;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */ function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) return false;
            // Check that cyclic values are equal.
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) return arrStacked == other && othStacked == array;
            var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined;
            stack.set(array, other);
            stack.set(other, array);
            // Ignore non-index properties.
            while(++index < arrLength){
                var arrValue = array[index], othValue = other[index];
                if (customizer) var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
                if (compared !== undefined) {
                    if (compared) continue;
                    result = false;
                    break;
                }
                // Recursively compare arrays (susceptible to call stack limits).
                if (seen) {
                    if (!arraySome(other, function(othValue, othIndex) {
                        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) return seen.push(othIndex);
                    })) {
                        result = false;
                        break;
                    }
                } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                    result = false;
                    break;
                }
            }
            stack["delete"](array);
            stack["delete"](other);
            return result;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */ function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch(tag){
                case dataViewTag:
                    if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) return false;
                    object = object.buffer;
                    other = other.buffer;
                case arrayBufferTag:
                    if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) return false;
                    return true;
                case boolTag:
                case dateTag:
                case numberTag:
                    // Coerce booleans to `1` or `0` and dates to milliseconds.
                    // Invalid dates are coerced to `NaN`.
                    return eq(+object, +other);
                case errorTag:
                    return object.name == other.name && object.message == other.message;
                case regexpTag:
                case stringTag:
                    // Coerce regexes to strings and treat strings, primitives and objects,
                    // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                    // for more details.
                    return object == other + "";
                case mapTag:
                    var convert = mapToArray;
                case setTag:
                    var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                    convert || (convert = setToArray);
                    if (object.size != other.size && !isPartial) return false;
                    // Assume cyclic values are equal.
                    var stacked = stack.get(object);
                    if (stacked) return stacked == other;
                    bitmask |= COMPARE_UNORDERED_FLAG;
                    // Recursively compare objects (susceptible to call stack limits).
                    stack.set(object, other);
                    var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                    stack["delete"](object);
                    return result;
                case symbolTag:
                    if (symbolValueOf) return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
            return false;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */ function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) return false;
            var index = objLength;
            while(index--){
                var key = objProps[index];
                if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) return false;
            }
            // Check that cyclic values are equal.
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) return objStacked == other && othStacked == object;
            var result = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while(++index < objLength){
                key = objProps[index];
                var objValue = object[key], othValue = other[key];
                if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
                // Recursively compare objects (susceptible to call stack limits).
                if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                    result = false;
                    break;
                }
                skipCtor || (skipCtor = key == "constructor");
            }
            if (result && !skipCtor) {
                var objCtor = object.constructor, othCtor = other.constructor;
                // Non `Object` object instances with different constructors are not equal.
                if (objCtor != othCtor && "constructor" in object && "constructor" in other && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) result = false;
            }
            stack["delete"](object);
            stack["delete"](other);
            return result;
        }
        /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */ function flatRest(func) {
            return setToString(overRest(func, undefined, flatten), func + "");
        }
        /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */ function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
        }
        /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */ function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */ var getData = !metaMap ? noop : function(func) {
            return metaMap.get(func);
        };
        /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */ function getFuncName(func) {
            var result = func.name + "", array = realNames[result], length = hasOwnProperty.call(realNames, result) ? array.length : 0;
            while(length--){
                var data = array[length], otherFunc = data.func;
                if (otherFunc == null || otherFunc == func) return data.name;
            }
            return result;
        }
        /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */ function getHolder(func) {
            var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
            return object.placeholder;
        }
        /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */ function getIteratee() {
            var result = lodash.iteratee || iteratee;
            result = result === iteratee ? baseIteratee : result;
            return arguments.length ? result(arguments[0], arguments[1]) : result;
        }
        /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */ function getMapData(map, key) {
            var data = map.__data__;
            return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */ function getMatchData(object) {
            var result = keys(object), length = result.length;
            while(length--){
                var key = result[length], value = object[key];
                result[length] = [
                    key,
                    value,
                    isStrictComparable(value)
                ];
            }
            return result;
        }
        /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */ function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined;
        }
        /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */ function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
            try {
                value[symToStringTag] = undefined;
                var unmasked = true;
            } catch (e) {}
            var result = nativeObjectToString.call(value);
            if (unmasked) {
                if (isOwn) value[symToStringTag] = tag;
                else delete value[symToStringTag];
            }
            return result;
        }
        /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */ var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
            if (object == null) return [];
            object = Object1(object);
            return arrayFilter(nativeGetSymbols(object), function(symbol) {
                return propertyIsEnumerable.call(object, symbol);
            });
        };
        /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */ var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
            var result = [];
            while(object){
                arrayPush(result, getSymbols(object));
                object = getPrototype(object);
            }
            return result;
        };
        /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */ var getTag = baseGetTag;
        // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set) != setTag || WeakMap && getTag(new WeakMap) != weakMapTag) getTag = function(value) {
            var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) switch(ctorString){
                case dataViewCtorString:
                    return dataViewTag;
                case mapCtorString:
                    return mapTag;
                case promiseCtorString:
                    return promiseTag;
                case setCtorString:
                    return setTag;
                case weakMapCtorString:
                    return weakMapTag;
            }
            return result;
        };
        /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */ function getView(start, end, transforms) {
            var index = -1, length = transforms.length;
            while(++index < length){
                var data = transforms[index], size = data.size;
                switch(data.type){
                    case "drop":
                        start += size;
                        break;
                    case "dropRight":
                        end -= size;
                        break;
                    case "take":
                        end = nativeMin(end, start + size);
                        break;
                    case "takeRight":
                        start = nativeMax(start, end - size);
                        break;
                }
            }
            return {
                "start": start,
                "end": end
            };
        }
        /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */ function getWrapDetails(source) {
            var match = source.match(reWrapDetails);
            return match ? match[1].split(reSplitDetails) : [];
        }
        /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */ function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1, length = path.length, result = false;
            while(++index < length){
                var key = toKey(path[index]);
                if (!(result = object != null && hasFunc(object, key))) break;
                object = object[key];
            }
            if (result || ++index != length) return result;
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */ function initCloneArray(array) {
            var length = array.length, result = new array.constructor(length);
            // Add properties assigned by `RegExp#exec`.
            if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
                result.index = array.index;
                result.input = array.input;
            }
            return result;
        }
        /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */ function initCloneObject(object) {
            return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */ function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch(tag){
                case arrayBufferTag:
                    return cloneArrayBuffer(object);
                case boolTag:
                case dateTag:
                    return new Ctor(+object);
                case dataViewTag:
                    return cloneDataView(object, isDeep);
                case float32Tag:
                case float64Tag:
                case int8Tag:
                case int16Tag:
                case int32Tag:
                case uint8Tag:
                case uint8ClampedTag:
                case uint16Tag:
                case uint32Tag:
                    return cloneTypedArray(object, isDeep);
                case mapTag:
                    return new Ctor;
                case numberTag:
                case stringTag:
                    return new Ctor(object);
                case regexpTag:
                    return cloneRegExp(object);
                case setTag:
                    return new Ctor;
                case symbolTag:
                    return cloneSymbol(object);
            }
        }
        /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */ function insertWrapDetails(source, details) {
            var length = details.length;
            if (!length) return source;
            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
            details = details.join(length > 2 ? ", " : " ");
            return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */ function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */ function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
        }
        /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */ function isIterateeCall(value, index, object) {
            if (!isObject(object)) return false;
            var type = typeof index;
            if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) return eq(object[index], value);
            return false;
        }
        /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */ function isKey(value, object) {
            if (isArray(value)) return false;
            var type = typeof value;
            if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) return true;
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object1(object);
        }
        /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */ function isKeyable(value) {
            var type = typeof value;
            return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */ function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) return false;
            if (func === other) return true;
            var data = getData(other);
            return !!data && func === data[0];
        }
        /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */ function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
        }
        /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */ var isMaskable = coreJsData ? isFunction : stubFalse;
        /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */ function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
            return value === proto;
        }
        /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */ function isStrictComparable(value) {
            return value === value && !isObject(value);
        }
        /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */ function matchesStrictComparable(key, srcValue) {
            return function(object) {
                if (object == null) return false;
                return object[key] === srcValue && (srcValue !== undefined || key in Object1(object));
            };
        }
        /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */ function memoizeCapped(func) {
            var result = memoize(func, function(key) {
                if (cache.size === MAX_MEMOIZE_SIZE) cache.clear();
                return key;
            });
            var cache = result.cache;
            return result;
        }
        /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */ function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            // Exit early if metadata can't be merged.
            if (!(isCommon || isCombo)) return data;
            // Use source `thisArg` if available.
            if (srcBitmask & WRAP_BIND_FLAG) {
                data[2] = source[2];
                // Set when currying a bound function.
                newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            // Compose partial arguments.
            var value = source[3];
            if (value) {
                var partials = data[3];
                data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            // Compose partial right arguments.
            value = source[5];
            if (value) {
                partials = data[5];
                data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            // Use source `argPos` if available.
            value = source[7];
            if (value) data[7] = value;
            // Use source `ary` if it's smaller.
            if (srcBitmask & WRAP_ARY_FLAG) data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            // Use source `arity` if one is not provided.
            if (data[9] == null) data[9] = source[9];
            // Use source `func` and merge bitmasks.
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
        }
        /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */ function nativeKeysIn(object) {
            var result = [];
            if (object != null) for(var key in Object1(object))result.push(key);
            return result;
        }
        /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */ function objectToString(value) {
            return nativeObjectToString.call(value);
        }
        /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */ function overRest(func, start, transform) {
            start = nativeMax(start === undefined ? func.length - 1 : start, 0);
            return function() {
                var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array1(length);
                while(++index < length)array[index] = args[start + index];
                index = -1;
                var otherArgs = Array1(start + 1);
                while(++index < start)otherArgs[index] = args[index];
                otherArgs[start] = transform(array);
                return apply(func, this, otherArgs);
            };
        }
        /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */ function parent(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */ function reorder(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while(length--){
                var index = indexes[length];
                array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
            }
            return array;
        }
        /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */ function safeGet(object, key) {
            if (key === "constructor" && typeof object[key] === "function") return;
            if (key == "__proto__") return;
            return object[key];
        }
        /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */ var setData = shortOut(baseSetData);
        /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */ var setTimeout = ctxSetTimeout || function(func, wait) {
            return root.setTimeout(func, wait);
        };
        /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */ var setToString = shortOut(baseSetToString);
        /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */ function setWrapToString(wrapper, reference, bitmask) {
            var source = reference + "";
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */ function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
                var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
                lastCalled = stamp;
                if (remaining > 0) {
                    if (++count >= HOT_COUNT) return arguments[0];
                } else count = 0;
                return func.apply(undefined, arguments);
            };
        }
        /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */ function shuffleSelf(array, size) {
            var index = -1, length = array.length, lastIndex = length - 1;
            size = size === undefined ? length : size;
            while(++index < size){
                var rand = baseRandom(index, lastIndex), value = array[rand];
                array[rand] = array[index];
                array[index] = value;
            }
            array.length = size;
            return array;
        }
        /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */ var stringToPath = memoizeCapped(function(string) {
            var result = [];
            if (string.charCodeAt(0) === 46 /* . */ ) result.push("");
            string.replace(rePropName, function(match, number, quote, subString) {
                result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
            });
            return result;
        });
        /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */ function toKey(value) {
            if (typeof value == "string" || isSymbol(value)) return value;
            var result = value + "";
            return result == "0" && 1 / value == -INFINITY ? "-0" : result;
        }
        /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */ function toSource(func) {
            if (func != null) {
                try {
                    return funcToString.call(func);
                } catch (e) {}
                try {
                    return func + "";
                } catch (e) {}
            }
            return "";
        }
        /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */ function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function(pair) {
                var value = "_." + pair[0];
                if (bitmask & pair[1] && !arrayIncludes(details, value)) details.push(value);
            });
            return details.sort();
        }
        /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */ function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) return wrapper.clone();
            var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result.__actions__ = copyArray(wrapper.__actions__);
            result.__index__ = wrapper.__index__;
            result.__values__ = wrapper.__values__;
            return result;
        }
        /*------------------------------------------------------------------------*/ /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */ function chunk(array, size, guard) {
            if (guard ? isIterateeCall(array, size, guard) : size === undefined) size = 1;
            else size = nativeMax(toInteger(size), 0);
            var length = array == null ? 0 : array.length;
            if (!length || size < 1) return [];
            var index = 0, resIndex = 0, result = Array1(nativeCeil(length / size));
            while(index < length)result[resIndex++] = baseSlice(array, index, index += size);
            return result;
        }
        /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */ function compact(array) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
            while(++index < length){
                var value = array[index];
                if (value) result[resIndex++] = value;
            }
            return result;
        }
        /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */ function concat() {
            var length = arguments.length;
            if (!length) return [];
            var args = Array1(length - 1), array = arguments[0], index = length;
            while(index--)args[index - 1] = arguments[index];
            return arrayPush(isArray(array) ? copyArray(array) : [
                array
            ], baseFlatten(args, 1));
        }
        /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */ var difference = baseRest(function(array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
        });
        /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */ var differenceBy = baseRest(function(array, values) {
            var iteratee = last(values);
            if (isArrayLikeObject(iteratee)) iteratee = undefined;
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
        });
        /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */ var differenceWith = baseRest(function(array, values) {
            var comparator = last(values);
            if (isArrayLikeObject(comparator)) comparator = undefined;
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
        });
        /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */ function drop(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, n < 0 ? 0 : n, length);
        }
        /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */ function dropRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */ function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */ function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */ function fill(array, value, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
                start = 0;
                end = length;
            }
            return baseFill(array, value, start, end);
        }
        /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */ function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) index = nativeMax(length + index, 0);
            return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */ function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = length - 1;
            if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */ function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
        }
        /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */ function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
        }
        /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */ function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
        }
        /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */ function fromPairs(pairs) {
            var index = -1, length = pairs == null ? 0 : pairs.length, result = {};
            while(++index < length){
                var pair = pairs[index];
                result[pair[0]] = pair[1];
            }
            return result;
        }
        /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */ function head(array) {
            return array && array.length ? array[0] : undefined;
        }
        /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */ function indexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) index = nativeMax(length + index, 0);
            return baseIndexOf(array, value, index);
        }
        /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */ function initial(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
        }
        /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */ var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */ var intersectionBy = baseRest(function(arrays) {
            var iteratee = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee === last(mapped)) iteratee = undefined;
            else mapped.pop();
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
        });
        /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */ var intersectionWith = baseRest(function(arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == "function" ? comparator : undefined;
            if (comparator) mapped.pop();
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
        });
        /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */ function join(array, separator) {
            return array == null ? "" : nativeJoin.call(array, separator);
        }
        /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */ function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined;
        }
        /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */ function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = length;
            if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */ function nth(array, n) {
            return array && array.length ? baseNth(array, toInteger(n)) : undefined;
        }
        /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */ var pull = baseRest(pullAll);
        /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */ function pullAll(array, values) {
            return array && array.length && values && values.length ? basePullAll(array, values) : array;
        }
        /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */ function pullAllBy(array, values, iteratee) {
            return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
        }
        /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */ function pullAllWith(array, values, comparator) {
            return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
        }
        /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */ var pullAt = flatRest(function(array, indexes) {
            var length = array == null ? 0 : array.length, result = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function(index) {
                return isIndex(index, length) ? +index : index;
            }).sort(compareAscending));
            return result;
        });
        /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */ function remove(array, predicate) {
            var result = [];
            if (!(array && array.length)) return result;
            var index = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while(++index < length){
                var value = array[index];
                if (predicate(value, index, array)) {
                    result.push(value);
                    indexes.push(index);
                }
            }
            basePullAt(array, indexes);
            return result;
        }
        /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */ function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
        }
        /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */ function slice(array, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
                start = 0;
                end = length;
            } else {
                start = start == null ? 0 : toInteger(start);
                end = end === undefined ? length : toInteger(end);
            }
            return baseSlice(array, start, end);
        }
        /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */ function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
        }
        /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */ function sortedIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
        }
        /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */ function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
                var index = baseSortedIndex(array, value);
                if (index < length && eq(array[index], value)) return index;
            }
            return -1;
        }
        /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */ function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
        }
        /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */ function sortedLastIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
        }
        /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */ function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
                var index = baseSortedIndex(array, value, true) - 1;
                if (eq(array[index], value)) return index;
            }
            return -1;
        }
        /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */ function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
        }
        /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */ function sortedUniqBy(array, iteratee) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
        }
        /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */ function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
        }
        /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */ function take(array, n, guard) {
            if (!(array && array.length)) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */ function takeRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, n < 0 ? 0 : n, length);
        }
        /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */ function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */ function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */ var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */ var unionBy = baseRest(function(arrays) {
            var iteratee = last(arrays);
            if (isArrayLikeObject(iteratee)) iteratee = undefined;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
        });
        /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */ var unionWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
        });
        /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */ function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
        }
        /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */ function uniqBy(array, iteratee) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
        }
        /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */ function uniqWith(array, comparator) {
            comparator = typeof comparator == "function" ? comparator : undefined;
            return array && array.length ? baseUniq(array, undefined, comparator) : [];
        }
        /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */ function unzip(array) {
            if (!(array && array.length)) return [];
            var length = 0;
            array = arrayFilter(array, function(group) {
                if (isArrayLikeObject(group)) {
                    length = nativeMax(group.length, length);
                    return true;
                }
            });
            return baseTimes(length, function(index) {
                return arrayMap(array, baseProperty(index));
            });
        }
        /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */ function unzipWith(array, iteratee) {
            if (!(array && array.length)) return [];
            var result = unzip(array);
            if (iteratee == null) return result;
            return arrayMap(result, function(group) {
                return apply(iteratee, undefined, group);
            });
        }
        /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */ var without = baseRest(function(array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, values) : [];
        });
        /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */ var xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */ var xorBy = baseRest(function(arrays) {
            var iteratee = last(arrays);
            if (isArrayLikeObject(iteratee)) iteratee = undefined;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
        });
        /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */ var xorWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
        });
        /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */ var zip = baseRest(unzip);
        /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */ function zipObject(props, values) {
            return baseZipObject(props || [], values || [], assignValue);
        }
        /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */ function zipObjectDeep(props, values) {
            return baseZipObject(props || [], values || [], baseSet);
        }
        /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */ var zipWith = baseRest(function(arrays) {
            var length = arrays.length, iteratee = length > 1 ? arrays[length - 1] : undefined;
            iteratee = typeof iteratee == "function" ? (arrays.pop(), iteratee) : undefined;
            return unzipWith(arrays, iteratee);
        });
        /*------------------------------------------------------------------------*/ /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */ function chain(value) {
            var result = lodash(value);
            result.__chain__ = true;
            return result;
        }
        /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */ function tap(value, interceptor) {
            interceptor(value);
            return value;
        }
        /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */ function thru(value, interceptor) {
            return interceptor(value);
        }
        /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */ var wrapperAt = flatRest(function(paths) {
            var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
                return baseAt(object, paths);
            };
            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) return this.thru(interceptor);
            value = value.slice(start, +start + (length ? 1 : 0));
            value.__actions__.push({
                "func": thru,
                "args": [
                    interceptor
                ],
                "thisArg": undefined
            });
            return new LodashWrapper(value, this.__chain__).thru(function(array) {
                if (length && !array.length) array.push(undefined);
                return array;
            });
        });
        /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */ function wrapperChain() {
            return chain(this);
        }
        /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */ function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
        }
        /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */ function wrapperNext() {
            if (this.__values__ === undefined) this.__values__ = toArray(this.value());
            var done = this.__index__ >= this.__values__.length, value = done ? undefined : this.__values__[this.__index__++];
            return {
                "done": done,
                "value": value
            };
        }
        /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */ function wrapperToIterator() {
            return this;
        }
        /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */ function wrapperPlant(value) {
            var result, parent = this;
            while(parent instanceof baseLodash){
                var clone = wrapperClone(parent);
                clone.__index__ = 0;
                clone.__values__ = undefined;
                if (result) previous.__wrapped__ = clone;
                else result = clone;
                var previous = clone;
                parent = parent.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result;
        }
        /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */ function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
                var wrapped = value;
                if (this.__actions__.length) wrapped = new LazyWrapper(this);
                wrapped = wrapped.reverse();
                wrapped.__actions__.push({
                    "func": thru,
                    "args": [
                        reverse
                    ],
                    "thisArg": undefined
                });
                return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
        }
        /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */ function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        /*------------------------------------------------------------------------*/ /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */ var countBy = createAggregator(function(result, value, key) {
            if (hasOwnProperty.call(result, key)) ++result[key];
            else baseAssignValue(result, key, 1);
        });
        /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */ function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) predicate = undefined;
            return func(collection, getIteratee(predicate, 3));
        }
        /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */ function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
        }
        /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */ var find = createFind(findIndex);
        /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */ var findLast = createFind(findLastIndex);
        /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */ function flatMap(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), 1);
        }
        /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */ function flatMapDeep(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), INFINITY);
        }
        /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */ function flatMapDepth(collection, iteratee, depth) {
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(map(collection, iteratee), depth);
        }
        /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */ function forEach(collection, iteratee) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee, 3));
        }
        /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */ function forEachRight(collection, iteratee) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee, 3));
        }
        /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */ var groupBy = createAggregator(function(result, value, key) {
            if (hasOwnProperty.call(result, key)) result[key].push(value);
            else baseAssignValue(result, key, [
                value
            ]);
        });
        /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */ function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) fromIndex = nativeMax(length + fromIndex, 0);
            return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */ var invokeMap = baseRest(function(collection, path, args) {
            var index = -1, isFunc = typeof path == "function", result = isArrayLike(collection) ? Array1(collection.length) : [];
            baseEach(collection, function(value) {
                result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
            });
            return result;
        });
        /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */ var keyBy = createAggregator(function(result, value, key) {
            baseAssignValue(result, key, value);
        });
        /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */ function map(collection, iteratee) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee, 3));
        }
        /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */ function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) return [];
            if (!isArray(iteratees)) iteratees = iteratees == null ? [] : [
                iteratees
            ];
            orders = guard ? undefined : orders;
            if (!isArray(orders)) orders = orders == null ? [] : [
                orders
            ];
            return baseOrderBy(collection, iteratees, orders);
        }
        /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */ var partition = createAggregator(function(result, value, key) {
            result[key ? 0 : 1].push(value);
        }, function() {
            return [
                [],
                []
            ];
        });
        /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */ function reduce(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
        }
        /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */ function reduceRight(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
        }
        /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */ function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
        }
        /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */ function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample;
            return func(collection);
        }
        /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */ function sampleSize(collection, n, guard) {
            if (guard ? isIterateeCall(collection, n, guard) : n === undefined) n = 1;
            else n = toInteger(n);
            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n);
        }
        /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */ function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
        }
        /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */ function size(collection) {
            if (collection == null) return 0;
            if (isArrayLike(collection)) return isString(collection) ? stringSize(collection) : collection.length;
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag) return collection.size;
            return baseKeys(collection).length;
        }
        /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */ function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) predicate = undefined;
            return func(collection, getIteratee(predicate, 3));
        }
        /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */ var sortBy = baseRest(function(collection, iteratees) {
            if (collection == null) return [];
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) iteratees = [];
            else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) iteratees = [
                iteratees[0]
            ];
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        /*------------------------------------------------------------------------*/ /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */ var now = ctxNow || function() {
            return root.Date.now();
        };
        /*------------------------------------------------------------------------*/ /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */ function after(n, func) {
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            n = toInteger(n);
            return function() {
                if (--n < 1) return func.apply(this, arguments);
            };
        }
        /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */ function ary(func, n, guard) {
            n = guard ? undefined : n;
            n = func && n == null ? func.length : n;
            return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
        }
        /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */ function before(n, func) {
            var result;
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            n = toInteger(n);
            return function() {
                if (--n > 0) result = func.apply(this, arguments);
                if (n <= 1) func = undefined;
                return result;
            };
        }
        /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */ var bind = baseRest(function(func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bind));
                bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
        });
        /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */ var bindKey = baseRest(function(object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bindKey));
                bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object, partials, holders);
        });
        /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */ function curry(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curry.placeholder;
            return result;
        }
        /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */ function curryRight(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curryRight.placeholder;
            return result;
        }
        /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */ function debounce(func, wait, options) {
            var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
                leading = !!options.leading;
                maxing = "maxWait" in options;
                maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
                var args = lastArgs, thisArg = lastThis;
                lastArgs = lastThis = undefined;
                lastInvokeTime = time;
                result = func.apply(thisArg, args);
                return result;
            }
            function leadingEdge(time) {
                // Reset any `maxWait` timer.
                lastInvokeTime = time;
                // Start the timer for the trailing edge.
                timerId = setTimeout(timerExpired, wait);
                // Invoke the leading edge.
                return leading ? invokeFunc(time) : result;
            }
            function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
                return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }
            function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                // Either this is the first call, activity has stopped and we're at the
                // trailing edge, the system time has gone backwards and we're treating
                // it as the trailing edge, or we've hit the `maxWait` limit.
                return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) return trailingEdge(time);
                // Restart the timer.
                timerId = setTimeout(timerExpired, remainingWait(time));
            }
            function trailingEdge(time) {
                timerId = undefined;
                // Only invoke if we have `lastArgs` which means `func` has been
                // debounced at least once.
                if (trailing && lastArgs) return invokeFunc(time);
                lastArgs = lastThis = undefined;
                return result;
            }
            function cancel() {
                if (timerId !== undefined) clearTimeout(timerId);
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = undefined;
            }
            function flush() {
                return timerId === undefined ? result : trailingEdge(now());
            }
            function debounced() {
                var time = now(), isInvoking = shouldInvoke(time);
                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;
                if (isInvoking) {
                    if (timerId === undefined) return leadingEdge(lastCallTime);
                    if (maxing) {
                        // Handle invocations in a tight loop.
                        clearTimeout(timerId);
                        timerId = setTimeout(timerExpired, wait);
                        return invokeFunc(lastCallTime);
                    }
                }
                if (timerId === undefined) timerId = setTimeout(timerExpired, wait);
                return result;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
        }
        /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */ var defer = baseRest(function(func, args) {
            return baseDelay(func, 1, args);
        });
        /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */ var delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
        });
        /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */ function flip(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
        }
        /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */ function memoize(func, resolver) {
            if (typeof func != "function" || resolver != null && typeof resolver != "function") throw new TypeError(FUNC_ERROR_TEXT);
            var memoized = function() {
                var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
                if (cache.has(key)) return cache.get(key);
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
            };
            memoized.cache = new (memoize.Cache || MapCache);
            return memoized;
        }
        // Expose `MapCache`.
        memoize.Cache = MapCache;
        /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */ function negate(predicate) {
            if (typeof predicate != "function") throw new TypeError(FUNC_ERROR_TEXT);
            return function() {
                var args = arguments;
                switch(args.length){
                    case 0:
                        return !predicate.call(this);
                    case 1:
                        return !predicate.call(this, args[0]);
                    case 2:
                        return !predicate.call(this, args[0], args[1]);
                    case 3:
                        return !predicate.call(this, args[0], args[1], args[2]);
                }
                return !predicate.apply(this, args);
            };
        }
        /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */ function once(func) {
            return before(2, func);
        }
        /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */ var overArgs = castRest(function(func, transforms) {
            transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function(args) {
                var index = -1, length = nativeMin(args.length, funcsLength);
                while(++index < length)args[index] = transforms[index].call(this, args[index]);
                return apply(func, this, args);
            });
        });
        /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */ var partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
        });
        /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */ var partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
        });
        /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */ var rearg = flatRest(function(func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
        });
        /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */ function rest(func, start) {
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            start = start === undefined ? start : toInteger(start);
            return baseRest(func, start);
        }
        /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */ function spread(func, start) {
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            start = start == null ? 0 : nativeMax(toInteger(start), 0);
            return baseRest(function(args) {
                var array = args[start], otherArgs = castSlice(args, 0, start);
                if (array) arrayPush(otherArgs, array);
                return apply(func, this, otherArgs);
            });
        }
        /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */ function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
            if (isObject(options)) {
                leading = "leading" in options ? !!options.leading : leading;
                trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            return debounce(func, wait, {
                "leading": leading,
                "maxWait": wait,
                "trailing": trailing
            });
        }
        /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */ function unary(func) {
            return ary(func, 1);
        }
        /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */ function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
        }
        /*------------------------------------------------------------------------*/ /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */ function castArray() {
            if (!arguments.length) return [];
            var value = arguments[0];
            return isArray(value) ? value : [
                value
            ];
        }
        /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */ function clone(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */ function cloneWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */ function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */ function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */ function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source));
        }
        /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */ function eq(value, other) {
            return value === other || value !== value && other !== other;
        }
        /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */ var gt = createRelationalOperation(baseGt);
        /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */ var gte = createRelationalOperation(function(value, other) {
            return value >= other;
        });
        /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */ var isArguments = baseIsArguments(function() {
            return arguments;
        }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */ var isArray = Array1.isArray;
        /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */ var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */ function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
        }
        /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */ function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
        }
        /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */ function isBoolean(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */ var isBuffer = nativeIsBuffer || stubFalse;
        /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */ var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */ function isElement(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */ function isEmpty(value) {
            if (value == null) return true;
            if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) return !value.length;
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) return !value.size;
            if (isPrototype(value)) return !baseKeys(value).length;
            for(var key in value){
                if (hasOwnProperty.call(value, key)) return false;
            }
            return true;
        }
        /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */ function isEqual(value, other) {
            return baseIsEqual(value, other);
        }
        /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */ function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined;
            var result = customizer ? customizer(value, other) : undefined;
            return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
        }
        /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */ function isError(value) {
            if (!isObjectLike(value)) return false;
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */ function isFinite(value) {
            return typeof value == "number" && nativeIsFinite(value);
        }
        /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */ function isFunction(value) {
            if (!isObject(value)) return false;
            // The use of `Object#toString` avoids issues with the `typeof` operator
            // in Safari 9 which returns 'object' for typed arrays and other constructors.
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */ function isInteger(value) {
            return typeof value == "number" && value == toInteger(value);
        }
        /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */ function isLength(value) {
            return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */ function isObject(value) {
            var type = typeof value;
            return value != null && (type == "object" || type == "function");
        }
        /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */ function isObjectLike(value) {
            return value != null && typeof value == "object";
        }
        /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */ var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */ function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */ function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined;
            return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */ function isNaN(value) {
            // An `NaN` primitive is the only value that is not equal to itself.
            // Perform the `toStringTag` check first to avoid errors with some
            // ActiveX objects in IE.
            return isNumber(value) && value != +value;
        }
        /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */ function isNative(value) {
            if (isMaskable(value)) throw new Error(CORE_ERROR_TEXT);
            return baseIsNative(value);
        }
        /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */ function isNull(value) {
            return value === null;
        }
        /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */ function isNil(value) {
            return value == null;
        }
        /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */ function isNumber(value) {
            return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */ function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) return false;
            var proto = getPrototype(value);
            if (proto === null) return true;
            var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
            return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */ var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */ function isSafeInteger(value) {
            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */ var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */ function isString(value) {
            return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */ function isSymbol(value) {
            return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */ function isUndefined(value) {
            return value === undefined;
        }
        /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */ function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */ function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */ var lt = createRelationalOperation(baseLt);
        /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */ var lte = createRelationalOperation(function(value, other) {
            return value <= other;
        });
        /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */ function toArray(value) {
            if (!value) return [];
            if (isArrayLike(value)) return isString(value) ? stringToArray(value) : copyArray(value);
            if (symIterator && value[symIterator]) return iteratorToArray(value[symIterator]());
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
            return func(value);
        }
        /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */ function toFinite(value) {
            if (!value) return value === 0 ? value : 0;
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
                var sign = value < 0 ? -1 : 1;
                return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
        }
        /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */ function toInteger(value) {
            var result = toFinite(value), remainder = result % 1;
            return result === result ? remainder ? result - remainder : result : 0;
        }
        /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */ function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */ function toNumber(value) {
            if (typeof value == "number") return value;
            if (isSymbol(value)) return NAN;
            if (isObject(value)) {
                var other = typeof value.valueOf == "function" ? value.valueOf() : value;
                value = isObject(other) ? other + "" : other;
            }
            if (typeof value != "string") return value === 0 ? value : +value;
            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */ function toPlainObject(value) {
            return copyObject(value, keysIn(value));
        }
        /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */ function toSafeInteger(value) {
            return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */ function toString(value) {
            return value == null ? "" : baseToString(value);
        }
        /*------------------------------------------------------------------------*/ /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */ var assign = createAssigner(function(object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
                copyObject(source, keys(source), object);
                return;
            }
            for(var key in source)if (hasOwnProperty.call(source, key)) assignValue(object, key, source[key]);
        });
        /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */ var assignIn = createAssigner(function(object, source) {
            copyObject(source, keysIn(source), object);
        });
        /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */ var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
        });
        /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */ var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
        });
        /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */ var at = flatRest(baseAt);
        /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */ function create(prototype, properties) {
            var result = baseCreate(prototype);
            return properties == null ? result : baseAssign(result, properties);
        }
        /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */ var defaults = baseRest(function(object, sources) {
            object = Object1(object);
            var index = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) length = 1;
            while(++index < length){
                var source = sources[index];
                var props = keysIn(source);
                var propsIndex = -1;
                var propsLength = props.length;
                while(++propsIndex < propsLength){
                    var key = props[propsIndex];
                    var value = object[key];
                    if (value === undefined || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) object[key] = source[key];
                }
            }
            return object;
        });
        /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */ var defaultsDeep = baseRest(function(args) {
            args.push(undefined, customDefaultsMerge);
            return apply(mergeWith, undefined, args);
        });
        /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */ function findKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */ function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */ function forIn(object, iteratee) {
            return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
        }
        /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */ function forInRight(object, iteratee) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
        }
        /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */ function forOwn(object, iteratee) {
            return object && baseForOwn(object, getIteratee(iteratee, 3));
        }
        /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */ function forOwnRight(object, iteratee) {
            return object && baseForOwnRight(object, getIteratee(iteratee, 3));
        }
        /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */ function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
        }
        /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */ function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */ function get(object, path, defaultValue) {
            var result = object == null ? undefined : baseGet(object, path);
            return result === undefined ? defaultValue : result;
        }
        /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */ function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
        }
        /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */ function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
        }
        /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */ var invert = createInverter(function(result, value, key) {
            if (value != null && typeof value.toString != "function") value = nativeObjectToString.call(value);
            result[value] = key;
        }, constant(identity));
        /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */ var invertBy = createInverter(function(result, value, key) {
            if (value != null && typeof value.toString != "function") value = nativeObjectToString.call(value);
            if (hasOwnProperty.call(result, value)) result[value].push(key);
            else result[value] = [
                key
            ];
        }, getIteratee);
        /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */ var invoke = baseRest(baseInvoke);
        /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */ function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */ function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */ function mapKeys(object, iteratee) {
            var result = {};
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object, function(value, key, object) {
                baseAssignValue(result, iteratee(value, key, object), value);
            });
            return result;
        }
        /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */ function mapValues(object, iteratee) {
            var result = {};
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object, function(value, key, object) {
                baseAssignValue(result, key, iteratee(value, key, object));
            });
            return result;
        }
        /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */ var merge = createAssigner(function(object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
        });
        /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */ var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
        });
        /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */ var omit = flatRest(function(object, paths) {
            var result = {};
            if (object == null) return result;
            var isDeep = false;
            paths = arrayMap(paths, function(path) {
                path = castPath(path, object);
                isDeep || (isDeep = path.length > 1);
                return path;
            });
            copyObject(object, getAllKeysIn(object), result);
            if (isDeep) result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            var length = paths.length;
            while(length--)baseUnset(result, paths[length]);
            return result;
        });
        /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */ function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
        }
        /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */ var pick = flatRest(function(object, paths) {
            return object == null ? {} : basePick(object, paths);
        });
        /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */ function pickBy(object, predicate) {
            if (object == null) return {};
            var props = arrayMap(getAllKeysIn(object), function(prop) {
                return [
                    prop
                ];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function(value, path) {
                return predicate(value, path[0]);
            });
        }
        /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */ function result(object, path, defaultValue) {
            path = castPath(path, object);
            var index = -1, length = path.length;
            // Ensure the loop is entered when path is empty.
            if (!length) {
                length = 1;
                object = undefined;
            }
            while(++index < length){
                var value = object == null ? undefined : object[toKey(path[index])];
                if (value === undefined) {
                    index = length;
                    value = defaultValue;
                }
                object = isFunction(value) ? value.call(object) : value;
            }
            return object;
        }
        /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */ function set(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
        }
        /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */ function setWith(object, path, value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined;
            return object == null ? object : baseSet(object, path, value, customizer);
        }
        /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */ var toPairs = createToPairs(keys);
        /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */ var toPairsIn = createToPairs(keysIn);
        /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */ function transform(object, iteratee, accumulator) {
            var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
            iteratee = getIteratee(iteratee, 4);
            if (accumulator == null) {
                var Ctor = object && object.constructor;
                if (isArrLike) accumulator = isArr ? new Ctor : [];
                else if (isObject(object)) accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                else accumulator = {};
            }
            (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
                return iteratee(accumulator, value, index, object);
            });
            return accumulator;
        }
        /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */ function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
        }
        /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */ function update(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */ function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */ function values(object) {
            return object == null ? [] : baseValues(object, keys(object));
        }
        /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */ function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
        }
        /*------------------------------------------------------------------------*/ /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */ function clamp(number, lower, upper) {
            if (upper === undefined) {
                upper = lower;
                lower = undefined;
            }
            if (upper !== undefined) {
                upper = toNumber(upper);
                upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined) {
                lower = toNumber(lower);
                lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
        }
        /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */ function inRange(number, start, end) {
            start = toFinite(start);
            if (end === undefined) {
                end = start;
                start = 0;
            } else end = toFinite(end);
            number = toNumber(number);
            return baseInRange(number, start, end);
        }
        /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */ function random(lower, upper, floating) {
            if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) upper = floating = undefined;
            if (floating === undefined) {
                if (typeof upper == "boolean") {
                    floating = upper;
                    upper = undefined;
                } else if (typeof lower == "boolean") {
                    floating = lower;
                    lower = undefined;
                }
            }
            if (lower === undefined && upper === undefined) {
                lower = 0;
                upper = 1;
            } else {
                lower = toFinite(lower);
                if (upper === undefined) {
                    upper = lower;
                    lower = 0;
                } else upper = toFinite(upper);
            }
            if (lower > upper) {
                var temp = lower;
                lower = upper;
                upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
                var rand = nativeRandom();
                return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
            }
            return baseRandom(lower, upper);
        }
        /*------------------------------------------------------------------------*/ /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */ var camelCase = createCompounder(function(result, word, index) {
            word = word.toLowerCase();
            return result + (index ? capitalize(word) : word);
        });
        /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */ function capitalize(string) {
            return upperFirst(toString(string).toLowerCase());
        }
        /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */ function deburr(string) {
            string = toString(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */ function endsWith(string, target, position) {
            string = toString(string);
            target = baseToString(target);
            var length = string.length;
            position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
            var end = position;
            position -= target.length;
            return position >= 0 && string.slice(position, end) == target;
        }
        /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */ function escape(string) {
            string = toString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */ function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */ var kebabCase = createCompounder(function(result, word, index) {
            return result + (index ? "-" : "") + word.toLowerCase();
        });
        /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */ var lowerCase = createCompounder(function(result, word, index) {
            return result + (index ? " " : "") + word.toLowerCase();
        });
        /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */ var lowerFirst = createCaseFirst("toLowerCase");
        /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */ function pad(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            if (!length || strLength >= length) return string;
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */ function padEnd(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */ function padStart(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */ function parseInt1(string, radix, guard) {
            if (guard || radix == null) radix = 0;
            else if (radix) radix = +radix;
            return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */ function repeat(string, n, guard) {
            if (guard ? isIterateeCall(string, n, guard) : n === undefined) n = 1;
            else n = toInteger(n);
            return baseRepeat(toString(string), n);
        }
        /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */ function replace() {
            var args = arguments, string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */ var snakeCase = createCompounder(function(result, word, index) {
            return result + (index ? "_" : "") + word.toLowerCase();
        });
        /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */ function split(string, separator, limit) {
            if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) separator = limit = undefined;
            limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) return [];
            string = toString(string);
            if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
                separator = baseToString(separator);
                if (!separator && hasUnicode(string)) return castSlice(stringToArray(string), 0, limit);
            }
            return string.split(separator, limit);
        }
        /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */ var startCase = createCompounder(function(result, word, index) {
            return result + (index ? " " : "") + upperFirst(word);
        });
        /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */ function startsWith(string, target, position) {
            string = toString(string);
            position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
            target = baseToString(target);
            return string.slice(position, position + target.length) == target;
        }
        /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */ function template(string, options, guard) {
            // Based on John Resig's `tmpl` implementation
            // (http://ejohn.org/blog/javascript-micro-templating/)
            // and Laura Doktorova's doT.js (https://github.com/olado/doT).
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options, guard)) options = undefined;
            string = toString(string);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            // Compile the regexp to match each delimiter.
            var reDelimiters = RegExp1((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
            // Use a sourceURL for easier debugging.
            // The sourceURL gets injected into the source that's eval-ed, so be careful
            // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
            // and escape the comment, thus injecting code that gets evaled.
            var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
            string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                interpolateValue || (interpolateValue = esTemplateValue);
                // Escape characters that can't be included in string literals.
                source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                // Replace delimiters with snippets.
                if (escapeValue) {
                    isEscaping = true;
                    source += "' +\n__e(" + escapeValue + ") +\n'";
                }
                if (evaluateValue) {
                    isEvaluating = true;
                    source += "';\n" + evaluateValue + ";\n__p += '";
                }
                if (interpolateValue) source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                index = offset + match.length;
                // The JS engine embedded in Adobe products needs `match` returned in
                // order to produce the correct `offset` value.
                return match;
            });
            source += "';\n";
            // If `variable` is not specified wrap a with-statement around the generated
            // code to add the data object to the top of the scope chain.
            var variable = hasOwnProperty.call(options, "variable") && options.variable;
            if (!variable) source = "with (obj) {\n" + source + "\n}\n";
            else if (reForbiddenIdentifierChars.test(variable)) throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
            // Cleanup code by stripping empty strings.
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            // Frame code as the function body.
            source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var result = attempt(function() {
                return Function1(importsKeys, sourceURL + "return " + source).apply(undefined, importsValues);
            });
            // Provide the compiled function's source by its `toString` method or
            // the `source` property as a convenience for inlining compiled templates.
            result.source = source;
            if (isError(result)) throw result;
            return result;
        }
        /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */ function toLower(value) {
            return toString(value).toLowerCase();
        }
        /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */ function toUpper(value) {
            return toString(value).toUpperCase();
        }
        /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */ function trim(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) return baseTrim(string);
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start, end).join("");
        }
        /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */ function trimEnd(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) return string.slice(0, trimmedEndIndex(string) + 1);
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end).join("");
        }
        /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */ function trimStart(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) return string.replace(reTrimStart, "");
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start).join("");
        }
        /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */ function truncate(string, options) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject(options)) {
                var separator = "separator" in options ? options.separator : separator;
                length = "length" in options ? toInteger(options.length) : length;
                omission = "omission" in options ? baseToString(options.omission) : omission;
            }
            string = toString(string);
            var strLength = string.length;
            if (hasUnicode(string)) {
                var strSymbols = stringToArray(string);
                strLength = strSymbols.length;
            }
            if (length >= strLength) return string;
            var end = length - stringSize(omission);
            if (end < 1) return omission;
            var result = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
            if (separator === undefined) return result + omission;
            if (strSymbols) end += result.length - end;
            if (isRegExp(separator)) {
                if (string.slice(end).search(separator)) {
                    var match, substring = result;
                    if (!separator.global) separator = RegExp1(separator.source, toString(reFlags.exec(separator)) + "g");
                    separator.lastIndex = 0;
                    while(match = separator.exec(substring))var newEnd = match.index;
                    result = result.slice(0, newEnd === undefined ? end : newEnd);
                }
            } else if (string.indexOf(baseToString(separator), end) != end) {
                var index = result.lastIndexOf(separator);
                if (index > -1) result = result.slice(0, index);
            }
            return result + omission;
        }
        /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */ function unescape(string) {
            string = toString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */ var upperCase = createCompounder(function(result, word, index) {
            return result + (index ? " " : "") + word.toUpperCase();
        });
        /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */ var upperFirst = createCaseFirst("toUpperCase");
        /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */ function words(string, pattern, guard) {
            string = toString(string);
            pattern = guard ? undefined : pattern;
            if (pattern === undefined) return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            return string.match(pattern) || [];
        }
        /*------------------------------------------------------------------------*/ /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */ var attempt = baseRest(function(func, args) {
            try {
                return apply(func, undefined, args);
            } catch (e) {
                return isError(e) ? e : new Error(e);
            }
        });
        /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */ var bindAll = flatRest(function(object, methodNames) {
            arrayEach(methodNames, function(key) {
                key = toKey(key);
                baseAssignValue(object, key, bind(object[key], object));
            });
            return object;
        });
        /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */ function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function(pair) {
                if (typeof pair[1] != "function") throw new TypeError(FUNC_ERROR_TEXT);
                return [
                    toIteratee(pair[0]),
                    pair[1]
                ];
            });
            return baseRest(function(args) {
                var index = -1;
                while(++index < length){
                    var pair = pairs[index];
                    if (apply(pair[0], this, args)) return apply(pair[1], this, args);
                }
            });
        }
        /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */ function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */ function constant(value) {
            return function() {
                return value;
            };
        }
        /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */ function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
        }
        /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */ var flow = createFlow();
        /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */ var flowRight = createFlow(true);
        /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */ function identity(value) {
            return value;
        }
        /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */ function iteratee(func) {
            return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */ function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */ function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */ var method = baseRest(function(path, args) {
            return function(object) {
                return baseInvoke(object, path, args);
            };
        });
        /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */ var methodOf = baseRest(function(object, args) {
            return function(path) {
                return baseInvoke(object, path, args);
            };
        });
        /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */ function mixin(object, source, options) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
                options = source;
                source = object;
                object = this;
                methodNames = baseFunctions(source, keys(source));
            }
            var chain = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
            arrayEach(methodNames, function(methodName) {
                var func = source[methodName];
                object[methodName] = func;
                if (isFunc) object.prototype[methodName] = function() {
                    var chainAll = this.__chain__;
                    if (chain || chainAll) {
                        var result = object(this.__wrapped__), actions = result.__actions__ = copyArray(this.__actions__);
                        actions.push({
                            "func": func,
                            "args": arguments,
                            "thisArg": object
                        });
                        result.__chain__ = chainAll;
                        return result;
                    }
                    return func.apply(object, arrayPush([
                        this.value()
                    ], arguments));
                };
            });
            return object;
        }
        /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */ function noConflict() {
            if (root._ === this) root._ = oldDash;
            return this;
        }
        /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */ function noop() {
        // No operation performed.
        }
        /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */ function nthArg(n) {
            n = toInteger(n);
            return baseRest(function(args) {
                return baseNth(args, n);
            });
        }
        /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */ var over = createOver(arrayMap);
        /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */ var overEvery = createOver(arrayEvery);
        /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */ var overSome = createOver(arraySome);
        /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */ function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */ function propertyOf(object) {
            return function(path) {
                return object == null ? undefined : baseGet(object, path);
            };
        }
        /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */ var range = createRange();
        /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */ var rangeRight = createRange(true);
        /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */ function stubArray() {
            return [];
        }
        /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */ function stubFalse() {
            return false;
        }
        /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */ function stubObject() {
            return {};
        }
        /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */ function stubString() {
            return "";
        }
        /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */ function stubTrue() {
            return true;
        }
        /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */ function times(n, iteratee) {
            n = toInteger(n);
            if (n < 1 || n > MAX_SAFE_INTEGER) return [];
            var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
            iteratee = getIteratee(iteratee);
            n -= MAX_ARRAY_LENGTH;
            var result = baseTimes(length, iteratee);
            while(++index < n)iteratee(index);
            return result;
        }
        /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */ function toPath(value) {
            if (isArray(value)) return arrayMap(value, toKey);
            return isSymbol(value) ? [
                value
            ] : copyArray(stringToPath(toString(value)));
        }
        /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */ function uniqueId(prefix) {
            var id = ++idCounter;
            return toString(prefix) + id;
        }
        /*------------------------------------------------------------------------*/ /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */ var add = createMathOperation(function(augend, addend) {
            return augend + addend;
        }, 0);
        /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */ var ceil = createRound("ceil");
        /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */ var divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
        }, 1);
        /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */ var floor = createRound("floor");
        /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */ function max(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
        }
        /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */ function maxBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
        }
        /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */ function mean(array) {
            return baseMean(array, identity);
        }
        /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */ function meanBy(array, iteratee) {
            return baseMean(array, getIteratee(iteratee, 2));
        }
        /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */ function min(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
        }
        /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */ function minBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
        }
        /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */ var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
        }, 1);
        /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */ var round = createRound("round");
        /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */ var subtract = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
        }, 0);
        /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */ function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
        }
        /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */ function sumBy(array, iteratee) {
            return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
        }
        /*------------------------------------------------------------------------*/ // Add methods that return wrapped values in chain sequences.
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        // Add aliases.
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        // Add methods to `lodash.prototype`.
        mixin(lodash, lodash);
        /*------------------------------------------------------------------------*/ // Add methods that return unwrapped values in chain sequences.
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt1;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        // Add aliases.
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
                if (!hasOwnProperty.call(lodash.prototype, methodName)) source[methodName] = func;
            });
            return source;
        }(), {
            "chain": false
        });
        /*------------------------------------------------------------------------*/ /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */ lodash.VERSION = VERSION;
        // Assign default placeholders.
        arrayEach([
            "bind",
            "bindKey",
            "curry",
            "curryRight",
            "partial",
            "partialRight"
        ], function(methodName) {
            lodash[methodName].placeholder = lodash;
        });
        // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
        arrayEach([
            "drop",
            "take"
        ], function(methodName, index) {
            LazyWrapper.prototype[methodName] = function(n) {
                n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
                var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
                if (result.__filtered__) result.__takeCount__ = nativeMin(n, result.__takeCount__);
                else result.__views__.push({
                    "size": nativeMin(n, MAX_ARRAY_LENGTH),
                    "type": methodName + (result.__dir__ < 0 ? "Right" : "")
                });
                return result;
            };
            LazyWrapper.prototype[methodName + "Right"] = function(n) {
                return this.reverse()[methodName](n).reverse();
            };
        });
        // Add `LazyWrapper` methods that accept an `iteratee` value.
        arrayEach([
            "filter",
            "map",
            "takeWhile"
        ], function(methodName, index) {
            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee) {
                var result = this.clone();
                result.__iteratees__.push({
                    "iteratee": getIteratee(iteratee, 3),
                    "type": type
                });
                result.__filtered__ = result.__filtered__ || isFilter;
                return result;
            };
        });
        // Add `LazyWrapper` methods for `_.head` and `_.last`.
        arrayEach([
            "head",
            "last"
        ], function(methodName, index) {
            var takeName = "take" + (index ? "Right" : "");
            LazyWrapper.prototype[methodName] = function() {
                return this[takeName](1).value()[0];
            };
        });
        // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
        arrayEach([
            "initial",
            "tail"
        ], function(methodName, index) {
            var dropName = "drop" + (index ? "" : "Right");
            LazyWrapper.prototype[methodName] = function() {
                return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
        });
        LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
            if (typeof path == "function") return new LazyWrapper(this);
            return this.map(function(value) {
                return baseInvoke(value, path, args);
            });
        });
        LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
            start = toInteger(start);
            var result = this;
            if (result.__filtered__ && (start > 0 || end < 0)) return new LazyWrapper(result);
            if (start < 0) result = result.takeRight(-start);
            else if (start) result = result.drop(start);
            if (end !== undefined) {
                end = toInteger(end);
                result = end < 0 ? result.dropRight(-end) : result.take(end - start);
            }
            return result;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
            return this.take(MAX_ARRAY_LENGTH);
        };
        // Add `LazyWrapper` methods to `lodash.prototype`.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) return;
            lodash.prototype[methodName] = function() {
                var value = this.__wrapped__, args = isTaker ? [
                    1
                ] : arguments, isLazy = value instanceof LazyWrapper, iteratee = args[0], useLazy = isLazy || isArray(value);
                var interceptor = function(value) {
                    var result = lodashFunc.apply(lodash, arrayPush([
                        value
                    ], args));
                    return isTaker && chainAll ? result[0] : result;
                };
                if (useLazy && checkIteratee && typeof iteratee == "function" && iteratee.length != 1) // Avoid lazy use if the iteratee has a "length" value other than `1`.
                isLazy = useLazy = false;
                var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
                if (!retUnwrapped && useLazy) {
                    value = onlyLazy ? value : new LazyWrapper(this);
                    var result = func.apply(value, args);
                    result.__actions__.push({
                        "func": thru,
                        "args": [
                            interceptor
                        ],
                        "thisArg": undefined
                    });
                    return new LodashWrapper(result, chainAll);
                }
                if (isUnwrapped && onlyLazy) return func.apply(this, args);
                result = this.thru(interceptor);
                return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
            };
        });
        // Add `Array` methods to `lodash.prototype`.
        arrayEach([
            "pop",
            "push",
            "shift",
            "sort",
            "splice",
            "unshift"
        ], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
                var args = arguments;
                if (retUnwrapped && !this.__chain__) {
                    var value = this.value();
                    return func.apply(isArray(value) ? value : [], args);
                }
                return this[chainName](function(value) {
                    return func.apply(isArray(value) ? value : [], args);
                });
            };
        });
        // Map minified method names to their real names.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
                var key = lodashFunc.name + "";
                if (!hasOwnProperty.call(realNames, key)) realNames[key] = [];
                realNames[key].push({
                    "name": methodName,
                    "func": lodashFunc
                });
            }
        });
        realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [
            {
                "name": "wrapper",
                "func": undefined
            }
        ];
        // Add methods to `LazyWrapper`.
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        // Add chain sequence methods to the `lodash` wrapper.
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        // Add lazy aliases.
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) lodash.prototype[symIterator] = wrapperToIterator;
        return lodash;
    };
    /*--------------------------------------------------------------------------*/ // Export lodash.
    var _ = runInContext();
    // Some AMD build optimizers, like r.js, check for condition patterns like:
    if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        // Expose Lodash on the global object to prevent errors when Lodash is
        // loaded by a script tag in the presence of an AMD loader.
        // See http://requirejs.org/docs/errors.html#mismatch for more details.
        // Use `_.noConflict` to remove Lodash from the global object.
        root._ = _;
        // Define as an anonymous module so, through path mapping, it can be
        // referenced as the "underscore" module.
        define(function() {
            return _;
        });
    } else if (freeModule) {
        // Export for Node.js.
        (freeModule.exports = _)._ = _;
        // Export for CommonJS support.
        freeExports._ = _;
    } else // Export to the global object.
    root._ = _;
}).call(this);

},{}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"5JiMD":[function(require,module,exports) {
/*
- **Fonctionnalités** :
    - Gère l'état du jeu, y compris le score et l'indice du pays actuel.
    - Contrôle le déroulement du jeu, comme le passage au pays suivant et la vérification de la fin du jeu.
    - Initialise et affiche le pays courant en utilisant la classe `Country`.
- **Interaction avec d'autres composants** :
    - Instanciée et utilisée dans `app.js`.
    - Crée des instances de la classe `Country` de `Country.js`.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _countryJs = require("./country.js");
var _countryJsDefault = parcelHelpers.interopDefault(_countryJs);
class Game {
    #score = 0;
    constructor(countries){
        this.countries = countries;
        this.countryIndex = 0;
        this.currentCountry = new (0, _countryJsDefault.default)(this.countries[this.countryIndex]);
        this.currentCountry.showFlag();
        console.log(this.currentCountry.name);
    }
    get score() {
        return this.#score;
    }
    addPoint() {
        this.#score++;
    }
    isFinished() {
        return this.countryIndex === this.countries.length - 1;
    }
    nextCountry() {
        if (this.isFinished()) return;
        this.countryIndex++;
        this.currentCountry = new (0, _countryJsDefault.default)(this.countries[this.countryIndex]);
        this.currentCountry.showFlag();
        console.log(this.currentCountry.name);
    }
}
exports.default = Game;

},{"./country.js":"ePDPD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5pclG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "countries", ()=>countries);
const countries = [
    {
        "name": {
            "common": "Andorra",
            "official": "Principality of Andorra",
            "nativeName": {
                "cat": {
                    "official": "Principat d'Andorra",
                    "common": "Andorra"
                }
            }
        },
        "tld": [
            ".ad"
        ],
        "cca2": "AD",
        "ccn3": "020",
        "cca3": "AND",
        "cioc": "AND",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "76"
            ]
        },
        "capital": [
            "Andorra la Vella"
        ],
        "altSpellings": [
            "AD",
            "Principality of Andorra",
            "Principat d'Andorra"
        ],
        "region": "Europe",
        "subregion": "Southern Europe",
        "languages": {
            "cat": "Catalan"
        },
        "translations": {
            "ara": {
                "official": "\u0625\u0645\u0627\u0631\u0629 \u0623\u0646\u062F\u0648\u0631\u0627",
                "common": "\u0623\u0646\u062F\u0648\u0631\u0627"
            },
            "bre": {
                "official": "Pri\xf1selezh Andorra",
                "common": "Andorra"
            },
            "ces": {
                "official": "Andorrsk\xe9 kn\xed\u017Eectv\xed",
                "common": "Andorra"
            },
            "cym": {
                "official": "Tywysogaeth Andorra",
                "common": "Andorra"
            },
            "deu": {
                "official": "F\xfcrstentum Andorra",
                "common": "Andorra"
            },
            "est": {
                "official": "Andorra V\xfcrstiriik",
                "common": "Andorra"
            },
            "fin": {
                "official": "Andorran ruhtinaskunta",
                "common": "Andorra"
            },
            "fra": {
                "official": "Principaut\xe9 d'Andorre",
                "common": "Andorre"
            },
            "hrv": {
                "official": "Kne\u017Eevina Andora",
                "common": "Andora"
            },
            "hun": {
                "official": "Andorra",
                "common": "Andorra"
            },
            "ita": {
                "official": "Principato di Andorra",
                "common": "Andorra"
            },
            "jpn": {
                "official": "\u30A2\u30F3\u30C9\u30E9\u516C\u56FD",
                "common": "\u30A2\u30F3\u30C9\u30E9"
            },
            "kor": {
                "official": "\uC548\uB3C4\uB77C \uACF5\uAD6D",
                "common": "\uC548\uB3C4\uB77C"
            },
            "nld": {
                "official": "Prinsdom Andorra",
                "common": "Andorra"
            },
            "per": {
                "official": "\u0634\u0627\u0647\u0632\u0627\u062F\u0647\u200C\u0646\u0634\u06CC\u0646 \u0622\u0646\u062F\u0648\u0631\u0627",
                "common": "\u0622\u0646\u062F\u0648\u0631\u0627"
            },
            "pol": {
                "official": "Ksi\u0119stwo Andory",
                "common": "Andora"
            },
            "por": {
                "official": "Principado de Andorra",
                "common": "Andorra"
            },
            "rus": {
                "official": "\u041A\u043D\u044F\u0436\u0435\u0441\u0442\u0432\u043E \u0410\u043D\u0434\u043E\u0440\u0440\u0430",
                "common": "\u0410\u043D\u0434\u043E\u0440\u0440\u0430"
            },
            "slk": {
                "official": "Andorrsk\xe9 knie\u017Eatstvo",
                "common": "Andorra"
            },
            "spa": {
                "official": "Principado de Andorra",
                "common": "Andorra"
            },
            "srp": {
                "official": "\u041A\u043D\u0435\u0436\u0435\u0432\u0438\u043D\u0430 \u0410\u043D\u0434\u043E\u0440\u0430",
                "common": "\u0410\u043D\u0434\u043E\u0440\u0430"
            },
            "swe": {
                "official": "Furstend\xf6met Andorra",
                "common": "Andorra"
            },
            "tur": {
                "official": "Andorra Prensli\u011Fi",
                "common": "Andorra"
            },
            "urd": {
                "official": "\u0627\u0645\u0627\u0631\u0627\u062A\u0650 \u0627\u0646\u0688\u0648\u0631\u0627",
                "common": "\u0627\u0646\u0688\u0648\u0631\u0627"
            },
            "zho": {
                "official": "\u5B89\u9053\u5C14\u516C\u56FD",
                "common": "\u5B89\u9053\u5C14"
            }
        },
        "latlng": [
            42.5,
            1.5
        ],
        "landlocked": true,
        "borders": [
            "FRA",
            "ESP"
        ],
        "area": 468,
        "demonyms": {
            "eng": {
                "f": "Andorran",
                "m": "Andorran"
            },
            "fra": {
                "f": "Andorrane",
                "m": "Andorran"
            }
        },
        "flag": "\uD83C\uDDE6\uD83C\uDDE9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/JqAnacWE2qEznKgw7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/9407"
        },
        "population": 77265,
        "fifa": "AND",
        "car": {
            "signs": [
                "AND"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ad.png",
            "svg": "https://flagcdn.com/ad.svg",
            "alt": "The flag of Andorra features three equal vertical bands of blue, yellow and red, with the coat of arms of Andorra centered in the yellow band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ad.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ad.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                42.5,
                1.52
            ]
        },
        "postalCode": {
            "format": "AD###",
            "regex": "^(?:AD)*(\\d{3})$"
        }
    },
    {
        "name": {
            "common": "French Southern and Antarctic Lands",
            "official": "Territory of the French Southern and Antarctic Lands",
            "nativeName": {
                "fra": {
                    "official": "Territoire des Terres australes et antarctiques fran\xe7aises",
                    "common": "Terres australes et antarctiques fran\xe7aises"
                }
            }
        },
        "tld": [
            ".tf"
        ],
        "cca2": "TF",
        "ccn3": "260",
        "cca3": "ATF",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "62"
            ]
        },
        "capital": [
            "Port-aux-Fran\xe7ais"
        ],
        "altSpellings": [
            "TF",
            "French Southern Territories"
        ],
        "region": "Antarctic",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0642\u0627\u0637\u0639\u0627\u062A \u0648\u0623\u0642\u0627\u0644\u064A\u0645 \u0645\u0627 \u0648\u0631\u0627\u0621 \u0627\u0644\u0628\u062D\u0627\u0631 \u0627\u0644\u0641\u0631\u0646\u0633\u064A\u0629",
                "common": "\u0623\u0631\u0627\u0636 \u0641\u0631\u0646\u0633\u064A\u0629 \u062C\u0646\u0648\u0628\u064A\u0629 \u0648\u0623\u0646\u062A\u0627\u0631\u062A\u064A\u0643\u064A\u0629"
            },
            "bre": {
                "official": "Tiriad Douaro\xf9 Aostral hag Antarktikel Fra\xf1s",
                "common": "Douaro\xf9 Aostral hag Antarktikel Fra\xf1s"
            },
            "ces": {
                "official": "Teritorium Francouzsk\xe1 ji\u017En\xed a antarktick\xe1 \xfazem\xed",
                "common": "Francouzsk\xe1 ji\u017En\xed a antarktick\xe1 \xfazem\xed"
            },
            "cym": {
                "official": "Territory of the French Southern and Antarctic Lands",
                "common": "French Southern and Antarctic Lands"
            },
            "deu": {
                "official": "Gebiet der Franz\xf6sisch S\xfcd- und Antarktisgebiete",
                "common": "Franz\xf6sische S\xfcd- und Antarktisgebiete"
            },
            "est": {
                "official": "Prantsuse L\xf5unaalad",
                "common": "Prantsuse L\xf5unaalad"
            },
            "fin": {
                "official": "Ranskan etel\xe4iset ja antarktiset alueet",
                "common": "Ranskan etel\xe4iset ja antarktiset alueet"
            },
            "fra": {
                "official": "Territoire des Terres australes et antarctiques fran\xe7aises",
                "common": "Terres australes et antarctiques fran\xe7aises"
            },
            "hrv": {
                "official": "Teritoriju Francuski ju\u017Eni i antarkti\u010Dki teritoriji",
                "common": "Francuski ju\u017Eni i antarkti\u010Dki teritoriji"
            },
            "hun": {
                "official": "Francia d\xe9li \xe9s antarktiszi ter\xfcletek",
                "common": "Francia d\xe9li \xe9s antarktiszi ter\xfcletek"
            },
            "ita": {
                "official": "Territorio della australi e antartiche francesi Terre",
                "common": "Territori Francesi del Sud"
            },
            "jpn": {
                "official": "\u30D5\u30E9\u30F3\u30B9\u9818\u5357\u65B9\xb7\u5357\u6975\u5730\u57DF\u306E\u9818\u571F",
                "common": "\u30D5\u30E9\u30F3\u30B9\u9818\u5357\u65B9\u30FB\u5357\u6975\u5730\u57DF"
            },
            "kor": {
                "official": "\uD504\uB791\uC2A4\uB839 \uB0A8\uBD80\uC640 \uB0A8\uADF9 \uC9C0\uC5ED",
                "common": "\uD504\uB791\uC2A4\uB839 \uB0A8\uBD80\uC640 \uB0A8\uADF9 \uC9C0\uC5ED"
            },
            "nld": {
                "official": "Grondgebied van de Franse Zuidelijke en Antarctische gebieden",
                "common": "Franse Gebieden in de zuidelijke Indische Oceaan"
            },
            "per": {
                "official": "\u0633\u0631\u0632\u0645\u06CC\u0646\u200C\u0647\u0627\u06CC \u062C\u0646\u0648\u0628\u06CC \u0648 \u062C\u0646\u0648\u0628\u06AF\u0627\u0646\u06CC \u0641\u0631\u0627\u0646\u0633\u0647",
                "common": "\u0633\u0631\u0632\u0645\u06CC\u0646\u200C\u0647\u0627\u06CC \u062C\u0646\u0648\u0628\u06CC \u0648 \u062C\u0646\u0648\u0628\u06AF\u0627\u0646\u06CC \u0641\u0631\u0627\u0646\u0633\u0647"
            },
            "pol": {
                "official": "Francuskie Terytoria Po\u0142udniowe i Antarktyczne",
                "common": "Francuskie Terytoria Po\u0142udniowe i Antarktyczne"
            },
            "por": {
                "official": "Territ\xf3rio do Sul e Ant\xe1rtica Francesa",
                "common": "Terras Austrais e Ant\xe1rticas Francesas"
            },
            "rus": {
                "official": "\u0422\u0435\u0440\u0440\u0438\u0442\u043E\u0440\u0438\u044F \u0424\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0438\u0435 \u042E\u0436\u043D\u044B\u0435 \u0438 \u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u0447\u0435\u0441\u043A\u0438\u0435 \u0437\u0435\u043C\u043B\u0438",
                "common": "\u0424\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0438\u0435 \u042E\u0436\u043D\u044B\u0435 \u0438 \u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u0447\u0435\u0441\u043A\u0438\u0435 \u0442\u0435\u0440\u0440\u0438\u0442\u043E\u0440\u0438\u0438"
            },
            "slk": {
                "official": "Franc\xfazske ju\u017En\xe9 a antarktick\xe9 \xfazemia",
                "common": "Franc\xfazske ju\u017Dn\xe9 a antarktick\xe9 \xfazemia"
            },
            "spa": {
                "official": "Territorio del Franc\xe9s Tierras australes y ant\xe1rticas",
                "common": "Tierras Australes y Ant\xe1rticas Francesas"
            },
            "srp": {
                "official": "\u0424\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0435 \u0458\u0443\u0436\u043D\u0435 \u0438 \u0430\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u0447\u043A\u0435 \u0437\u0435\u043C\u0459\u0435",
                "common": "\u0424\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0435 \u0458\u0443\u0436\u043D\u0435 \u0438 \u0430\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u0447\u043A\u0435 \u0437\u0435\u043C\u0459\u0435"
            },
            "swe": {
                "official": "Franska syd- och Antarktisterritorierna",
                "common": "Franska s\xf6dra territorierna"
            },
            "tur": {
                "official": "Frans\u0131z G\xfcney ve Antarktika Topraklar\u0131",
                "common": "Frans\u0131z G\xfcney ve Antarktika Topraklar\u0131"
            },
            "urd": {
                "official": "\u0633\u0631\u0632\u0645\u06CC\u0646\u0650 \u062C\u0646\u0648\u0628\u06CC \u0641\u0631\u0627\u0646\u0633\u06CC\u0633\u06CC\u06C1 \u0648 \u0627\u0646\u0679\u0627\u0631\u06A9\u0679\u06CC\u06A9\u06C1",
                "common": "\u0633\u0631\u0632\u0645\u06CC\u0646 \u062C\u0646\u0648\u0628\u06CC \u0641\u0631\u0627\u0646\u0633\u06CC\u0633\u06CC\u06C1 \u0648 \u0627\u0646\u0679\u0627\u0631\u06A9\u0679\u06CC\u06A9\u0627"
            },
            "zho": {
                "official": "\u6CD5\u56FD\u5357\u90E8\u548C\u5357\u6781\u571F\u5730",
                "common": "\u6CD5\u56FD\u5357\u90E8\u548C\u5357\u6781\u571F\u5730"
            }
        },
        "latlng": [
            -49.25,
            69.167
        ],
        "landlocked": false,
        "area": 7747,
        "demonyms": {
            "eng": {
                "f": "French",
                "m": "French"
            },
            "fra": {
                "f": "Fran\xe7aise",
                "m": "Fran\xe7ais"
            }
        },
        "flag": "\uD83C\uDDF9\uD83C\uDDEB",
        "maps": {
            "googleMaps": "https://goo.gl/maps/6ua6CX1m4w1xF2Em7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2186658"
        },
        "population": 400,
        "car": {
            "signs": [
                ""
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+05:00"
        ],
        "continents": [
            "Antarctica"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/tf.png",
            "svg": "https://flagcdn.com/tf.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/tf.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/tf.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                48.81,
                -1.4
            ]
        }
    },
    {
        "name": {
            "common": "Laos",
            "official": "Lao People's Democratic Republic",
            "nativeName": {
                "lao": {
                    "official": "\u0EAA\u0EB2\u0E97\u0EB2\u0EA5\u0EB0\u0E99\u0EB0 \u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95 \u0E84\u0EBB\u0E99\u0EA5\u0EB2\u0EA7 \u0E82\u0EAD\u0E87",
                    "common": "\u0EAA\u0E9B\u0E9B\u0EA5\u0EB2\u0EA7"
                }
            }
        },
        "tld": [
            ".la"
        ],
        "cca2": "LA",
        "ccn3": "418",
        "cca3": "LAO",
        "cioc": "LAO",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "LAK": {
                "name": "Lao kip",
                "symbol": "\u20AD"
            }
        },
        "idd": {
            "root": "+8",
            "suffixes": [
                "56"
            ]
        },
        "capital": [
            "Vientiane"
        ],
        "altSpellings": [
            "LA",
            "Lao",
            "Lao People's Democratic Republic",
            "Sathalanalat Paxathipatai Paxaxon Lao"
        ],
        "region": "Asia",
        "subregion": "South-Eastern Asia",
        "languages": {
            "lao": "Lao"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0644\u0627\u0648\u0633 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629 \u0627\u0644\u0634\u0639\u0628\u064A\u0629",
                "common": "\u0644\u0627\u0648\u0633"
            },
            "bre": {
                "official": "Republik Demokratel ar Bobl Lao",
                "common": "Laos"
            },
            "ces": {
                "official": "Laosk\xe1 lidov\u011B demokratick\xe1 republika",
                "common": "Laos"
            },
            "cym": {
                "official": "Lao People's Democratic Republic",
                "common": "Laos"
            },
            "deu": {
                "official": "Demokratische Volksrepublik Laos",
                "common": "Laos"
            },
            "est": {
                "official": "Laose Demokraatlik Rahvavabariik",
                "common": "Laos"
            },
            "fin": {
                "official": "Laosin demokraattinen kansantasavalta",
                "common": "Laos"
            },
            "fra": {
                "official": "R\xe9publique d\xe9mocratique populaire lao",
                "common": "Laos"
            },
            "hrv": {
                "official": "Narodna Demokratska Republika",
                "common": "Laos"
            },
            "hun": {
                "official": "Laoszi N\xe9pi Demokratikus K\xf6zt\xe1rsas\xe1g",
                "common": "Laosz"
            },
            "ita": {
                "official": "Repubblica democratica popolare del Laos",
                "common": "Laos"
            },
            "jpn": {
                "official": "\u30E9\u30AA\u30B9\u4EBA\u6C11\u6C11\u4E3B\u5171\u548C\u56FD",
                "common": "\u30E9\u30AA\u30B9\u4EBA\u6C11\u6C11\u4E3B\u5171\u548C\u56FD"
            },
            "kor": {
                "official": "\uB77C\uC624 \uC778\uBBFC \uBBFC\uC8FC \uACF5\uD654\uAD6D",
                "common": "\uB77C\uC624\uC2A4"
            },
            "nld": {
                "official": "Lao Democratische Volksrepubliek",
                "common": "Laos"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9 \u062E\u0644\u0642 \u0644\u0627\u0626\u0648\u0633",
                "common": "\u0644\u0627\u0626\u0648\u0633"
            },
            "pol": {
                "official": "Laota\u0144ska Republika Ludowo-Demokratyczna",
                "common": "Laos"
            },
            "por": {
                "official": "Laos, Rep\xfablica Democr\xe1tica",
                "common": "Laos"
            },
            "rus": {
                "official": "\u041B\u0430\u043E\u0441\u0441\u043A\u0430\u044F \u041D\u0430\u0440\u043E\u0434\u043D\u043E-\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u041B\u0430\u043E\u0441"
            },
            "slk": {
                "official": "Laosk\xe1 \u013Eudovodemokratick\xe1 republika",
                "common": "Laos"
            },
            "spa": {
                "official": "Rep\xfablica Democr\xe1tica Popular Lao",
                "common": "Laos"
            },
            "srp": {
                "official": "\u041B\u0430\u043E\u0448\u043A\u0430 \u041D\u0430\u0440\u043E\u0434\u043D\u0430 \u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u041B\u0430\u043E\u0441"
            },
            "swe": {
                "official": "Demokratiska folkrepubliken Laos",
                "common": "Laos"
            },
            "tur": {
                "official": "Laos Demokratik Halk Cumhuriyeti",
                "common": "Laos"
            },
            "urd": {
                "official": "\u0639\u0648\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0644\u0627\u0624",
                "common": "\u0644\u0627\u0624\u0633"
            },
            "zho": {
                "official": "\u8001\u631D\u4EBA\u6C11\u6C11\u4E3B\u5171\u548C\u56FD",
                "common": "\u8001\u631D"
            }
        },
        "latlng": [
            18,
            105
        ],
        "landlocked": true,
        "borders": [
            "MMR",
            "KHM",
            "CHN",
            "THA",
            "VNM"
        ],
        "area": 236800,
        "demonyms": {
            "eng": {
                "f": "Laotian",
                "m": "Laotian"
            },
            "fra": {
                "f": "Laotienne",
                "m": "Laotien"
            }
        },
        "flag": "\uD83C\uDDF1\uD83C\uDDE6",
        "maps": {
            "googleMaps": "https://goo.gl/maps/F3asVB7sRKgSnwbE7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/49903"
        },
        "population": 7275556,
        "gini": {
            "2018": 38.8
        },
        "fifa": "LAO",
        "car": {
            "signs": [
                "LAO"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+07:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/la.png",
            "svg": "https://flagcdn.com/la.svg",
            "alt": "The flag of Laos is composed of three horizontal bands of red, blue and red. The blue band is twice the height of the red bands and bears a white circle at its center."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/la.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/la.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                17.97,
                102.6
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Canada",
            "official": "Canada",
            "nativeName": {
                "eng": {
                    "official": "Canada",
                    "common": "Canada"
                },
                "fra": {
                    "official": "Canada",
                    "common": "Canada"
                }
            }
        },
        "tld": [
            ".ca"
        ],
        "cca2": "CA",
        "ccn3": "124",
        "cca3": "CAN",
        "cioc": "CAN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "CAD": {
                "name": "Canadian dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                ""
            ]
        },
        "capital": [
            "Ottawa"
        ],
        "altSpellings": [
            "CA"
        ],
        "region": "Americas",
        "subregion": "North America",
        "languages": {
            "eng": "English",
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u0643\u0646\u062F\u0627",
                "common": "\u0643\u0646\u062F\u0627"
            },
            "bre": {
                "official": "Kanada",
                "common": "Kanada"
            },
            "ces": {
                "official": "Kanada",
                "common": "Kanada"
            },
            "cym": {
                "official": "Canada",
                "common": "Canada"
            },
            "deu": {
                "official": "Kanada",
                "common": "Kanada"
            },
            "est": {
                "official": "Kanada",
                "common": "Kanada"
            },
            "fin": {
                "official": "Kanada",
                "common": "Kanada"
            },
            "fra": {
                "official": "Canada",
                "common": "Canada"
            },
            "hrv": {
                "official": "Kanada",
                "common": "Kanada"
            },
            "hun": {
                "official": "Kanada",
                "common": "Kanada"
            },
            "ita": {
                "official": "Canada",
                "common": "Canada"
            },
            "jpn": {
                "official": "\u30AB\u30CA\u30C0",
                "common": "\u30AB\u30CA\u30C0"
            },
            "kor": {
                "official": "\uCE90\uB098\uB2E4",
                "common": "\uCE90\uB098\uB2E4"
            },
            "nld": {
                "official": "Canada",
                "common": "Canada"
            },
            "per": {
                "official": "\u06A9\u0627\u0646\u0627\u062F\u0627",
                "common": "\u06A9\u0627\u0646\u0627\u062F\u0627"
            },
            "pol": {
                "official": "Kanada",
                "common": "Kanada"
            },
            "por": {
                "official": "Canad\xe1",
                "common": "Canad\xe1"
            },
            "rus": {
                "official": "\u041A\u0430\u043D\u0430\u0434\u0430",
                "common": "\u041A\u0430\u043D\u0430\u0434\u0430"
            },
            "slk": {
                "official": "Kanada",
                "common": "Kanada"
            },
            "spa": {
                "official": "Canad\xe1",
                "common": "Canad\xe1"
            },
            "srp": {
                "official": "\u041A\u0430\u043D\u0430\u0434\u0430",
                "common": "\u041A\u0430\u043D\u0430\u0434\u0430"
            },
            "swe": {
                "official": "Kanada",
                "common": "Kanada"
            },
            "tur": {
                "official": "Kanada",
                "common": "Kanada"
            },
            "urd": {
                "official": "\u06A9\u06CC\u0646\u06CC\u0688\u0627",
                "common": "\u06A9\u06CC\u0646\u06CC\u0688\u0627"
            },
            "zho": {
                "official": "\u52A0\u62FF\u5927",
                "common": "\u52A0\u62FF\u5927"
            }
        },
        "latlng": [
            60,
            -95
        ],
        "landlocked": false,
        "borders": [
            "USA"
        ],
        "area": 9984670,
        "demonyms": {
            "eng": {
                "f": "Canadian",
                "m": "Canadian"
            },
            "fra": {
                "f": "Canadienne",
                "m": "Canadien"
            }
        },
        "flag": "\uD83C\uDDE8\uD83C\uDDE6",
        "maps": {
            "googleMaps": "https://goo.gl/maps/jmEVLugreeqiZXxbA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1428125"
        },
        "population": 38005238,
        "gini": {
            "2017": 33.3
        },
        "fifa": "CAN",
        "car": {
            "signs": [
                "CDN"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-08:00",
            "UTC-07:00",
            "UTC-06:00",
            "UTC-05:00",
            "UTC-04:00",
            "UTC-03:30"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ca.png",
            "svg": "https://flagcdn.com/ca.svg",
            "alt": "The flag of Canada is composed of a red vertical band on the hoist and fly sides and a central white square that is twice the width of the vertical bands. A large eleven-pointed red maple leaf is centered in the white square."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ca.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ca.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                45.42,
                -75.7
            ]
        },
        "postalCode": {
            "format": "@#@ #@#",
            "regex": "^([ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJKLMNPRSTVWXYZ]) ?(\\d[ABCEGHJKLMNPRSTVWXYZ]\\d)$"
        }
    },
    {
        "name": {
            "common": "Nigeria",
            "official": "Federal Republic of Nigeria",
            "nativeName": {
                "eng": {
                    "official": "Federal Republic of Nigeria",
                    "common": "Nigeria"
                }
            }
        },
        "tld": [
            ".ng"
        ],
        "cca2": "NG",
        "ccn3": "566",
        "cca3": "NGA",
        "cioc": "NGR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "NGN": {
                "name": "Nigerian naira",
                "symbol": "\u20A6"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "34"
            ]
        },
        "capital": [
            "Abuja"
        ],
        "altSpellings": [
            "NG",
            "Nijeriya",
            "Na\xedj\xedr\xed\xe0",
            "Federal Republic of Nigeria"
        ],
        "region": "Africa",
        "subregion": "Western Africa",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0646\u064A\u062C\u064A\u0631\u064A\u0627 \u0627\u0644\u0627\u062A\u062D\u0627\u062F\u064A\u0629",
                "common": "\u0646\u064A\u062C\u064A\u0631\u064A\u0627"
            },
            "bre": {
                "official": "Republik Kevreadel Nigeria",
                "common": "Nigeria"
            },
            "ces": {
                "official": "Nigerijsk\xe1 federativn\xed republika",
                "common": "Nig\xe9rie"
            },
            "cym": {
                "official": "Federal Republic of Nigeria",
                "common": "Nigeria"
            },
            "deu": {
                "official": "Bundesrepublik Nigeria",
                "common": "Nigeria"
            },
            "est": {
                "official": "Nigeeria Liitvabariik",
                "common": "Nigeeria"
            },
            "fin": {
                "official": "Nigerian liittotasavalta",
                "common": "Nigeria"
            },
            "fra": {
                "official": "R\xe9publique f\xe9d\xe9rale du Nigeria",
                "common": "Nig\xe9ria"
            },
            "hrv": {
                "official": "Savezna Republika Nigerija",
                "common": "Nigerija"
            },
            "hun": {
                "official": "Nig\xe9ria",
                "common": "Nig\xe9ria"
            },
            "ita": {
                "official": "Repubblica federale di Nigeria",
                "common": "Nigeria"
            },
            "jpn": {
                "official": "\u30CA\u30A4\u30B8\u30A7\u30EA\u30A2\u9023\u90A6\u5171\u548C\u56FD",
                "common": "\u30CA\u30A4\u30B8\u30A7\u30EA\u30A2"
            },
            "kor": {
                "official": "\uB098\uC774\uC9C0\uB9AC\uC544 \uC5F0\uBC29 \uACF5\uD654\uAD6D",
                "common": "\uB098\uC774\uC9C0\uB9AC\uC544"
            },
            "nld": {
                "official": "Federale Republiek Nigeria",
                "common": "Nigeria"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0641\u062F\u0631\u0627\u0644 \u0646\u06CC\u062C\u0631\u06CC\u0647",
                "common": "\u0646\u06CC\u062C\u0631\u06CC\u0647"
            },
            "pol": {
                "official": "Federalna Republika Nigerii",
                "common": "Nigeria"
            },
            "por": {
                "official": "Rep\xfablica Federal da Nig\xe9ria",
                "common": "Nig\xe9ria"
            },
            "rus": {
                "official": "\u0424\u0435\u0434\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0438\u0433\u0435\u0440\u0438\u044F",
                "common": "\u041D\u0438\u0433\u0435\u0440\u0438\u044F"
            },
            "slk": {
                "official": "Nig\xe9rijsk\xe1 federat\xedvna republika",
                "common": "Nig\xe9ria"
            },
            "spa": {
                "official": "Rep\xfablica Federal de Nigeria",
                "common": "Nigeria"
            },
            "srp": {
                "official": "\u0421\u0430\u0432\u0435\u0437\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0438\u0433\u0435\u0440\u0438\u0458\u0430",
                "common": "\u041D\u0438\u0433\u0435\u0440\u0438\u0458\u0430 "
            },
            "swe": {
                "official": "F\xf6rbundsrepubliken Nigeria",
                "common": "Nigeria"
            },
            "tur": {
                "official": "Nijerya Federal Cumhuriyeti",
                "common": "Nijerya"
            },
            "urd": {
                "official": "\u0648\u0641\u0627\u0642\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0646\u0627\u0626\u062C\u06CC\u0631\u06CC\u0627",
                "common": "\u0646\u0627\u0626\u062C\u06CC\u0631\u06CC\u0627"
            },
            "zho": {
                "official": "\u5C3C\u65E5\u5229\u4E9A\u8054\u90A6\u5171\u548C\u56FD",
                "common": "\u5C3C\u65E5\u5229\u4E9A"
            }
        },
        "latlng": [
            10,
            8
        ],
        "landlocked": false,
        "borders": [
            "BEN",
            "CMR",
            "TCD",
            "NER"
        ],
        "area": 923768,
        "demonyms": {
            "eng": {
                "f": "Nigerian",
                "m": "Nigerian"
            },
            "fra": {
                "f": "Nig\xe9riane",
                "m": "Nig\xe9rian"
            }
        },
        "flag": "\uD83C\uDDF3\uD83C\uDDEC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/LTn417qWwBPFszuV9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192787"
        },
        "population": 206139587,
        "gini": {
            "2018": 35.1
        },
        "fifa": "NGA",
        "car": {
            "signs": [
                "WAN"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ng.png",
            "svg": "https://flagcdn.com/ng.svg",
            "alt": "The flag of Nigeria is composed of three equal vertical bands of green, white and green."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ng.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ng.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                9.08,
                7.53
            ]
        },
        "postalCode": {
            "format": "######",
            "regex": "^(\\d{6})$"
        }
    },
    {
        "name": {
            "common": "Vanuatu",
            "official": "Republic of Vanuatu",
            "nativeName": {
                "bis": {
                    "official": "Ripablik blong Vanuatu",
                    "common": "Vanuatu"
                },
                "eng": {
                    "official": "Republic of Vanuatu",
                    "common": "Vanuatu"
                },
                "fra": {
                    "official": "R\xe9publique de Vanuatu",
                    "common": "Vanuatu"
                }
            }
        },
        "tld": [
            ".vu"
        ],
        "cca2": "VU",
        "ccn3": "548",
        "cca3": "VUT",
        "cioc": "VAN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "VUV": {
                "name": "Vanuatu vatu",
                "symbol": "Vt"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "78"
            ]
        },
        "capital": [
            "Port Vila"
        ],
        "altSpellings": [
            "VU",
            "Republic of Vanuatu",
            "Ripablik blong Vanuatu",
            "R\xe9publique de Vanuatu"
        ],
        "region": "Oceania",
        "subregion": "Melanesia",
        "languages": {
            "bis": "Bislama",
            "eng": "English",
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0641\u0627\u0646\u0648\u0627\u062A\u0648",
                "common": "\u0641\u0627\u0646\u0648\u0627\u062A\u0648"
            },
            "bre": {
                "official": "Republik Vanuatu",
                "common": "Vanuatu"
            },
            "ces": {
                "official": "Republika Vanuatu",
                "common": "Vanuatu"
            },
            "cym": {
                "official": "Republic of Vanuatu",
                "common": "Vanuatu"
            },
            "deu": {
                "official": "Vanuatu",
                "common": "Vanuatu"
            },
            "est": {
                "official": "Vanuatu Vabariik",
                "common": "Vanuatu"
            },
            "fin": {
                "official": "Vanuatun tasavalta",
                "common": "Vanuatu"
            },
            "fra": {
                "official": "R\xe9publique de Vanuatu",
                "common": "Vanuatu"
            },
            "hrv": {
                "official": "Republika Vanuatu",
                "common": "Vanuatu"
            },
            "hun": {
                "official": "Vanuatui K\xf6zt\xe1rsas\xe1g",
                "common": "Vanuatu"
            },
            "ita": {
                "official": "Repubblica di Vanuatu",
                "common": "Vanuatu"
            },
            "jpn": {
                "official": "\u30D0\u30CC\u30A2\u30C4\u5171\u548C\u56FD",
                "common": "\u30D0\u30CC\u30A2\u30C4"
            },
            "kor": {
                "official": "\uBC14\uB204\uC544\uD22C \uACF5\uD654\uAD6D",
                "common": "\uBC14\uB204\uC544\uD22C"
            },
            "nld": {
                "official": "Republiek Vanuatu",
                "common": "Vanuatu"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0648\u0627\u0646\u0648\u0627\u062A\u0648",
                "common": "\u0648\u0627\u0646\u0648\u0627\u062A\u0648"
            },
            "pol": {
                "official": "Republika Vanuatu",
                "common": "Vanuatu"
            },
            "por": {
                "official": "Rep\xfablica de Vanuatu",
                "common": "Vanuatu"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0412\u0430\u043D\u0443\u0430\u0442\u0443",
                "common": "\u0412\u0430\u043D\u0443\u0430\u0442\u0443"
            },
            "slk": {
                "official": "Vanuatsk\xe1 republika",
                "common": "Vanuatu"
            },
            "spa": {
                "official": "Rep\xfablica de Vanuatu",
                "common": "Vanuatu"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0412\u0430\u043D\u0443\u0430\u0442\u0443",
                "common": "\u0412\u0430\u043D\u0443\u0430\u0442\u0443"
            },
            "swe": {
                "official": "Republiken Vanuatu",
                "common": "Vanuatu"
            },
            "tur": {
                "official": "Vanuatu Cumhuriyeti",
                "common": "Vanuatu"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0648\u0627\u0646\u0648\u0627\u062A\u0648",
                "common": "\u0648\u0627\u0646\u0648\u0627\u062A\u0648"
            },
            "zho": {
                "official": "\u74E6\u52AA\u963F\u56FE\u5171\u548C\u56FD",
                "common": "\u74E6\u52AA\u963F\u56FE"
            }
        },
        "latlng": [
            -16,
            167
        ],
        "landlocked": false,
        "area": 12189,
        "demonyms": {
            "eng": {
                "f": "Ni-Vanuatu",
                "m": "Ni-Vanuatu"
            },
            "fra": {
                "f": "Vanuatuane",
                "m": "Vanuatuan"
            }
        },
        "flag": "\uD83C\uDDFB\uD83C\uDDFA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/hwAjehcT7VfvP5zJ8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2177246"
        },
        "population": 307150,
        "gini": {
            "2010": 37.6
        },
        "fifa": "VAN",
        "car": {
            "signs": [
                "VU"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+11:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/vu.png",
            "svg": "https://flagcdn.com/vu.svg",
            "alt": "The flag of Vanuatu is composed of two equal horizontal bands of red and green, with a black isosceles triangle superimposed on the hoist side of the field. This triangle has its base on the hoist end, spans about two-fifth the width of the field and is enclosed on its sides by the arms of a thin black-edged yellow horizontally oriented Y-shaped band which extends along the boundary of the red and green bands to the fly end of the field. A yellow boar's tusk encircling two yellow crossed namele leaves is centered in the triangle."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/vu.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/vu.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -17.73,
                168.32
            ]
        }
    },
    {
        "name": {
            "common": "Czechia",
            "official": "Czech Republic",
            "nativeName": {
                "ces": {
                    "official": "\u010Cesk\xe1 republika",
                    "common": "\u010Cesko"
                },
                "slk": {
                    "official": "\u010Cesk\xe1 republika",
                    "common": "\u010Cesko"
                }
            }
        },
        "tld": [
            ".cz"
        ],
        "cca2": "CZ",
        "ccn3": "203",
        "cca3": "CZE",
        "cioc": "CZE",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "CZK": {
                "name": "Czech koruna",
                "symbol": "K\u010D"
            }
        },
        "idd": {
            "root": "+4",
            "suffixes": [
                "20"
            ]
        },
        "capital": [
            "Prague"
        ],
        "altSpellings": [
            "CZ",
            "\u010Cesk\xe1 republika",
            "\u010Cesko"
        ],
        "region": "Europe",
        "subregion": "Central Europe",
        "languages": {
            "ces": "Czech",
            "slk": "Slovak"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u062A\u0634\u064A\u0643",
                "common": "\u0627\u0644\u062A\u0634\u064A\u0643"
            },
            "bre": {
                "official": "Republik Tchek",
                "common": "Tchekia"
            },
            "ces": {
                "official": "\u010Cesk\xe1 republika",
                "common": "\u010Cesko"
            },
            "cym": {
                "official": "Y Weriniaeth Tsiec",
                "common": "Y Weriniaeth Tsiec"
            },
            "deu": {
                "official": "Tschechische Republik",
                "common": "Tschechien"
            },
            "est": {
                "official": "T\u0161ehhi Vabariik",
                "common": "T\u0161ehhi"
            },
            "fin": {
                "official": "T\u0161ekin tasavalta",
                "common": "T\u0161ekki"
            },
            "fra": {
                "official": "R\xe9publique tch\xe8que",
                "common": "Tch\xe9quie"
            },
            "hrv": {
                "official": "\u010Ce\u0161ka",
                "common": "\u010Ce\u0161ka"
            },
            "hun": {
                "official": "Cseh K\xf6zt\xe1rsas\xe1g",
                "common": "Csehorsz\xe1g"
            },
            "ita": {
                "official": "Repubblica Ceca",
                "common": "Cechia"
            },
            "jpn": {
                "official": "\u30C1\u30A7\u30B3\u5171\u548C\u56FD",
                "common": "\u30C1\u30A7\u30B3"
            },
            "kor": {
                "official": "\uCCB4\uCF54",
                "common": "\uCCB4\uCF54"
            },
            "nld": {
                "official": "Tsjechische Republiek",
                "common": "Tsjechi\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0686\u06A9",
                "common": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0686\u06A9"
            },
            "pol": {
                "official": "Republika Czeska",
                "common": "Czechy"
            },
            "por": {
                "official": "Rep\xfablica Checa",
                "common": "Ch\xe9quia"
            },
            "rus": {
                "official": "\u0427\u0435\u0448\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0427\u0435\u0445\u0438\u044F"
            },
            "slk": {
                "official": "\u010Cesk\xe1 republika",
                "common": "\u010Cesko"
            },
            "spa": {
                "official": "Rep\xfablica Checa",
                "common": "Chequia"
            },
            "srp": {
                "official": "\u0427\u0435\u0448\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0427\u0435\u0448\u043A\u0430"
            },
            "swe": {
                "official": "Republiken Tjeckien",
                "common": "Tjeckien"
            },
            "tur": {
                "official": "\xc7ek Cumhuriyeti",
                "common": "\xc7ekya"
            },
            "urd": {
                "official": "\u0686\u064A\u06A9 \u062C\u0645\u06C1\u0648\u0631\u064A\u06C1",
                "common": "\u0686\u064A\u06A9"
            },
            "zho": {
                "official": "\u6377\u514B\u5171\u548C\u56FD",
                "common": "\u6377\u514B"
            }
        },
        "latlng": [
            49.75,
            15.5
        ],
        "landlocked": true,
        "borders": [
            "AUT",
            "DEU",
            "POL",
            "SVK"
        ],
        "area": 78865,
        "demonyms": {
            "eng": {
                "f": "Czech",
                "m": "Czech"
            },
            "fra": {
                "f": "Tch\xe8que",
                "m": "Tch\xe8que"
            }
        },
        "flag": "\uD83C\uDDE8\uD83C\uDDFF",
        "maps": {
            "googleMaps": "https://goo.gl/maps/47dmgeXMZyhDHyQW8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/51684"
        },
        "population": 10698896,
        "gini": {
            "2018": 25
        },
        "fifa": "CZE",
        "car": {
            "signs": [
                "CZ"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/cz.png",
            "svg": "https://flagcdn.com/cz.svg",
            "alt": "The flag of Czechia is composed of two equal horizontal bands of white and red, with a blue isosceles triangle superimposed on the hoist side of the field. The triangle has its base on the hoist end and spans about two-fifth the width of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/cz.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/cz.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                50.08,
                14.47
            ]
        },
        "postalCode": {
            "format": "### ##",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Malawi",
            "official": "Republic of Malawi",
            "nativeName": {
                "eng": {
                    "official": "Republic of Malawi",
                    "common": "Malawi"
                },
                "nya": {
                    "official": "Chalo cha Malawi, Dziko la Mala\u0175i",
                    "common": "Mala\u0175i"
                }
            }
        },
        "tld": [
            ".mw"
        ],
        "cca2": "MW",
        "ccn3": "454",
        "cca3": "MWI",
        "cioc": "MAW",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "MWK": {
                "name": "Malawian kwacha",
                "symbol": "MK"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "65"
            ]
        },
        "capital": [
            "Lilongwe"
        ],
        "altSpellings": [
            "MW",
            "Republic of Malawi"
        ],
        "region": "Africa",
        "subregion": "Eastern Africa",
        "languages": {
            "eng": "English",
            "nya": "Chewa"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u0627\u0644\u0627\u0648\u064A",
                "common": "\u0645\u0627\u0644\u0627\u0648\u064A"
            },
            "bre": {
                "official": "Republik Malawi",
                "common": "Malawi"
            },
            "ces": {
                "official": "Malawisk\xe1 republika",
                "common": "Malawi"
            },
            "cym": {
                "official": "Republic of Malawi",
                "common": "Malawi"
            },
            "deu": {
                "official": "Republik Malawi",
                "common": "Malawi"
            },
            "est": {
                "official": "Malawi Vabariik",
                "common": "Malawi"
            },
            "fin": {
                "official": "Malawin tasavalta",
                "common": "Malawi"
            },
            "fra": {
                "official": "R\xe9publique du Malawi",
                "common": "Malawi"
            },
            "hrv": {
                "official": "Republika Malavi",
                "common": "Malavi"
            },
            "hun": {
                "official": "Malawi K\xf6zt\xe1rsas\xe1g",
                "common": "Malawi"
            },
            "ita": {
                "official": "Repubblica del Malawi",
                "common": "Malawi"
            },
            "jpn": {
                "official": "\u30DE\u30E9\u30A6\u30A4\u5171\u548C\u56FD",
                "common": "\u30DE\u30E9\u30A6\u30A4"
            },
            "kor": {
                "official": "\uB9D0\uB77C\uC704 \uACF5\uD654\uAD6D",
                "common": "\uB9D0\uB77C\uC704"
            },
            "nld": {
                "official": "Republiek Malawi",
                "common": "Malawi"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u0627\u0644\u0627\u0648\u06CC",
                "common": "\u0645\u0627\u0644\u0627\u0648\u06CC"
            },
            "pol": {
                "official": "Republika Malawi",
                "common": "Malawi"
            },
            "por": {
                "official": "Rep\xfablica do Malawi",
                "common": "Malawi"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u043B\u0430\u0432\u0438",
                "common": "\u041C\u0430\u043B\u0430\u0432\u0438"
            },
            "slk": {
                "official": "Malawijsk\xe1 republika",
                "common": "Malawi"
            },
            "spa": {
                "official": "Rep\xfablica de Malawi",
                "common": "Malawi"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u043B\u0430\u0432\u0438",
                "common": "\u041C\u0430\u043B\u0430\u0432\u0438"
            },
            "swe": {
                "official": "Republiken Malawi",
                "common": "Malawi"
            },
            "tur": {
                "official": "Malavi Cumhuriyeti",
                "common": "Malavi"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0644\u0627\u0648\u06CC",
                "common": "\u0645\u0644\u0627\u0648\u06CC"
            },
            "zho": {
                "official": "\u9A6C\u62C9\u7EF4\u5171\u548C\u56FD",
                "common": "\u9A6C\u62C9\u7EF4"
            }
        },
        "latlng": [
            -13.5,
            34
        ],
        "landlocked": true,
        "borders": [
            "MOZ",
            "TZA",
            "ZMB"
        ],
        "area": 118484,
        "demonyms": {
            "eng": {
                "f": "Malawian",
                "m": "Malawian"
            },
            "fra": {
                "f": "Malawienne",
                "m": "Malawien"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDFC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/mc6z83pW9m98X2Ef6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/195290"
        },
        "population": 19129955,
        "gini": {
            "2016": 44.7
        },
        "fifa": "MWI",
        "car": {
            "signs": [
                "MW"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/mw.png",
            "svg": "https://flagcdn.com/mw.svg",
            "alt": "The flag of Malawi is composed of three equal horizontal bands of black, red and green. The top half of a red sun with thirty-one visible rays is centered in the black band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/mw.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/mw.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -13.97,
                33.78
            ]
        }
    },
    {
        "name": {
            "common": "Mali",
            "official": "Republic of Mali",
            "nativeName": {
                "fra": {
                    "official": "R\xe9publique du Mali",
                    "common": "Mali"
                }
            }
        },
        "tld": [
            ".ml"
        ],
        "cca2": "ML",
        "ccn3": "466",
        "cca3": "MLI",
        "cioc": "MLI",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "XOF": {
                "name": "West African CFA franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "23"
            ]
        },
        "capital": [
            "Bamako"
        ],
        "altSpellings": [
            "ML",
            "Republic of Mali",
            "R\xe9publique du Mali"
        ],
        "region": "Africa",
        "subregion": "Western Africa",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u0627\u0644\u064A",
                "common": "\u0645\u0627\u0644\u064A"
            },
            "bre": {
                "official": "Republik Mali",
                "common": "Mali"
            },
            "ces": {
                "official": "Republika Mali",
                "common": "Mali"
            },
            "cym": {
                "official": "Republic of Mali",
                "common": "Mali"
            },
            "deu": {
                "official": "Republik Mali",
                "common": "Mali"
            },
            "est": {
                "official": "Mali Vabariik",
                "common": "Mali"
            },
            "fin": {
                "official": "Malin tasavalta",
                "common": "Mali"
            },
            "fra": {
                "official": "R\xe9publique du Mali",
                "common": "Mali"
            },
            "hrv": {
                "official": "Republika Mali",
                "common": "Mali"
            },
            "hun": {
                "official": "Mali K\xf6zt\xe1rsas\xe1g",
                "common": "Mali"
            },
            "ita": {
                "official": "Repubblica del Mali",
                "common": "Mali"
            },
            "jpn": {
                "official": "\u30DE\u30EA\u5171\u548C\u56FD",
                "common": "\u30DE\u30EA"
            },
            "kor": {
                "official": "\uB9D0\uB9AC \uACF5\uD654\uAD6D",
                "common": "\uB9D0\uB9AC"
            },
            "nld": {
                "official": "Republiek Mali",
                "common": "Mali"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u0627\u0644\u06CC",
                "common": "\u0645\u0627\u0644\u06CC"
            },
            "pol": {
                "official": "Republika Mali",
                "common": "Mali"
            },
            "por": {
                "official": "Rep\xfablica do Mali",
                "common": "Mali"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u043B\u0438",
                "common": "\u041C\u0430\u043B\u0438"
            },
            "slk": {
                "official": "Malijsk\xe1 republika",
                "common": "Mali"
            },
            "spa": {
                "official": "Rep\xfablica de Mal\xed",
                "common": "Mali"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u043B\u0438",
                "common": "\u041C\u0430\u043B\u0438"
            },
            "swe": {
                "official": "Republiken Mali",
                "common": "Mali"
            },
            "tur": {
                "official": "Mali Cumhuriyeti",
                "common": "Mali"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0627\u0644\u06CC",
                "common": "\u0645\u0627\u0644\u06CC"
            },
            "zho": {
                "official": "\u9A6C\u91CC\u5171\u548C\u56FD",
                "common": "\u9A6C\u91CC"
            }
        },
        "latlng": [
            17,
            -4
        ],
        "landlocked": true,
        "borders": [
            "DZA",
            "BFA",
            "GIN",
            "CIV",
            "MRT",
            "NER",
            "SEN"
        ],
        "area": 1240192,
        "demonyms": {
            "eng": {
                "f": "Malian",
                "m": "Malian"
            },
            "fra": {
                "f": "Malienne",
                "m": "Malien"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDF1",
        "maps": {
            "googleMaps": "https://goo.gl/maps/u9mYJkCB19wyuzh27",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192785"
        },
        "population": 20250834,
        "gini": {
            "2009": 33
        },
        "fifa": "MLI",
        "car": {
            "signs": [
                "RMM"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ml.png",
            "svg": "https://flagcdn.com/ml.svg",
            "alt": "The flag of Mali is composed of three equal vertical bands of green, yellow and red."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ml.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ml.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                12.65,
                -8
            ]
        }
    },
    {
        "name": {
            "common": "Iceland",
            "official": "Iceland",
            "nativeName": {
                "isl": {
                    "official": "\xcdsland",
                    "common": "\xcdsland"
                }
            }
        },
        "tld": [
            ".is"
        ],
        "cca2": "IS",
        "ccn3": "352",
        "cca3": "ISL",
        "cioc": "ISL",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "ISK": {
                "name": "Icelandic kr\xf3na",
                "symbol": "kr"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "54"
            ]
        },
        "capital": [
            "Reykjavik"
        ],
        "altSpellings": [
            "IS",
            "Island",
            "Republic of Iceland",
            "L\xfd\xf0veldi\xf0 \xcdsland"
        ],
        "region": "Europe",
        "subregion": "Northern Europe",
        "languages": {
            "isl": "Icelandic"
        },
        "translations": {
            "ara": {
                "official": "\u0622\u064A\u0633\u0644\u0646\u062F\u0627",
                "common": "\u0622\u064A\u0633\u0644\u0646\u062F\u0627"
            },
            "bre": {
                "official": "Island",
                "common": "Island"
            },
            "ces": {
                "official": "Island",
                "common": "Island"
            },
            "cym": {
                "official": "Iceland",
                "common": "Iceland"
            },
            "deu": {
                "official": "Island",
                "common": "Island"
            },
            "est": {
                "official": "Islandi Vabariik",
                "common": "Island"
            },
            "fin": {
                "official": "Islanti",
                "common": "Islanti"
            },
            "fra": {
                "official": "R\xe9publique d'Islande",
                "common": "Islande"
            },
            "hrv": {
                "official": "Island",
                "common": "Island"
            },
            "hun": {
                "official": "Izland",
                "common": "Izland"
            },
            "ita": {
                "official": "Islanda",
                "common": "Islanda"
            },
            "jpn": {
                "official": "\u30A2\u30A4\u30B9\u30E9\u30F3\u30C9",
                "common": "\u30A2\u30A4\u30B9\u30E9\u30F3\u30C9"
            },
            "kor": {
                "official": "\uC544\uC774\uC2AC\uB780\uB4DC \uACF5\uD654\uAD6D",
                "common": "\uC544\uC774\uC2AC\uB780\uB4DC"
            },
            "nld": {
                "official": "IJsland",
                "common": "IJsland"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u06CC\u0633\u0644\u0646\u062F",
                "common": "\u0627\u06CC\u0633\u0644\u0646\u062F"
            },
            "pol": {
                "official": "Republika Islandii",
                "common": "Islandia"
            },
            "por": {
                "official": "Isl\xe2ndia",
                "common": "Isl\xe2ndia"
            },
            "rus": {
                "official": "\u0418\u0441\u043B\u0430\u043D\u0434\u0438\u044F",
                "common": "\u0418\u0441\u043B\u0430\u043D\u0434\u0438\u044F"
            },
            "slk": {
                "official": "Islandsk\xe1 republika",
                "common": "Island"
            },
            "spa": {
                "official": "Islandia",
                "common": "Islandia"
            },
            "srp": {
                "official": "\u0418\u0441\u043B\u0430\u043D\u0434",
                "common": "\u0418\u0441\u043B\u0430\u043D\u0434"
            },
            "swe": {
                "official": "Island",
                "common": "Island"
            },
            "tur": {
                "official": "\u0130zlanda",
                "common": "\u0130zlanda"
            },
            "urd": {
                "official": "\u0622\u0626\u0633 \u0644\u06CC\u0646\u0688",
                "common": "\u0622\u0626\u0633 \u0644\u06CC\u0646\u0688"
            },
            "zho": {
                "official": "\u51B0\u5C9B",
                "common": "\u51B0\u5C9B"
            }
        },
        "latlng": [
            65,
            -18
        ],
        "landlocked": false,
        "area": 103000,
        "demonyms": {
            "eng": {
                "f": "Icelander",
                "m": "Icelander"
            },
            "fra": {
                "f": "Islandaise",
                "m": "Islandais"
            }
        },
        "flag": "\uD83C\uDDEE\uD83C\uDDF8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/WxFWSQuc3oamNxoE6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/299133"
        },
        "population": 366425,
        "gini": {
            "2017": 26.1
        },
        "fifa": "ISL",
        "car": {
            "signs": [
                "IS"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/is.png",
            "svg": "https://flagcdn.com/is.svg",
            "alt": "The flag of Iceland has a blue field with a large white-edged red cross that extends to the edges of the field. The vertical part of this cross is offset towards the hoist side."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/is.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/is.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                64.15,
                -21.95
            ]
        },
        "postalCode": {
            "format": "###",
            "regex": "^(\\d{3})$"
        }
    },
    {
        "name": {
            "common": "Norway",
            "official": "Kingdom of Norway",
            "nativeName": {
                "nno": {
                    "official": "Kongeriket Noreg",
                    "common": "Noreg"
                },
                "nob": {
                    "official": "Kongeriket Norge",
                    "common": "Norge"
                },
                "smi": {
                    "official": "Norgga gonagasriika",
                    "common": "Norgga"
                }
            }
        },
        "tld": [
            ".no"
        ],
        "cca2": "NO",
        "ccn3": "578",
        "cca3": "NOR",
        "cioc": "NOR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "NOK": {
                "name": "Norwegian krone",
                "symbol": "kr"
            }
        },
        "idd": {
            "root": "+4",
            "suffixes": [
                "7"
            ]
        },
        "capital": [
            "Oslo"
        ],
        "altSpellings": [
            "NO",
            "Norge",
            "Noreg",
            "Kingdom of Norway",
            "Kongeriket Norge",
            "Kongeriket Noreg"
        ],
        "region": "Europe",
        "subregion": "Northern Europe",
        "languages": {
            "nno": "Norwegian Nynorsk",
            "nob": "Norwegian Bokm\xe5l",
            "smi": "Sami"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0646\u0631\u0648\u064A\u062C",
                "common": "\u0627\u0644\u0646\u0631\u0648\u064A\u062C"
            },
            "bre": {
                "official": "Rouantelezh Norvegia",
                "common": "Norvegia"
            },
            "ces": {
                "official": "Norsk\xe9 kr\xe1lovstv\xed",
                "common": "Norsko"
            },
            "cym": {
                "official": "Kingdom of Norway",
                "common": "Norway"
            },
            "deu": {
                "official": "K\xf6nigreich Norwegen",
                "common": "Norwegen"
            },
            "est": {
                "official": "Norra Kuningriik",
                "common": "Norra"
            },
            "fin": {
                "official": "Norjan kuningaskunta",
                "common": "Norja"
            },
            "fra": {
                "official": "Royaume de Norv\xe8ge",
                "common": "Norv\xe8ge"
            },
            "hrv": {
                "official": "Kraljevina Norve\u0161ka",
                "common": "Norve\u0161ka"
            },
            "hun": {
                "official": "Norv\xe9g Kir\xe1lys\xe1g",
                "common": "Norv\xe9gia"
            },
            "ita": {
                "official": "Regno di Norvegia",
                "common": "Norvegia"
            },
            "jpn": {
                "official": "\u30CE\u30EB\u30A6\u30A7\u30FC\u738B\u56FD",
                "common": "\u30CE\u30EB\u30A6\u30A7\u30FC"
            },
            "kor": {
                "official": "\uB178\uB974\uC6E8\uC774 \uC655\uAD6D",
                "common": "\uB178\uB974\uC6E8\uC774"
            },
            "nld": {
                "official": "Koninkrijk Noorwegen",
                "common": "Noorwegen"
            },
            "per": {
                "official": "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0646\u0631\u0648\u0698",
                "common": "\u0646\u0631\u0648\u0698"
            },
            "pol": {
                "official": "Kr\xf3lestwo Norwegii",
                "common": "Norwegia"
            },
            "por": {
                "official": "Reino da Noruega",
                "common": "Noruega"
            },
            "rus": {
                "official": "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u041D\u043E\u0440\u0432\u0435\u0433\u0438\u044F",
                "common": "\u041D\u043E\u0440\u0432\u0435\u0433\u0438\u044F"
            },
            "slk": {
                "official": "N\xf3rske kr\xe1\u013Eovstvo",
                "common": "N\xf3rsko"
            },
            "spa": {
                "official": "Reino de Noruega",
                "common": "Noruega"
            },
            "srp": {
                "official": "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u041D\u043E\u0440\u0432\u0435\u0448\u043A\u0430",
                "common": "\u041D\u043E\u0440\u0432\u0435\u0448\u043A\u0430"
            },
            "swe": {
                "official": "Konungariket Norge",
                "common": "Norge"
            },
            "tur": {
                "official": "Norve\xe7 Krall\u0131\u011F\u0131",
                "common": "Norve\xe7"
            },
            "urd": {
                "official": "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0646\u0627\u0631\u0648\u06D2",
                "common": "\u0646\u0627\u0631\u0648\u06D2"
            },
            "zho": {
                "official": "\u632A\u5A01\u738B\u56FD",
                "common": "\u632A\u5A01"
            }
        },
        "latlng": [
            62,
            10
        ],
        "landlocked": false,
        "borders": [
            "FIN",
            "SWE",
            "RUS"
        ],
        "area": 323802,
        "demonyms": {
            "eng": {
                "f": "Norwegian",
                "m": "Norwegian"
            },
            "fra": {
                "f": "Norv\xe9gienne",
                "m": "Norv\xe9gien"
            }
        },
        "flag": "\uD83C\uDDF3\uD83C\uDDF4",
        "maps": {
            "googleMaps": "https://goo.gl/maps/htWRrphA7vNgQNdSA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2978650"
        },
        "population": 5379475,
        "gini": {
            "2018": 27.6
        },
        "fifa": "NOR",
        "car": {
            "signs": [
                "N"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/no.png",
            "svg": "https://flagcdn.com/no.svg",
            "alt": "The flag of Norway has a red field with a large white-edged navy blue cross that extends to the edges of the field. The vertical part of this cross is offset towards the hoist side."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/no.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/no.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                59.92,
                10.75
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Saint Vincent and the Grenadines",
            "official": "Saint Vincent and the Grenadines",
            "nativeName": {
                "eng": {
                    "official": "Saint Vincent and the Grenadines",
                    "common": "Saint Vincent and the Grenadines"
                }
            }
        },
        "tld": [
            ".vc"
        ],
        "cca2": "VC",
        "ccn3": "670",
        "cca3": "VCT",
        "cioc": "VIN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "XCD": {
                "name": "Eastern Caribbean dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "784"
            ]
        },
        "capital": [
            "Kingstown"
        ],
        "altSpellings": [
            "VC"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u0633\u0627\u0646\u062A \u0641\u064A\u0646\u0633\u0646\u062A \u0648\u0627\u0644\u063A\u0631\u064A\u0646\u0627\u062F\u064A\u0646",
                "common": "\u0633\u0627\u0646\u062A \u0641\u064A\u0646\u0633\u0646\u062A \u0648\u0627\u0644\u063A\u0631\u064A\u0646\u0627\u062F\u064A\u0646"
            },
            "bre": {
                "official": "Sant-Visant hag ar Grenadinez",
                "common": "Sant-Visant hag ar Grenadinez"
            },
            "ces": {
                "official": "Svat\xfd Vincenc a Grenadiny",
                "common": "Svat\xfd Vincenc a Grenadiny"
            },
            "cym": {
                "official": "Saint Vincent and the Grenadines",
                "common": "Saint Vincent and the Grenadines"
            },
            "deu": {
                "official": "St. Vincent und die Grenadinen",
                "common": "St. Vincent und die Grenadinen"
            },
            "est": {
                "official": "Saint Vincent ja Grenadiinid",
                "common": "Saint Vincent"
            },
            "fin": {
                "official": "Saint Vincent ja Grenadiinit",
                "common": "Saint Vincent ja Grenadiinit"
            },
            "fra": {
                "official": "Saint-Vincent-et-les Grenadines",
                "common": "Saint-Vincent-et-les-Grenadines"
            },
            "hrv": {
                "official": "Sveti Vincent i Grenadini",
                "common": "Sveti Vincent i Grenadini"
            },
            "hun": {
                "official": "Saint Vincent \xe9s a Grenadine-szigetek",
                "common": "Saint Vincent \xe9s a Grenadine-szigetek"
            },
            "ita": {
                "official": "Saint Vincent e Grenadine",
                "common": "Saint Vincent e Grenadine"
            },
            "jpn": {
                "official": "\u30BB\u30F3\u30C8\u30D3\u30F3\u30BB\u30F3\u30C8\u304A\u3088\u3073\u30B0\u30EC\u30CA\u30C7\u30A3\u30FC\u30F3\u8AF8\u5CF6",
                "common": "\u30BB\u30F3\u30C8\u30D3\u30F3\u30BB\u30F3\u30C8\u304A\u3088\u3073\u30B0\u30EC\u30CA\u30C7\u30A3\u30FC\u30F3\u8AF8\u5CF6"
            },
            "kor": {
                "official": "\uC138\uC778\uD2B8\uBE48\uC13C\uD2B8 \uADF8\uB808\uB098\uB518",
                "common": "\uC138\uC778\uD2B8\uBE48\uC13C\uD2B8 \uADF8\uB808\uB098\uB518"
            },
            "nld": {
                "official": "Saint Vincent en de Grenadines",
                "common": "Saint Vincent en de Grenadines"
            },
            "per": {
                "official": "\u0633\u0646\u062A \u0648\u06CC\u0646\u0633\u0646\u062A \u0648 \u06AF\u0631\u0646\u0627\u062F\u06CC\u0646\u200C\u0647\u0627",
                "common": "\u0633\u0646\u062A \u0648\u06CC\u0646\u0633\u0646\u062A \u0648 \u06AF\u0631\u0646\u0627\u062F\u06CC\u0646\u200C\u0647\u0627"
            },
            "pol": {
                "official": "Saint Vincent i Grenadyny",
                "common": "Saint Vincent i Grenadyny"
            },
            "por": {
                "official": "S\xe3o Vicente e Granadinas",
                "common": "S\xe3o Vincente e Granadinas"
            },
            "rus": {
                "official": "\u0421\u0435\u043D\u0442-\u0412\u0438\u043D\u0441\u0435\u043D\u0442 \u0438 \u0413\u0440\u0435\u043D\u0430\u0434\u0438\u043D\u044B",
                "common": "\u0421\u0435\u043D\u0442-\u0412\u0438\u043D\u0441\u0435\u043D\u0442 \u0438 \u0413\u0440\u0435\u043D\u0430\u0434\u0438\u043D\u044B"
            },
            "slk": {
                "official": "Sv\xe4t\xfd Vincent a Grenad\xedny",
                "common": "Sv\xe4t\xfd Vincent a Grenad\xedny"
            },
            "spa": {
                "official": "San Vicente y las Granadinas",
                "common": "San Vicente y Granadinas"
            },
            "srp": {
                "official": "\u0421\u0432\u0435\u0442\u0438 \u0412\u0438\u043D\u0441\u0435\u043D\u0442 \u0438 \u0413\u0440\u0435\u043D\u0430\u0434\u0438\u043D\u0438",
                "common": "\u0421\u0432\u0435\u0442\u0438 \u0412\u0438\u043D\u0441\u0435\u043D\u0442 \u0438 \u0413\u0440\u0435\u043D\u0430\u0434\u0438\u043D\u0438"
            },
            "swe": {
                "official": "Saint Vincent och Grenadinerna",
                "common": "Saint Vincent och Grenadinerna"
            },
            "tur": {
                "official": "Saint Vincent ve Grenadinler",
                "common": "Saint Vincent ve Grenadinler"
            },
            "urd": {
                "official": "\u0633\u06CC\u0646\u0679 \u0648\u06CC\u0646\u0633\u06CC\u0646\u0679 \u0648 \u06AF\u0631\u06CC\u0646\u0627\u0688\u0627\u0626\u0646\u0632",
                "common": "\u0633\u06CC\u0646\u0679 \u0648\u06CC\u0646\u0633\u06CC\u0646\u0679 \u0648 \u06AF\u0631\u06CC\u0646\u0627\u0688\u0627\u0626\u0646\u0632"
            },
            "zho": {
                "official": "\u5723\u6587\u68EE\u7279\u548C\u683C\u6797\u7EB3\u4E01\u65AF",
                "common": "\u5723\u6587\u68EE\u7279\u548C\u683C\u6797\u7EB3\u4E01\u65AF"
            }
        },
        "latlng": [
            13.25,
            -61.2
        ],
        "landlocked": false,
        "area": 389,
        "demonyms": {
            "eng": {
                "f": "Saint Vincentian",
                "m": "Saint Vincentian"
            },
            "fra": {
                "f": "Vincentaise",
                "m": "Vincentais"
            }
        },
        "flag": "\uD83C\uDDFB\uD83C\uDDE8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/wMbnMqjG37FMnrwf7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/550725"
        },
        "population": 110947,
        "fifa": "VIN",
        "car": {
            "signs": [
                "WV"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/vc.png",
            "svg": "https://flagcdn.com/vc.svg",
            "alt": "The flag of Saint Vincent and the Grenadines is composed of three vertical bands of blue, gold and green. The gold band is twice as wide as the other two bands and bears three green diamonds arranged to form the letter V at its center."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/vc.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/vc.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                13.13,
                -61.22
            ]
        }
    },
    {
        "name": {
            "common": "Guadeloupe",
            "official": "Guadeloupe",
            "nativeName": {
                "fra": {
                    "official": "Guadeloupe",
                    "common": "Guadeloupe"
                }
            }
        },
        "tld": [
            ".gp"
        ],
        "cca2": "GP",
        "ccn3": "312",
        "cca3": "GLP",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "90"
            ]
        },
        "capital": [
            "Basse-Terre"
        ],
        "altSpellings": [
            "GP",
            "Gwadloup"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u063A\u0648\u0627\u062F\u0644\u0648\u0628",
                "common": "\u063A\u0648\u0627\u062F\u0644\u0648\u0628"
            },
            "bre": {
                "official": "Gwadeloup",
                "common": "Gwadeloup"
            },
            "ces": {
                "official": "Guadeloupe",
                "common": "Guadeloupe"
            },
            "cym": {
                "official": "Guadeloupe",
                "common": "Guadeloupe"
            },
            "deu": {
                "official": "Guadeloupe",
                "common": "Guadeloupe"
            },
            "est": {
                "official": "Guadeloupe\u2019i ja s\xf5ltkondade departemang",
                "common": "Guadeloupe"
            },
            "fin": {
                "official": "Guadeloupen departmentti",
                "common": "Guadeloupe"
            },
            "fra": {
                "official": "Guadeloupe",
                "common": "Guadeloupe"
            },
            "hrv": {
                "official": "Gvadalupa",
                "common": "Gvadalupa"
            },
            "hun": {
                "official": "Guadeloupe",
                "common": "Guadeloupe"
            },
            "ita": {
                "official": "Guadeloupe",
                "common": "Guadeloupa"
            },
            "jpn": {
                "official": "\u30B0\u30A2\u30C9\u30EB\u30FC\u30D7\u5CF6",
                "common": "\u30B0\u30A2\u30C9\u30EB\u30FC\u30D7"
            },
            "kor": {
                "official": "\uACFC\uB4E4\uB8E8\uD504",
                "common": "\uACFC\uB4E4\uB8E8\uD504"
            },
            "nld": {
                "official": "Guadeloupe",
                "common": "Guadeloupe"
            },
            "per": {
                "official": "\u06AF\u0648\u0627\u062F\u0644\u0648\u067E",
                "common": "\u06AF\u0648\u0627\u062F\u0644\u0648\u067E"
            },
            "pol": {
                "official": "Gwadelupa",
                "common": "Gwadelupa"
            },
            "por": {
                "official": "Guadalupe",
                "common": "Guadalupe"
            },
            "rus": {
                "official": "\u0413\u0432\u0430\u0434\u0435\u043B\u0443\u043F\u0430",
                "common": "\u0413\u0432\u0430\u0434\u0435\u043B\u0443\u043F\u0430"
            },
            "slk": {
                "official": "Guadeloupe",
                "common": "Guadeloupe"
            },
            "spa": {
                "official": "Guadalupe",
                "common": "Guadalupe"
            },
            "srp": {
                "official": "\u0413\u0432\u0430\u0434\u0435\u043B\u0443\u043F",
                "common": "\u0413\u0432\u0430\u0434\u0435\u043B\u0443\u043F"
            },
            "swe": {
                "official": "Guadeloupe",
                "common": "Guadeloupe"
            },
            "tur": {
                "official": "Guadeloupe",
                "common": "Guadeloupe"
            },
            "urd": {
                "official": "\u06AF\u0648\u0627\u0688\u06CC\u0644\u0648\u067E",
                "common": "\u06AF\u0648\u0627\u0688\u06CC\u0644\u0648\u067E"
            },
            "zho": {
                "official": "\u74DC\u5FB7\u7F57\u666E\u5C9B",
                "common": "\u74DC\u5FB7\u7F57\u666E\u5C9B"
            }
        },
        "latlng": [
            16.25,
            -61.583333
        ],
        "landlocked": false,
        "area": 1628,
        "demonyms": {
            "eng": {
                "f": "Guadeloupian",
                "m": "Guadeloupian"
            },
            "fra": {
                "f": "Guadeloup\xe9enne",
                "m": "Guadeloup\xe9en"
            }
        },
        "flag": "\uD83C\uDDEC\uD83C\uDDF5",
        "maps": {
            "googleMaps": "https://goo.gl/maps/Dy9R2EufJtoWm8UN9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/7109289"
        },
        "population": 400132,
        "car": {
            "signs": [
                "F"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/gp.png",
            "svg": "https://flagcdn.com/gp.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/gp.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/gp.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                16.03,
                -61.73
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^((97|98)\\d{3})$"
        }
    },
    {
        "name": {
            "common": "Chile",
            "official": "Republic of Chile",
            "nativeName": {
                "spa": {
                    "official": "Rep\xfablica de Chile",
                    "common": "Chile"
                }
            }
        },
        "tld": [
            ".cl"
        ],
        "cca2": "CL",
        "ccn3": "152",
        "cca3": "CHL",
        "cioc": "CHI",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "CLP": {
                "name": "Chilean peso",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "6"
            ]
        },
        "capital": [
            "Santiago"
        ],
        "altSpellings": [
            "CL",
            "Republic of Chile",
            "Rep\xfablica de Chile"
        ],
        "region": "Americas",
        "subregion": "South America",
        "languages": {
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062A\u0634\u064A\u0644\u064A",
                "common": "\u062A\u0634\u064A\u0644\u064A"
            },
            "bre": {
                "official": "Republik Chile",
                "common": "Chile"
            },
            "ces": {
                "official": "Chilsk\xe1 republika",
                "common": "Chile"
            },
            "cym": {
                "official": "Gweriniaeth Chile",
                "common": "Chile"
            },
            "deu": {
                "official": "Republik Chile",
                "common": "Chile"
            },
            "est": {
                "official": "T\u0161iili Vabariik",
                "common": "T\u0161iili"
            },
            "fin": {
                "official": "Chilen tasavalta",
                "common": "Chile"
            },
            "fra": {
                "official": "R\xe9publique du Chili",
                "common": "Chili"
            },
            "hrv": {
                "official": "Republika \u010Cile",
                "common": "\u010Cile"
            },
            "hun": {
                "official": "Chilei K\xf6zt\xe1rsas\xe1g",
                "common": "Chile"
            },
            "ita": {
                "official": "Repubblica del Cile",
                "common": "Cile"
            },
            "jpn": {
                "official": "\u30C1\u30EA\u5171\u548C\u56FD",
                "common": "\u30C1\u30EA"
            },
            "kor": {
                "official": "\uCE60\uB808 \uACF5\uD654\uAD6D",
                "common": "\uCE60\uB808"
            },
            "nld": {
                "official": "Republiek Chili",
                "common": "Chili"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0634\u06CC\u0644\u06CC",
                "common": "\u0634\u06CC\u0644\u06CC"
            },
            "pol": {
                "official": "Republika Chile",
                "common": "Chile"
            },
            "por": {
                "official": "Rep\xfablica do Chile",
                "common": "Chile"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0427\u0438\u043B\u0438",
                "common": "\u0427\u0438\u043B\u0438"
            },
            "slk": {
                "official": "\u010C\xedlska republika",
                "common": "\u010Cile"
            },
            "spa": {
                "official": "Rep\xfablica de Chile",
                "common": "Chile"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0427\u0438\u043B\u0435",
                "common": "\u0427\u0438\u043B\u0435"
            },
            "swe": {
                "official": "Republiken Chile",
                "common": "Chile"
            },
            "tur": {
                "official": "\u015Eili Cumhuriyeti",
                "common": "\u015Eili"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0686\u0644\u06CC",
                "common": "\u0686\u0644\u06CC"
            },
            "zho": {
                "official": "\u667A\u5229\u5171\u548C\u56FD",
                "common": "\u667A\u5229"
            }
        },
        "latlng": [
            -30,
            -71
        ],
        "landlocked": false,
        "borders": [
            "ARG",
            "BOL",
            "PER"
        ],
        "area": 756102,
        "demonyms": {
            "eng": {
                "f": "Chilean",
                "m": "Chilean"
            },
            "fra": {
                "f": "Chilienne",
                "m": "Chilien"
            }
        },
        "flag": "\uD83C\uDDE8\uD83C\uDDF1",
        "maps": {
            "googleMaps": "https://goo.gl/maps/XboxyNHh2fAjCPNn9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/167454"
        },
        "population": 19116209,
        "gini": {
            "2017": 44.4
        },
        "fifa": "CHI",
        "car": {
            "signs": [
                "RCH"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-06:00",
            "UTC-04:00"
        ],
        "continents": [
            "South America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/cl.png",
            "svg": "https://flagcdn.com/cl.svg",
            "alt": "The flag of Chile is composed of two equal horizontal bands of white and red, with a blue square of the same height as the white band superimposed in the canton. A white five-pointed star is centered in the blue square."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/cl.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/cl.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -33.45,
                -70.67
            ]
        },
        "postalCode": {
            "format": "#######",
            "regex": "^(\\d{7})$"
        }
    },
    {
        "name": {
            "common": "Bermuda",
            "official": "Bermuda",
            "nativeName": {
                "eng": {
                    "official": "Bermuda",
                    "common": "Bermuda"
                }
            }
        },
        "tld": [
            ".bm"
        ],
        "cca2": "BM",
        "ccn3": "060",
        "cca3": "BMU",
        "cioc": "BER",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "BMD": {
                "name": "Bermudian dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "441"
            ]
        },
        "capital": [
            "Hamilton"
        ],
        "altSpellings": [
            "BM",
            "The Islands of Bermuda",
            "The Bermudas",
            "Somers Isles"
        ],
        "region": "Americas",
        "subregion": "North America",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u0628\u0631\u0645\u0648\u062F\u0627",
                "common": "\u0628\u0631\u0645\u0648\u062F\u0627"
            },
            "bre": {
                "official": "Bermuda",
                "common": "Bermuda"
            },
            "ces": {
                "official": "Bermudsk\xe9 ostrovy",
                "common": "Bermudy"
            },
            "cym": {
                "official": "Bermiwda",
                "common": "Bermiwda"
            },
            "deu": {
                "official": "Bermuda",
                "common": "Bermuda"
            },
            "est": {
                "official": "Bermuda",
                "common": "Bermuda"
            },
            "fin": {
                "official": "Bermuda",
                "common": "Bermuda"
            },
            "fra": {
                "official": "Bermudes",
                "common": "Bermudes"
            },
            "hrv": {
                "official": "Bermuda",
                "common": "Bermudi"
            },
            "hun": {
                "official": "Bermuda",
                "common": "Bermuda"
            },
            "ita": {
                "official": "Bermuda",
                "common": "Bermuda"
            },
            "jpn": {
                "official": "\u30D0\u30DF\u30E5\u30FC\u30C0",
                "common": "\u30D0\u30DF\u30E5\u30FC\u30C0"
            },
            "kor": {
                "official": "\uBC84\uBBA4\uB2E4",
                "common": "\uBC84\uBBA4\uB2E4"
            },
            "nld": {
                "official": "Bermuda",
                "common": "Bermuda"
            },
            "per": {
                "official": "\u062C\u0632\u0627\u06CC\u0631 \u0628\u0631\u0645\u0648\u062F\u0627",
                "common": "\u0628\u0631\u0645\u0648\u062F\u0627"
            },
            "pol": {
                "official": "Bermudy",
                "common": "Bermudy"
            },
            "por": {
                "official": "Bermudas",
                "common": "Bermudas"
            },
            "rus": {
                "official": "\u0411\u0435\u0440\u043C\u0443\u0434\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                "common": "\u0411\u0435\u0440\u043C\u0443\u0434\u0441\u043A\u0438\u0435 \u041E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            "slk": {
                "official": "Bermudy",
                "common": "Bermudy"
            },
            "spa": {
                "official": "Bermuda",
                "common": "Bermudas"
            },
            "srp": {
                "official": "\u0411\u0435\u0440\u043C\u0443\u0434\u0430",
                "common": "\u0411\u0435\u0440\u043C\u0443\u0434\u0430"
            },
            "swe": {
                "official": "Bermuda",
                "common": "Bermuda"
            },
            "tur": {
                "official": "Bermuda",
                "common": "Bermuda"
            },
            "urd": {
                "official": "\u0628\u0631\u0645\u0648\u062F\u0627",
                "common": "\u0628\u0631\u0645\u0648\u062F\u0627"
            },
            "zho": {
                "official": "\u767E\u6155\u5927",
                "common": "\u767E\u6155\u5927"
            }
        },
        "latlng": [
            32.33333333,
            -64.75
        ],
        "landlocked": false,
        "area": 54,
        "demonyms": {
            "eng": {
                "f": "Bermudian",
                "m": "Bermudian"
            },
            "fra": {
                "f": "Bermudienne",
                "m": "Bermudien"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDF2",
        "maps": {
            "googleMaps": "https://goo.gl/maps/NLsRGNjTzDghTtAJA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1993208"
        },
        "population": 63903,
        "fifa": "BER",
        "car": {
            "signs": [
                "GB"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/bm.png",
            "svg": "https://flagcdn.com/bm.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/bm.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/bm.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                32.28,
                -64.78
            ]
        },
        "postalCode": {
            "format": "@@ ##",
            "regex": "^([A-Z]{2}\\d{2})$"
        }
    },
    {
        "name": {
            "common": "Kuwait",
            "official": "State of Kuwait",
            "nativeName": {
                "ara": {
                    "official": "\u062F\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064A\u062A",
                    "common": "\u0627\u0644\u0643\u0648\u064A\u062A"
                }
            }
        },
        "tld": [
            ".kw"
        ],
        "cca2": "KW",
        "ccn3": "414",
        "cca3": "KWT",
        "cioc": "KUW",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "KWD": {
                "name": "Kuwaiti dinar",
                "symbol": "\u062F.\u0643"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "65"
            ]
        },
        "capital": [
            "Kuwait City"
        ],
        "altSpellings": [
            "KW",
            "State of Kuwait",
            "Dawlat al-Kuwait"
        ],
        "region": "Asia",
        "subregion": "Western Asia",
        "languages": {
            "ara": "Arabic"
        },
        "translations": {
            "ara": {
                "official": "\u062F\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064A\u062A",
                "common": "\u0627\u0644\u0643\u0648\u064A\u062A"
            },
            "bre": {
                "official": "Stad Koweit",
                "common": "Koweit"
            },
            "ces": {
                "official": "St\xe1t Kuvajt",
                "common": "Kuvajt"
            },
            "cym": {
                "official": "State of Kuwait",
                "common": "Kuwait"
            },
            "deu": {
                "official": "Staat Kuwait",
                "common": "Kuwait"
            },
            "est": {
                "official": "Kuveidi Riik",
                "common": "Kuveit"
            },
            "fin": {
                "official": "Kuwaitin valtio",
                "common": "Kuwait"
            },
            "fra": {
                "official": "\xc9tat du Kowe\xeft",
                "common": "Kowe\xeft"
            },
            "hrv": {
                "official": "Dr\u017Eava Kuvajt",
                "common": "Kuvajt"
            },
            "hun": {
                "official": "Kuvaiti \xc1llam",
                "common": "Kuvait"
            },
            "ita": {
                "official": "Stato del Kuwait",
                "common": "Kuwait"
            },
            "jpn": {
                "official": "\u30AF\u30A6\u30A7\u30FC\u30C8\u56FD",
                "common": "\u30AF\u30A6\u30A7\u30FC\u30C8"
            },
            "kor": {
                "official": "\uCFE0\uC6E8\uC774\uD2B8\uAD6D",
                "common": "\uCFE0\uC6E8\uC774\uD2B8"
            },
            "nld": {
                "official": "Staat Koeweit",
                "common": "Koeweit"
            },
            "per": {
                "official": "\u062F\u0648\u0644\u062A \u06A9\u0648\u06CC\u062A",
                "common": "\u06A9\u064F\u0648\u06CC\u062A"
            },
            "pol": {
                "official": "Pa\u0144stwo Kuwejt",
                "common": "Kuwejt"
            },
            "por": {
                "official": "Estado do Kuwait",
                "common": "Kuwait"
            },
            "rus": {
                "official": "\u0413\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u041A\u0443\u0432\u0435\u0439\u0442",
                "common": "\u041A\u0443\u0432\u0435\u0439\u0442"
            },
            "slk": {
                "official": "Kuvajtsk\xfd \u0161t\xe1t",
                "common": "Kuvajt"
            },
            "spa": {
                "official": "Estado de Kuwait",
                "common": "Kuwait"
            },
            "srp": {
                "official": "\u0414\u0440\u0436\u0430\u0432\u0430 \u041A\u0443\u0432\u0430\u0458\u0442",
                "common": "\u041A\u0443\u0432\u0430\u0458\u0442"
            },
            "swe": {
                "official": "Staten Kuwait",
                "common": "Kuwait"
            },
            "tur": {
                "official": "Kuveyt Devleti",
                "common": "Kuveyt"
            },
            "urd": {
                "official": "\u062F\u0648\u0644\u062A\u0650 \u06A9\u0648\u06CC\u062A",
                "common": "\u06A9\u0648\u06CC\u062A"
            },
            "zho": {
                "official": "\u79D1\u5A01\u7279\u56FD",
                "common": "\u79D1\u5A01\u7279"
            }
        },
        "latlng": [
            29.5,
            45.75
        ],
        "landlocked": false,
        "borders": [
            "IRQ",
            "SAU"
        ],
        "area": 17818,
        "demonyms": {
            "eng": {
                "f": "Kuwaiti",
                "m": "Kuwaiti"
            },
            "fra": {
                "f": "Kowe\xeftienne",
                "m": "Kowe\xeftien"
            }
        },
        "flag": "\uD83C\uDDF0\uD83C\uDDFC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/aqr3aNQjS1BAvksJ7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/305099"
        },
        "population": 4270563,
        "fifa": "KUW",
        "car": {
            "signs": [
                "KWT"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/kw.png",
            "svg": "https://flagcdn.com/kw.svg",
            "alt": "The flag of Kuwait is composed of three equal horizontal bands of green, white and red, with a black trapezium superimposed on the hoist side of the field. This trapezium has its base on the hoist end and spans about one-fourth the width of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/kw.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/kw.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                29.37,
                47.97
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Dominica",
            "official": "Commonwealth of Dominica",
            "nativeName": {
                "eng": {
                    "official": "Commonwealth of Dominica",
                    "common": "Dominica"
                }
            }
        },
        "tld": [
            ".dm"
        ],
        "cca2": "DM",
        "ccn3": "212",
        "cca3": "DMA",
        "cioc": "DMA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "XCD": {
                "name": "Eastern Caribbean dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "767"
            ]
        },
        "capital": [
            "Roseau"
        ],
        "altSpellings": [
            "DM",
            "Dominique",
            "Wai\u2018tu kubuli",
            "Commonwealth of Dominica"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u0643\u0648\u0645\u0648\u0646\u0648\u0644\u062B \u062F\u0648\u0645\u064A\u0646\u064A\u0643\u0627",
                "common": "\u062F\u0648\u0645\u064A\u0646\u064A\u0643\u0627"
            },
            "bre": {
                "official": "Kenglad Dominika",
                "common": "Dominika"
            },
            "ces": {
                "official": "Dominik\xe1nsk\xe9 spole\u010Denstv\xed",
                "common": "Dominika"
            },
            "cym": {
                "official": "Cymanwlad Dominica",
                "common": "Dominica"
            },
            "deu": {
                "official": "Commonwealth von Dominica",
                "common": "Dominica"
            },
            "est": {
                "official": "Dominica \xdchendus",
                "common": "Dominica"
            },
            "fin": {
                "official": "Dominican liittovaltio",
                "common": "Dominica"
            },
            "fra": {
                "official": "Commonwealth de la Dominique",
                "common": "Dominique"
            },
            "hrv": {
                "official": "Zajednica Dominika",
                "common": "Dominika"
            },
            "hun": {
                "official": "Dominikai K\xf6z\xf6ss\xe9g",
                "common": "Dominikai K\xf6z\xf6ss\xe9g"
            },
            "ita": {
                "official": "Commonwealth di Dominica",
                "common": "Dominica"
            },
            "jpn": {
                "official": "\u30C9\u30DF\u30CB\u30AB\u56FD",
                "common": "\u30C9\u30DF\u30CB\u30AB\u56FD"
            },
            "kor": {
                "official": "\uB3C4\uBBF8\uB2C8\uCE74 \uACF5\uD654\uAD6D",
                "common": "\uB3C4\uBBF8\uB2C8\uCE74 \uACF5\uD654\uAD6D"
            },
            "nld": {
                "official": "Gemenebest Dominica",
                "common": "Dominica"
            },
            "per": {
                "official": "\u0642\u0644\u0645\u0631\u0648 \u0647\u0645\u0633\u0648\u062F \u062F\u0648\u0645\u06CC\u0646\u06CC\u06A9\u0627",
                "common": "\u062F\u0648\u0645\u06CC\u0646\u06CC\u06A9\u0627"
            },
            "pol": {
                "official": "Wsp\xf3lnota Dominiki",
                "common": "Dominika"
            },
            "por": {
                "official": "Comunidade da Dominica",
                "common": "Dominica"
            },
            "rus": {
                "official": "\u0421\u043E\u0434\u0440\u0443\u0436\u0435\u0441\u0442\u0432\u043E \u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0438",
                "common": "\u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0430"
            },
            "slk": {
                "official": "Dominick\xe9 spolo\u010Denstvo",
                "common": "Dominika"
            },
            "spa": {
                "official": "Mancomunidad de Dominica",
                "common": "Dominica"
            },
            "srp": {
                "official": "\u041A\u043E\u043C\u043E\u043D\u0432\u0435\u043B\u0442 \u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0430",
                "common": "\u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0430"
            },
            "swe": {
                "official": "Samv\xe4ldet Dominica",
                "common": "Dominica"
            },
            "tur": {
                "official": "Dominika Toplulu\u011Fu",
                "common": "Dominika"
            },
            "urd": {
                "official": "\u062F\u0648\u0644\u062A\u0650 \u0645\u0634\u062A\u0631\u06A9\u06C1 \u0688\u0648\u0645\u06CC\u0646\u06CC\u06A9\u0627",
                "common": "\u0688\u0648\u0645\u06CC\u0646\u06CC\u06A9\u0627"
            },
            "zho": {
                "official": "\u591A\u7C73\u5C3C\u52A0\u5171\u548C\u56FD",
                "common": "\u591A\u7C73\u5C3C\u52A0"
            }
        },
        "latlng": [
            15.41666666,
            -61.33333333
        ],
        "landlocked": false,
        "area": 751,
        "demonyms": {
            "eng": {
                "f": "Dominican",
                "m": "Dominican"
            },
            "fra": {
                "f": "Dominiquaise",
                "m": "Dominiquais"
            }
        },
        "flag": "\uD83C\uDDE9\uD83C\uDDF2",
        "maps": {
            "googleMaps": "https://goo.gl/maps/HSKdHYpFC8oHHuyV7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/307823"
        },
        "population": 71991,
        "fifa": "DMA",
        "car": {
            "signs": [
                "WD"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/dm.png",
            "svg": "https://flagcdn.com/dm.svg",
            "alt": "The flag of Dominica has a green field with a large centered tricolor cross. The vertical and horizontal parts of the cross each comprise three bands of yellow, black and white. A red circle, bearing a hoist-side facing purple Sisserou parrot standing on a twig and encircled by ten five-pointed yellow-edged green stars, is superimposed at the center of the cross."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/dm.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/dm.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                15.3,
                -61.4
            ]
        }
    },
    {
        "name": {
            "common": "Montenegro",
            "official": "Montenegro",
            "nativeName": {
                "cnr": {
                    "official": "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430",
                    "common": "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430"
                }
            }
        },
        "tld": [
            ".me"
        ],
        "cca2": "ME",
        "ccn3": "499",
        "cca3": "MNE",
        "cioc": "MNE",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "82"
            ]
        },
        "capital": [
            "Podgorica"
        ],
        "altSpellings": [
            "ME",
            "Crna Gora"
        ],
        "region": "Europe",
        "subregion": "Southeast Europe",
        "languages": {
            "cnr": "Montenegrin"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u062C\u0628\u0644 \u0627\u0644\u0627\u0633\u0648\u062F",
                "common": "\u0627\u0644\u062C\u0628\u0644 \u0627\u0644\u0627\u0633\u0648\u062F"
            },
            "bre": {
                "official": "Republik Montenegro",
                "common": "Montenegro"
            },
            "ces": {
                "official": "\u010Cern\xe1 Hora",
                "common": "\u010Cern\xe1 Hora"
            },
            "cym": {
                "official": "Montenegro",
                "common": "Montenegro"
            },
            "deu": {
                "official": "Montenegro",
                "common": "Montenegro"
            },
            "est": {
                "official": "Montenegro",
                "common": "Montenegro"
            },
            "fin": {
                "official": "Montenegro",
                "common": "Montenegro"
            },
            "fra": {
                "official": "Mont\xe9n\xe9gro",
                "common": "Mont\xe9n\xe9gro"
            },
            "hrv": {
                "official": "Crna Gora",
                "common": "Crna Gora"
            },
            "hun": {
                "official": "Montenegr\xf3",
                "common": "Montenegr\xf3"
            },
            "ita": {
                "official": "Montenegro",
                "common": "Montenegro"
            },
            "jpn": {
                "official": "\u30E2\u30F3\u30C6\u30CD\u30B0\u30ED",
                "common": "\u30E2\u30F3\u30C6\u30CD\u30B0\u30ED"
            },
            "kor": {
                "official": "\uBAAC\uD14C\uB124\uADF8\uB85C",
                "common": "\uBAAC\uD14C\uB124\uADF8\uB85C"
            },
            "nld": {
                "official": "Montenegro",
                "common": "Montenegro"
            },
            "per": {
                "official": "\u0645\u0648\u0646\u062A\u0647\u200C\u0646\u06AF\u0631\u0648",
                "common": "\u0645\u0648\u0646\u062A\u0647\u200C\u0646\u06AF\u0631\u0648"
            },
            "pol": {
                "official": "Czarnog\xf3ra",
                "common": "Czarnog\xf3ra"
            },
            "por": {
                "official": "Montenegro",
                "common": "Montenegro"
            },
            "rus": {
                "official": "\u0427\u0435\u0440\u043D\u043E\u0433\u043E\u0440\u0438\u044F",
                "common": "\u0427\u0435\u0440\u043D\u043E\u0433\u043E\u0440\u0438\u044F"
            },
            "slk": {
                "official": "\u010Cierna Hora",
                "common": "\u010Cierna Hora"
            },
            "spa": {
                "official": "Montenegro",
                "common": "Montenegro"
            },
            "srp": {
                "official": "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430",
                "common": "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430"
            },
            "swe": {
                "official": "Montenegro",
                "common": "Montenegro"
            },
            "tur": {
                "official": "Karada\u011F",
                "common": "Karada\u011F"
            },
            "urd": {
                "official": "\u0645\u0648\u0646\u0679\u06CC\u0646\u06CC\u06AF\u0631\u0648",
                "common": "\u0645\u0648\u0646\u0679\u06CC\u0646\u06CC\u06AF\u0631\u0648"
            },
            "zho": {
                "official": "\u9ED1\u5C71",
                "common": "\u9ED1\u5C71"
            }
        },
        "latlng": [
            42.5,
            19.3
        ],
        "landlocked": false,
        "borders": [
            "ALB",
            "BIH",
            "HRV",
            "UNK",
            "SRB"
        ],
        "area": 13812,
        "demonyms": {
            "eng": {
                "f": "Montenegrin",
                "m": "Montenegrin"
            },
            "fra": {
                "f": "Mont\xe9n\xe9grine",
                "m": "Mont\xe9n\xe9grin"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDEA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/4THX1fM7WqANuPbB8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/53296"
        },
        "population": 621718,
        "gini": {
            "2016": 38.5
        },
        "fifa": "MNE",
        "car": {
            "signs": [
                "SCG"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/me.png",
            "svg": "https://flagcdn.com/me.svg",
            "alt": "The flag of Montenegro features a large red central rectangular area surrounded by a golden-yellow border. The coat of arms of Montenegro is centered in the red rectangle."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/me.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/me.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                42.43,
                19.27
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "United States Virgin Islands",
            "official": "Virgin Islands of the United States",
            "nativeName": {
                "eng": {
                    "official": "Virgin Islands of the United States",
                    "common": "United States Virgin Islands"
                }
            }
        },
        "tld": [
            ".vi"
        ],
        "cca2": "VI",
        "ccn3": "850",
        "cca3": "VIR",
        "cioc": "ISV",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "340"
            ]
        },
        "capital": [
            "Charlotte Amalie"
        ],
        "altSpellings": [
            "VI",
            "Virgin Islands, U.S."
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0632\u0631 \u0627\u0644\u0639\u0630\u0631\u0627\u0621 \u0627\u0644\u0627\u0645\u0631\u064A\u0643\u064A\u0629",
                "common": "\u062C\u0632\u0631 \u0627\u0644\u0639\u0630\u0631\u0627\u0621 \u0627\u0644\u0627\u0645\u0631\u064A\u0643\u064A\u0629"
            },
            "bre": {
                "official": "Inizi Gwerc'h ar Stado\xf9-Unanet",
                "common": "Inizi Gwerc'h ar Stado\xf9-Unanet"
            },
            "ces": {
                "official": "Americk\xe9 Panensk\xe9 ostrovy",
                "common": "Americk\xe9 Panensk\xe9 ostrovy"
            },
            "cym": {
                "official": "Virgin Islands of the United States",
                "common": "United States Virgin Islands"
            },
            "deu": {
                "official": "Amerikanische Jungferninseln",
                "common": "Amerikanische Jungferninseln"
            },
            "est": {
                "official": "\xdchendriikide Neitsisaared",
                "common": "Neitsisaared, USA"
            },
            "fin": {
                "official": "Yhdysvaltain Neitsytsaaret",
                "common": "Neitsytsaaret"
            },
            "fra": {
                "official": "\xceles Vierges des \xc9tats-Unis",
                "common": "\xceles Vierges des \xc9tats-Unis"
            },
            "hrv": {
                "official": "Djevi\u010Danski Otoci SAD",
                "common": "Ameri\u010Dki Djevi\u010Danski Otoci"
            },
            "hun": {
                "official": "Amerikai Virgin-szigetek",
                "common": "Amerikai Virgin-szigetek"
            },
            "ita": {
                "official": "Isole Vergini degli Stati Uniti",
                "common": "Isole Vergini americane"
            },
            "jpn": {
                "official": "\u7C73\u56FD\u306E\u30D0\u30FC\u30B8\u30F3\u8AF8\u5CF6",
                "common": "\u30A2\u30E1\u30EA\u30AB\u9818\u30F4\u30A1\u30FC\u30B8\u30F3\u8AF8\u5CF6"
            },
            "kor": {
                "official": "\uBBF8\uAD6D\uB839 \uBC84\uC9C4\uC544\uC77C\uB79C\uB4DC",
                "common": "\uBBF8\uAD6D\uB839 \uBC84\uC9C4\uC544\uC77C\uB79C\uB4DC"
            },
            "nld": {
                "official": "Maagdeneilanden van de Verenigde Staten",
                "common": "Amerikaanse Maagdeneilanden"
            },
            "per": {
                "official": "\u062C\u0632\u0627\u06CC\u0631 \u0648\u06CC\u0631\u062C\u06CC\u0646 \u0627\u06CC\u0627\u0644\u0627\u062A \u0645\u062A\u062D\u062F\u0647 \u0622\u0645\u0631\u06CC\u06A9\u0627",
                "common": "\u062C\u0632\u0627\u06CC\u0631 \u0648\u06CC\u0631\u062C\u06CC\u0646 \u0627\u06CC\u0627\u0644\u0627\u062A \u0645\u062A\u062D\u062F\u0647 \u0622\u0645\u0631\u06CC\u06A9\u0627"
            },
            "pol": {
                "official": "Wyspy Dziewicze Stan\xf3w Zjednoczonych",
                "common": "Wyspy Dziewicze Stan\xf3w Zjednoczonych"
            },
            "por": {
                "official": "Ilhas Virgens dos Estados Unidos",
                "common": "Ilhas Virgens dos Estados Unidos"
            },
            "rus": {
                "official": "\u0412\u0438\u0440\u0433\u0438\u043D\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430 \u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u043D\u044B\u0445 \u0428\u0442\u0430\u0442\u043E\u0432",
                "common": "\u0412\u0438\u0440\u0433\u0438\u043D\u0441\u043A\u0438\u0435 \u041E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            "slk": {
                "official": "Americk\xe9 Panensk\xe9 ostrovy",
                "common": "Americk\xe9 Panensk\xe9 ostrovy"
            },
            "spa": {
                "official": "Islas V\xedrgenes de los Estados Unidos",
                "common": "Islas V\xedrgenes de los Estados Unidos"
            },
            "srp": {
                "official": "\u0410\u043C\u0435\u0440\u0438\u0447\u043A\u0430 \u0414\u0435\u0432\u0438\u0447\u0430\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                "common": "\u0410\u043C\u0435\u0440\u0438\u0447\u043A\u0430 \u0414\u0435\u0432\u0438\u0447\u0430\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            "swe": {
                "official": "Amerikanska Jungfru\xf6arna",
                "common": "Amerikanska Jungfru\xf6arna"
            },
            "tur": {
                "official": "Amerika Birle\u015Fik Devletleri Virjin Adalar\u0131",
                "common": "ABD Virjin Adalar\u0131"
            },
            "urd": {
                "official": "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u062C\u0632\u0627\u0626\u0631 \u0648\u0631\u062C\u0646",
                "common": "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u062C\u0632\u0627\u0626\u0631 \u0648\u0631\u062C\u0646"
            },
            "zho": {
                "official": "\u7F8E\u5C5E\u7EF4\u5C14\u4EAC\u7FA4\u5C9B",
                "common": "\u7F8E\u5C5E\u7EF4\u5C14\u4EAC\u7FA4\u5C9B"
            }
        },
        "latlng": [
            18.35,
            -64.933333
        ],
        "landlocked": false,
        "area": 347,
        "demonyms": {
            "eng": {
                "f": "Virgin Islander",
                "m": "Virgin Islander"
            }
        },
        "flag": "\uD83C\uDDFB\uD83C\uDDEE",
        "maps": {
            "googleMaps": "https://goo.gl/maps/mBfreywj8dor6q4m9",
            "openStreetMaps": "openstreetmap.org/relation/286898"
        },
        "population": 106290,
        "fifa": "VIR",
        "car": {
            "signs": [
                "USA"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/vi.png",
            "svg": "https://flagcdn.com/vi.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                18.35,
                -64.93
            ]
        }
    },
    {
        "name": {
            "common": "Cameroon",
            "official": "Republic of Cameroon",
            "nativeName": {
                "eng": {
                    "official": "Republic of Cameroon",
                    "common": "Cameroon"
                },
                "fra": {
                    "official": "R\xe9publique du Cameroun",
                    "common": "Cameroun"
                }
            }
        },
        "tld": [
            ".cm"
        ],
        "cca2": "CM",
        "ccn3": "120",
        "cca3": "CMR",
        "cioc": "CMR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "XAF": {
                "name": "Central African CFA franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "37"
            ]
        },
        "capital": [
            "Yaound\xe9"
        ],
        "altSpellings": [
            "CM",
            "Republic of Cameroon",
            "R\xe9publique du Cameroun"
        ],
        "region": "Africa",
        "subregion": "Middle Africa",
        "languages": {
            "eng": "English",
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0643\u0627\u0645\u064A\u0631\u0648\u0646",
                "common": "\u0627\u0644\u0643\u0627\u0645\u064A\u0631\u0648\u0646"
            },
            "bre": {
                "official": "Republik Kameroun",
                "common": "Kameroun"
            },
            "ces": {
                "official": "Kamerunsk\xe1 republika",
                "common": "Kamerun"
            },
            "cym": {
                "official": "Gweriniaeth Camer\u0175n",
                "common": "Camer\u0175n"
            },
            "deu": {
                "official": "Republik Kamerun",
                "common": "Kamerun"
            },
            "est": {
                "official": "Kameruni Vabariik",
                "common": "Kamerun"
            },
            "fin": {
                "official": "Kamerunin tasavalta",
                "common": "Kamerun"
            },
            "fra": {
                "official": "R\xe9publique du Cameroun",
                "common": "Cameroun"
            },
            "hrv": {
                "official": "Republika Kamerun",
                "common": "Kamerun"
            },
            "hun": {
                "official": "Kameruni K\xf6zt\xe1rsas\xe1g",
                "common": "Kamerun"
            },
            "ita": {
                "official": "Repubblica del Camerun",
                "common": "Camerun"
            },
            "jpn": {
                "official": "\u30AB\u30E1\u30EB\u30FC\u30F3\u5171\u548C\u56FD",
                "common": "\u30AB\u30E1\u30EB\u30FC\u30F3"
            },
            "kor": {
                "official": "\uCE74\uBA54\uB8EC \uACF5\uD654\uAD6D",
                "common": "\uCE74\uBA54\uB8EC"
            },
            "nld": {
                "official": "Republiek Kameroen",
                "common": "Kameroen"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u0627\u0645\u0650\u0631\u0648\u0646",
                "common": "\u06A9\u0627\u0645\u0650\u0631\u0648\u0646"
            },
            "pol": {
                "official": "Republika Kamerunu",
                "common": "Kamerun"
            },
            "por": {
                "official": "Rep\xfablica dos Camar\xf5es",
                "common": "Camar\xf5es"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0430\u043C\u0435\u0440\u0443\u043D",
                "common": "\u041A\u0430\u043C\u0435\u0440\u0443\u043D"
            },
            "slk": {
                "official": "Kamerunsk\xe1 republika",
                "common": "Kamerun"
            },
            "spa": {
                "official": "Rep\xfablica de Camer\xfan",
                "common": "Camer\xfan"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0430\u043C\u0435\u0440\u0443\u043D",
                "common": "\u041A\u0430\u043C\u0435\u0440\u0443\u043D"
            },
            "swe": {
                "official": "Republiken Kamerun",
                "common": "Kamerun"
            },
            "tur": {
                "official": "Kamerun Cumhuriyeti",
                "common": "Kamerun"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u06CC\u0645\u0631\u0648\u0646",
                "common": "\u06A9\u06CC\u0645\u0631\u0648\u0646"
            },
            "zho": {
                "official": "\u5580\u9EA6\u9686\u5171\u548C\u56FD",
                "common": "\u5580\u9EA6\u9686"
            }
        },
        "latlng": [
            6,
            12
        ],
        "landlocked": false,
        "borders": [
            "CAF",
            "TCD",
            "COG",
            "GNQ",
            "GAB",
            "NGA"
        ],
        "area": 475442,
        "demonyms": {
            "eng": {
                "f": "Cameroonian",
                "m": "Cameroonian"
            },
            "fra": {
                "f": "Camerounaise",
                "m": "Camerounais"
            }
        },
        "flag": "\uD83C\uDDE8\uD83C\uDDF2",
        "maps": {
            "googleMaps": "https://goo.gl/maps/JqiipHgFboG3rBJh9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192830"
        },
        "population": 26545864,
        "gini": {
            "2014": 46.6
        },
        "fifa": "CMR",
        "car": {
            "signs": [
                "CAM"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/cm.png",
            "svg": "https://flagcdn.com/cm.svg",
            "alt": "The flag of Cameroon is composed of three equal vertical bands of green, red and yellow, with a yellow five-pointed star in the center."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/cm.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/cm.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                3.85,
                11.5
            ]
        }
    },
    {
        "name": {
            "common": "Sri Lanka",
            "official": "Democratic Socialist Republic of Sri Lanka",
            "nativeName": {
                "sin": {
                    "official": "\u0DC1\u0DCA\u200D\u0DBB\u0DD3 \u0DBD\u0D82\u0D9A\u0DCF \u0DB4\u0DCA\u200D\u0DBB\u0DA2\u0DCF\u0DAD\u0DCF\u0DB1\u0DCA\u0DAD\u0DCA\u200D\u0DBB\u0DD2\u0D9A \u0DC3\u0DB8\u0DCF\u0DA2\u0DC0\u0DCF\u0DAF\u0DD3 \u0DA2\u0DB1\u0DBB\u0DA2\u0DBA",
                    "common": "\u0DC1\u0DCA\u200D\u0DBB\u0DD3 \u0DBD\u0D82\u0D9A\u0DCF\u0DC0"
                },
                "tam": {
                    "official": "\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8 \u0B9A\u0BA9\u0BA8\u0BBE\u0BAF\u0B95 \u0B9A\u0BCB\u0B9A\u0BB2\u0BBF\u0B9A\u0B95\u0BCD \u0B95\u0BC1\u0B9F\u0BBF\u0BAF\u0BB0\u0B9A\u0BC1",
                    "common": "\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8"
                }
            }
        },
        "tld": [
            ".lk",
            ".\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8",
            ".\u0DBD\u0D82\u0D9A\u0DCF"
        ],
        "cca2": "LK",
        "ccn3": "144",
        "cca3": "LKA",
        "cioc": "SRI",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "LKR": {
                "name": "Sri Lankan rupee",
                "symbol": "Rs  \u0DBB\u0DD4"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "4"
            ]
        },
        "capital": [
            "Sri Jayawardenepura Kotte"
        ],
        "altSpellings": [
            "LK",
            "ila\u1E45kai",
            "Democratic Socialist Republic of Sri Lanka"
        ],
        "region": "Asia",
        "subregion": "Southern Asia",
        "languages": {
            "sin": "Sinhala",
            "tam": "Tamil"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u0631\u064A\u0644\u0627\u0646\u0643\u0627 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629 \u0627\u0644\u0634\u0639\u0628\u064A\u0629",
                "common": "\u0633\u0631\u064A\u0644\u0627\u0646\u0643\u0627"
            },
            "bre": {
                "official": "Republik Demokratel ha Sokialour Sri Lanka",
                "common": "Sri Lanka"
            },
            "ces": {
                "official": "Sr\xedlansk\xe1 demokratick\xe1 socialistick\xe1 republika",
                "common": "Sr\xed Lanka"
            },
            "cym": {
                "official": "Democratic Socialist Republic of Sri Lanka",
                "common": "Sri Lanka"
            },
            "deu": {
                "official": "Demokratische Sozialistische Republik Sri Lanka",
                "common": "Sri Lanka"
            },
            "est": {
                "official": "Sri Lanka Demokraatlik Sotsialistlik Vabariik",
                "common": "Sri Lanka"
            },
            "fin": {
                "official": "Sri Lankan demokraattinen sosialistinen tasavalta",
                "common": "Sri Lanka"
            },
            "fra": {
                "official": "R\xe9publique d\xe9mocratique socialiste du Sri Lanka",
                "common": "Sri Lanka"
            },
            "hrv": {
                "official": "Demokratska Socijalisti\u010Dke Republike \u0160ri Lanke",
                "common": "\u0160ri Lanka"
            },
            "hun": {
                "official": "Sr\xed Lanka-i Demokratikus Szocialista K\xf6zt\xe1rsas\xe1g",
                "common": "Sr\xed Lanka"
            },
            "ita": {
                "official": "Repubblica democratica socialista dello Sri Lanka",
                "common": "Sri Lanka"
            },
            "jpn": {
                "official": "\u30B9\u30EA\u30E9\u30F3\u30AB\u6C11\u4E3B\u793E\u4F1A\u4E3B\u7FA9\u5171\u548C\u56FD",
                "common": "\u30B9\u30EA\u30E9\u30F3\u30AB"
            },
            "kor": {
                "official": "\uC2A4\uB9AC\uB791\uCE74 \uBBFC\uC8FC \uC0AC\uD68C\uC8FC\uC758 \uACF5\uD654\uAD6D",
                "common": "\uC2A4\uB9AC\uB791\uCE74"
            },
            "nld": {
                "official": "Democratische Socialistische Republiek Sri Lanka",
                "common": "Sri Lanka"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9 \u0633\u0648\u0633\u06CC\u0627\u0644\u06CC\u0633\u062A\u06CC \u0633\u0631\u06CC\u200C\u0644\u0627\u0646\u06A9\u0627",
                "common": "\u0633\u0631\u06CC\u200C\u0644\u0627\u0646\u06A9\u0627"
            },
            "pol": {
                "official": "Demokratyczno-Socjalistyczna Republika Sri Lanki",
                "common": "Sri Lanka"
            },
            "por": {
                "official": "Rep\xfablica Democr\xe1tica Socialista do Sri Lanka",
                "common": "Sri Lanka"
            },
            "rus": {
                "official": "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0421\u043E\u0446\u0438\u0430\u043B\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0428\u0440\u0438-\u041B\u0430\u043D\u043A\u0430",
                "common": "\u0428\u0440\u0438-\u041B\u0430\u043D\u043A\u0430"
            },
            "slk": {
                "official": "Sr\xedlansk\xe1 demokratick\xe1 socialistick\xe1 republika",
                "common": "Sr\xed Lanka"
            },
            "spa": {
                "official": "Rep\xfablica Democr\xe1tica Socialista de Sri Lanka",
                "common": "Sri Lanka"
            },
            "srp": {
                "official": "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u0421\u043E\u0446\u0438\u0458\u0430\u043B\u0438\u0441\u0442\u0438\u0447\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0440\u0438 \u041B\u0430\u043D\u043A\u0430",
                "common": "\u0421\u0440\u0438 \u041B\u0430\u043D\u043A\u0430"
            },
            "swe": {
                "official": "Demokratiska socialistiska republiken Sri Lanka",
                "common": "Sri Lanka"
            },
            "tur": {
                "official": "Sri Lanka Demokratik Sosyalist Cumhuriyeti",
                "common": "Sri Lanka"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC \u0648 \u0627\u0634\u062A\u0631\u0627\u06A9\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0631\u06CC \u0644\u0646\u06A9\u0627",
                "common": "\u0633\u0631\u06CC \u0644\u0646\u06A9\u0627"
            },
            "zho": {
                "official": "\u65AF\u91CC\u5170\u5361\u6C11\u4E3B\u793E\u4F1A\u4E3B\u4E49\u5171\u548C\u56FD",
                "common": "\u65AF\u91CC\u5170\u5361"
            }
        },
        "latlng": [
            7,
            81
        ],
        "landlocked": false,
        "borders": [
            "IND"
        ],
        "area": 65610,
        "demonyms": {
            "eng": {
                "f": "Sri Lankan",
                "m": "Sri Lankan"
            },
            "fra": {
                "f": "Sri-lankaise",
                "m": "Sri-lankais"
            }
        },
        "flag": "\uD83C\uDDF1\uD83C\uDDF0",
        "maps": {
            "googleMaps": "https://goo.gl/maps/VkPHoeFSfgzRQCDv8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/536807"
        },
        "population": 21919000,
        "gini": {
            "2016": 39.3
        },
        "fifa": "SRI",
        "car": {
            "signs": [
                "CL"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+05:30"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/lk.png",
            "svg": "https://flagcdn.com/lk.svg",
            "alt": "The flag of Sri Lanka features two large adjacent but separate rectangular areas, centered on a golden-yellow field. The smaller hoist-side rectangle is divided into two equal vertical bands of teal and orange, and the larger fly-side rectangle is maroon with a centered golden-yellow lion holding a Kastane sword in its right fore-paw and four golden-yellow Bo leaves, one in each corner."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/lk.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/lk.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                6.89,
                79.9
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "China",
            "official": "People's Republic of China",
            "nativeName": {
                "zho": {
                    "official": "\u4E2D\u534E\u4EBA\u6C11\u5171\u548C\u56FD",
                    "common": "\u4E2D\u56FD"
                }
            }
        },
        "tld": [
            ".cn",
            ".\u4E2D\u56FD",
            ".\u4E2D\u570B",
            ".\u516C\u53F8",
            ".\u7F51\u7EDC"
        ],
        "cca2": "CN",
        "ccn3": "156",
        "cca3": "CHN",
        "cioc": "CHN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "CNY": {
                "name": "Chinese yuan",
                "symbol": "\xa5"
            }
        },
        "idd": {
            "root": "+8",
            "suffixes": [
                "6"
            ]
        },
        "capital": [
            "Beijing"
        ],
        "altSpellings": [
            "CN",
            "Zh\u014Dnggu\xf3",
            "Zhongguo",
            "Zhonghua",
            "People's Republic of China",
            "\u4E2D\u534E\u4EBA\u6C11\u5171\u548C\u56FD",
            "Zh\u014Dnghu\xe1 R\xe9nm\xedn G\xf2ngh\xe9gu\xf3"
        ],
        "region": "Asia",
        "subregion": "Eastern Asia",
        "languages": {
            "zho": "Chinese"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0635\u064A\u0646 \u0627\u0644\u0634\u0639\u0628\u064A\u0629",
                "common": "\u0627\u0644\u0635\u064A\u0646"
            },
            "bre": {
                "official": "Republik Pobl Sina",
                "common": "Sina"
            },
            "ces": {
                "official": "\u010C\xednsk\xe1 lidov\xe1 republika",
                "common": "\u010C\xedna"
            },
            "cym": {
                "official": "Gweriniaeth Pobl Tsieina",
                "common": "Tsieina"
            },
            "deu": {
                "official": "Volksrepublik China",
                "common": "China"
            },
            "est": {
                "official": "Hiina Rahvavabariik",
                "common": "Hiina"
            },
            "fin": {
                "official": "Kiinan kansantasavalta",
                "common": "Kiina"
            },
            "fra": {
                "official": "R\xe9publique populaire de Chine",
                "common": "Chine"
            },
            "hrv": {
                "official": "Narodna Republika Kina",
                "common": "Kina"
            },
            "hun": {
                "official": "K\xednai N\xe9pk\xf6zt\xe1rsas\xe1g",
                "common": "K\xedna"
            },
            "ita": {
                "official": "Repubblica popolare cinese",
                "common": "Cina"
            },
            "jpn": {
                "official": "\u4E2D\u83EF\u4EBA\u6C11\u5171\u548C\u56FD",
                "common": "\u4E2D\u56FD"
            },
            "kor": {
                "official": "\uC911\uD654\uC778\uBBFC\uACF5\uD654\uAD6D",
                "common": "\uC911\uAD6D"
            },
            "nld": {
                "official": "Volksrepubliek China",
                "common": "China"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062E\u0644\u0642 \u0686\u06CC\u0646",
                "common": "\u0686\u06CC\u0646"
            },
            "pol": {
                "official": "Chi\u0144ska Republika Ludowa",
                "common": "Chiny"
            },
            "por": {
                "official": "Rep\xfablica Popular da China",
                "common": "China"
            },
            "rus": {
                "official": "\u041D\u0430\u0440\u043E\u0434\u043D\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0438\u0442\u0430\u0439",
                "common": "\u041A\u0438\u0442\u0430\u0439"
            },
            "slk": {
                "official": "\u010C\xednska \u013Eudov\xe1 republika",
                "common": "\u010C\xedna"
            },
            "spa": {
                "official": "Rep\xfablica Popular de China",
                "common": "China"
            },
            "srp": {
                "official": "\u041D\u0430\u0440\u043E\u0434\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0438\u043D\u0430",
                "common": "\u041A\u0438\u043D\u0430"
            },
            "swe": {
                "official": "Folkrepubliken Kina",
                "common": "Kina"
            },
            "tur": {
                "official": "\xc7in Halk Cumhuriyeti",
                "common": "\xc7in"
            },
            "urd": {
                "official": "\u0639\u0648\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0686\u06CC\u0646",
                "common": "\u0686\u06CC\u0646"
            }
        },
        "latlng": [
            35,
            105
        ],
        "landlocked": false,
        "borders": [
            "AFG",
            "BTN",
            "MMR",
            "HKG",
            "IND",
            "KAZ",
            "NPL",
            "PRK",
            "KGZ",
            "LAO",
            "MAC",
            "MNG",
            "PAK",
            "RUS",
            "TJK",
            "VNM"
        ],
        "area": 9706961,
        "demonyms": {
            "eng": {
                "f": "Chinese",
                "m": "Chinese"
            },
            "fra": {
                "f": "Chinoise",
                "m": "Chinois"
            }
        },
        "flag": "\uD83C\uDDE8\uD83C\uDDF3",
        "maps": {
            "googleMaps": "https://goo.gl/maps/p9qC6vgiFRRXzvGi7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/270056"
        },
        "population": 1402112000,
        "gini": {
            "2016": 38.5
        },
        "fifa": "CHN",
        "car": {
            "signs": [
                "RC"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+08:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/cn.png",
            "svg": "https://flagcdn.com/cn.svg",
            "alt": "The flag of China has a red field. In the canton are five yellow five-pointed stars \u2014 a large star and four smaller stars arranged in a vertical arc on the fly side of the large star."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/cn.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/cn.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                39.92,
                116.38
            ]
        },
        "postalCode": {
            "format": "######",
            "regex": "^(\\d{6})$"
        }
    },
    {
        "name": {
            "common": "Bangladesh",
            "official": "People's Republic of Bangladesh",
            "nativeName": {
                "ben": {
                    "official": "\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6 \u0997\u09A3\u09AA\u09CD\u09B0\u099C\u09BE\u09A4\u09A8\u09CD\u09A4\u09CD\u09B0\u09C0",
                    "common": "\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6"
                }
            }
        },
        "tld": [
            ".bd"
        ],
        "cca2": "BD",
        "ccn3": "050",
        "cca3": "BGD",
        "cioc": "BAN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "BDT": {
                "name": "Bangladeshi taka",
                "symbol": "\u09F3"
            }
        },
        "idd": {
            "root": "+8",
            "suffixes": [
                "80"
            ]
        },
        "capital": [
            "Dhaka"
        ],
        "altSpellings": [
            "BD",
            "People's Republic of Bangladesh",
            "G\xf4n\xf4pr\xf4jat\xf4ntri Bangladesh"
        ],
        "region": "Asia",
        "subregion": "Southern Asia",
        "languages": {
            "ben": "Bengali"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u0646\u063A\u0644\u0627\u062F\u064A\u0634 \u0627\u0644\u0634\u0639\u0628\u064A\u0629",
                "common": "\u0628\u0646\u063A\u0644\u0627\u062F\u064A\u0634"
            },
            "bre": {
                "official": "Republik pobl Bangladesh",
                "common": "Bangladesh"
            },
            "ces": {
                "official": "Banglad\xe9\u0161sk\xe1 lidov\xe1 republika",
                "common": "Banglad\xe9\u0161"
            },
            "cym": {
                "official": "Gweriniaeth Pobl Bangladesh",
                "common": "Bangladesh"
            },
            "deu": {
                "official": "Volksrepublik Bangladesch",
                "common": "Bangladesch"
            },
            "est": {
                "official": "Bangladeshi Rahvavabariik",
                "common": "Bangladesh"
            },
            "fin": {
                "official": "Bangladeshin kansantasavalta",
                "common": "Bangladesh"
            },
            "fra": {
                "official": "La R\xe9publique populaire du Bangladesh",
                "common": "Bangladesh"
            },
            "hrv": {
                "official": "Narodna Republika Banglade\u0161",
                "common": "Banglade\u0161"
            },
            "hun": {
                "official": "Banglades",
                "common": "Banglades"
            },
            "ita": {
                "official": "Repubblica popolare del Bangladesh",
                "common": "Bangladesh"
            },
            "jpn": {
                "official": "\u30D0\u30F3\u30B0\u30E9\u30C7\u30B7\u30E5\u4EBA\u6C11\u5171\u548C\u56FD",
                "common": "\u30D0\u30F3\u30B0\u30E9\u30C7\u30B7\u30E5"
            },
            "kor": {
                "official": "\uBC29\uAE00\uB77C\uB370\uC2DC \uC778\uBBFC \uACF5\uD654\uAD6D",
                "common": "\uBC29\uAE00\uB77C\uB370\uC2DC"
            },
            "nld": {
                "official": "Volksrepubliek Bangladesh",
                "common": "Bangladesh"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062E\u0644\u0642 \u0628\u0646\u06AF\u0644\u0627\u062F\u0634",
                "common": "\u0628\u0646\u06AF\u0644\u0627\u062F\u0634"
            },
            "pol": {
                "official": "Ludowa Republika Bangladeszu",
                "common": "Bangladesz"
            },
            "por": {
                "official": "Rep\xfablica Popular do Bangladesh",
                "common": "Bangladesh"
            },
            "rus": {
                "official": "\u041D\u0430\u0440\u043E\u0434\u043D\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0430\u043D\u0433\u043B\u0430\u0434\u0435\u0448",
                "common": "\u0411\u0430\u043D\u0433\u043B\u0430\u0434\u0435\u0448"
            },
            "slk": {
                "official": "Banglad\xe9\u0161ska \u013Eudov\xe1 republika",
                "common": "Banglad\xe9\u0161"
            },
            "spa": {
                "official": "Rep\xfablica Popular de Bangladesh",
                "common": "Bangladesh"
            },
            "srp": {
                "official": "\u041D\u0430\u0440\u043E\u0434\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0430\u043D\u0433\u043B\u0430\u0434\u0435\u0448",
                "common": "\u0411\u0430\u043D\u0433\u043B\u0430\u0434\u0435\u0448"
            },
            "swe": {
                "official": "Folkrepubliken Bangladesh",
                "common": "Bangladesh"
            },
            "tur": {
                "official": "Banglade\u015F Halk Cumhuriyeti",
                "common": "Banglade\u015F"
            },
            "urd": {
                "official": "\u0639\u0648\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0628\u0646\u06AF\u0644\u06C1 \u062F\u06CC\u0634",
                "common": "\u0628\u0646\u06AF\u0644\u06C1 \u062F\u06CC\u0634"
            },
            "zho": {
                "official": "\u5B5F\u52A0\u62C9\u4EBA\u6C11\u5171\u548C\u56FD",
                "common": "\u5B5F\u52A0\u62C9\u56FD"
            }
        },
        "latlng": [
            24,
            90
        ],
        "landlocked": false,
        "borders": [
            "MMR",
            "IND"
        ],
        "area": 147570,
        "demonyms": {
            "eng": {
                "f": "Bangladeshi",
                "m": "Bangladeshi"
            },
            "fra": {
                "f": "Bangladaise",
                "m": "Bangladais"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDE9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/op6gmLbHcvv6rLhH6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/184640"
        },
        "population": 164689383,
        "gini": {
            "2016": 32.4
        },
        "fifa": "BAN",
        "car": {
            "signs": [
                "BD"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+06:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/bd.png",
            "svg": "https://flagcdn.com/bd.svg",
            "alt": "The flag of Bangladesh has a dark green field bearing a large red circle that is offset slightly towards the hoist side of center."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/bd.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/bd.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                23.72,
                90.4
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Sweden",
            "official": "Kingdom of Sweden",
            "nativeName": {
                "swe": {
                    "official": "Konungariket Sverige",
                    "common": "Sverige"
                }
            }
        },
        "tld": [
            ".se"
        ],
        "cca2": "SE",
        "ccn3": "752",
        "cca3": "SWE",
        "cioc": "SWE",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "SEK": {
                "name": "Swedish krona",
                "symbol": "kr"
            }
        },
        "idd": {
            "root": "+4",
            "suffixes": [
                "6"
            ]
        },
        "capital": [
            "Stockholm"
        ],
        "altSpellings": [
            "SE",
            "Kingdom of Sweden",
            "Konungariket Sverige"
        ],
        "region": "Europe",
        "subregion": "Northern Europe",
        "languages": {
            "swe": "Swedish"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0633\u0648\u064A\u062F",
                "common": "\u0627\u0644\u0633\u0648\u064A\u062F"
            },
            "bre": {
                "official": "Rouantelezh Sveden",
                "common": "Sveden"
            },
            "ces": {
                "official": "\u0160v\xe9dsk\xe9 kr\xe1lovstv\xed",
                "common": "\u0160v\xe9dsko"
            },
            "cym": {
                "official": "Kingdom of Sweden",
                "common": "Sweden"
            },
            "deu": {
                "official": "K\xf6nigreich Schweden",
                "common": "Schweden"
            },
            "est": {
                "official": "Rootsi Kuningriik",
                "common": "Rootsi"
            },
            "fin": {
                "official": "Ruotsin kuningaskunta",
                "common": "Ruotsi"
            },
            "fra": {
                "official": "Royaume de Su\xe8de",
                "common": "Su\xe8de"
            },
            "hrv": {
                "official": "Kraljevina \u0160vedska",
                "common": "\u0160vedska"
            },
            "hun": {
                "official": "Sv\xe9d Kir\xe1lys\xe1g",
                "common": "Sv\xe9dorsz\xe1g"
            },
            "ita": {
                "official": "Regno di Svezia",
                "common": "Svezia"
            },
            "jpn": {
                "official": "\u30B9\u30A6\u30A7\u30FC\u30C7\u30F3\u738B\u56FD",
                "common": "\u30B9\u30A6\u30A7\u30FC\u30C7\u30F3"
            },
            "kor": {
                "official": "\uC2A4\uC6E8\uB374 \uC655\uAD6D",
                "common": "\uC2A4\uC6E8\uB374"
            },
            "nld": {
                "official": "Koninkrijk Zweden",
                "common": "Zweden"
            },
            "per": {
                "official": "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0633\u0648\u0626\u062F",
                "common": "\u0633\u0648\u0626\u062F"
            },
            "pol": {
                "official": "Kr\xf3lestwo Szwecji",
                "common": "Szwecja"
            },
            "por": {
                "official": "Reino da Su\xe9cia",
                "common": "Su\xe9cia"
            },
            "rus": {
                "official": "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0428\u0432\u0435\u0446\u0438\u044F",
                "common": "\u0428\u0432\u0435\u0446\u0438\u044F"
            },
            "slk": {
                "official": "\u0160v\xe9dske kr\xe1\u013Eovstvo",
                "common": "\u0160v\xe9dsko"
            },
            "spa": {
                "official": "Reino de Suecia",
                "common": "Suecia"
            },
            "srp": {
                "official": "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0428\u0432\u0435\u0434\u0441\u043A\u0430",
                "common": "\u0428\u0432\u0435\u0434\u0441\u043A\u0430"
            },
            "swe": {
                "official": "Konungariket Sverige",
                "common": "Sverige"
            },
            "tur": {
                "official": "\u0130sve\xe7 Krall\u0131\u011F\u0131",
                "common": "\u0130sve\xe7"
            },
            "urd": {
                "official": "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0633\u0648\u06CC\u0688\u0646",
                "common": "\u0633\u0648\u06CC\u0688\u0646"
            },
            "zho": {
                "official": "\u745E\u5178\u738B\u56FD",
                "common": "\u745E\u5178"
            }
        },
        "latlng": [
            62,
            15
        ],
        "landlocked": false,
        "borders": [
            "FIN",
            "NOR"
        ],
        "area": 450295,
        "demonyms": {
            "eng": {
                "f": "Swedish",
                "m": "Swedish"
            },
            "fra": {
                "f": "Su\xe9doise",
                "m": "Su\xe9dois"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDEA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/iqygE491ADVgnBW39",
            "openStreetMaps": "https://www.openstreetmap.org/relation/52822"
        },
        "population": 10353442,
        "gini": {
            "2018": 30
        },
        "fifa": "SWE",
        "car": {
            "signs": [
                "S"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/se.png",
            "svg": "https://flagcdn.com/se.svg",
            "alt": "The flag of Sweden has a blue field with a large golden-yellow cross that extend to the edges of the field. The vertical part of this cross is offset towards the hoist side."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/se.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/se.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                59.33,
                18.05
            ]
        },
        "postalCode": {
            "format": "SE-### ##",
            "regex": "^(?:SE)*(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Grenada",
            "official": "Grenada",
            "nativeName": {
                "eng": {
                    "official": "Grenada",
                    "common": "Grenada"
                }
            }
        },
        "tld": [
            ".gd"
        ],
        "cca2": "GD",
        "ccn3": "308",
        "cca3": "GRD",
        "cioc": "GRN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "XCD": {
                "name": "Eastern Caribbean dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "473"
            ]
        },
        "capital": [
            "St. George's"
        ],
        "altSpellings": [
            "GD"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u063A\u0631\u064A\u0646\u0627\u062F\u0627",
                "common": "\u063A\u0631\u064A\u0646\u0627\u062F\u0627"
            },
            "bre": {
                "official": "Grenada",
                "common": "Grenada"
            },
            "ces": {
                "official": "Grenada",
                "common": "Grenada"
            },
            "cym": {
                "official": "Grenada",
                "common": "Grenada"
            },
            "deu": {
                "official": "Grenada",
                "common": "Grenada"
            },
            "est": {
                "official": "Grenada",
                "common": "Grenada"
            },
            "fin": {
                "official": "Grenada",
                "common": "Grenada"
            },
            "fra": {
                "official": "Grenade",
                "common": "Grenade"
            },
            "hrv": {
                "official": "Grenada",
                "common": "Grenada"
            },
            "hun": {
                "official": "Grenada",
                "common": "Grenada"
            },
            "ita": {
                "official": "Grenada",
                "common": "Grenada"
            },
            "jpn": {
                "official": "\u30B0\u30EC\u30CA\u30C0",
                "common": "\u30B0\u30EC\u30CA\u30C0"
            },
            "kor": {
                "official": "\uADF8\uB808\uB098\uB2E4",
                "common": "\uADF8\uB808\uB098\uB2E4"
            },
            "nld": {
                "official": "Grenada",
                "common": "Grenada"
            },
            "per": {
                "official": "\u06AF\u0631\u0646\u0627\u062F\u0627",
                "common": "\u06AF\u0631\u0646\u0627\u062F\u0627"
            },
            "pol": {
                "official": "Grenada",
                "common": "Grenada"
            },
            "por": {
                "official": "Grenada",
                "common": "Granada"
            },
            "rus": {
                "official": "\u0413\u0440\u0435\u043D\u0430\u0434\u0430",
                "common": "\u0413\u0440\u0435\u043D\u0430\u0434\u0430"
            },
            "slk": {
                "official": "Grenada",
                "common": "Grenada"
            },
            "spa": {
                "official": "Granada",
                "common": "Grenada"
            },
            "srp": {
                "official": "\u0413\u0440\u0435\u043D\u0430\u0434\u0430",
                "common": "\u0413\u0440\u0435\u043D\u0430\u0434\u0430"
            },
            "swe": {
                "official": "Grenada",
                "common": "Grenada"
            },
            "tur": {
                "official": "Grenada",
                "common": "Grenada"
            },
            "urd": {
                "official": "\u06AF\u0631\u06CC\u0646\u0627\u0688\u0627",
                "common": "\u06AF\u0631\u06CC\u0646\u0627\u0688\u0627"
            },
            "zho": {
                "official": "\u683C\u6797\u7EB3\u8FBE",
                "common": "\u683C\u6797\u7EB3\u8FBE"
            }
        },
        "latlng": [
            12.11666666,
            -61.66666666
        ],
        "landlocked": false,
        "area": 344,
        "demonyms": {
            "eng": {
                "f": "Grenadian",
                "m": "Grenadian"
            },
            "fra": {
                "f": "Grenadienne",
                "m": "Grenadien"
            }
        },
        "flag": "\uD83C\uDDEC\uD83C\uDDE9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/rqWyfUAt4xhvk1Zy9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/550727"
        },
        "population": 112519,
        "fifa": "GRN",
        "car": {
            "signs": [
                "WG"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/gd.png",
            "svg": "https://flagcdn.com/gd.svg",
            "alt": "The flag of Grenada features a large central rectangular area surrounded by a red border, with three five-pointed yellow stars centered on the top and bottom borders. The central rectangle is divided diagonally into four alternating triangular areas of yellow at the top and bottom and green on the hoist and fly sides, and a five-pointed yellow star on a red circle is superimposed at its center. A symbolic nutmeg pod is situated on the green hoist-side triangle."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/gd.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/gd.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                32.38,
                -64.68
            ]
        }
    },
    {
        "name": {
            "common": "Turkey",
            "official": "Republic of Turkey",
            "nativeName": {
                "tur": {
                    "official": "T\xfcrkiye Cumhuriyeti",
                    "common": "T\xfcrkiye"
                }
            }
        },
        "tld": [
            ".tr"
        ],
        "cca2": "TR",
        "ccn3": "792",
        "cca3": "TUR",
        "cioc": "TUR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "TRY": {
                "name": "Turkish lira",
                "symbol": "\u20BA"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "0"
            ]
        },
        "capital": [
            "Ankara"
        ],
        "altSpellings": [
            "TR",
            "Turkiye",
            "Republic of Turkey",
            "T\xfcrkiye Cumhuriyeti"
        ],
        "region": "Asia",
        "subregion": "Western Asia",
        "languages": {
            "tur": "Turkish"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u062A\u0631\u0643\u064A\u0629",
                "common": "\u062A\u0631\u0643\u064A\u0627"
            },
            "bre": {
                "official": "Republik Turkia",
                "common": "Turkia"
            },
            "ces": {
                "official": "Tureck\xe1 republika",
                "common": "Turecko"
            },
            "cym": {
                "official": "Republic of Turkey",
                "common": "Turkey"
            },
            "deu": {
                "official": "Republik T\xfcrkei",
                "common": "T\xfcrkei"
            },
            "est": {
                "official": "T\xfcrgi Vabariik",
                "common": "T\xfcrgi"
            },
            "fin": {
                "official": "Turkin tasavalta",
                "common": "Turkki"
            },
            "fra": {
                "official": "R\xe9publique de Turquie",
                "common": "Turquie"
            },
            "hrv": {
                "official": "Republika Turska",
                "common": "Turska"
            },
            "hun": {
                "official": "T\xf6r\xf6k K\xf6zt\xe1rsas\xe1g",
                "common": "T\xf6r\xf6korsz\xe1g"
            },
            "ita": {
                "official": "Repubblica di Turchia",
                "common": "Turchia"
            },
            "jpn": {
                "official": "\u30C8\u30EB\u30B3\u5171\u548C\u56FD",
                "common": "\u30C8\u30EB\u30B3"
            },
            "kor": {
                "official": "\uD130\uD0A4 \uACF5\uD654\uAD6D",
                "common": "\uD130\uD0A4"
            },
            "nld": {
                "official": "Republiek Turkije",
                "common": "Turkije"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062A\u0631\u06A9\u06CC\u0647",
                "common": "\u062A\u0631\u06A9\u06CC\u0647"
            },
            "pol": {
                "official": "Republika Turcji",
                "common": "Turcja"
            },
            "por": {
                "official": "Rep\xfablica da Turquia",
                "common": "Turquia"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u0443\u0440\u0446\u0438\u0438",
                "common": "\u0422\u0443\u0440\u0446\u0438\u044F"
            },
            "slk": {
                "official": "Tureck\xe1 republika",
                "common": "Turecko"
            },
            "spa": {
                "official": "Rep\xfablica de Turqu\xeda",
                "common": "Turqu\xeda"
            },
            "srp": {
                "official": "\u0422\u0443\u0440\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0422\u0443\u0440\u0441\u043A\u0430"
            },
            "swe": {
                "official": "Republiken Turkiet",
                "common": "Turkiet"
            },
            "tur": {
                "official": "T\xfcrkiye Cumhuriyeti",
                "common": "T\xfcrkiye"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062A\u0631\u06A9\u06CC",
                "common": "\u062A\u0631\u06A9\u06CC"
            },
            "zho": {
                "official": "\u571F\u8033\u5176\u5171\u548C\u56FD",
                "common": "\u571F\u8033\u5176"
            }
        },
        "latlng": [
            39,
            35
        ],
        "landlocked": false,
        "borders": [
            "ARM",
            "AZE",
            "BGR",
            "GEO",
            "GRC",
            "IRN",
            "IRQ",
            "SYR"
        ],
        "area": 783562,
        "demonyms": {
            "eng": {
                "f": "Turkish",
                "m": "Turkish"
            },
            "fra": {
                "f": "Turque",
                "m": "Turc"
            }
        },
        "flag": "\uD83C\uDDF9\uD83C\uDDF7",
        "maps": {
            "googleMaps": "https://goo.gl/maps/dXFFraiUDfcB6Quk6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/174737"
        },
        "population": 84339067,
        "gini": {
            "2019": 41.9
        },
        "fifa": "TUR",
        "car": {
            "signs": [
                "TR"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Europe",
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/tr.png",
            "svg": "https://flagcdn.com/tr.svg",
            "alt": "The flag of Turkey has a red field bearing a large fly-side facing white crescent and a smaller five-pointed white star placed just outside the crescent opening. The white crescent and star are offset slightly towards the hoist side of center."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/tr.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/tr.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                39.93,
                32.87
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Guinea",
            "official": "Republic of Guinea",
            "nativeName": {
                "fra": {
                    "official": "R\xe9publique de Guin\xe9e",
                    "common": "Guin\xe9e"
                }
            }
        },
        "tld": [
            ".gn"
        ],
        "cca2": "GN",
        "ccn3": "324",
        "cca3": "GIN",
        "cioc": "GUI",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "GNF": {
                "name": "Guinean franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "24"
            ]
        },
        "capital": [
            "Conakry"
        ],
        "altSpellings": [
            "GN",
            "Republic of Guinea",
            "R\xe9publique de Guin\xe9e"
        ],
        "region": "Africa",
        "subregion": "Western Africa",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u063A\u064A\u0646\u064A\u0627",
                "common": "\u063A\u064A\u0646\u064A\u0627"
            },
            "bre": {
                "official": "Republik Ginea",
                "common": "Ginea"
            },
            "ces": {
                "official": "Guinejsk\xe1 republika",
                "common": "Guinea"
            },
            "cym": {
                "official": "Republic of Guinea",
                "common": "Guinea"
            },
            "deu": {
                "official": "Republik Guinea",
                "common": "Guinea"
            },
            "est": {
                "official": "Guinea Vabariik",
                "common": "Guinea"
            },
            "fin": {
                "official": "Guinean tasavalta",
                "common": "Guinea"
            },
            "fra": {
                "official": "R\xe9publique de Guin\xe9e",
                "common": "Guin\xe9e"
            },
            "hrv": {
                "official": "Republika Gvineja",
                "common": "Gvineja"
            },
            "hun": {
                "official": "Guineai K\xf6zt\xe1rsas\xe1g",
                "common": "Guinea"
            },
            "ita": {
                "official": "Repubblica di Guinea",
                "common": "Guinea"
            },
            "jpn": {
                "official": "\u30AE\u30CB\u30A2\u5171\u548C\u56FD",
                "common": "\u30AE\u30CB\u30A2"
            },
            "kor": {
                "official": "\uAE30\uB2C8 \uACF5\uD654\uAD6D",
                "common": "\uAE30\uB2C8"
            },
            "nld": {
                "official": "Republiek Guinee",
                "common": "Guinee"
            },
            "per": {
                "official": "\u0645\u0645\u0644\u06A9\u062A \u0645\u0633\u062A\u0642\u0644 \u067E\u0627\u067E\u0648\u0622 \u06AF\u06CC\u0646\u0647 \u0646\u0648",
                "common": "\u067E\u0627\u067E\u0648\u0622 \u06AF\u06CC\u0646\u0647 \u0646\u0648"
            },
            "pol": {
                "official": "Republika Gwinei",
                "common": "Gwinea"
            },
            "por": {
                "official": "Rep\xfablica da Guin\xe9",
                "common": "Guin\xe9"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0432\u0438\u043D\u0435\u044F",
                "common": "\u0413\u0432\u0438\u043D\u0435\u044F"
            },
            "slk": {
                "official": "Guinejsk\xe1 republika",
                "common": "Guinea"
            },
            "spa": {
                "official": "Rep\xfablica de Guinea",
                "common": "Guinea"
            },
            "srp": {
                "official": "\u041A\u043E\u043E\u043F\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0432\u0430\u0458\u0430\u043D\u0430",
                "common": "\u0413\u0432\u0430\u0458\u0430\u043D\u0430"
            },
            "swe": {
                "official": "Republiken Guinea",
                "common": "Guinea"
            },
            "tur": {
                "official": "Gine Cumhuriyeti",
                "common": "Gine"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06AF\u0646\u06CC",
                "common": "\u06AF\u0646\u06CC"
            },
            "zho": {
                "official": "\u51E0\u5185\u4E9A\u5171\u548C\u56FD",
                "common": "\u51E0\u5185\u4E9A"
            }
        },
        "latlng": [
            11,
            -10
        ],
        "landlocked": false,
        "borders": [
            "CIV",
            "GNB",
            "LBR",
            "MLI",
            "SEN",
            "SLE"
        ],
        "area": 245857,
        "demonyms": {
            "eng": {
                "f": "Guinean",
                "m": "Guinean"
            },
            "fra": {
                "f": "Guin\xe9enne",
                "m": "Guin\xe9en"
            }
        },
        "flag": "\uD83C\uDDEC\uD83C\uDDF3",
        "maps": {
            "googleMaps": "https://goo.gl/maps/8J5oM5sA4Ayr1ZYGA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192778"
        },
        "population": 13132792,
        "gini": {
            "2012": 33.7
        },
        "fifa": "GUI",
        "car": {
            "signs": [
                "RG"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/gn.png",
            "svg": "https://flagcdn.com/gn.svg",
            "alt": "The flag of Guinea is composed of three equal vertical bands of red, yellow and green."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/gn.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/gn.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                9.5,
                -13.7
            ]
        }
    },
    {
        "name": {
            "common": "Tanzania",
            "official": "United Republic of Tanzania",
            "nativeName": {
                "eng": {
                    "official": "United Republic of Tanzania",
                    "common": "Tanzania"
                },
                "swa": {
                    "official": "Jamhuri ya Muungano wa Tanzania",
                    "common": "Tanzania"
                }
            }
        },
        "tld": [
            ".tz"
        ],
        "cca2": "TZ",
        "ccn3": "834",
        "cca3": "TZA",
        "cioc": "TAN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "TZS": {
                "name": "Tanzanian shilling",
                "symbol": "Sh"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "55"
            ]
        },
        "capital": [
            "Dodoma"
        ],
        "altSpellings": [
            "TZ",
            "Tanzania, United Republic of",
            "United Republic of Tanzania",
            "Jamhuri ya Muungano wa Tanzania"
        ],
        "region": "Africa",
        "subregion": "Eastern Africa",
        "languages": {
            "eng": "English",
            "swa": "Swahili"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062A\u0646\u0632\u0627\u0646\u064A\u0627 \u0627\u0644\u0627\u062A\u062D\u0627\u062F\u064A\u0629",
                "common": "\u062A\u0646\u0632\u0627\u0646\u064A\u0627"
            },
            "bre": {
                "official": "Republik Unanet Tanzania",
                "common": "Tanzania"
            },
            "ces": {
                "official": "Sjednocen\xe1 tanzansk\xe1 republika",
                "common": "Tanzanie"
            },
            "cym": {
                "official": "United Republic of Tanzania",
                "common": "Tanzania"
            },
            "deu": {
                "official": "Vereinigte Republik Tansania",
                "common": "Tansania"
            },
            "est": {
                "official": "Tansaania \xdchendvabariik",
                "common": "Tansaania"
            },
            "fin": {
                "official": "Tansanian yhdistynyt tasavalta",
                "common": "Tansania"
            },
            "fra": {
                "official": "R\xe9publique -Unie de Tanzanie",
                "common": "Tanzanie"
            },
            "hrv": {
                "official": "Ujedinjena Republika Tanzanija",
                "common": "Tanzanija"
            },
            "hun": {
                "official": "T\xe1dzsik K\xf6zt\xe1rsas\xe1g",
                "common": "T\xe1dzsikiszt\xe1n"
            },
            "ita": {
                "official": "Repubblica Unita di Tanzania",
                "common": "Tanzania"
            },
            "jpn": {
                "official": "\u30BF\u30F3\u30B6\u30CB\u30A2\u9023\u5408\u5171\u548C\u56FD",
                "common": "\u30BF\u30F3\u30B6\u30CB\u30A2"
            },
            "kor": {
                "official": "\uD0C4\uC790\uB2C8\uC544 \uC5F0\uD569 \uACF5\uD654\uAD6D",
                "common": "\uD0C4\uC790\uB2C8\uC544"
            },
            "nld": {
                "official": "Verenigde Republiek Tanzania",
                "common": "Tanzania"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u062A\u062D\u062F \u062A\u0627\u0646\u0632\u0627\u0646\u06CC\u0627",
                "common": "\u062A\u0627\u0646\u0632\u0627\u0646\u06CC\u0627"
            },
            "pol": {
                "official": "Zjednoczona Republika Tanzanii",
                "common": "Tanzania"
            },
            "por": {
                "official": "Rep\xfablica Unida da Tanz\xe2nia",
                "common": "Tanz\xe2nia"
            },
            "rus": {
                "official": "\u041E\u0431\u044A\u0435\u0434\u0438\u043D\u0435\u043D\u043D\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u0430\u043D\u0437\u0430\u043D\u0438\u044F",
                "common": "\u0422\u0430\u043D\u0437\u0430\u043D\u0438\u044F"
            },
            "slk": {
                "official": "Tanz\xe1nijsk\xe1 zjednoten\xe1 republika",
                "common": "Tanz\xe1nia"
            },
            "spa": {
                "official": "Rep\xfablica Unida de Tanzania",
                "common": "Tanzania"
            },
            "srp": {
                "official": "\u0423\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u0430\u043D\u0437\u0430\u043D\u0438\u0458\u0430",
                "common": "\u0422\u0430\u043D\u0437\u0430\u043D\u0438\u0458\u0430"
            },
            "swe": {
                "official": "F\xf6renade republiken Tanzania",
                "common": "Tanzania"
            },
            "tur": {
                "official": "Tanzanya Birle\u015Fik Cumhuriyeti",
                "common": "Tanzanya"
            },
            "urd": {
                "official": "\u0645\u062A\u062D\u062F\u06C1 \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062A\u0646\u0632\u0627\u0646\u06CC\u06C1",
                "common": "\u062A\u0646\u0632\u0627\u0646\u06CC\u06C1"
            },
            "zho": {
                "official": "\u5766\u6851\u5C3C\u4E9A\u8054\u5408\u5171\u548C\u56FD",
                "common": "\u5766\u6851\u5C3C\u4E9A"
            }
        },
        "latlng": [
            -6,
            35
        ],
        "landlocked": false,
        "borders": [
            "BDI",
            "COD",
            "KEN",
            "MWI",
            "MOZ",
            "RWA",
            "UGA",
            "ZMB"
        ],
        "area": 945087,
        "demonyms": {
            "eng": {
                "f": "Tanzanian",
                "m": "Tanzanian"
            },
            "fra": {
                "f": "Tanzanienne",
                "m": "Tanzanien"
            }
        },
        "flag": "\uD83C\uDDF9\uD83C\uDDFF",
        "maps": {
            "googleMaps": "https://goo.gl/maps/NWYMqZYXte4zGZ2Q8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/195270"
        },
        "population": 59734213,
        "gini": {
            "2017": 40.5
        },
        "fifa": "TAN",
        "car": {
            "signs": [
                "EAT"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/tz.png",
            "svg": "https://flagcdn.com/tz.svg",
            "alt": "The flag of Tanzania features a yellow-edged black diagonal band that extends from the lower hoist-side corner to the upper fly-side corner of the field. Above and beneath this band are a green and light blue triangle respectively."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/tz.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/tz.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -6.16,
                35.75
            ]
        }
    },
    {
        "name": {
            "common": "Rwanda",
            "official": "Republic of Rwanda",
            "nativeName": {
                "eng": {
                    "official": "Republic of Rwanda",
                    "common": "Rwanda"
                },
                "fra": {
                    "official": "R\xe9publique rwandaise",
                    "common": "Rwanda"
                },
                "kin": {
                    "official": "Repubulika y'u Rwanda",
                    "common": "Rwanda"
                }
            }
        },
        "tld": [
            ".rw"
        ],
        "cca2": "RW",
        "ccn3": "646",
        "cca3": "RWA",
        "cioc": "RWA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "RWF": {
                "name": "Rwandan franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "50"
            ]
        },
        "capital": [
            "Kigali"
        ],
        "altSpellings": [
            "RW",
            "Republic of Rwanda",
            "Repubulika y'u Rwanda",
            "R\xe9publique du Rwanda"
        ],
        "region": "Africa",
        "subregion": "Eastern Africa",
        "languages": {
            "eng": "English",
            "fra": "French",
            "kin": "Kinyarwanda"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0631\u0648\u0627\u0646\u062F\u0627",
                "common": "\u0631\u0648\u0627\u0646\u062F\u0627"
            },
            "bre": {
                "official": "Republik Rwanda",
                "common": "Rwanda"
            },
            "ces": {
                "official": "Rwandsk\xe1 republika",
                "common": "Rwanda"
            },
            "cym": {
                "official": "Republic of Rwanda",
                "common": "Rwanda"
            },
            "deu": {
                "official": "Republik Ruanda",
                "common": "Ruanda"
            },
            "est": {
                "official": "Rwanda Vabariik",
                "common": "Rwanda"
            },
            "fin": {
                "official": "Ruandan tasavalta",
                "common": "Ruanda"
            },
            "fra": {
                "official": "R\xe9publique rwandaise",
                "common": "Rwanda"
            },
            "hrv": {
                "official": "Republika Ruandi",
                "common": "Ruanda"
            },
            "hun": {
                "official": "Ruandai K\xf6zt\xe1rsas\xe1g",
                "common": "Ruanda"
            },
            "ita": {
                "official": "Repubblica del Ruanda",
                "common": "Ruanda"
            },
            "jpn": {
                "official": "\u30EB\u30EF\u30F3\u30C0\u5171\u548C\u56FD",
                "common": "\u30EB\u30EF\u30F3\u30C0"
            },
            "kor": {
                "official": "\uB974\uC644\uB2E4 \uACF5\uD654\uAD6D",
                "common": "\uB974\uC644\uB2E4"
            },
            "nld": {
                "official": "Republiek Rwanda",
                "common": "Rwanda"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0631\u0648\u0627\u0646\u062F\u0627",
                "common": "\u0631\u0648\u0627\u0646\u062F\u0627"
            },
            "pol": {
                "official": "Republika Rwandy",
                "common": "Rwanda"
            },
            "por": {
                "official": "Rep\xfablica do Ruanda",
                "common": "Ruanda"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0420\u0443\u0430\u043D\u0434\u0430",
                "common": "\u0420\u0443\u0430\u043D\u0434\u0430"
            },
            "slk": {
                "official": "Rwandsk\xe1 republika",
                "common": "Rwanda"
            },
            "spa": {
                "official": "Rep\xfablica de Rwanda",
                "common": "Ruanda"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0420\u0443\u0430\u043D\u0434\u0430",
                "common": "\u0420\u0443\u0430\u043D\u0434\u0430"
            },
            "swe": {
                "official": "Republiken Rwanda",
                "common": "Rwanda"
            },
            "tur": {
                "official": "Ruanda Cumhuriyeti",
                "common": "Ruanda"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0631\u0648\u0627\u0646\u0688\u0627",
                "common": "\u0631\u0648\u0627\u0646\u0688\u0627"
            },
            "zho": {
                "official": "\u5362\u65FA\u8FBE\u5171\u548C\u56FD",
                "common": "\u5362\u65FA\u8FBE"
            }
        },
        "latlng": [
            -2,
            30
        ],
        "landlocked": true,
        "borders": [
            "BDI",
            "COD",
            "TZA",
            "UGA"
        ],
        "area": 26338,
        "demonyms": {
            "eng": {
                "f": "Rwandan",
                "m": "Rwandan"
            },
            "fra": {
                "f": "Rwandaise",
                "m": "Rwandais"
            }
        },
        "flag": "\uD83C\uDDF7\uD83C\uDDFC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/j5xb5r7CLqjYbyP86",
            "openStreetMaps": "https://www.openstreetmap.org/relation/171496"
        },
        "population": 12952209,
        "gini": {
            "2016": 43.7
        },
        "fifa": "RWA",
        "car": {
            "signs": [
                "RWA"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/rw.png",
            "svg": "https://flagcdn.com/rw.svg",
            "alt": "The flag of Rwanda is composed of three horizontal bands of light blue, yellow and green. The light blue band is twice the height of the other two bands and bears a yellow sun with twenty-four rays on its fly side."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/rw.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/rw.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -1.95,
                30.05
            ]
        }
    },
    {
        "name": {
            "common": "Singapore",
            "official": "Republic of Singapore",
            "nativeName": {
                "eng": {
                    "official": "Republic of Singapore",
                    "common": "Singapore"
                },
                "zho": {
                    "official": "\u65B0\u52A0\u5761\u5171\u548C\u56FD",
                    "common": "\u65B0\u52A0\u5761"
                },
                "msa": {
                    "official": "Republik Singapura",
                    "common": "Singapura"
                },
                "tam": {
                    "official": "\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD \u0B95\u0BC1\u0B9F\u0BBF\u0BAF\u0BB0\u0B9A\u0BC1",
                    "common": "\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD"
                }
            }
        },
        "tld": [
            ".sg",
            ".\u65B0\u52A0\u5761",
            ".\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD"
        ],
        "cca2": "SG",
        "ccn3": "702",
        "cca3": "SGP",
        "cioc": "SGP",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "SGD": {
                "name": "Singapore dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "5"
            ]
        },
        "capital": [
            "Singapore"
        ],
        "altSpellings": [
            "SG",
            "Singapura",
            "Republik Singapura",
            "\u65B0\u52A0\u5761\u5171\u548C\u56FD"
        ],
        "region": "Asia",
        "subregion": "South-Eastern Asia",
        "languages": {
            "eng": "English",
            "zho": "Chinese",
            "msa": "Malay",
            "tam": "Tamil"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u0646\u063A\u0627\u0641\u0648\u0631\u0629",
                "common": "\u0633\u0646\u063A\u0627\u0641\u0648\u0631\u0629"
            },
            "bre": {
                "official": "Republik Singapour",
                "common": "Singapour"
            },
            "ces": {
                "official": "Singapursk\xe1 republika",
                "common": "Singapur"
            },
            "cym": {
                "official": "Republic of Singapore",
                "common": "Singapore"
            },
            "deu": {
                "official": "Republik Singapur",
                "common": "Singapur"
            },
            "est": {
                "official": "Singapuri Vabariik",
                "common": "Singapur"
            },
            "fin": {
                "official": "Singaporen tasavalta",
                "common": "Singapore"
            },
            "fra": {
                "official": "R\xe9publique de Singapour",
                "common": "Singapour"
            },
            "hrv": {
                "official": "Republika Singapur",
                "common": "Singapur"
            },
            "hun": {
                "official": "Szingap\xfari K\xf6zt\xe1rsas\xe1g",
                "common": "Szingap\xfar"
            },
            "ita": {
                "official": "Repubblica di Singapore",
                "common": "Singapore"
            },
            "jpn": {
                "official": "\u30B7\u30F3\u30AC\u30DD\u30FC\u30EB\u5171\u548C\u56FD",
                "common": "\u30B7\u30F3\u30AC\u30DD\u30FC\u30EB"
            },
            "kor": {
                "official": "\uC2F1\uAC00\uD3EC\uB974 \uACF5\uD654\uAD6D",
                "common": "\uC2F1\uAC00\uD3EC\uB974"
            },
            "nld": {
                "official": "Republiek Singapore",
                "common": "Singapore"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u0646\u06AF\u0627\u067E\u0648\u0631",
                "common": "\u0633\u0646\u06AF\u0627\u067E\u0648\u0631"
            },
            "pol": {
                "official": "Republika Singapuru",
                "common": "Singapur"
            },
            "por": {
                "official": "Rep\xfablica de Singapura",
                "common": "Singapura"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0438\u043D\u0433\u0430\u043F\u0443\u0440",
                "common": "\u0421\u0438\u043D\u0433\u0430\u043F\u0443\u0440"
            },
            "slk": {
                "official": "Singapursk\xe1 republika",
                "common": "Singapur"
            },
            "spa": {
                "official": "Rep\xfablica de Singapur",
                "common": "Singapur"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0438\u043D\u0433\u0430\u043F\u0443\u0440",
                "common": "\u0421\u0438\u043D\u0433\u0430\u043F\u0443\u0440"
            },
            "swe": {
                "official": "Republiken Singapore",
                "common": "Singapore"
            },
            "tur": {
                "official": "Singapur Cumhuriyeti",
                "common": "Singapur"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0646\u06AF\u0627\u067E\u0648\u0631",
                "common": "\u0633\u0646\u06AF\u0627\u067E\u0648\u0631"
            }
        },
        "latlng": [
            1.36666666,
            103.8
        ],
        "landlocked": false,
        "area": 710,
        "demonyms": {
            "eng": {
                "f": "Singaporean",
                "m": "Singaporean"
            },
            "fra": {
                "f": "Singapourienne",
                "m": "Singapourien"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDEC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/QbQt9Y9b5KFzsahV6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/536780"
        },
        "population": 5685807,
        "fifa": "SIN",
        "car": {
            "signs": [
                "SGP"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+08:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/sg.png",
            "svg": "https://flagcdn.com/sg.svg",
            "alt": "The flag of Singapore is composed of two equal horizontal bands of red and white. On the hoist side of the red band is a fly-side facing white crescent which partially encloses five small five-pointed white stars arranged in the shape of a pentagon."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/sg.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/sg.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                1.28,
                103.85
            ]
        },
        "postalCode": {
            "format": "######",
            "regex": "^(\\d{6})$"
        }
    },
    {
        "name": {
            "common": "Morocco",
            "official": "Kingdom of Morocco",
            "nativeName": {
                "ara": {
                    "official": "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0645\u063A\u0631\u0628\u064A\u0629",
                    "common": "\u0627\u0644\u0645\u063A\u0631\u0628"
                },
                "ber": {
                    "official": "\u2D5C\u2D30\u2D33\u2D4D\u2D37\u2D49\u2D5C \u2D4F \u2D4D\u2D4E\u2D56\u2D54\u2D49\u2D31",
                    "common": "\u2D4D\u2D4E\u2D30\u2D56\u2D54\u2D49\u2D31"
                }
            }
        },
        "tld": [
            ".ma",
            "\u0627\u0644\u0645\u063A\u0631\u0628."
        ],
        "cca2": "MA",
        "ccn3": "504",
        "cca3": "MAR",
        "cioc": "MAR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "MAD": {
                "name": "Moroccan dirham",
                "symbol": "\u062F.\u0645."
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "12"
            ]
        },
        "capital": [
            "Rabat"
        ],
        "altSpellings": [
            "MA",
            "Kingdom of Morocco",
            "Al-Mamlakah al-Ma\u0121ribiyah"
        ],
        "region": "Africa",
        "subregion": "Northern Africa",
        "languages": {
            "ara": "Arabic",
            "ber": "Berber"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0645\u063A\u0631\u0628\u064A\u0629",
                "common": "\u0627\u0644\u0645\u063A\u0631\u0628"
            },
            "bre": {
                "official": "Rouantelezh Maroko",
                "common": "Maroko"
            },
            "ces": {
                "official": "Marock\xe9 kr\xe1lovstv\xed",
                "common": "Maroko"
            },
            "cym": {
                "official": "Kingdom of Morocco",
                "common": "Morocco"
            },
            "deu": {
                "official": "K\xf6nigreich Marokko",
                "common": "Marokko"
            },
            "est": {
                "official": "Maroko Kuningriik",
                "common": "Maroko"
            },
            "fin": {
                "official": "Marokon kuningaskunta",
                "common": "Marokko"
            },
            "fra": {
                "official": "Royaume du Maroc",
                "common": "Maroc"
            },
            "hrv": {
                "official": "Kraljevina Maroko",
                "common": "Maroko"
            },
            "hun": {
                "official": "Marokk\xf3i Kir\xe1lys\xe1g",
                "common": "Marokk\xf3"
            },
            "ita": {
                "official": "Regno del Marocco",
                "common": "Marocco"
            },
            "jpn": {
                "official": "\u30E2\u30ED\u30C3\u30B3\u738B\u56FD",
                "common": "\u30E2\u30ED\u30C3\u30B3"
            },
            "kor": {
                "official": "\uBAA8\uB85C\uCF54 \uC655\uAD6D",
                "common": "\uBAA8\uB85C\uCF54"
            },
            "nld": {
                "official": "Koninkrijk Marokko",
                "common": "Marokko"
            },
            "per": {
                "official": "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0645\u0631\u0627\u06A9\u0634",
                "common": "\u0645\u0631\u0627\u06A9\u0634"
            },
            "pol": {
                "official": "Kr\xf3lestwo Maroka\u0144skie",
                "common": "Maroko"
            },
            "por": {
                "official": "Reino de Marrocos",
                "common": "Marrocos"
            },
            "rus": {
                "official": "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u041C\u0430\u0440\u043E\u043A\u043A\u043E",
                "common": "\u041C\u0430\u0440\u043E\u043A\u043A\u043E"
            },
            "slk": {
                "official": "Marock\xe9 knie\u017Eatstvo",
                "common": "Maroko"
            },
            "spa": {
                "official": "Reino de Marruecos",
                "common": "Marruecos"
            },
            "srp": {
                "official": "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u041C\u0430\u0440\u043E\u043A\u043E",
                "common": "\u041C\u0430\u0440\u043E\u043A\u043E"
            },
            "swe": {
                "official": "Konungariket Marocko",
                "common": "Marocko"
            },
            "tur": {
                "official": "Fas Krall\u0131\u011F\u0131",
                "common": "Fas"
            },
            "urd": {
                "official": "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0645\u0631\u0627\u06A9\u0634",
                "common": "\u0645\u0631\u0627\u06A9\u0634"
            },
            "zho": {
                "official": "\u6469\u6D1B\u54E5\u738B\u56FD",
                "common": "\u6469\u6D1B\u54E5"
            }
        },
        "latlng": [
            32,
            -5
        ],
        "landlocked": false,
        "borders": [
            "DZA",
            "ESH",
            "ESP"
        ],
        "area": 446550,
        "demonyms": {
            "eng": {
                "f": "Moroccan",
                "m": "Moroccan"
            },
            "fra": {
                "f": "Marocaine",
                "m": "Marocain"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDE6",
        "maps": {
            "googleMaps": "https://goo.gl/maps/6oMv3dyBZg3iaXQ5A",
            "openStreetMaps": "https://www.openstreetmap.org/relation/3630439"
        },
        "population": 36910558,
        "gini": {
            "2013": 39.5
        },
        "fifa": "MAR",
        "car": {
            "signs": [
                "MA"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ma.png",
            "svg": "https://flagcdn.com/ma.svg",
            "alt": "The flag of Morocco features a green pentagram \u2014 a five-pointed linear star \u2014 centered on a red field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ma.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ma.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                34.02,
                -6.82
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Saint Barth\xe9lemy",
            "official": "Collectivity of Saint Barth\xe9lemy",
            "nativeName": {
                "fra": {
                    "official": "Collectivit\xe9 de Saint-Barth\xe9lemy",
                    "common": "Saint-Barth\xe9lemy"
                }
            }
        },
        "tld": [
            ".bl"
        ],
        "cca2": "BL",
        "ccn3": "652",
        "cca3": "BLM",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "90"
            ]
        },
        "capital": [
            "Gustavia"
        ],
        "altSpellings": [
            "BL",
            "St. Barthelemy",
            "Collectivity of Saint Barth\xe9lemy",
            "Collectivit\xe9 de Saint-Barth\xe9lemy"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u062A\u062C\u0645\u0639 \u0627\u0644\u0625\u0642\u0644\u064A\u0645\u064A \u0644\u0633\u0627\u0646\u062A \u0628\u0627\u0631\u062A\u064A\u0644\u064A\u0645\u064A",
                "common": "\u0633\u0627\u0646 \u0628\u0627\u0631\u062A\u0644\u064A\u0645\u064A"
            },
            "bre": {
                "official": "Saint-Barth\xe9lemy",
                "common": "Saint-Barth\xe9lemy"
            },
            "ces": {
                "official": "Svat\xfd Bartolom\u011Bj",
                "common": "Svat\xfd Bartolom\u011Bj"
            },
            "cym": {
                "official": "Collectivity of Saint Barth\xe9lemy",
                "common": "Saint Barth\xe9lemy"
            },
            "deu": {
                "official": "Gebietsk\xf6rperschaft Saint-Barth\xe9lemy",
                "common": "Saint-Barth\xe9lemy"
            },
            "est": {
                "official": "Saint-Barth\xe9lemy territoriaal\xfchendus",
                "common": "Saint-Barth\xe9lemy"
            },
            "fin": {
                "official": "Saint-Barth\xe9lemyn yhteis\xf6",
                "common": "Saint-Barth\xe9lemy"
            },
            "fra": {
                "official": "Collectivit\xe9 de Saint-Barth\xe9lemy",
                "common": "Saint-Barth\xe9lemy"
            },
            "hrv": {
                "official": "Kolektivnost sv Barth\xe9lemy",
                "common": "Saint Barth\xe9lemy"
            },
            "hun": {
                "official": "Saint-Barth\xe9lemy",
                "common": "Saint-Barth\xe9lemy"
            },
            "ita": {
                "official": "Collettivit\xe0 di Saint Barth\xe9lemy",
                "common": "Antille Francesi"
            },
            "jpn": {
                "official": "\u30B5\u30F3\xb7\u30D0\u30EB\u30C6\u30EB\u30DF\u30FC\u5CF6\u306E\u96C6\u5408\u4F53",
                "common": "\u30B5\u30F3\u30FB\u30D0\u30EB\u30C6\u30EB\u30DF\u30FC"
            },
            "kor": {
                "official": "\uC0DD\uBC14\uB974\uD154\uB808\uBBF8",
                "common": "\uC0DD\uBC14\uB974\uD154\uB808\uBBF8"
            },
            "nld": {
                "official": "Gemeenschap Saint Barth\xe9lemy",
                "common": "Saint Barth\xe9lemy"
            },
            "per": {
                "official": "\u0633\u0646 \u0628\u0627\u0631\u062A\u0644\u0645\u06CC",
                "common": "\u0633\u0646 \u0628\u0627\u0631\u062A\u0644\u0645\u06CC"
            },
            "pol": {
                "official": "Saint-Barth\xe9lemy",
                "common": "Saint-Barth\xe9lemy"
            },
            "por": {
                "official": "Coletividade de Saint Barth\xe9lemy",
                "common": "S\xe3o Bartolomeu"
            },
            "rus": {
                "official": "\u041A\u043E\u043B\u043B\u0435\u043A\u0442\u0438\u0432\u043D\u043E\u0441\u0442\u044C \u0421\u0430\u043D\u043A\u0442 -\u0411\u0430\u0440\u0442\u0435\u043B\u044C\u043C\u0438",
                "common": "\u0421\u0435\u043D-\u0411\u0430\u0440\u0442\u0435\u043B\u0435\u043C\u0438"
            },
            "slk": {
                "official": "Sv\xe4t\xfd Bartolomej",
                "common": "Sv\xe4t\xfd Bartolomej"
            },
            "spa": {
                "official": "Colectividad de San Barth\xe9lemy",
                "common": "San Bartolom\xe9"
            },
            "srp": {
                "official": "\u0421\u0435\u043D \u0411\u0430\u0440\u0442\u0435\u043B\u0435\u043C\u0438",
                "common": "\u0422\u0435\u0440\u0438\u0442\u043E\u0440\u0438\u0458\u0430\u043B\u043D\u0438 K\u043E\u043B\u0435\u043A\u0442\u0438\u0432 \u0421\u0435\u043D \u0411\u0430\u0440\u0442\u0435\u043B\u0435\u043C\u0438"
            },
            "swe": {
                "official": "Saint-Barth\xe9lemy",
                "common": "Saint-Barth\xe9lemy"
            },
            "tur": {
                "official": "Saint Barth\xe9lemy",
                "common": "Saint Barth\xe9lemy"
            },
            "urd": {
                "official": "\u0633\u06CC\u0646\u0679 \u0628\u0627\u0631\u062A\u06BE\u06CC\u0645\u0644\u06D2",
                "common": "\u0633\u06CC\u0646\u0679 \u0628\u0627\u0631\u062A\u06BE\u06CC\u0645\u0644\u06D2"
            },
            "zho": {
                "official": "\u5723\u5DF4\u6CF0\u52D2\u7C73\u96C6\u4F53",
                "common": "\u5723\u5DF4\u6CF0\u52D2\u7C73"
            }
        },
        "latlng": [
            18.5,
            -63.41666666
        ],
        "landlocked": false,
        "area": 21,
        "demonyms": {
            "eng": {
                "f": "Saint Barth\xe9lemy Islander",
                "m": "Saint Barth\xe9lemy Islander"
            },
            "fra": {
                "f": "Barth\xe9lom\xe9enne",
                "m": "Barth\xe9lom\xe9en"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDF1",
        "maps": {
            "googleMaps": "https://goo.gl/maps/Mc7GqH466S7AAk297",
            "openStreetMaps": "https://www.openstreetmap.org/relation/7552779"
        },
        "population": 4255,
        "car": {
            "signs": [
                "F"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/bl.png",
            "svg": "https://flagcdn.com/bl.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                17.88,
                -62.85
            ]
        },
        "postalCode": {
            "format": "### ###"
        }
    },
    {
        "name": {
            "common": "Iraq",
            "official": "Republic of Iraq",
            "nativeName": {
                "ara": {
                    "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0639\u0631\u0627\u0642",
                    "common": "\u0627\u0644\u0639\u0631\u0627\u0642"
                },
                "arc": {
                    "official": "\u0729\u0718\u073C\u071B\u0722\u0735\u0710 \u0710\u071D\u073C\u072A\u0732\u0729",
                    "common": "\u0729\u0718\u073C\u071B\u0722\u0735\u0710"
                },
                "ckb": {
                    "official": "\u06A9\u06C6\u0645\u0627\u0631\u06CC \u0639\u06CE\u0631\u0627\u0642",
                    "common": "\u06A9\u06C6\u0645\u0627\u0631\u06CC"
                }
            }
        },
        "tld": [
            ".iq"
        ],
        "cca2": "IQ",
        "ccn3": "368",
        "cca3": "IRQ",
        "cioc": "IRQ",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "IQD": {
                "name": "Iraqi dinar",
                "symbol": "\u0639.\u062F"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "64"
            ]
        },
        "capital": [
            "Baghdad"
        ],
        "altSpellings": [
            "IQ",
            "Republic of Iraq",
            "Jumh\u016Briyyat al-\u2018Ir\u0101q"
        ],
        "region": "Asia",
        "subregion": "Western Asia",
        "languages": {
            "ara": "Arabic",
            "arc": "Aramaic",
            "ckb": "Sorani"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0639\u0631\u0627\u0642",
                "common": "\u0627\u0644\u0639\u0631\u0627\u0642"
            },
            "bre": {
                "official": "Republik Irak",
                "common": "Irak"
            },
            "ces": {
                "official": "Ir\xe1ck\xe1 republika",
                "common": "Ir\xe1k"
            },
            "cym": {
                "official": "Republic of Iraq",
                "common": "Iraq"
            },
            "deu": {
                "official": "Republik Irak",
                "common": "Irak"
            },
            "est": {
                "official": "Iraagi Vabariik",
                "common": "Iraak"
            },
            "fin": {
                "official": "Irakin tasavalta",
                "common": "Irak"
            },
            "fra": {
                "official": "R\xe9publique d'Irak",
                "common": "Irak"
            },
            "hrv": {
                "official": "Republika Irak",
                "common": "Irak"
            },
            "hun": {
                "official": "Iraki K\xf6zt\xe1rsas\xe1g",
                "common": "Irak"
            },
            "ita": {
                "official": "Repubblica dell'Iraq",
                "common": "Iraq"
            },
            "jpn": {
                "official": "\u30A4\u30E9\u30AF\u5171\u548C\u56FD",
                "common": "\u30A4\u30E9\u30AF"
            },
            "kor": {
                "official": "\uC774\uB77C\uD06C \uACF5\uD654\uAD6D",
                "common": "\uC774\uB77C\uD06C"
            },
            "nld": {
                "official": "Republiek Irak",
                "common": "Irak"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0639\u0631\u0627\u0642",
                "common": "\u0639\u0631\u0627\u0642"
            },
            "pol": {
                "official": "Republika Iraku",
                "common": "Irak"
            },
            "por": {
                "official": "Rep\xfablica do Iraque",
                "common": "Iraque"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u0440\u0430\u043A",
                "common": "\u0418\u0440\u0430\u043A"
            },
            "slk": {
                "official": "Irack\xe1 republika",
                "common": "Irak"
            },
            "spa": {
                "official": "Rep\xfablica de Irak",
                "common": "Irak"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u0440\u0430\u043A",
                "common": "\u0418\u0440\u0430\u043A"
            },
            "swe": {
                "official": "Republiken Irak",
                "common": "Irak"
            },
            "tur": {
                "official": "Irak Cumhuriyeti",
                "common": "Irak"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0639\u0631\u0627\u0642",
                "common": "\u0639\u0631\u0627\u0642"
            },
            "zho": {
                "official": "\u4F0A\u62C9\u514B\u5171\u548C\u56FD",
                "common": "\u4F0A\u62C9\u514B"
            }
        },
        "latlng": [
            33,
            44
        ],
        "landlocked": false,
        "borders": [
            "IRN",
            "JOR",
            "KWT",
            "SAU",
            "SYR",
            "TUR"
        ],
        "area": 438317,
        "demonyms": {
            "eng": {
                "f": "Iraqi",
                "m": "Iraqi"
            },
            "fra": {
                "f": "Irakienne",
                "m": "Irakien"
            }
        },
        "flag": "\uD83C\uDDEE\uD83C\uDDF6",
        "maps": {
            "googleMaps": "https://goo.gl/maps/iL8Bmy1sUCW9fUk18",
            "openStreetMaps": "https://www.openstreetmap.org/relation/304934"
        },
        "population": 40222503,
        "gini": {
            "2012": 29.5
        },
        "fifa": "IRQ",
        "car": {
            "signs": [
                "IRQ"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/iq.png",
            "svg": "https://flagcdn.com/iq.svg",
            "alt": "The flag of Iraq is composed of three equal horizontal bands of red, white and black. In the central white band are Arabic inscriptions in green."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/iq.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/iq.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                33.33,
                44.4
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Brunei",
            "official": "Nation of Brunei, Abode of Peace",
            "nativeName": {
                "msa": {
                    "official": "Nation of Brunei, Abode Damai",
                    "common": "Negara Brunei Darussalam"
                }
            }
        },
        "tld": [
            ".bn"
        ],
        "cca2": "BN",
        "ccn3": "096",
        "cca3": "BRN",
        "cioc": "BRU",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "BND": {
                "name": "Brunei dollar",
                "symbol": "$"
            },
            "SGD": {
                "name": "Singapore dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "73"
            ]
        },
        "capital": [
            "Bandar Seri Begawan"
        ],
        "altSpellings": [
            "BN",
            "Brunei Darussalam",
            "Nation of Brunei",
            "the Abode of Peace"
        ],
        "region": "Asia",
        "subregion": "South-Eastern Asia",
        "languages": {
            "msa": "Malay"
        },
        "translations": {
            "ara": {
                "official": "\u0628\u0631\u0648\u0646\u0627\u064A \u062F\u0627\u0631 \u0627\u0644\u0633\u0644\u0627\u0645",
                "common": "\u0628\u0631\u0648\u0646\u0627\u064A"
            },
            "bre": {
                "official": "Stad Brunei Darussalam",
                "common": "Brunei"
            },
            "ces": {
                "official": "Sultan\xe1t Brunej",
                "common": "Brunej"
            },
            "cym": {
                "official": "Teyrnas Brwnei",
                "common": "Brunei"
            },
            "deu": {
                "official": "Sultanat Brunei Darussalam",
                "common": "Brunei"
            },
            "est": {
                "official": "Brunei Darussalami Riik",
                "common": "Brunei"
            },
            "fin": {
                "official": "Brunei Darussalamin valtio",
                "common": "Brunei"
            },
            "fra": {
                "official": "\xc9tat de Brunei Darussalam",
                "common": "Brunei"
            },
            "hrv": {
                "official": "Nacija od Bruneja, Ku\u0107u Mira",
                "common": "Brunej"
            },
            "hun": {
                "official": "Brunei Szultan\xe1tus",
                "common": "Brunei"
            },
            "ita": {
                "official": "Nazione di Brunei, Dimora della Pace",
                "common": "Brunei"
            },
            "jpn": {
                "official": "\u30D6\u30EB\u30CD\u30A4\u3001\u5E73\u548C\u306E\u7CBE\u820E\u306E\u56FD\u5BB6",
                "common": "\u30D6\u30EB\u30CD\u30A4\u30FB\u30C0\u30EB\u30B5\u30E9\u30FC\u30E0"
            },
            "kor": {
                "official": "\uBE0C\uB8E8\uB098\uC774 \uB2E4\uB8E8\uC0B4\uB78C\uAD6D",
                "common": "\uBE0C\uB8E8\uB098\uC774"
            },
            "nld": {
                "official": "Natie van Brunei, de verblijfplaats van de Vrede",
                "common": "Brunei"
            },
            "per": {
                "official": "\u0628\u0631\u0648\u0646\u0626\u06CC \u0633\u0631\u0627\u06CC \u0635\u0644\u062D",
                "common": "\u0628\u0631\u0648\u0646\u0626\u06CC"
            },
            "pol": {
                "official": "Pa\u0144stwo Brunei Darussalam",
                "common": "Brunei"
            },
            "por": {
                "official": "Na\xe7\xe3o do Brunei, Morada da Paz",
                "common": "Brunei"
            },
            "rus": {
                "official": "\u041D\u0430\u0446\u0438\u044F \u0411\u0440\u0443\u043D\u0435\u0439, \u043E\u0431\u0438\u0442\u0435\u043B\u044C \u043C\u0438\u0440\u0430",
                "common": "\u0411\u0440\u0443\u043D\u0435\u0439"
            },
            "slk": {
                "official": "Brunejsk\xfd sultan\xe2t",
                "common": "Brunej"
            },
            "spa": {
                "official": "Naci\xf3n de Brunei, Morada de la Paz",
                "common": "Brunei"
            },
            "srp": {
                "official": "\u0421\u0443\u043B\u0442\u0430\u043D\u0430\u0442 \u0411\u0440\u0443\u043D\u0435\u0458, \u0431\u043E\u0440\u0430\u0432\u0438\u0448\u0442\u0435 \u043C\u0438\u0440\u0430",
                "common": "\u0411\u0440\u0443\u043D\u0435\u0458"
            },
            "swe": {
                "official": "Brunei Darussalam",
                "common": "Brunei"
            },
            "tur": {
                "official": "Brunei Bar\u0131\u015F \xdclkesi Devleti",
                "common": "Brunei"
            },
            "urd": {
                "official": "\u0631\u06CC\u0627\u0633\u062A\u0650 \u0628\u0631\u0648\u0646\u0627\u0626\u06CC \u062F\u0627\u0631\u0627\u0644\u0633\u0644\u0627\u0645",
                "common": "\u0628\u0631\u0648\u0646\u0627\u0626\u06CC"
            },
            "zho": {
                "official": "\u6587\u83B1\u548C\u5E73\u4E4B\u56FD",
                "common": "\u6587\u83B1"
            }
        },
        "latlng": [
            4.5,
            114.66666666
        ],
        "landlocked": false,
        "borders": [
            "MYS"
        ],
        "area": 5765,
        "demonyms": {
            "eng": {
                "f": "Bruneian",
                "m": "Bruneian"
            },
            "fra": {
                "f": "Brun\xe9ienne",
                "m": "Brun\xe9ien"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDF3",
        "maps": {
            "googleMaps": "https://goo.gl/maps/4jb4CqBXhr8vNh579",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2103120"
        },
        "population": 437483,
        "fifa": "BRU",
        "car": {
            "signs": [
                "BRU"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+08:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/bn.png",
            "svg": "https://flagcdn.com/bn.svg",
            "alt": "The flag of Brunei has a yellow field with two adjoining diagonal bands of white and black that extend from the upper hoist side of the field to the lower fly side. The red emblem of Brunei is centered on the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/bn.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/bn.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                4.88,
                114.93
            ]
        },
        "postalCode": {
            "format": "@@####",
            "regex": "^([A-Z]{2}\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Isle of Man",
            "official": "Isle of Man",
            "nativeName": {
                "eng": {
                    "official": "Isle of Man",
                    "common": "Isle of Man"
                },
                "glv": {
                    "official": "Ellan Vannin or Mannin",
                    "common": "Mannin"
                }
            }
        },
        "tld": [
            ".im"
        ],
        "cca2": "IM",
        "ccn3": "833",
        "cca3": "IMN",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "GBP": {
                "name": "British pound",
                "symbol": "\xa3"
            },
            "IMP": {
                "name": "Manx pound",
                "symbol": "\xa3"
            }
        },
        "idd": {
            "root": "+4",
            "suffixes": [
                "4"
            ]
        },
        "capital": [
            "Douglas"
        ],
        "altSpellings": [
            "IM",
            "Ellan Vannin",
            "Mann",
            "Mannin"
        ],
        "region": "Europe",
        "subregion": "Northern Europe",
        "languages": {
            "eng": "English",
            "glv": "Manx"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0632\u064A\u0631\u0629 \u0645\u0627\u0646",
                "common": "\u062C\u0632\u064A\u0631\u0629 \u0645\u0627\u0646"
            },
            "bre": {
                "official": "Enez Vanav",
                "common": "Enez Vanav"
            },
            "ces": {
                "official": "Ostrov Man",
                "common": "Ostrov Man"
            },
            "cym": {
                "official": "Isle of Man",
                "common": "Isle of Man"
            },
            "deu": {
                "official": "Isle of Man",
                "common": "Insel Man"
            },
            "est": {
                "official": "Mani saar",
                "common": "Mani saar"
            },
            "fin": {
                "official": "Mansaari",
                "common": "Mansaari"
            },
            "fra": {
                "official": "Isle of Man",
                "common": "\xcele de Man"
            },
            "hrv": {
                "official": "Mana ostrvo",
                "common": "Otok Man"
            },
            "hun": {
                "official": "Man",
                "common": "Man"
            },
            "ita": {
                "official": "Isola di Man",
                "common": "Isola di Man"
            },
            "jpn": {
                "official": "\u30DE\u30F3\u5CF6",
                "common": "\u30DE\u30F3\u5CF6"
            },
            "kor": {
                "official": "\uB9E8\uC12C",
                "common": "\uB9E8\uC12C"
            },
            "nld": {
                "official": "Isle of Man",
                "common": "Isle of Man"
            },
            "per": {
                "official": "\u062C\u0632\u06CC\u0631\u0647\u0654 \u0645\u064E\u0646",
                "common": "\u062C\u0632\u06CC\u0631\u0647\u0654 \u0645\u064E\u0646"
            },
            "pol": {
                "official": "Wyspa Man",
                "common": "Wyspa Man"
            },
            "por": {
                "official": "Isle of Man",
                "common": "Ilha de Man"
            },
            "rus": {
                "official": "\u041E\u0441\u0442\u0440\u043E\u0432 \u041C\u044D\u043D",
                "common": "\u041E\u0441\u0442\u0440\u043E\u0432 \u041C\u044D\u043D"
            },
            "slk": {
                "official": "Ostrov Man",
                "common": "Man"
            },
            "spa": {
                "official": "Isla de Man",
                "common": "Isla de Man"
            },
            "srp": {
                "official": "\u041E\u0441\u0442\u0440\u0432\u043E \u041C\u0435\u043D",
                "common": "\u041E\u0441\u0442\u0440\u0432\u043E \u041C\u0435\u043D"
            },
            "swe": {
                "official": "Isle of Man",
                "common": "Isle of Man"
            },
            "tur": {
                "official": "Man Adas\u0131",
                "common": "Man Adas\u0131"
            },
            "urd": {
                "official": "\u0622\u0626\u0644 \u0622\u0641 \u0645\u06CC\u0646",
                "common": "\u0622\u0626\u0644 \u0622\u0641 \u0645\u06CC\u0646"
            },
            "zho": {
                "official": "\u9A6C\u6069\u5C9B",
                "common": "\u9A6C\u6069\u5C9B"
            }
        },
        "latlng": [
            54.25,
            -4.5
        ],
        "landlocked": false,
        "area": 572,
        "demonyms": {
            "eng": {
                "f": "Manx",
                "m": "Manx"
            }
        },
        "flag": "\uD83C\uDDEE\uD83C\uDDF2",
        "maps": {
            "googleMaps": "https://goo.gl/maps/4DqVHDgVaFgnh8ZV8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/62269"
        },
        "population": 85032,
        "car": {
            "signs": [
                "GBM"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+00:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/im.png",
            "svg": "https://flagcdn.com/im.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/im.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/im.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                54.15,
                -4.48
            ]
        },
        "postalCode": {
            "format": "@# #@@|@## #@@|@@# #@@|@@## #@@|@#@ #@@|@@#@ #@@|GIR0AA",
            "regex": "^(([A-Z]\\d{2}[A-Z]{2})|([A-Z]\\d{3}[A-Z]{2})|([A-Z]{2}\\d{2}[A-Z]{2})|([A-Z]{2}\\d{3}[A-Z]{2})|([A-Z]\\d[A-Z]\\d[A-Z]{2})|([A-Z]{2}\\d[A-Z]\\d[A-Z]{2})|(GIR0AA))$"
        }
    },
    {
        "name": {
            "common": "North Korea",
            "official": "Democratic People's Republic of Korea",
            "nativeName": {
                "kor": {
                    "official": "\uC870\uC120\uBBFC\uC8FC\uC8FC\uC758\uC778\uBBFC\uACF5\uD654\uAD6D",
                    "common": "\uC870\uC120"
                }
            }
        },
        "tld": [
            ".kp"
        ],
        "cca2": "KP",
        "ccn3": "408",
        "cca3": "PRK",
        "cioc": "PRK",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "KPW": {
                "name": "North Korean won",
                "symbol": "\u20A9"
            }
        },
        "idd": {
            "root": "+8",
            "suffixes": [
                "50"
            ]
        },
        "capital": [
            "Pyongyang"
        ],
        "altSpellings": [
            "KP",
            "Democratic People's Republic of Korea",
            "DPRK",
            "\uC870\uC120\uBBFC\uC8FC\uC8FC\uC758\uC778\uBBFC\uACF5\uD654\uAD6D",
            "Chos\u014Fn Minjuju\u016Di Inmin Konghwaguk",
            "Korea, Democratic People's Republic of",
            "\uBD81\uD55C",
            "\uBD81\uC870\uC120"
        ],
        "region": "Asia",
        "subregion": "Eastern Asia",
        "languages": {
            "kor": "Korean"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u0648\u0631\u064A\u0627 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629 \u0627\u0644\u0634\u0639\u0628\u064A\u0629",
                "common": "\u0643\u0648\u0631\u064A\u0627 \u0627\u0644\u0634\u0645\u0627\u0644\u064A\u0629"
            },
            "bre": {
                "official": "Republik Poblel ha Demokratel Korea",
                "common": "Korea an Norzh"
            },
            "ces": {
                "official": "Korejsk\xe1 lidov\u011B demokratick\xe1 republika",
                "common": "Severn\xed Korea"
            },
            "cym": {
                "official": "Democratic People's Republic of Korea",
                "common": "North Korea"
            },
            "deu": {
                "official": "Demokratische Volksrepublik Korea",
                "common": "Nordkorea"
            },
            "est": {
                "official": "Korea Rahvademokraatlik Vabariik",
                "common": "P\xf5hja-Korea"
            },
            "fin": {
                "official": "Korean demokraattinen kansantasavalta",
                "common": "Pohjois-Korea"
            },
            "fra": {
                "official": "R\xe9publique populaire d\xe9mocratique de Cor\xe9e",
                "common": "Cor\xe9e du Nord"
            },
            "hrv": {
                "official": "Demokratska Narodna Republika Koreja",
                "common": "Sjeverna Koreja"
            },
            "hun": {
                "official": "Koreai N\xe9pi Demokratikus K\xf6zt\xe1rsas\xe1g",
                "common": "\xc9szak-Korea"
            },
            "ita": {
                "official": "Repubblica democratica popolare di Corea",
                "common": "Corea del Nord"
            },
            "jpn": {
                "official": "\u671D\u9BAE\u6C11\u4E3B\u4E3B\u7FA9\u4EBA\u6C11\u5171\u548C\u56FD",
                "common": "\u671D\u9BAE\u6C11\u4E3B\u4E3B\u7FA9\u4EBA\u6C11\u5171\u548C\u56FD"
            },
            "kor": {
                "official": "\uC870\uC120\uBBFC\uC8FC\uC8FC\uC758\uC778\uBBFC\uACF5\uD654\uAD6D",
                "common": "\uC870\uC120"
            },
            "nld": {
                "official": "Democratische Volksrepubliek Korea",
                "common": "Noord-Korea"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9 \u062E\u0644\u0642 \u06A9\u0631\u0647",
                "common": "\u06A9\u064F\u0631\u0647 \u0634\u0645\u0627\u0644\u06CC"
            },
            "pol": {
                "official": "Korea\u0144ska Republika Ludowo-Demokratyczna",
                "common": "Korea P\xf3\u0142nocna"
            },
            "por": {
                "official": "Rep\xfablica Popular Democr\xe1tica da Coreia",
                "common": "Coreia do Norte"
            },
            "rus": {
                "official": "\u041A\u043E\u0440\u0435\u0439\u0441\u043A\u0430\u044F \u041D\u0430\u0440\u043E\u0434\u043D\u043E-\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0440\u0435\u044F",
                "common": "\u0421\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u041A\u043E\u0440\u0435\u044F"
            },
            "slk": {
                "official": "K\xf3rejsk\xe1 \u013Eudovodemokratick\xe1 republika",
                "common": "Severn\xe1 K\xf3rea"
            },
            "spa": {
                "official": "Rep\xfablica Popular Democr\xe1tica de Corea",
                "common": "Corea del Norte"
            },
            "srp": {
                "official": "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u041D\u0430\u0440\u043E\u0434\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0440\u0435\u0458\u0430",
                "common": "\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041A\u043E\u0440\u0435\u0458\u0430"
            },
            "swe": {
                "official": "Demokratiska Folkrepubliken Korea",
                "common": "Nordkorea"
            },
            "tur": {
                "official": "Kore Demokratik Halk Cumhuriyeti",
                "common": "Kuzey Kore"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC \u0639\u0648\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0648\u0631\u06CC\u0627",
                "common": "\u0634\u0645\u0627\u0644\u06CC \u06A9\u0648\u0631\u06CC\u0627"
            },
            "zho": {
                "official": "\u671D\u9C9C\u4EBA\u6C11\u6C11\u4E3B\u5171\u548C\u56FD",
                "common": "\u671D\u9C9C"
            }
        },
        "latlng": [
            40,
            127
        ],
        "landlocked": false,
        "borders": [
            "CHN",
            "KOR",
            "RUS"
        ],
        "area": 120538,
        "demonyms": {
            "eng": {
                "f": "North Korean",
                "m": "North Korean"
            },
            "fra": {
                "f": "Nord-cor\xe9enne",
                "m": "Nord-cor\xe9en"
            }
        },
        "flag": "\uD83C\uDDF0\uD83C\uDDF5",
        "maps": {
            "googleMaps": "https://goo.gl/maps/9q5T2DMeH5JL7Tky6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192734"
        },
        "population": 25778815,
        "fifa": "PRK",
        "car": {
            "signs": [
                ""
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+09:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/kp.png",
            "svg": "https://flagcdn.com/kp.svg",
            "alt": "The flag of North Korea is composed of three horizontal bands \u2014 a large central white-edged red band, and a blue band above and beneath the red band. On the hoist side of the red band is a red five-pointed star within a white circle."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/kp.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/kp.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                39.02,
                125.75
            ]
        },
        "postalCode": {
            "format": "###-###",
            "regex": "^(\\d{6})$"
        }
    },
    {
        "name": {
            "common": "Iran",
            "official": "Islamic Republic of Iran",
            "nativeName": {
                "fas": {
                    "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0627\u0645\u06CC \u0627\u06CC\u0631\u0627\u0646",
                    "common": "\u0627\u06CC\u0631\u0627\u0646"
                }
            }
        },
        "tld": [
            ".ir",
            "\u0627\u06CC\u0631\u0627\u0646."
        ],
        "cca2": "IR",
        "ccn3": "364",
        "cca3": "IRN",
        "cioc": "IRI",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "IRR": {
                "name": "Iranian rial",
                "symbol": "\uFDFC"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "8"
            ]
        },
        "capital": [
            "Tehran"
        ],
        "altSpellings": [
            "IR",
            "Islamic Republic of Iran",
            "Iran, Islamic Republic of",
            "Jomhuri-ye Esl\u0101mi-ye Ir\u0101n"
        ],
        "region": "Asia",
        "subregion": "Southern Asia",
        "languages": {
            "fas": "Persian (Farsi)"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0625\u064A\u0631\u0627\u0646 \u0627\u0644\u0625\u0633\u0644\u0627\u0645\u064A\u0629",
                "common": "\u0625\u064A\u0631\u0627\u0646"
            },
            "bre": {
                "official": "Republik Islamek Iran",
                "common": "Iran"
            },
            "ces": {
                "official": "Isl\xe1msk\xe1 republika \xcdr\xe1n",
                "common": "\xcdr\xe1n"
            },
            "cym": {
                "official": "Islamic Republic of Iran",
                "common": "Iran"
            },
            "deu": {
                "official": "Islamische Republik Iran",
                "common": "Iran"
            },
            "est": {
                "official": "Iraani Islamivabariik",
                "common": "Iraan"
            },
            "fin": {
                "official": "Iranin islamilainen tasavalta",
                "common": "Iran"
            },
            "fra": {
                "official": "R\xe9publique islamique d'Iran",
                "common": "Iran"
            },
            "hrv": {
                "official": "Islamska Republika Iran",
                "common": "Iran"
            },
            "hun": {
                "official": "Ir\xe1ni Iszl\xe1m K\xf6zt\xe1rsas\xe1g",
                "common": "Ir\xe1n"
            },
            "ita": {
                "official": "Repubblica islamica dell'Iran",
                "common": "Iran"
            },
            "jpn": {
                "official": "\u30A4\u30E9\u30F3\xb7\u30A4\u30B9\u30E9\u30E0\u5171\u548C\u56FD",
                "common": "\u30A4\u30E9\u30F3\u30FB\u30A4\u30B9\u30E9\u30E0\u5171\u548C\u56FD"
            },
            "kor": {
                "official": "\uC774\uB780 \uC774\uC2AC\uB78C \uACF5\uD654\uAD6D",
                "common": "\uC774\uB780"
            },
            "nld": {
                "official": "Islamitische Republiek Iran",
                "common": "Iran"
            },
            "pol": {
                "official": "Islamska Republika Iranu",
                "common": "Iran"
            },
            "por": {
                "official": "Rep\xfablica Isl\xe2mica do Ir\xe3",
                "common": "Ir\xe3o"
            },
            "rus": {
                "official": "\u0418\u0441\u043B\u0430\u043C\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u0440\u0430\u043D",
                "common": "\u0418\u0440\u0430\u043D"
            },
            "slk": {
                "official": "Ir\xe1nska islamsk\xe1 republika",
                "common": "Ir\xe1n"
            },
            "spa": {
                "official": "Rep\xfablica Isl\xe1mica de Ir\xe1n",
                "common": "Iran"
            },
            "srp": {
                "official": "\u0418\u0441\u043B\u0430\u043C\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u0440\u0430\u043D",
                "common": "\u0418\u0440\u0430\u043D"
            },
            "swe": {
                "official": "Islamiska republiken Iran",
                "common": "Iran"
            },
            "tur": {
                "official": "\u0130ran \u0130slam Cumhuriyeti",
                "common": "\u0130ran"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u06CC\u0631\u0627\u0646",
                "common": "\u0627\u06CC\u0631\u0627\u0646"
            },
            "zho": {
                "official": "\u4F0A\u6717\u4F0A\u65AF\u5170\u5171\u548C\u56FD",
                "common": "\u4F0A\u6717"
            }
        },
        "latlng": [
            32,
            53
        ],
        "landlocked": false,
        "borders": [
            "AFG",
            "ARM",
            "AZE",
            "IRQ",
            "PAK",
            "TUR",
            "TKM"
        ],
        "area": 1648195,
        "demonyms": {
            "eng": {
                "f": "Iranian",
                "m": "Iranian"
            },
            "fra": {
                "f": "Iranienne",
                "m": "Iranien"
            }
        },
        "flag": "\uD83C\uDDEE\uD83C\uDDF7",
        "maps": {
            "googleMaps": "https://goo.gl/maps/dMgEGuacBPGYQnjY7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/304938"
        },
        "population": 83992953,
        "gini": {
            "2018": 42
        },
        "fifa": "IRN",
        "car": {
            "signs": [
                "IR"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:30"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ir.png",
            "svg": "https://flagcdn.com/ir.svg",
            "alt": "The flag of Iran is composed of three equal horizontal bands of green, white and red. A red emblem of Iran is centered in the white band and Arabic inscriptions in white span the bottom edge of the green band and the top edge of the red band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ir.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ir.svg"
        },
        "startOfWeek": "saturday",
        "capitalInfo": {
            "latlng": [
                35.7,
                51.42
            ]
        },
        "postalCode": {
            "format": "##########",
            "regex": "^(\\d{10})$"
        }
    },
    {
        "name": {
            "common": "Cura\xe7ao",
            "official": "Country of Cura\xe7ao",
            "nativeName": {
                "eng": {
                    "official": "Country of Cura\xe7ao",
                    "common": "Cura\xe7ao"
                },
                "nld": {
                    "official": "Land Cura\xe7ao",
                    "common": "Cura\xe7ao"
                },
                "pap": {
                    "official": "Pais K\xf2rsou",
                    "common": "Pais K\xf2rsou"
                }
            }
        },
        "tld": [
            ".cw"
        ],
        "cca2": "CW",
        "ccn3": "531",
        "cca3": "CUW",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "ANG": {
                "name": "Netherlands Antillean guilder",
                "symbol": "\u0192"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "99"
            ]
        },
        "capital": [
            "Willemstad"
        ],
        "altSpellings": [
            "CW",
            "Curacao",
            "K\xf2rsou",
            "Country of Cura\xe7ao",
            "Land Cura\xe7ao",
            "Pais K\xf2rsou"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English",
            "nld": "Dutch",
            "pap": "Papiamento"
        },
        "translations": {
            "ara": {
                "official": "\u062F\u0648\u0644\u0629 \u0643\u0648\u0631\u0627\u0633\u0627\u0648",
                "common": "\u0643\u0648\u0631\u0627\u0633\u0627\u0648"
            },
            "bre": {
                "official": "Bro Cura\xe7ao",
                "common": "Cura\xe7ao"
            },
            "ces": {
                "official": "Autonomn\xed zem\u011B Cura\xe7ao",
                "common": "Cura\xe7ao"
            },
            "cym": {
                "official": "Country of Cura\xe7ao",
                "common": "Cura\xe7ao"
            },
            "deu": {
                "official": "Land Cura\xe7ao",
                "common": "Cura\xe7ao"
            },
            "est": {
                "official": "Cura\xe7ao",
                "common": "Cura\xe7ao"
            },
            "fin": {
                "official": "Cura\xe7ao",
                "common": "Cura\xe7ao"
            },
            "fra": {
                "official": "Pays de Cura\xe7ao",
                "common": "Cura\xe7ao"
            },
            "hun": {
                "official": "Cura\xe7ao",
                "common": "Cura\xe7ao"
            },
            "ita": {
                "official": "Paese di Cura\xe7ao",
                "common": "Cura\xe7ao"
            },
            "kor": {
                "official": "\uD034\uB77C\uC18C",
                "common": "\uD034\uB77C\uC18C"
            },
            "nld": {
                "official": "Land Cura\xe7ao",
                "common": "Cura\xe7ao"
            },
            "per": {
                "official": "\u06A9\u0648\u0631\u0627\u0633\u0627\u0626\u0648",
                "common": "\u06A9\u0648\u0631\u0627\u0633\u0627\u0626\u0648"
            },
            "pol": {
                "official": "Cura\xe7ao",
                "common": "Cura\xe7ao"
            },
            "por": {
                "official": "Pa\xeds de Cura\xe7ao",
                "common": "ilha da Cura\xe7\xe3o"
            },
            "rus": {
                "official": "\u0421\u0442\u0440\u0430\u043D\u0430 \u041A\u044E\u0440\u0430\u0441\u0430\u043E",
                "common": "\u041A\u044E\u0440\u0430\u0441\u0430\u043E"
            },
            "slk": {
                "official": "Curacao",
                "common": "Curacao"
            },
            "spa": {
                "official": "Pa\xeds de Curazao",
                "common": "Curazao"
            },
            "srp": {
                "official": "\u041A\u0443\u0440\u0430\u0441\u0430\u043E",
                "common": "\u041A\u0443\u0440\u0430\u0441\u0430\u043E"
            },
            "swe": {
                "official": "Cura\xe7ao",
                "common": "Cura\xe7ao"
            },
            "tur": {
                "official": "Cura\xe7ao",
                "common": "Cura\xe7ao"
            },
            "urd": {
                "official": "\u0645\u0645\u0644\u06A9\u062A\u0650 \u06A9\u06CC\u0648\u0631\u0627\u0633\u0627\u0624",
                "common": "\u06A9\u06CC\u0648\u0631\u0627\u0633\u0627\u0624"
            },
            "zho": {
                "official": "\u5E93\u62C9\u7D22",
                "common": "\u5E93\u62C9\u7D22"
            }
        },
        "latlng": [
            12.116667,
            -68.933333
        ],
        "landlocked": false,
        "area": 444,
        "demonyms": {
            "eng": {
                "f": "Cura\xe7aoan",
                "m": "Cura\xe7aoan"
            },
            "fra": {
                "f": "Curacienne",
                "m": "Curacien"
            }
        },
        "flag": "\uD83C\uDDE8\uD83C\uDDFC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/9D3hTeA3qKaRT7S16",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1216719"
        },
        "population": 155014,
        "fifa": "CUW",
        "car": {
            "signs": [
                "CW"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/cw.png",
            "svg": "https://flagcdn.com/cw.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/cw.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/cw.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                12.1,
                -68.92
            ]
        }
    },
    {
        "name": {
            "common": "Paraguay",
            "official": "Republic of Paraguay",
            "nativeName": {
                "grn": {
                    "official": "Tet\xe3 Paragu\xe1i",
                    "common": "Paragu\xe1i"
                },
                "spa": {
                    "official": "Rep\xfablica de Paraguay",
                    "common": "Paraguay"
                }
            }
        },
        "tld": [
            ".py"
        ],
        "cca2": "PY",
        "ccn3": "600",
        "cca3": "PRY",
        "cioc": "PAR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "PYG": {
                "name": "Paraguayan guaran\xed",
                "symbol": "\u20B2"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "95"
            ]
        },
        "capital": [
            "Asunci\xf3n"
        ],
        "altSpellings": [
            "PY",
            "Republic of Paraguay",
            "Rep\xfablica del Paraguay",
            "Tet\xe3 Paragu\xe1i"
        ],
        "region": "Americas",
        "subregion": "South America",
        "languages": {
            "grn": "Guaran\xed",
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u0627\u0631\u0627\u063A\u0648\u0627\u064A",
                "common": "\u0628\u0627\u0631\u0627\u063A\u0648\u0627\u064A"
            },
            "bre": {
                "official": "Republik Paraguay",
                "common": "Paraguay"
            },
            "ces": {
                "official": "Paraguaysk\xe1 republika",
                "common": "Paraguay"
            },
            "cym": {
                "official": "Republic of Paraguay",
                "common": "Paraguay"
            },
            "deu": {
                "official": "Republik Paraguay",
                "common": "Paraguay"
            },
            "est": {
                "official": "Paraguay Vabariik",
                "common": "Paraguay"
            },
            "fin": {
                "official": "Paraguayn tasavalta",
                "common": "Paraguay"
            },
            "fra": {
                "official": "R\xe9publique du Paraguay",
                "common": "Paraguay"
            },
            "hrv": {
                "official": "Republika Paragvaj",
                "common": "Paragvaj"
            },
            "hun": {
                "official": "Paraguayi K\xf6zt\xe1rsas\xe1g",
                "common": "Paraguay"
            },
            "ita": {
                "official": "Repubblica del Paraguay",
                "common": "Paraguay"
            },
            "jpn": {
                "official": "\u30D1\u30E9\u30B0\u30A2\u30A4\u5171\u548C\u56FD",
                "common": "\u30D1\u30E9\u30B0\u30A2\u30A4"
            },
            "kor": {
                "official": "\uD30C\uB77C\uACFC\uC774 \uACF5\uD654\uAD6D",
                "common": "\uD30C\uB77C\uACFC\uC774"
            },
            "nld": {
                "official": "Republiek Paraguay",
                "common": "Paraguay"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u067E\u0627\u0631\u0627\u06AF\u0648\u0626\u0647",
                "common": "\u067E\u0627\u0631\u0627\u06AF\u0648\u0626\u0647"
            },
            "pol": {
                "official": "Republika Paragwaju",
                "common": "Paragwaj"
            },
            "por": {
                "official": "Rep\xfablica do Paraguai",
                "common": "Paraguai"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0430\u0440\u0430\u0433\u0432\u0430\u0439",
                "common": "\u041F\u0430\u0440\u0430\u0433\u0432\u0430\u0439"
            },
            "slk": {
                "official": "Paraguajsk\xe1 republika",
                "common": "Paraguaj"
            },
            "spa": {
                "official": "Rep\xfablica de Paraguay",
                "common": "Paraguay"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0430\u0440\u0430\u0433\u0432\u0430\u0458",
                "common": "\u041F\u0430\u0440\u0430\u0433\u0432\u0430\u0458"
            },
            "swe": {
                "official": "Republiken Paraguay",
                "common": "Paraguay"
            },
            "tur": {
                "official": "Paraguay Cumhuriyeti",
                "common": "Paraguay"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u067E\u06CC\u0631\u0627\u06AF\u0648\u0626\u06D2",
                "common": "\u067E\u06CC\u0631\u0627\u06AF\u0648\u0626\u06D2"
            },
            "zho": {
                "official": "\u5DF4\u62C9\u572D\u5171\u548C\u56FD",
                "common": "\u5DF4\u62C9\u572D"
            }
        },
        "latlng": [
            -23,
            -58
        ],
        "landlocked": true,
        "borders": [
            "ARG",
            "BOL",
            "BRA"
        ],
        "area": 406752,
        "demonyms": {
            "eng": {
                "f": "Paraguayan",
                "m": "Paraguayan"
            },
            "fra": {
                "f": "Paraguayenne",
                "m": "Paraguayen"
            }
        },
        "flag": "\uD83C\uDDF5\uD83C\uDDFE",
        "maps": {
            "googleMaps": "https://goo.gl/maps/JtnqG73WJn1Gx6mz6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/287077"
        },
        "population": 7132530,
        "gini": {
            "2019": 45.7
        },
        "fifa": "PAR",
        "car": {
            "signs": [
                "PY"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "South America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/py.png",
            "svg": "https://flagcdn.com/py.svg",
            "alt": "The flag of Paraguay features three equal horizontal bands of red, white and blue, with an emblem centered in the white band. On the obverse side of the flag depicted, this emblem is the national coat of arms."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/py.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/py.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -25.28,
                -57.57
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Albania",
            "official": "Republic of Albania",
            "nativeName": {
                "sqi": {
                    "official": "Republika e Shqip\xebris\xeb",
                    "common": "Shqip\xebria"
                }
            }
        },
        "tld": [
            ".al"
        ],
        "cca2": "AL",
        "ccn3": "008",
        "cca3": "ALB",
        "cioc": "ALB",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "ALL": {
                "name": "Albanian lek",
                "symbol": "L"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "55"
            ]
        },
        "capital": [
            "Tirana"
        ],
        "altSpellings": [
            "AL",
            "Shqip\xebri",
            "Shqip\xebria",
            "Shqipnia"
        ],
        "region": "Europe",
        "subregion": "Southeast Europe",
        "languages": {
            "sqi": "Albanian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0644\u0628\u0627\u0646\u064A\u0627",
                "common": "\u0623\u0644\u0628\u0627\u0646\u064A\u0627"
            },
            "bre": {
                "official": "Republik Albania",
                "common": "Albania"
            },
            "ces": {
                "official": "Alb\xe1nsk\xe1 republika",
                "common": "Alb\xe1nie"
            },
            "cym": {
                "official": "Gweriniaeth Albania",
                "common": "Albania"
            },
            "deu": {
                "official": "Republik Albanien",
                "common": "Albanien"
            },
            "est": {
                "official": "Albaania Vabariik",
                "common": "Albaania"
            },
            "fin": {
                "official": "Albanian tasavalta",
                "common": "Albania"
            },
            "fra": {
                "official": "R\xe9publique d'Albanie",
                "common": "Albanie"
            },
            "hrv": {
                "official": "Republika Albanija",
                "common": "Albanija"
            },
            "hun": {
                "official": "Alb\xe1n K\xf6zt\xe1rsas\xe1g",
                "common": "Alb\xe1nia"
            },
            "ita": {
                "official": "Repubblica d'Albania",
                "common": "Albania"
            },
            "jpn": {
                "official": "\u30A2\u30EB\u30D0\u30CB\u30A2\u5171\u548C\u56FD",
                "common": "\u30A2\u30EB\u30D0\u30CB\u30A2"
            },
            "kor": {
                "official": "\uC54C\uBC14\uB2C8\uC544 \uACF5\uD654\uAD6D",
                "common": "\uC54C\uBC14\uB2C8\uC544"
            },
            "nld": {
                "official": "Republiek Albani\xeb",
                "common": "Albani\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0622\u0644\u0628\u0627\u0646\u06CC",
                "common": "\u0622\u0644\u0628\u0627\u0646\u06CC"
            },
            "pol": {
                "official": "Republika Albanii",
                "common": "Albania"
            },
            "por": {
                "official": "Rep\xfablica da Alb\xe2nia",
                "common": "Alb\xe2nia"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u043B\u0431\u0430\u043D\u0438\u044F",
                "common": "\u0410\u043B\u0431\u0430\u043D\u0438\u044F"
            },
            "slk": {
                "official": "Alb\xe1nska republika",
                "common": "Alb\xe1nsko"
            },
            "spa": {
                "official": "Rep\xfablica de Albania",
                "common": "Albania"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430",
                "common": "\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Albanien",
                "common": "Albanien"
            },
            "tur": {
                "official": "Arnavutluk Cumhuriyeti",
                "common": "Arnavutluk"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0644\u0628\u0627\u0646\u06CC\u0627",
                "common": "\u0627\u0644\u0628\u0627\u0646\u06CC\u0627"
            },
            "zho": {
                "official": "\u963F\u5C14\u5DF4\u5C3C\u4E9A\u5171\u548C\u56FD",
                "common": "\u963F\u5C14\u5DF4\u5C3C\u4E9A"
            }
        },
        "latlng": [
            41,
            20
        ],
        "landlocked": false,
        "borders": [
            "MNE",
            "GRC",
            "MKD",
            "UNK"
        ],
        "area": 28748,
        "demonyms": {
            "eng": {
                "f": "Albanian",
                "m": "Albanian"
            },
            "fra": {
                "f": "Albanaise",
                "m": "Albanais"
            }
        },
        "flag": "\uD83C\uDDE6\uD83C\uDDF1",
        "maps": {
            "googleMaps": "https://goo.gl/maps/BzN9cTuj68ZA8SyZ8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/53292"
        },
        "population": 2837743,
        "gini": {
            "2017": 33.2
        },
        "fifa": "ALB",
        "car": {
            "signs": [
                "AL"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/al.png",
            "svg": "https://flagcdn.com/al.svg",
            "alt": "The flag of Albania features a silhouetted double-headed black eagle at the center of a red field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/al.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/al.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                41.32,
                19.82
            ]
        }
    },
    {
        "name": {
            "common": "Tajikistan",
            "official": "Republic of Tajikistan",
            "nativeName": {
                "rus": {
                    "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u0430\u0434\u0436\u0438\u043A\u0438\u0441\u0442\u0430\u043D",
                    "common": "\u0422\u0430\u0434\u0436\u0438\u043A\u0438\u0441\u0442\u0430\u043D"
                },
                "tgk": {
                    "official": "\u04B6\u0443\u043C\u04B3\u0443\u0440\u0438\u0438 \u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D",
                    "common": "\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D"
                }
            }
        },
        "tld": [
            ".tj"
        ],
        "cca2": "TJ",
        "ccn3": "762",
        "cca3": "TJK",
        "cioc": "TJK",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "TJS": {
                "name": "Tajikistani somoni",
                "symbol": "\u0405\u041C"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "92"
            ]
        },
        "capital": [
            "Dushanbe"
        ],
        "altSpellings": [
            "TJ",
            "To\xe7ikiston",
            "Republic of Tajikistan",
            "\u04B6\u0443\u043C\u04B3\u0443\u0440\u0438\u0438 \u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D",
            "\xc7umhuriyi To\xe7ikiston"
        ],
        "region": "Asia",
        "subregion": "Central Asia",
        "languages": {
            "rus": "Russian",
            "tgk": "Tajik"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0637\u0627\u062C\u064A\u0643\u0633\u062A\u0627\u0646",
                "common": "\u0637\u0627\u062C\u064A\u0643\u0633\u062A\u0627\u0646"
            },
            "bre": {
                "official": "Republik Tadjikistan",
                "common": "Tadjikistan"
            },
            "ces": {
                "official": "Republika T\xe1d\u017Eikist\xe1n",
                "common": "T\xe1d\u017Eikist\xe1n"
            },
            "cym": {
                "official": "Republic of Tajikistan",
                "common": "Tajikistan"
            },
            "deu": {
                "official": "Republik Tadschikistan",
                "common": "Tadschikistan"
            },
            "est": {
                "official": "Tad\u017Eikistani Vabariik",
                "common": "Tad\u017Eikistan"
            },
            "fin": {
                "official": "Tad\u017Eikistanin tasavalta",
                "common": "Tad\u017Eikistan"
            },
            "fra": {
                "official": "R\xe9publique du Tadjikistan",
                "common": "Tadjikistan"
            },
            "hrv": {
                "official": "Republika Tad\u017Eikistan",
                "common": "Ta\u0111ikistan"
            },
            "hun": {
                "official": "T\xe1dzsik K\xf6zt\xe1rsas\xe1g",
                "common": "T\xe1dzsikiszt\xe1n"
            },
            "ita": {
                "official": "Repubblica del Tajikistan",
                "common": "Tagikistan"
            },
            "jpn": {
                "official": "\u30BF\u30B8\u30AD\u30B9\u30BF\u30F3\u5171\u548C\u56FD",
                "common": "\u30BF\u30B8\u30AD\u30B9\u30BF\u30F3"
            },
            "kor": {
                "official": "\uD0C0\uC9C0\uD0A4\uC2A4\uD0C4 \uACF5\uD654\uAD6D",
                "common": "\uD0C0\uC9C0\uD0A4\uC2A4\uD0C4"
            },
            "nld": {
                "official": "Tadzjikistan",
                "common": "Tadzjikistan"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062A\u0627\u062C\u06CC\u06A9\u0633\u062A\u0627\u0646",
                "common": "\u062A\u0627\u062C\u06CC\u06A9\u0650\u0633\u062A\u0627\u0646"
            },
            "pol": {
                "official": "Republika Tad\u017Cykistanu",
                "common": "Tad\u017Cykistan"
            },
            "por": {
                "official": "Rep\xfablica do Tajiquist\xe3o",
                "common": "Tajiquist\xe3o"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u0430\u0434\u0436\u0438\u043A\u0438\u0441\u0442\u0430\u043D",
                "common": "\u0422\u0430\u0434\u0436\u0438\u043A\u0438\u0441\u0442\u0430\u043D"
            },
            "slk": {
                "official": "Ta\u01C6ick\xe1 republika",
                "common": "Ta\u01C6ikistan"
            },
            "spa": {
                "official": "Rep\xfablica de Tayikist\xe1n",
                "common": "Tayikist\xe1n"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u0430\u045F\u0438\u043A\u0438\u0441\u0442\u0430\u043D",
                "common": "\u0422\u0430\u045F\u0438\u043A\u0438\u0441\u0442\u0430\u043D"
            },
            "swe": {
                "official": "Republiken Tadzjikistan",
                "common": "Tadzjikistan"
            },
            "tur": {
                "official": "Tacikistan Cumhuriyeti",
                "common": "Tacikistan"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062A\u0627\u062C\u06A9\u0633\u062A\u0627\u0646",
                "common": "\u062A\u0627\u062C\u06A9\u0633\u062A\u0627\u0646"
            },
            "zho": {
                "official": "\u5854\u5409\u514B\u65AF\u5766\u5171\u548C\u56FD",
                "common": "\u5854\u5409\u514B\u65AF\u5766"
            }
        },
        "latlng": [
            39,
            71
        ],
        "landlocked": true,
        "borders": [
            "AFG",
            "CHN",
            "KGZ",
            "UZB"
        ],
        "area": 143100,
        "demonyms": {
            "eng": {
                "f": "Tadzhik",
                "m": "Tadzhik"
            },
            "fra": {
                "f": "Tadjike",
                "m": "Tadjike"
            }
        },
        "flag": "\uD83C\uDDF9\uD83C\uDDEF",
        "maps": {
            "googleMaps": "https://goo.gl/maps/8rQgW88jEXijhVb58",
            "openStreetMaps": "https://www.openstreetmap.org/relation/214626"
        },
        "population": 9537642,
        "gini": {
            "2015": 34
        },
        "fifa": "TJK",
        "car": {
            "signs": [
                "TJ"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+05:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/tj.png",
            "svg": "https://flagcdn.com/tj.svg",
            "alt": "The flag of Tajikistan is composed of three horizontal bands of red, white and green in the ratio of 2:3:2. A golden-yellow crown surmounted by an arc of seven five-pointed golden-yellow stars is centered in the white band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/tj.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/tj.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                38.55,
                68.77
            ]
        },
        "postalCode": {
            "format": "######",
            "regex": "^(\\d{6})$"
        }
    },
    {
        "name": {
            "common": "Bolivia",
            "official": "Plurinational State of Bolivia",
            "nativeName": {
                "aym": {
                    "official": "Wuliwya Suyu",
                    "common": "Wuliwya"
                },
                "grn": {
                    "official": "Tet\xe3 Vol\xedvia",
                    "common": "Vol\xedvia"
                },
                "que": {
                    "official": "Buliwya Mamallaqta",
                    "common": "Buliwya"
                },
                "spa": {
                    "official": "Estado Plurinacional de Bolivia",
                    "common": "Bolivia"
                }
            }
        },
        "tld": [
            ".bo"
        ],
        "cca2": "BO",
        "ccn3": "068",
        "cca3": "BOL",
        "cioc": "BOL",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "BOB": {
                "name": "Bolivian boliviano",
                "symbol": "Bs."
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "91"
            ]
        },
        "capital": [
            "Sucre"
        ],
        "altSpellings": [
            "BO",
            "Buliwya",
            "Wuliwya",
            "Bolivia, Plurinational State of",
            "Plurinational State of Bolivia",
            "Estado Plurinacional de Bolivia",
            "Buliwya Mamallaqta",
            "Wuliwya Suyu",
            "Tet\xe3 Vol\xedvia"
        ],
        "region": "Americas",
        "subregion": "South America",
        "languages": {
            "aym": "Aymara",
            "grn": "Guaran\xed",
            "que": "Quechua",
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u062F\u0648\u0644\u0629 \u0628\u0648\u0644\u064A\u0641\u064A\u0627 \u0627\u0644\u0645\u062A\u0639\u062F\u062F\u0629 \u0627\u0644\u0642\u0648\u0645\u064A\u0627\u062A",
                "common": "\u0628\u0648\u0644\u064A\u0641\u064A\u0627"
            },
            "bre": {
                "official": "Stad Liesvroadel Bolivia",
                "common": "Bolivia"
            },
            "ces": {
                "official": "Mnohon\xe1rodnostn\xed st\xe1t Bol\xedvie",
                "common": "Bol\xedvie"
            },
            "cym": {
                "official": "Gweriniaeth Bolifia",
                "common": "Bolifia"
            },
            "deu": {
                "official": "Plurinationaler Staat Bolivien",
                "common": "Bolivien"
            },
            "est": {
                "official": "Boliivia Paljurahvuseline Riik",
                "common": "Boliivia"
            },
            "fin": {
                "official": "Bolivian monikansainen valtio",
                "common": "Bolivia"
            },
            "fra": {
                "official": "\xc9tat plurinational de Bolivie",
                "common": "Bolivie"
            },
            "hrv": {
                "official": "Plurinational State of Bolivia",
                "common": "Bolivija"
            },
            "hun": {
                "official": "Bol\xedviai T\xf6bbnemzetis\xe9g\u0171 \xc1llam",
                "common": "Bol\xedvia"
            },
            "ita": {
                "official": "Stato Plurinazionale della Bolivia",
                "common": "Bolivia"
            },
            "jpn": {
                "official": "\u30DC\u30EA\u30D3\u30A2\u306E\u591A\u6C11\u65CF\u56FD",
                "common": "\u30DC\u30EA\u30D3\u30A2\u591A\u6C11\u65CF\u56FD"
            },
            "kor": {
                "official": "\uBCFC\uB9AC\uBE44\uC544 \uB2E4\uBBFC\uC871\uAD6D",
                "common": "\uBCFC\uB9AC\uBE44\uC544"
            },
            "nld": {
                "official": "Plurinationale Staat van Bolivia",
                "common": "Bolivia"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0628\u0648\u0644\u06CC\u0648\u06CC",
                "common": "\u0628\u0648\u0644\u06CC\u0648\u06CC"
            },
            "pol": {
                "official": "Wielonarodowe Pa\u0144stwo Boliwia",
                "common": "Boliwia"
            },
            "por": {
                "official": "Estado Plurinacional da Bol\xedvia",
                "common": "Bol\xedvia"
            },
            "rus": {
                "official": "\u041C\u043D\u043E\u0433\u043E\u043D\u0430\u0446\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u043E\u0435 \u0413\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u0411\u043E\u043B\u0438\u0432\u0438\u044F",
                "common": "\u0411\u043E\u043B\u0438\u0432\u0438\u044F"
            },
            "slk": {
                "official": "Bol\xedvijsk\xe1 republika",
                "common": "Bol\xedvia"
            },
            "spa": {
                "official": "Estado Plurinacional de Bolivia",
                "common": "Bolivia"
            },
            "srp": {
                "official": "\u0412\u0438\u0448\u0435\u043D\u0430\u0446\u0438\u043E\u043D\u0430\u043B\u043D\u0430 \u0414\u0440\u0436\u0430\u0432\u0430 \u0411\u043E\u043B\u0438\u0432\u0438\u0458\u0430",
                "common": "\u0411\u043E\u043B\u0438\u0432\u0438\u0458\u0430"
            },
            "swe": {
                "official": "M\xe5ngnationella staten Bolivia",
                "common": "Bolivia"
            },
            "tur": {
                "official": "Bolivya \xc7okuluslu Devleti",
                "common": "Bolivya"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0628\u0648\u0644\u06CC\u0648\u06CC\u0627",
                "common": "\u0628\u0648\u0644\u06CC\u0648\u06CC\u0627"
            },
            "zho": {
                "official": "\u591A\u6C11\u65CF\u73BB\u5229\u7EF4\u4E9A\u56FD",
                "common": "\u73BB\u5229\u7EF4\u4E9A"
            }
        },
        "latlng": [
            -17,
            -65
        ],
        "landlocked": true,
        "borders": [
            "ARG",
            "BRA",
            "CHL",
            "PRY",
            "PER"
        ],
        "area": 1098581,
        "demonyms": {
            "eng": {
                "f": "Bolivian",
                "m": "Bolivian"
            },
            "fra": {
                "f": "Bolivienne",
                "m": "Bolivien"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDF4",
        "maps": {
            "googleMaps": "https://goo.gl/maps/9DfnyfbxNM2g5U9b9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/252645"
        },
        "population": 11673029,
        "gini": {
            "2019": 41.6
        },
        "fifa": "BOL",
        "car": {
            "signs": [
                "BOL"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "South America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/bo.png",
            "svg": "https://flagcdn.com/bo.svg",
            "alt": "The flag of Bolivia is composed of three equal horizontal bands of red, yellow and green, with the national coat of arms centered in the yellow band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/bo.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/bo.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -19.02,
                -65.26
            ]
        }
    },
    {
        "name": {
            "common": "Austria",
            "official": "Republic of Austria",
            "nativeName": {
                "bar": {
                    "official": "Republik \xd6sterreich",
                    "common": "\xd6sterreich"
                }
            }
        },
        "tld": [
            ".at"
        ],
        "cca2": "AT",
        "ccn3": "040",
        "cca3": "AUT",
        "cioc": "AUT",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+4",
            "suffixes": [
                "3"
            ]
        },
        "capital": [
            "Vienna"
        ],
        "altSpellings": [
            "AT",
            "Osterreich",
            "Oesterreich"
        ],
        "region": "Europe",
        "subregion": "Central Europe",
        "languages": {
            "de": "German"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0646\u0645\u0633\u0627",
                "common": "\u0627\u0644\u0646\u0645\u0633\u0627"
            },
            "bre": {
                "official": "Republik Aostria",
                "common": "Aostria"
            },
            "ces": {
                "official": "Rakousk\xe1 republika",
                "common": "Rakousko"
            },
            "cym": {
                "official": "Gweriniaeth Awstria",
                "common": "Awstria"
            },
            "deu": {
                "official": "Republik \xd6sterreich",
                "common": "\xd6sterreich"
            },
            "est": {
                "official": "Austria Vabariik",
                "common": "Austria"
            },
            "fin": {
                "official": "It\xe4vallan tasavalta",
                "common": "It\xe4valta"
            },
            "fra": {
                "official": "R\xe9publique d'Autriche",
                "common": "Autriche"
            },
            "hrv": {
                "official": "Republika Austrija",
                "common": "Austrija"
            },
            "hun": {
                "official": "Ausztria",
                "common": "Ausztria"
            },
            "ita": {
                "official": "Repubblica d'Austria",
                "common": "Austria"
            },
            "jpn": {
                "official": "\u30AA\u30FC\u30B9\u30C8\u30EA\u30A2\u5171\u548C\u56FD",
                "common": "\u30AA\u30FC\u30B9\u30C8\u30EA\u30A2"
            },
            "kor": {
                "official": "\uC624\uC2A4\uD2B8\uB9AC\uC544 \uACF5\uD654\uAD6D",
                "common": "\uC624\uC2A4\uD2B8\uB9AC\uC544"
            },
            "nld": {
                "official": "Republiek Oostenrijk",
                "common": "Oostenrijk"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u062A\u0631\u06CC\u0634",
                "common": "\u0627\u062A\u0631\u06CC\u0634"
            },
            "pol": {
                "official": "Republika Austrii",
                "common": "Austria"
            },
            "por": {
                "official": "Rep\xfablica da \xc1ustria",
                "common": "\xc1ustria"
            },
            "rus": {
                "official": "\u0410\u0432\u0441\u0442\u0440\u0438\u0439\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0410\u0432\u0441\u0442\u0440\u0438\u044F"
            },
            "slk": {
                "official": "Rak\xfaska republika",
                "common": "Rak\xfasko"
            },
            "spa": {
                "official": "Rep\xfablica de Austria",
                "common": "Austria"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u0443\u0441\u0442\u0440\u0438\u0458\u0430",
                "common": "\u0410\u0443\u0441\u0442\u0440\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken \xd6sterrike",
                "common": "\xd6sterrike"
            },
            "tur": {
                "official": "Avusturya Cumhuriyeti",
                "common": "Avusturya"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0622\u0633\u0679\u0631\u06CC\u0627",
                "common": "\u0622\u0633\u0679\u0631\u06CC\u0627"
            },
            "zho": {
                "official": "\u5965\u5730\u5229\u5171\u548C\u56FD",
                "common": "\u5965\u5730\u5229"
            }
        },
        "latlng": [
            47.33333333,
            13.33333333
        ],
        "landlocked": true,
        "borders": [
            "CZE",
            "DEU",
            "HUN",
            "ITA",
            "LIE",
            "SVK",
            "SVN",
            "CHE"
        ],
        "area": 83871,
        "demonyms": {
            "eng": {
                "f": "Austrian",
                "m": "Austrian"
            },
            "fra": {
                "f": "Autrichienne",
                "m": "Autrichien"
            }
        },
        "flag": "\uD83C\uDDE6\uD83C\uDDF9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/pCWpWQhznHyRzQcu9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/16239"
        },
        "population": 8917205,
        "gini": {
            "2018": 30.8
        },
        "fifa": "AUT",
        "car": {
            "signs": [
                "A"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/at.png",
            "svg": "https://flagcdn.com/at.svg",
            "alt": "The flag of Austria is composed of three equal horizontal bands of red, white and red."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/at.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/at.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                48.2,
                16.37
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Saint Kitts and Nevis",
            "official": "Federation of Saint Christopher and Nevis",
            "nativeName": {
                "eng": {
                    "official": "Federation of Saint Christopher and Nevis",
                    "common": "Saint Kitts and Nevis"
                }
            }
        },
        "tld": [
            ".kn"
        ],
        "cca2": "KN",
        "ccn3": "659",
        "cca3": "KNA",
        "cioc": "SKN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "XCD": {
                "name": "Eastern Caribbean dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "869"
            ]
        },
        "capital": [
            "Basseterre"
        ],
        "altSpellings": [
            "KN",
            "Federation of Saint Christopher and Nevis"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u062A\u062D\u0627\u062F \u0627\u0644\u0642\u062F\u064A\u0633 \u0643\u0631\u064A\u0633\u062A\u0648\u0641\u0631 \u0648\u0646\u064A\u0641\u064A\u0633",
                "common": "\u0633\u0627\u0646\u062A \u0643\u064A\u062A\u0633 \u0648\u0646\u064A\u0641\u064A\u0633"
            },
            "bre": {
                "official": "Kevread Saint Kitts ha Nevis",
                "common": "Saint Kitts ha Nevis"
            },
            "ces": {
                "official": "Federace Sv. Kry\u0161tof a Nevis",
                "common": "Svat\xfd Kry\u0161tof a Nevis"
            },
            "cym": {
                "official": "Federation of Saint Christopher and Nevis",
                "common": "Saint Kitts and Nevis"
            },
            "deu": {
                "official": "F\xf6deration von St. Kitts und Nevis",
                "common": "St. Kitts und Nevis"
            },
            "est": {
                "official": "Saint Kittsi ja Nevise F\xf6deratsioon",
                "common": "Saint Kitts ja Nevis"
            },
            "fin": {
                "official": "Saint Christopherin ja Nevisin federaatio",
                "common": "Saint Kitts ja Nevis"
            },
            "fra": {
                "official": "F\xe9d\xe9ration de Saint-Christophe-et-Ni\xe9v\xe8s",
                "common": "Saint-Christophe-et-Ni\xe9v\xe8s"
            },
            "hrv": {
                "official": "Federacija Sv.Kristofora i Nevisa",
                "common": "Sveti Kristof i Nevis"
            },
            "hun": {
                "official": "Saint Christopher \xe9s Nevis \xc1llamsz\xf6vets\xe9g",
                "common": "Saint Kitts \xe9s Nevis"
            },
            "ita": {
                "official": "Federazione di Saint Christopher e Nevis",
                "common": "Saint Kitts e Nevis"
            },
            "jpn": {
                "official": "\u30BB\u30F3\u30C8\u30AF\u30EA\u30B9\u30C8\u30D5\u30A1\u30FCNevis\u9023\u76DF",
                "common": "\u30BB\u30F3\u30C8\u30AF\u30EA\u30B9\u30C8\u30D5\u30A1\u30FC\u30FB\u30CD\u30A4\u30D3\u30B9"
            },
            "kor": {
                "official": "\uC138\uC778\uD2B8\uD0A4\uCE20 \uB124\uBE44\uC2A4 \uC5F0\uBC29",
                "common": "\uC138\uC778\uD2B8\uD0A4\uCE20 \uB124\uBE44\uC2A4"
            },
            "nld": {
                "official": "Federatie van Saint Kitts en Nevis",
                "common": "Saint Kitts en Nevis"
            },
            "per": {
                "official": "\u0641\u062F\u0631\u0627\u0633\u06CC\u0648\u0646 \u0633\u0646\u062A \u06A9\u06CC\u062A\u0633 \u0648 \u0646\u0648\u06CC\u0633",
                "common": "\u0633\u0646\u062A \u06A9\u06CC\u062A\u0633 \u0648 \u0646\u0648\u06CC\u0633"
            },
            "pol": {
                "official": "Federacja Saint Kitts i Nevis",
                "common": "Saint Kitts i Nevis"
            },
            "por": {
                "official": "Federa\xe7\xe3o de S\xe3o Crist\xf3v\xe3o e Nevis",
                "common": "S\xe3o Crist\xf3v\xe3o e Nevis"
            },
            "rus": {
                "official": "\u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044F \u0421\u0435\u043D\u0442-\u041A\u0440\u0438\u0441\u0442\u043E\u0444\u0435\u0440 \u0438 \u041D \u0435 \u0432 \u0438 \u0441",
                "common": "\u0421\u0435\u043D\u0442-\u041A\u0438\u0442\u0441 \u0438 \u041D\u0435\u0432\u0438\u0441"
            },
            "slk": {
                "official": "Feder\u0EE1cia Sv\xe4t\xe9ho Kri\u0161tofa a Nevisu",
                "common": "Sv\xe4t\xfd Kri\u0161tof a Nevis"
            },
            "spa": {
                "official": "Federaci\xf3n de San Crist\xf3bal y Nevis",
                "common": "San Crist\xf3bal y Nieves"
            },
            "srp": {
                "official": "\u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u0458\u0430 \u0421\u0432\u0435\u0442\u0438 \u041A\u0440\u0438\u0441\u0442\u043E\u0444\u0435\u0440 \u0438 \u041D\u0435\u0432\u0438\u0441",
                "common": "\u0421\u0435\u043D\u0442 \u041A\u0438\u0442\u0441 \u0438 \u041D\u0435\u0432\u0438\u0441"
            },
            "swe": {
                "official": "Federationen Saint Kitts och Nevis",
                "common": "Saint Kitts och Nevis"
            },
            "tur": {
                "official": "Saint Kitts ve Nevis Federasyonu",
                "common": "Saint Kitts ve Nevis"
            },
            "urd": {
                "official": "\u0648\u0641\u0627\u0642\u0650 \u0633\u06CC\u0646\u0679 \u06A9\u06CC\u0679\u0632 \u0648 \u0646\u0627\u0648\u06CC\u0633",
                "common": "\u0633\u06CC\u0646\u0679 \u06A9\u06CC\u0679\u0632 \u0648 \u0646\u0627\u0648\u06CC\u0633"
            },
            "zho": {
                "official": "\u5723\u514B\u91CC\u65AF\u6258\u5F17\u548C\u5C3C\u7EF4\u65AF\u8054\u90A6",
                "common": "\u5723\u57FA\u8328\u548C\u5C3C\u7EF4\u65AF"
            }
        },
        "latlng": [
            17.33333333,
            -62.75
        ],
        "landlocked": false,
        "area": 261,
        "demonyms": {
            "eng": {
                "f": "Kittitian or Nevisian",
                "m": "Kittitian or Nevisian"
            },
            "fra": {
                "f": "Kittitienne-et-nevicienne",
                "m": "Kittitien-et-nevicien"
            }
        },
        "flag": "\uD83C\uDDF0\uD83C\uDDF3",
        "maps": {
            "googleMaps": "https://goo.gl/maps/qiaVwcLVTXX3eoTNA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/536899"
        },
        "population": 53192,
        "fifa": "SKN",
        "car": {
            "signs": [
                "KN"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/kn.png",
            "svg": "https://flagcdn.com/kn.svg",
            "alt": "The flag of Saint Kitts and Nevis features two large five-pointed white stars within a yellow-edged black diagonal band that extends from the lower hoist-side corner to the upper fly-side corner of the field. Above and beneath this band are a green and red triangle respectively."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/kn.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/kn.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                17.3,
                -62.72
            ]
        }
    },
    {
        "name": {
            "common": "United States Minor Outlying Islands",
            "official": "United States Minor Outlying Islands",
            "nativeName": {
                "eng": {
                    "official": "United States Minor Outlying Islands",
                    "common": "United States Minor Outlying Islands"
                }
            }
        },
        "tld": [
            ".us"
        ],
        "cca2": "UM",
        "ccn3": "581",
        "cca3": "UMI",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "68"
            ]
        },
        "capital": [
            "Washington DC"
        ],
        "altSpellings": [
            "UM"
        ],
        "region": "Americas",
        "subregion": "North America",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0632\u0631 \u0627\u0644\u0648\u0644\u0627\u064A\u0627\u062A \u0627\u0644\u0645\u062A\u062D\u062F\u0629 \u0627\u0644\u0635\u063A\u064A\u0631\u0629 \u0627\u0644\u0646\u0627\u0626\u064A\u0629",
                "common": "\u062C\u0632\u0631 \u0627\u0644\u0648\u0644\u0627\u064A\u0627\u062A \u0627\u0644\u0645\u062A\u062D\u062F\u0629 \u0627\u0644\u0635\u063A\u064A\u0631\u0629 \u0627\u0644\u0646\u0627\u0626\u064A\u0629"
            },
            "bre": {
                "official": "Inizi Minor A-bell Stado\xf9-Unanet",
                "common": "Inizi Minor A-bell Stado\xf9-Unanet"
            },
            "ces": {
                "official": "Men\u0161\xed odlehl\xe9 ostrovy Spojen\xfdch st\xe1t\u016F americk\xfdch",
                "common": "Men\u0161\xed odlehl\xe9 ostrovy USA"
            },
            "cym": {
                "official": "United States Minor Outlying Islands",
                "common": "United States Minor Outlying Islands"
            },
            "deu": {
                "official": "USA, kleinere ausgelagerte Inseln",
                "common": "Kleinere Inselbesitzungen der Vereinigten Staaten"
            },
            "est": {
                "official": "\xdchendriikide v\xe4ikesed hajasaared",
                "common": "\xdchendriikide hajasaared"
            },
            "fin": {
                "official": "Yhdysvaltain asumattomat saaret",
                "common": "Yhdysvaltain asumattomat saaret"
            },
            "fra": {
                "official": "\xceles mineures \xe9loign\xe9es des \xc9tats-Unis",
                "common": "\xceles mineures \xe9loign\xe9es des \xc9tats-Unis"
            },
            "hrv": {
                "official": "Mali udaljeni otoci SAD-a",
                "common": "Mali udaljeni otoci SAD-a"
            },
            "hun": {
                "official": "Az Amerikai Egyes\xfclt \xc1llamok lakatlan k\xfclbirtokai",
                "common": "Az Amerikai Egyes\xfclt \xc1llamok lakatlan k\xfclbirtokai"
            },
            "ita": {
                "official": "Stati Uniti Isole Minori",
                "common": "Isole minori esterne degli Stati Uniti d'America"
            },
            "jpn": {
                "official": "\u30A2\u30E1\u30EA\u30AB\u5408\u8846\u56FD\u5916\u8AF8\u5CF6",
                "common": "\u5408\u8846\u56FD\u9818\u6709\u5C0F\u96E2\u5CF6"
            },
            "kor": {
                "official": "\uBBF8\uAD6D\uB839 \uAD70\uC18C \uC81C\uB3C4",
                "common": "\uBBF8\uAD6D\uB839 \uAD70\uC18C \uC81C\uB3C4"
            },
            "nld": {
                "official": "Kleine afgelegen eilanden van de Verenigde Staten",
                "common": "Kleine afgelegen eilanden van de Verenigde Staten"
            },
            "per": {
                "official": "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u0648\u0686\u06A9 \u062D\u0627\u0634\u06CC\u0647\u200C\u0627\u06CC \u0627\u06CC\u0627\u0644\u0627\u062A \u0645\u062A\u062D\u062F\u0647 \u0622\u0645\u0631\u06CC\u06A9\u0627",
                "common": "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u0648\u0686\u06A9 \u062D\u0627\u0634\u06CC\u0647\u200C\u0627\u06CC \u0627\u06CC\u0627\u0644\u0627\u062A \u0645\u062A\u062D\u062F\u0647 \u0622\u0645\u0631\u06CC\u06A9\u0627"
            },
            "pol": {
                "official": "Dalekie Wyspy Mniejsze Stan\xf3w Zjednoczonych",
                "common": "Dalekie Wyspy Mniejsze Stan\xf3w Zjednoczonych"
            },
            "por": {
                "official": "Estados Unidos Ilhas Menores Distantes",
                "common": "Ilhas Menores Distantes dos Estados Unidos"
            },
            "rus": {
                "official": "\u0412\u043D\u0435\u0448\u043D\u0438\u0435 \u043C\u0430\u043B\u044B\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430 \u0421\u0428\u0410",
                "common": "\u0412\u043D\u0435\u0448\u043D\u0438\u0435 \u043C\u0430\u043B\u044B\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430 \u0421\u0428\u0410"
            },
            "slk": {
                "official": "Men\u0161ie od\u013Eahl\xe9 ostrovy Spjoen\xfdch \u0161t\xe1tov",
                "common": "Men\u0161ie od\u013Eahl\xe9 ostrovy USA"
            },
            "spa": {
                "official": "Estados Unidos Islas menores alejadas de",
                "common": "Islas Ultramarinas Menores de Estados Unidos"
            },
            "srp": {
                "official": "\u041C\u0430\u043B\u0430 \u0441\u043F\u043E\u0459\u043D\u0430 \u043E\u0441\u0442\u0440\u0432\u0430 \u0421\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u0438\u0445 \u0410\u043C\u0435\u0440\u0438\u0447\u043A\u0438\u0445 \u0414\u0440\u0436\u0430\u0432\u0430",
                "common": "\u041C\u0430\u043B\u0430 \u0441\u043F\u043E\u0459\u043D\u0430 \u043E\u0441\u0442\u0440\u0432\u0430 \u0421\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u0438\u0445 \u0410\u043C\u0435\u0440\u0438\u0447\u043A\u0438\u0445 \u0414\u0440\u0436\u0430\u0432\u0430"
            },
            "swe": {
                "official": "F\xf6renta staternas mindre \xf6ar i Oceanien och V\xe4stindien",
                "common": "F\xf6renta staternas mindre \xf6ar i Oceanien och V\xe4stindien"
            },
            "tur": {
                "official": "Amerika Birle\u015Fik Devletleri K\xfc\xe7\xfck D\u0131\u015F Adalar\u0131",
                "common": "Amerika Birle\u015Fik Devletleri K\xfc\xe7\xfck D\u0131\u015F Adalar\u0131"
            },
            "urd": {
                "official": "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0686\u06BE\u0648\u0679\u06D2 \u0628\u06CC\u0631\u0648\u0646\u06CC \u062C\u0632\u0627\u0626\u0631",
                "common": "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0686\u06BE\u0648\u0679\u06D2 \u0628\u06CC\u0631\u0648\u0646\u06CC \u062C\u0632\u0627\u0626\u0631"
            },
            "zho": {
                "official": "\u7F8E\u56FD\u672C\u571F\u5916\u5C0F\u5C9B\u5C7F",
                "common": "\u7F8E\u56FD\u672C\u571F\u5916\u5C0F\u5C9B\u5C7F"
            }
        },
        "latlng": [
            19.3,
            166.633333
        ],
        "landlocked": false,
        "area": 34.2,
        "demonyms": {
            "eng": {
                "f": "American Islander",
                "m": "American Islander"
            }
        },
        "flag": "\uD83C\uDDFA\uD83C\uDDF2",
        "maps": {
            "googleMaps": "https://goo.gl/maps/hZKnrzgeK69dDyPF8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/6430384"
        },
        "population": 300,
        "car": {
            "signs": [
                ""
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-11:00",
            "UTC-10:00",
            "UTC+12:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/um.png",
            "svg": "https://flagcdn.com/um.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {}
    },
    {
        "name": {
            "common": "Colombia",
            "official": "Republic of Colombia",
            "nativeName": {
                "spa": {
                    "official": "Rep\xfablica de Colombia",
                    "common": "Colombia"
                }
            }
        },
        "tld": [
            ".co"
        ],
        "cca2": "CO",
        "ccn3": "170",
        "cca3": "COL",
        "cioc": "COL",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "COP": {
                "name": "Colombian peso",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "7"
            ]
        },
        "capital": [
            "Bogot\xe1"
        ],
        "altSpellings": [
            "CO",
            "Republic of Colombia",
            "Rep\xfablica de Colombia"
        ],
        "region": "Americas",
        "subregion": "South America",
        "languages": {
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u0648\u0644\u0648\u0645\u0628\u064A\u0627",
                "common": "\u0643\u0648\u0644\u0648\u0645\u0628\u064A\u0627"
            },
            "bre": {
                "official": "Republik Kolombia",
                "common": "Kolombia"
            },
            "ces": {
                "official": "Kolumbijsk\xe1 republika",
                "common": "Kolumbie"
            },
            "cym": {
                "official": "Gweriniaeth Colombia",
                "common": "Colombia"
            },
            "deu": {
                "official": "Republik Kolumbien",
                "common": "Kolumbien"
            },
            "est": {
                "official": "Colombia Vabariik",
                "common": "Colombia"
            },
            "fin": {
                "official": "Kolumbian tasavalta",
                "common": "Kolumbia"
            },
            "fra": {
                "official": "R\xe9publique de Colombie",
                "common": "Colombie"
            },
            "hrv": {
                "official": "Republika Kolumbija",
                "common": "Kolumbija"
            },
            "hun": {
                "official": "Kolumbiai K\xf6zt\xe1rsas\xe1g",
                "common": "Kolumbia"
            },
            "ita": {
                "official": "Repubblica di Colombia",
                "common": "Colombia"
            },
            "jpn": {
                "official": "\u30B3\u30ED\u30F3\u30D3\u30A2\u5171\u548C\u56FD",
                "common": "\u30B3\u30ED\u30F3\u30D3\u30A2"
            },
            "kor": {
                "official": "\uCF5C\uB86C\uBE44\uC544 \uACF5\uD654\uAD6D",
                "common": "\uCF5C\uB86C\uBE44\uC544"
            },
            "nld": {
                "official": "Republiek Colombia",
                "common": "Colombia"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u0644\u0645\u0628\u06CC\u0627",
                "common": "\u06A9\u0644\u0645\u0628\u06CC\u0627"
            },
            "pol": {
                "official": "Republika Kolumbii",
                "common": "Kolumbia"
            },
            "por": {
                "official": "Rep\xfablica da Col\xf4mbia",
                "common": "Col\xf4mbia"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u043B\u0443\u043C\u0431\u0438\u044F",
                "common": "\u041A\u043E\u043B\u0443\u043C\u0431\u0438\u044F"
            },
            "slk": {
                "official": "Kolumbijsk\xe1 republika",
                "common": "Kolumbia"
            },
            "spa": {
                "official": "Rep\xfablica de Colombia",
                "common": "Colombia"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u043B\u0443\u043C\u0431\u0438\u0458\u0430",
                "common": "\u041A\u043E\u043B\u0443\u043C\u0431\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Colombia",
                "common": "Colombia"
            },
            "tur": {
                "official": "Kolombiya Cumhuriyeti",
                "common": "Kolombiya"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0648\u0644\u0645\u0628\u06CC\u0627",
                "common": "\u06A9\u0648\u0644\u0645\u0628\u06CC\u0627"
            },
            "zho": {
                "official": "\u54E5\u4F26\u6BD4\u4E9A\u5171\u548C\u56FD",
                "common": "\u54E5\u4F26\u6BD4\u4E9A"
            }
        },
        "latlng": [
            4,
            -72
        ],
        "landlocked": false,
        "borders": [
            "BRA",
            "ECU",
            "PAN",
            "PER",
            "VEN"
        ],
        "area": 1141748,
        "demonyms": {
            "eng": {
                "f": "Colombian",
                "m": "Colombian"
            },
            "fra": {
                "f": "Colombienne",
                "m": "Colombien"
            }
        },
        "flag": "\uD83C\uDDE8\uD83C\uDDF4",
        "maps": {
            "googleMaps": "https://goo.gl/maps/zix9qNFX69E9yZ2M6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/120027"
        },
        "population": 50882884,
        "gini": {
            "2019": 51.3
        },
        "fifa": "COL",
        "car": {
            "signs": [
                "CO"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-05:00"
        ],
        "continents": [
            "South America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/co.png",
            "svg": "https://flagcdn.com/co.svg",
            "alt": "The flag of Colombia is composed of three horizontal bands of yellow, blue and red, with the yellow band twice the height of the other two bands."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/co.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/co.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                4.71,
                -74.07
            ]
        }
    },
    {
        "name": {
            "common": "Kosovo",
            "official": "Republic of Kosovo",
            "nativeName": {
                "sqi": {
                    "official": "Republika e Kosov\xebs",
                    "common": "Kosova"
                },
                "srp": {
                    "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0441\u043E\u0432\u043E",
                    "common": "\u041A\u043E\u0441\u043E\u0432\u043E"
                }
            }
        },
        "cca2": "XK",
        "cca3": "UNK",
        "cioc": "KOS",
        "status": "user-assigned",
        "unMember": false,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "83"
            ]
        },
        "capital": [
            "Pristina"
        ],
        "altSpellings": [
            "XK",
            "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0441\u043E\u0432\u043E"
        ],
        "region": "Europe",
        "subregion": "Southeast Europe",
        "languages": {
            "sqi": "Albanian",
            "srp": "Serbian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u0648\u0633\u0648\u0641\u0648",
                "common": "\u0643\u0648\u0633\u0648\u0641\u0648"
            },
            "bre": {
                "official": "Republik Kosovo",
                "common": "Kosovo"
            },
            "ces": {
                "official": "Kosovsk\xe1 republika",
                "common": "Kosovo"
            },
            "cym": {
                "official": "Republic of Kosovo",
                "common": "Kosovo"
            },
            "deu": {
                "official": "Republik Kosovo",
                "common": "Kosovo"
            },
            "est": {
                "official": "Kosovo Vabariik",
                "common": "Kosovo"
            },
            "fin": {
                "official": "Kosovon tasavalta",
                "common": "Kosovo"
            },
            "fra": {
                "official": "R\xe9publique du Kosovo",
                "common": "Kosovo"
            },
            "hrv": {
                "official": "Republika Kosovo",
                "common": "Kosovo"
            },
            "hun": {
                "official": "Koszov\xf3",
                "common": "Koszov\xf3"
            },
            "ita": {
                "official": "Repubblica del Kosovo",
                "common": "Kosovo"
            },
            "kor": {
                "official": "\uCF54\uC18C\uBCF4 \uACF5\uD654\uAD6D",
                "common": "\uCF54\uC18C\uBCF4"
            },
            "nld": {
                "official": "Republiek Kosovo",
                "common": "Kosovo"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u0648\u0632\u0648\u0648",
                "common": "\u06A9\u0648\u0632\u0648\u0648"
            },
            "pol": {
                "official": "Republika Kosowa",
                "common": "Kosowo"
            },
            "por": {
                "official": "Rep\xfablica do Kosovo",
                "common": "Kosovo"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0441\u043E\u0432\u043E",
                "common": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0441\u043E\u0432\u043E"
            },
            "slk": {
                "official": "Republika Kosovo",
                "common": "Kosovo"
            },
            "spa": {
                "official": "Rep\xfablica de Kosovo",
                "common": "Kosovo"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0441\u043E\u0432\u043E",
                "common": "\u041A\u043E\u0441\u043E\u0432\u043E"
            },
            "swe": {
                "official": "Republiken Kosovo",
                "common": "Kosovo"
            },
            "tur": {
                "official": "Kosova Cumhuriyeti",
                "common": "Kosova"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0648\u0633\u0648\u0648\u06C1",
                "common": "\u06A9\u0648\u0633\u0648\u0648\u06C1"
            },
            "zho": {
                "official": "\u79D1\u7D22\u6C83\u5171\u548C\u56FD",
                "common": "\u79D1\u7D22\u6C83"
            }
        },
        "latlng": [
            42.666667,
            21.166667
        ],
        "landlocked": true,
        "borders": [
            "ALB",
            "MKD",
            "MNE",
            "SRB"
        ],
        "area": 10908,
        "demonyms": {
            "eng": {
                "f": "Kosovar",
                "m": "Kosovar"
            },
            "fra": {
                "f": "Kosovare",
                "m": "Kosovar"
            }
        },
        "flag": "\uD83C\uDDFD\uD83C\uDDF0",
        "maps": {
            "googleMaps": "https://goo.gl/maps/CSC4Yc8SWPgburuD9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2088990"
        },
        "population": 1775378,
        "gini": {
            "2017": 29
        },
        "fifa": "KVX",
        "car": {
            "signs": [
                "CS"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/xk.png",
            "svg": "https://flagcdn.com/xk.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/xk.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/xk.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                42.67,
                21.17
            ]
        }
    },
    {
        "name": {
            "common": "Belize",
            "official": "Belize",
            "nativeName": {
                "bjz": {
                    "official": "Belize",
                    "common": "Belize"
                },
                "eng": {
                    "official": "Belize",
                    "common": "Belize"
                },
                "spa": {
                    "official": "Belice",
                    "common": "Belice"
                }
            }
        },
        "tld": [
            ".bz"
        ],
        "cca2": "BZ",
        "ccn3": "084",
        "cca3": "BLZ",
        "cioc": "BIZ",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "BZD": {
                "name": "Belize dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "01"
            ]
        },
        "capital": [
            "Belmopan"
        ],
        "altSpellings": [
            "BZ"
        ],
        "region": "Americas",
        "subregion": "Central America",
        "languages": {
            "bjz": "Belizean Creole",
            "eng": "English",
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u0628\u0644\u064A\u0632",
                "common": "\u0628\u0644\u064A\u0632"
            },
            "bre": {
                "official": "Belize",
                "common": "Belize"
            },
            "ces": {
                "official": "Belize",
                "common": "Belize"
            },
            "cym": {
                "official": "Bel\xees",
                "common": "Bel\xees"
            },
            "deu": {
                "official": "Belize",
                "common": "Belize"
            },
            "est": {
                "official": "Belize",
                "common": "Belize"
            },
            "fin": {
                "official": "Belize",
                "common": "Belize"
            },
            "fra": {
                "official": "Belize",
                "common": "Belize"
            },
            "hrv": {
                "official": "Belize",
                "common": "Belize"
            },
            "hun": {
                "official": "Belize",
                "common": "Belize"
            },
            "ita": {
                "official": "Belize",
                "common": "Belize"
            },
            "jpn": {
                "official": "\u30D9\u30EA\u30FC\u30BA",
                "common": "\u30D9\u30EA\u30FC\u30BA"
            },
            "kor": {
                "official": "\uBCA8\uB9AC\uC988",
                "common": "\uBCA8\uB9AC\uC988"
            },
            "nld": {
                "official": "Belize",
                "common": "Belize"
            },
            "per": {
                "official": "\u0628\u0644\u06CC\u0632",
                "common": "\u0628\u0644\u06CC\u0632"
            },
            "pol": {
                "official": "Belize",
                "common": "Belize"
            },
            "por": {
                "official": "Belize",
                "common": "Belize"
            },
            "rus": {
                "official": "\u0411\u0435\u043B\u0438\u0437",
                "common": "\u0411\u0435\u043B\u0438\u0437"
            },
            "slk": {
                "official": "Belize",
                "common": "Belize"
            },
            "spa": {
                "official": "Belice",
                "common": "Belice"
            },
            "srp": {
                "official": "\u0411\u0435\u043B\u0438\u0437\u0435",
                "common": "\u0411\u0435\u043B\u0438\u0437\u0435"
            },
            "swe": {
                "official": "Belize",
                "common": "Belize"
            },
            "tur": {
                "official": "Belize",
                "common": "Belize"
            },
            "urd": {
                "official": "\u0628\u06CC\u0644\u06CC\u0632",
                "common": "\u0628\u06CC\u0644\u06CC\u0632"
            },
            "zho": {
                "official": "\u4F2F\u5229\u5179",
                "common": "\u4F2F\u5229\u5179"
            }
        },
        "latlng": [
            17.25,
            -88.75
        ],
        "landlocked": false,
        "borders": [
            "GTM",
            "MEX"
        ],
        "area": 22966,
        "demonyms": {
            "eng": {
                "f": "Belizean",
                "m": "Belizean"
            },
            "fra": {
                "f": "B\xe9lizienne",
                "m": "B\xe9lizien"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDFF",
        "maps": {
            "googleMaps": "https://goo.gl/maps/jdCccpdLodm1uTmo9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/287827"
        },
        "population": 397621,
        "gini": {
            "1999": 53.3
        },
        "fifa": "BLZ",
        "car": {
            "signs": [
                "BH"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-06:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/bz.png",
            "svg": "https://flagcdn.com/bz.svg",
            "alt": "The flag of Belize has a royal blue field with a thin red horizontal band at the top and bottom of the field and the national coat of arms in the center."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/bz.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/bz.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                17.25,
                -88.77
            ]
        }
    },
    {
        "name": {
            "common": "Guinea-Bissau",
            "official": "Republic of Guinea-Bissau",
            "nativeName": {
                "por": {
                    "official": "Rep\xfablica da Guin\xe9-Bissau",
                    "common": "Guin\xe9-Bissau"
                },
                "pov": {
                    "official": "Rep\xfablica da Guin\xe9-Bissau",
                    "common": "Guin\xe9-Bissau"
                }
            }
        },
        "tld": [
            ".gw"
        ],
        "cca2": "GW",
        "ccn3": "624",
        "cca3": "GNB",
        "cioc": "GBS",
        "independent": true,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "XOF": {
                "name": "West African CFA franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "45"
            ]
        },
        "capital": [
            "Bissau"
        ],
        "altSpellings": [
            "GW",
            "Republic of Guinea-Bissau",
            "Rep\xfablica da Guin\xe9-Bissau"
        ],
        "region": "Africa",
        "subregion": "Western Africa",
        "languages": {
            "por": "Portuguese",
            "pov": "Upper Guinea Creole"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u063A\u064A\u0646\u064A\u0627 \u0628\u064A\u0633\u0627\u0648",
                "common": "\u063A\u064A\u0646\u064A\u0627 \u0628\u064A\u0633\u0627\u0648"
            },
            "bre": {
                "official": "Republik Ginea-Bissau",
                "common": "Ginea-Bissau"
            },
            "ces": {
                "official": "Republika Guinea-Bissau",
                "common": "Guinea-Bissau"
            },
            "cym": {
                "official": "Republic of Guinea-Bissau",
                "common": "Guinea-Bissau"
            },
            "deu": {
                "official": "Republik Guinea-Bissau",
                "common": "Guinea-Bissau"
            },
            "est": {
                "official": "Guinea-Bissau Vabariik",
                "common": "Guinea-Bissau"
            },
            "fin": {
                "official": "Guinea-Bissaun tasavalta",
                "common": "Guinea-Bissau"
            },
            "fra": {
                "official": "R\xe9publique de Guin\xe9e-Bissau",
                "common": "Guin\xe9e-Bissau"
            },
            "hrv": {
                "official": "Republika Gvineja Bisau",
                "common": "Gvineja Bisau"
            },
            "hun": {
                "official": "Bissau-Guineai K\xf6zt\xe1rsas\xe1g",
                "common": "Bissau-Guinea"
            },
            "ita": {
                "official": "Repubblica di Guinea-Bissau",
                "common": "Guinea-Bissau"
            },
            "jpn": {
                "official": "\u30AE\u30CB\u30A2\u30D3\u30B5\u30A6\u5171\u548C\u56FD",
                "common": "\u30AE\u30CB\u30A2\u30D3\u30B5\u30A6"
            },
            "kor": {
                "official": "\uAE30\uB2C8\uBE44\uC0AC\uC6B0 \uACF5\uD654\uAD6D",
                "common": "\uAE30\uB2C8\uBE44\uC0AC\uC6B0"
            },
            "nld": {
                "official": "Republiek Guinee-Bissau",
                "common": "Guinee-Bissau"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u06AF\u06CC\u0646\u0647 \u0628\u06CC\u0633\u0627\u0626\u0648",
                "common": "\u06AF\u06CC\u0646\u0647 \u0628\u06CC\u0633\u0627\u0626\u0648"
            },
            "pol": {
                "official": "Republika Gwinei Bissau",
                "common": "Gwinea Bissau"
            },
            "por": {
                "official": "Rep\xfablica da Guin\xe9-Bissau",
                "common": "Guin\xe9-Bissau"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0432\u0438\u043D\u0435\u044F -\u0411\u0438\u0441\u0430\u0443",
                "common": "\u0413\u0432\u0438\u043D\u0435\u044F-\u0411\u0438\u0441\u0430\u0443"
            },
            "slk": {
                "official": "Guinejsko-bissausk\xe1 republika",
                "common": "Guinea-Bissau"
            },
            "spa": {
                "official": "Rep\xfablica de Guinea-Bissau",
                "common": "Guinea-Bis\xe1u"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0432\u0438\u043D\u0435\u0458\u0430 \u0411\u0438\u0441\u0430\u043E",
                "common": "\u0413\u0432\u0438\u043D\u0435\u0458\u0430 \u0411\u0438\u0441\u0430\u043E"
            },
            "swe": {
                "official": "Republiken Guinea-Bissau",
                "common": "Guinea-Bissau"
            },
            "tur": {
                "official": "Gine-Bissau Cumhuriyeti",
                "common": "Gine-Bissau"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06AF\u0646\u06CC \u0628\u0633\u0627\u0624",
                "common": "\u06AF\u0646\u06CC \u0628\u0633\u0627\u0624"
            },
            "zho": {
                "official": "\u51E0\u5185\u4E9A\u6BD4\u7ECD\u5171\u548C\u56FD",
                "common": "\u51E0\u5185\u4E9A\u6BD4\u7ECD"
            }
        },
        "latlng": [
            12,
            -15
        ],
        "landlocked": false,
        "borders": [
            "GIN",
            "SEN"
        ],
        "area": 36125,
        "demonyms": {
            "eng": {
                "f": "Guinea-Bissauan",
                "m": "Guinea-Bissauan"
            },
            "fra": {
                "f": "Bissau-Guin\xe9enne",
                "m": "Bissau-Guin\xe9en"
            }
        },
        "flag": "\uD83C\uDDEC\uD83C\uDDFC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/5Wyaz17miUc1zLc67",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192776"
        },
        "population": 1967998,
        "gini": {
            "2010": 50.7
        },
        "fifa": "GNB",
        "car": {
            "signs": [
                "RGB"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/gw.png",
            "svg": "https://flagcdn.com/gw.svg",
            "alt": "The flag of Guinea-Bissau features a red vertical band on its hoist side that takes up about two-fifth the width of the field, and two equal horizontal bands of yellow and green adjoining the vertical band. A five-pointed black star is centered in the vertical band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/gw.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/gw.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                11.85,
                -15.58
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Marshall Islands",
            "official": "Republic of the Marshall Islands",
            "nativeName": {
                "eng": {
                    "official": "Republic of the Marshall Islands",
                    "common": "Marshall Islands"
                },
                "mah": {
                    "official": "Republic of the Marshall Islands",
                    "common": "M\u0327aje\u013C"
                }
            }
        },
        "tld": [
            ".mh"
        ],
        "cca2": "MH",
        "ccn3": "584",
        "cca3": "MHL",
        "cioc": "MHL",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "92"
            ]
        },
        "capital": [
            "Majuro"
        ],
        "altSpellings": [
            "MH",
            "Republic of the Marshall Islands",
            "Aolep\u0101n Aor\u014Dkin M\u0327aje\u013C"
        ],
        "region": "Oceania",
        "subregion": "Micronesia",
        "languages": {
            "eng": "English",
            "mah": "Marshallese"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062C\u0632\u0631 \u0645\u0627\u0631\u0634\u0627\u0644",
                "common": "\u062C\u0632\u0631 \u0645\u0627\u0631\u0634\u0627\u0644"
            },
            "bre": {
                "official": "Republik Inizi Marshall",
                "common": "Inizi Marshall"
            },
            "ces": {
                "official": "Republika Marshallovy ostrovy",
                "common": "Marshallovy ostrovy"
            },
            "cym": {
                "official": "Republic of the Marshall Islands",
                "common": "Marshall Islands"
            },
            "deu": {
                "official": "Republik Marshallinseln",
                "common": "Marshallinseln"
            },
            "est": {
                "official": "Marshalli Saarte Vabariik",
                "common": "Marshalli Saared"
            },
            "fin": {
                "official": "Marshallinsaarten tasavalta",
                "common": "Marshallinsaaret"
            },
            "fra": {
                "official": "R\xe9publique des \xceles Marshall",
                "common": "\xceles Marshall"
            },
            "hrv": {
                "official": "Republika Mar\u0161alovi Otoci",
                "common": "Mar\u0161alovi Otoci"
            },
            "hun": {
                "official": "Marshall-szigetek",
                "common": "Marshall-szigetek"
            },
            "ita": {
                "official": "Repubblica delle Isole Marshall",
                "common": "Isole Marshall"
            },
            "jpn": {
                "official": "\u30DE\u30FC\u30B7\u30E3\u30EB\u8AF8\u5CF6\u5171\u548C\u56FD",
                "common": "\u30DE\u30FC\u30B7\u30E3\u30EB\u8AF8\u5CF6"
            },
            "kor": {
                "official": "\uB9C8\uC15C \uC81C\uB3C4 \uACF5\uD654\uAD6D",
                "common": "\uB9C8\uC15C \uC81C\uB3C4"
            },
            "nld": {
                "official": "Republiek van de Marshall-eilanden",
                "common": "Marshalleilanden"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062C\u0632\u0627\u06CC\u0631 \u0645\u0627\u0631\u0634\u0627\u0644",
                "common": "\u062C\u0632\u0627\u06CC\u0631 \u0645\u0627\u0631\u0634\u0627\u0644"
            },
            "pol": {
                "official": "Republika Wysp Marshalla",
                "common": "Wyspy Marshalla"
            },
            "por": {
                "official": "Rep\xfablica das Ilhas Marshall",
                "common": "Ilhas Marshall"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u0440\u0448\u0430\u043B\u043B\u043E\u0432\u044B \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                "common": "\u041C\u0430\u0440\u0448\u0430\u043B\u043B\u043E\u0432\u044B \u041E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            "slk": {
                "official": "Republika Marshallov\xfdch ostrovov",
                "common": "Marshallove ostrovy"
            },
            "spa": {
                "official": "Rep\xfablica de las Islas Marshall",
                "common": "Islas Marshall"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u0440\u0448\u0430\u043B\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                "common": "\u041C\u0430\u0440\u0448\u0430\u043B\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            "swe": {
                "official": "Republiken Marshall\xf6arna",
                "common": "Marshall\xf6arna"
            },
            "tur": {
                "official": "Marshall Adalar\u0131 Cumhuriyeti",
                "common": "Marshall Adalar\u0131"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062C\u0632\u0627\u0626\u0631 \u0645\u0627\u0631\u0634\u0644",
                "common": "\u062C\u0632\u0627\u0626\u0631 \u0645\u0627\u0631\u0634\u0644"
            },
            "zho": {
                "official": "\u9A6C\u7ECD\u5C14\u7FA4\u5C9B\u5171\u548C\u56FD",
                "common": "\u9A6C\u7ECD\u5C14\u7FA4\u5C9B"
            }
        },
        "latlng": [
            9,
            168
        ],
        "landlocked": false,
        "area": 181,
        "demonyms": {
            "eng": {
                "f": "Marshallese",
                "m": "Marshallese"
            },
            "fra": {
                "f": "Marshallaise",
                "m": "Marshallais"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDED",
        "maps": {
            "googleMaps": "https://goo.gl/maps/A4xLi1XvcX88gi3W8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/571771"
        },
        "population": 59194,
        "car": {
            "signs": [
                "MH"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+12:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/mh.png",
            "svg": "https://flagcdn.com/mh.svg",
            "alt": "The flag of Marshall Islands has a blue field with two broadening adjacent diagonal bands of orange and white that extend from the lower hoist-side corner to the upper fly-side corner of the field. A large white star with twenty-four rays \u2014 four large rays at the cardinal points and twenty smaller rays \u2014 is situated in the upper hoist-side corner above the diagonal bands."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/mh.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/mh.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                7.1,
                171.38
            ]
        }
    },
    {
        "name": {
            "common": "Myanmar",
            "official": "Republic of the Union of Myanmar",
            "nativeName": {
                "mya": {
                    "official": "\u1015\u103C\u100A\u103A\u1011\u1031\u102C\u1004\u103A\u1005\u102F \u101E\u1019\u1039\u1019\u1010 \u1019\u103C\u1014\u103A\u1019\u102C\u1014\u102D\u102F\u1004\u103A\u1004\u1036\u1010\u1031\u102C\u103A",
                    "common": "\u1019\u103C\u1014\u103A\u1019\u102C"
                }
            }
        },
        "tld": [
            ".mm"
        ],
        "cca2": "MM",
        "ccn3": "104",
        "cca3": "MMR",
        "cioc": "MYA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "MMK": {
                "name": "Burmese kyat",
                "symbol": "Ks"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "5"
            ]
        },
        "capital": [
            "Naypyidaw"
        ],
        "altSpellings": [
            "MM",
            "Burma",
            "Republic of the Union of Myanmar",
            "Pyidaunzu Thanm\u0103da My\u0103ma Nainngandaw"
        ],
        "region": "Asia",
        "subregion": "South-Eastern Asia",
        "languages": {
            "mya": "Burmese"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u062A\u062D\u0627\u062F \u0645\u064A\u0627\u0646\u0645\u0627\u0631",
                "common": "\u0645\u064A\u0627\u0646\u0645\u0627\u0631"
            },
            "bre": {
                "official": "Republik Unaniezh Myanmar",
                "common": "Myanmar"
            },
            "ces": {
                "official": "Republika Myanmarsk\xfd svaz",
                "common": "Myanmar"
            },
            "cym": {
                "official": "Republic of the Union of Myanmar",
                "common": "Myanmar"
            },
            "deu": {
                "official": "Republik der Union Myanmar",
                "common": "Myanmar"
            },
            "est": {
                "official": "Myanmari Liidu Vabariik",
                "common": "Myanmar"
            },
            "fin": {
                "official": "Myanmarin liiton tasavalta",
                "common": "Myanmar"
            },
            "fra": {
                "official": "R\xe9publique de l'Union du Myanmar",
                "common": "Birmanie"
            },
            "hrv": {
                "official": "Republika Unije Mijanmar",
                "common": "Mijanmar"
            },
            "hun": {
                "official": "Mianmari \xc1llamsz\xf6vets\xe9g K\xf6zt\xe1rsas\xe1ga",
                "common": "Mianmar"
            },
            "ita": {
                "official": "Repubblica dell'Unione di Myanmar",
                "common": "Birmania"
            },
            "jpn": {
                "official": "\u30DF\u30E3\u30F3\u30DE\u30FC\u9023\u90A6\u5171\u548C\u56FD",
                "common": "\u30DF\u30E3\u30F3\u30DE\u30FC"
            },
            "kor": {
                "official": "\uBBF8\uC580\uB9C8 \uC5F0\uBC29 \uACF5\uD654\uAD6D",
                "common": "\uBBF8\uC580\uB9C8"
            },
            "nld": {
                "official": "Republiek van de Unie van Myanmar",
                "common": "Myanmar"
            },
            "per": {
                "official": "\u0627\u062A\u062D\u0627\u062F\u06CC\u0647 \u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u06CC\u0627\u0646\u0645\u0627\u0631",
                "common": "\u0645\u06CC\u0627\u0646\u0645\u0627\u0631"
            },
            "pol": {
                "official": "Republika Zwi\u0105zku Mjanmy",
                "common": "Mjanma"
            },
            "por": {
                "official": "Rep\xfablica da Uni\xe3o de Myanmar",
                "common": "Myanmar"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u043E\u044E\u0437\u0430 \u041C\u044C\u044F\u043D\u043C\u0430",
                "common": "\u041C\u044C\u044F\u043D\u043C\u0430"
            },
            "slk": {
                "official": "Mjanmarsk\xe1 zv\xe4zov\xe1 republika",
                "common": "Mjanmarsko"
            },
            "spa": {
                "official": "Rep\xfablica de la Uni\xf3n de Myanmar",
                "common": "Myanmar"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0430\u0432\u0435\u0437 \u041C\u0458\u0430\u043D\u043C\u0430\u0440\u0430",
                "common": "\u041C\u0458\u0430\u043D\u043C\u0430\u0440"
            },
            "swe": {
                "official": "Republiken Unionen Myanmar",
                "common": "Myanmar"
            },
            "tur": {
                "official": "Myanmar Birli\u011Fi Cumhuriyeti",
                "common": "Myanmar"
            },
            "urd": {
                "official": "\u0645\u062A\u062D\u062F\u06C1 \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u06CC\u0627\u0646\u0645\u0627\u0631",
                "common": "\u0645\u06CC\u0627\u0646\u0645\u0627\u0631"
            },
            "zho": {
                "official": "\u7F05\u7538\u8054\u90A6\u5171\u548C\u56FD",
                "common": "\u7F05\u7538"
            }
        },
        "latlng": [
            22,
            98
        ],
        "landlocked": false,
        "borders": [
            "BGD",
            "CHN",
            "IND",
            "LAO",
            "THA"
        ],
        "area": 676578,
        "demonyms": {
            "eng": {
                "f": "Burmese",
                "m": "Burmese"
            },
            "fra": {
                "f": "Birmane",
                "m": "Birman"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDF2",
        "maps": {
            "googleMaps": "https://goo.gl/maps/4jrZyJkDERUfHyp26",
            "openStreetMaps": "https://www.openstreetmap.org/relation/50371"
        },
        "population": 54409794,
        "gini": {
            "2017": 30.7
        },
        "fifa": "MYA",
        "car": {
            "signs": [
                "BUR"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+06:30"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/mm.png",
            "svg": "https://flagcdn.com/mm.svg",
            "alt": "The flag of Myanmar is composed of three equal horizontal bands of yellow, green and red, with a large five-pointed white star superimposed at the center of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/mm.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/mm.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                19.76,
                96.07
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "French Polynesia",
            "official": "French Polynesia",
            "nativeName": {
                "fra": {
                    "official": "Polyn\xe9sie fran\xe7aise",
                    "common": "Polyn\xe9sie fran\xe7aise"
                }
            }
        },
        "tld": [
            ".pf"
        ],
        "cca2": "PF",
        "ccn3": "258",
        "cca3": "PYF",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "XPF": {
                "name": "CFP franc",
                "symbol": "\u20A3"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "89"
            ]
        },
        "capital": [
            "Papeet\u0113"
        ],
        "altSpellings": [
            "PF",
            "Polyn\xe9sie fran\xe7aise",
            "French Polynesia",
            "P\u014Dr\u012Bnetia Far\u0101ni"
        ],
        "region": "Oceania",
        "subregion": "Polynesia",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u0628\u0648\u0644\u064A\u0646\u0632\u064A\u0627 \u0627\u0644\u0641\u0631\u0646\u0633\u064A\u0629",
                "common": "\u0628\u0648\u0644\u064A\u0646\u0632\u064A\u0627 \u0627\u0644\u0641\u0631\u0646\u0633\u064A\u0629"
            },
            "bre": {
                "official": "Polinezia C'hall",
                "common": "Polinezia C'hall"
            },
            "ces": {
                "official": "Francouzsk\xe1 Polyn\xe9sie",
                "common": "Francouzsk\xe1 Polyn\xe9sie"
            },
            "cym": {
                "official": "French Polynesia",
                "common": "French Polynesia"
            },
            "deu": {
                "official": "Franz\xf6sisch-Polynesien",
                "common": "Franz\xf6sisch-Polynesien"
            },
            "est": {
                "official": "Prantsuse Pol\xfcneesia",
                "common": "Prantsuse Pol\xfcneesia"
            },
            "fin": {
                "official": "Ranskan Polynesia",
                "common": "Ranskan Polynesia"
            },
            "fra": {
                "official": "Polyn\xe9sie fran\xe7aise",
                "common": "Polyn\xe9sie fran\xe7aise"
            },
            "hrv": {
                "official": "Francuska Polinezija",
                "common": "Francuska Polinezija"
            },
            "hun": {
                "official": "Francia Polin\xe9zia",
                "common": "Francia Polin\xe9zia"
            },
            "ita": {
                "official": "Polinesia Francese",
                "common": "Polinesia Francese"
            },
            "jpn": {
                "official": "\u30D5\u30E9\u30F3\u30B9\u9818\u30DD\u30EA\u30CD\u30B7\u30A2",
                "common": "\u30D5\u30E9\u30F3\u30B9\u9818\u30DD\u30EA\u30CD\u30B7\u30A2"
            },
            "kor": {
                "official": "\uD504\uB791\uC2A4\uB839 \uD3F4\uB9AC\uB124\uC2DC\uC544",
                "common": "\uD504\uB791\uC2A4\uB839 \uD3F4\uB9AC\uB124\uC2DC\uC544"
            },
            "nld": {
                "official": "Frans-Polynesi\xeb",
                "common": "Frans-Polynesi\xeb"
            },
            "per": {
                "official": "\u067E\u064F\u0644\u06CC\u200C\u0646\u0650\u0632\u06CC \u0641\u0631\u0627\u0646\u0633\u0647",
                "common": "\u067E\u064F\u0644\u06CC\u200C\u0646\u0650\u0632\u06CC \u0641\u0631\u0627\u0646\u0633\u0647"
            },
            "pol": {
                "official": "Polinezja Francuska",
                "common": "Polinezja Francuska"
            },
            "por": {
                "official": "Polin\xe9sia Francesa",
                "common": "Polin\xe9sia Francesa"
            },
            "rus": {
                "official": "\u0424\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0430\u044F \u041F\u043E\u043B\u0438\u043D\u0435\u0437\u0438\u044F",
                "common": "\u0424\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0430\u044F \u041F\u043E\u043B\u0438\u043D\u0435\u0437\u0438\u044F"
            },
            "slk": {
                "official": "Franc\xfazska Polyn\xe9zia",
                "common": "Franc\xfazska Polyn\xe9zia"
            },
            "spa": {
                "official": "Polinesia franc\xe9s",
                "common": "Polinesia Francesa"
            },
            "srp": {
                "official": "\u0424\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0430 \u041F\u043E\u043B\u0438\u043D\u0435\u0437\u0438\u0458\u0430",
                "common": "\u0424\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0430 \u041F\u043E\u043B\u0438\u043D\u0435\u0437\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Franska Polynesien",
                "common": "Franska Polynesien"
            },
            "tur": {
                "official": "Frans\u0131z Polinezyas\u0131",
                "common": "Frans\u0131z Polinezyas\u0131"
            },
            "urd": {
                "official": "\u0641\u0631\u0627\u0646\u0633\u06CC\u0633\u06CC \u067E\u0648\u0644\u06CC\u0646\u06CC\u0634\u06CC\u0627",
                "common": "\u0641\u0631\u0627\u0646\u0633\u06CC\u0633\u06CC \u067E\u0648\u0644\u06CC\u0646\u06CC\u0634\u06CC\u0627"
            },
            "zho": {
                "official": "\u6CD5\u5C5E\u6CE2\u5229\u5C3C\u897F\u4E9A",
                "common": "\u6CD5\u5C5E\u6CE2\u5229\u5C3C\u897F\u4E9A"
            }
        },
        "latlng": [
            17.6797,
            149.4068
        ],
        "landlocked": false,
        "area": 4167,
        "demonyms": {
            "eng": {
                "f": "French Polynesian",
                "m": "French Polynesian"
            },
            "fra": {
                "f": "Polyn\xe9sienne",
                "m": "Polyn\xe9sien"
            }
        },
        "flag": "\uD83C\uDDF5\uD83C\uDDEB",
        "maps": {
            "googleMaps": "https://goo.gl/maps/xgg6BQTRyeQg4e1m6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/3412620"
        },
        "population": 280904,
        "car": {
            "signs": [
                "F"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-10:00",
            "UTC-09:30",
            "UTC-09:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/pf.png",
            "svg": "https://flagcdn.com/pf.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/pf.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/pf.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -17.53,
                -149.56
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^((97|98)7\\d{2})$"
        }
    },
    {
        "name": {
            "common": "Brazil",
            "official": "Federative Republic of Brazil",
            "nativeName": {
                "por": {
                    "official": "Rep\xfablica Federativa do Brasil",
                    "common": "Brasil"
                }
            }
        },
        "tld": [
            ".br"
        ],
        "cca2": "BR",
        "ccn3": "076",
        "cca3": "BRA",
        "cioc": "BRA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "BRL": {
                "name": "Brazilian real",
                "symbol": "R$"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "5"
            ]
        },
        "capital": [
            "Bras\xedlia"
        ],
        "altSpellings": [
            "BR",
            "Brasil",
            "Federative Republic of Brazil",
            "Rep\xfablica Federativa do Brasil"
        ],
        "region": "Americas",
        "subregion": "South America",
        "languages": {
            "por": "Portuguese"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0628\u0631\u0627\u0632\u064A\u0644 \u0627\u0644\u0627\u062A\u062D\u0627\u062F\u064A\u0629",
                "common": "\u0627\u0644\u0628\u0631\u0627\u0632\u064A\u0644"
            },
            "bre": {
                "official": "Republik Kevreel Brazil",
                "common": "Brazil"
            },
            "ces": {
                "official": "Brazilsk\xe1 federativn\xed republika",
                "common": "Braz\xedlie"
            },
            "cym": {
                "official": "Gweriniaeth Ffederal Brasil",
                "common": "Brasil"
            },
            "deu": {
                "official": "F\xf6derative Republik Brasilien",
                "common": "Brasilien"
            },
            "est": {
                "official": "Brasiilia Liitvabariik",
                "common": "Brasiilia"
            },
            "fin": {
                "official": "Brasilian liittotasavalta",
                "common": "Brasilia"
            },
            "fra": {
                "official": "R\xe9publique f\xe9d\xe9rative du Br\xe9sil",
                "common": "Br\xe9sil"
            },
            "hrv": {
                "official": "Savezne Republike Brazil",
                "common": "Brazil"
            },
            "hun": {
                "official": "Brazil Sz\xf6vets\xe9gi K\xf6zt\xe1rsas\xe1g",
                "common": "Braz\xedlia"
            },
            "ita": {
                "official": "Repubblica federativa del Brasile",
                "common": "Brasile"
            },
            "jpn": {
                "official": "\u30D6\u30E9\u30B8\u30EB\u9023\u90A6\u5171\u548C\u56FD",
                "common": "\u30D6\u30E9\u30B8\u30EB"
            },
            "kor": {
                "official": "\uBE0C\uB77C\uC9C8 \uC5F0\uBC29 \uACF5\uD654\uAD6D",
                "common": "\uBE0C\uB77C\uC9C8"
            },
            "nld": {
                "official": "Federale Republiek Brazili\xeb",
                "common": "Brazili\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0641\u062F\u0631\u0627\u062A\u06CC\u0648 \u0628\u0631\u0632\u06CC\u0644",
                "common": "\u0628\u0631\u0632\u06CC\u0644"
            },
            "pol": {
                "official": "Federacyjna Republika Brazylii",
                "common": "Brazylia"
            },
            "por": {
                "official": "Rep\xfablica Federativa do Brasil",
                "common": "Brasil"
            },
            "rus": {
                "official": "\u0424\u0435\u0434\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0440\u0430\u0437\u0438\u043B\u0438\u044F",
                "common": "\u0411\u0440\u0430\u0437\u0438\u043B\u0438\u044F"
            },
            "slk": {
                "official": "Braz\xedlska federat\xedvna republika",
                "common": "Braz\xedlia"
            },
            "spa": {
                "official": "Rep\xfablica Federativa del Brasil",
                "common": "Brasil"
            },
            "srp": {
                "official": "\u0421\u0430\u0432\u0435\u0437\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0440\u0430\u0437\u0438\u043B",
                "common": "\u0411\u0440\u0430\u0437\u0438\u043B"
            },
            "swe": {
                "official": "F\xf6rbundsrepubliken Brasilien",
                "common": "Brasilien"
            },
            "tur": {
                "official": "Brezilya Federal Cumhuriyeti",
                "common": "Brezilya"
            },
            "urd": {
                "official": "\u0648\u0641\u0627\u0642\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0628\u0631\u0627\u0632\u06CC\u0644",
                "common": "\u0628\u0631\u0627\u0632\u06CC\u0644"
            },
            "zho": {
                "official": "\u5DF4\u897F\u8054\u90A6\u5171\u548C\u56FD",
                "common": "\u5DF4\u897F"
            }
        },
        "latlng": [
            -10,
            -55
        ],
        "landlocked": false,
        "borders": [
            "ARG",
            "BOL",
            "COL",
            "GUF",
            "GUY",
            "PRY",
            "PER",
            "SUR",
            "URY",
            "VEN"
        ],
        "area": 8515767,
        "demonyms": {
            "eng": {
                "f": "Brazilian",
                "m": "Brazilian"
            },
            "fra": {
                "f": "Br\xe9silienne",
                "m": "Br\xe9silien"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDF7",
        "maps": {
            "googleMaps": "https://goo.gl/maps/waCKk21HeeqFzkNC9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/59470"
        },
        "population": 212559409,
        "gini": {
            "2019": 53.4
        },
        "fifa": "BRA",
        "car": {
            "signs": [
                "BR"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-05:00",
            "UTC-04:00",
            "UTC-03:00",
            "UTC-02:00"
        ],
        "continents": [
            "South America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/br.png",
            "svg": "https://flagcdn.com/br.svg",
            "alt": "The flag of Brazil has a green field with a large yellow rhombus in the center. Within the rhombus is a dark blue globe with twenty-seven small five-pointed white stars depicting a starry sky and a thin white convex horizontal band inscribed with the national motto 'Ordem e Progresso' across its center."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/br.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/br.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -15.79,
                -47.88
            ]
        },
        "postalCode": {
            "format": "#####-###",
            "regex": "^(\\d{8})$"
        }
    },
    {
        "name": {
            "common": "Croatia",
            "official": "Republic of Croatia",
            "nativeName": {
                "hrv": {
                    "official": "Republika Hrvatska",
                    "common": "Hrvatska"
                }
            }
        },
        "tld": [
            ".hr"
        ],
        "cca2": "HR",
        "ccn3": "191",
        "cca3": "HRV",
        "cioc": "CRO",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "85"
            ]
        },
        "capital": [
            "Zagreb"
        ],
        "altSpellings": [
            "HR",
            "Hrvatska",
            "Republic of Croatia",
            "Republika Hrvatska"
        ],
        "region": "Europe",
        "subregion": "Southeast Europe",
        "languages": {
            "hrv": "Croatian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u0631\u0648\u0627\u062A\u064A\u0627",
                "common": "\u0643\u0631\u0648\u0627\u062A\u064A\u0627"
            },
            "bre": {
                "official": "Republik Kroatia",
                "common": "Kroatia"
            },
            "ces": {
                "official": "Chorvatsk\xe1 republika",
                "common": "Chorvatsko"
            },
            "cym": {
                "official": "Gweriniaeth Croatia",
                "common": "Croatia"
            },
            "deu": {
                "official": "Republik Kroatien",
                "common": "Kroatien"
            },
            "est": {
                "official": "Horvaatia Vabariik",
                "common": "Horvaatia"
            },
            "fin": {
                "official": "Kroatian tasavalta",
                "common": "Kroatia"
            },
            "fra": {
                "official": "R\xe9publique de Croatie",
                "common": "Croatie"
            },
            "hrv": {
                "official": "Republika Hrvatska",
                "common": "Hrvatska"
            },
            "hun": {
                "official": "Horv\xe1t K\xf6zt\xe1rsas\xe1g",
                "common": "Horv\xe1torsz\xe1g"
            },
            "ita": {
                "official": "Repubblica di Croazia",
                "common": "Croazia"
            },
            "jpn": {
                "official": "\u30AF\u30ED\u30A2\u30C1\u30A2\u5171\u548C\u56FD",
                "common": "\u30AF\u30ED\u30A2\u30C1\u30A2"
            },
            "kor": {
                "official": "\uD06C\uB85C\uC544\uD2F0\uC544 \uACF5\uD654\uAD6D",
                "common": "\uD06C\uB85C\uC544\uD2F0\uC544"
            },
            "nld": {
                "official": "Republiek Kroati\xeb",
                "common": "Kroati\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u0631\u0648\u0627\u0633\u06CC",
                "common": "\u06A9\u0631\u064F\u0648\u0627\u0633\u06CC"
            },
            "pol": {
                "official": "Republika Chorwacji",
                "common": "Chorwacja"
            },
            "por": {
                "official": "Rep\xfablica da Cro\xe1cia",
                "common": "Cro\xe1cia"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0425\u043E\u0440\u0432\u0430\u0442\u0438\u044F",
                "common": "\u0425\u043E\u0440\u0432\u0430\u0442\u0438\u044F"
            },
            "slk": {
                "official": "Chorv\xe1tska republika",
                "common": "Chorv\xe1tsko"
            },
            "spa": {
                "official": "Rep\xfablica de Croacia",
                "common": "Croacia"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0425\u0440\u0432\u0430\u0442\u0441\u043A\u0430",
                "common": "\u0425\u0440\u0432\u0430\u0442\u0441\u043A\u0430"
            },
            "swe": {
                "official": "Republiken Kroatien",
                "common": "Kroatien"
            },
            "tur": {
                "official": "H\u0131rvatistan Cumhuriyeti",
                "common": "H\u0131rvatistan"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0631\u0648\u06CC\u0626\u0634\u0627",
                "common": "\u06A9\u0631\u0648\u06CC\u0626\u0634\u0627"
            },
            "zho": {
                "official": "\u514B\u7F57\u5730\u4E9A\u5171\u548C\u56FD",
                "common": "\u514B\u7F57\u5730\u4E9A"
            }
        },
        "latlng": [
            45.16666666,
            15.5
        ],
        "landlocked": false,
        "borders": [
            "BIH",
            "HUN",
            "MNE",
            "SRB",
            "SVN"
        ],
        "area": 56594,
        "demonyms": {
            "eng": {
                "f": "Croatian",
                "m": "Croatian"
            },
            "fra": {
                "f": "Croate",
                "m": "Croate"
            }
        },
        "flag": "\uD83C\uDDED\uD83C\uDDF7",
        "maps": {
            "googleMaps": "https://goo.gl/maps/qSG6xTKUmrYpwmGQ6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/214885"
        },
        "population": 4047200,
        "gini": {
            "2018": 29.7
        },
        "fifa": "CRO",
        "car": {
            "signs": [
                "HR"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/hr.png",
            "svg": "https://flagcdn.com/hr.svg",
            "alt": "The flag of Croatia is composed of three equal horizontal bands of red, white and blue, with coat of arms of Croatia superimposed in the center."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/hr.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/hr.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                45.8,
                16
            ]
        },
        "postalCode": {
            "format": "HR-#####",
            "regex": "^(?:HR)*(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Somalia",
            "official": "Federal Republic of Somalia",
            "nativeName": {
                "ara": {
                    "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0635\u0648\u0645\u0627\u0644\u200E\u200E",
                    "common": "\u0627\u0644\u0635\u0648\u0645\u0627\u0644\u200E\u200E"
                },
                "som": {
                    "official": "Jamhuuriyadda Federaalka Soomaaliya",
                    "common": "Soomaaliya"
                }
            }
        },
        "tld": [
            ".so"
        ],
        "cca2": "SO",
        "ccn3": "706",
        "cca3": "SOM",
        "cioc": "SOM",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "SOS": {
                "name": "Somali shilling",
                "symbol": "Sh"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "52"
            ]
        },
        "capital": [
            "Mogadishu"
        ],
        "altSpellings": [
            "SO",
            "a\u1E63-\u1E62\u016Bm\u0101l",
            "Federal Republic of Somalia",
            "Jamhuuriyadda Federaalka Soomaaliya",
            "Jumh\u016Briyyat a\u1E63-\u1E62\u016Bm\u0101l al-Fider\u0101liyya"
        ],
        "region": "Africa",
        "subregion": "Eastern Africa",
        "languages": {
            "ara": "Arabic",
            "som": "Somali"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0635\u0648\u0645\u0627\u0644 \u0627\u0644\u0641\u064A\u062F\u0631\u0627\u0644\u064A\u0629",
                "common": "\u0627\u0644\u0635\u0648\u0645\u0627\u0644"
            },
            "bre": {
                "official": "Republik Kevreadel Somalia",
                "common": "Somalia"
            },
            "ces": {
                "official": "Som\xe1lsk\xe1 demokratick\xe1 republika",
                "common": "Som\xe1lsko"
            },
            "cym": {
                "official": "Federal Republic of Somalia",
                "common": "Somalia"
            },
            "deu": {
                "official": "Bundesrepublik Somalia",
                "common": "Somalia"
            },
            "est": {
                "official": "Somaalia Liitvabariik",
                "common": "Somaalia"
            },
            "fin": {
                "official": "Somalian liittotasavalta",
                "common": "Somalia"
            },
            "fra": {
                "official": "R\xe9publique f\xe9d\xe9rale de Somalie",
                "common": "Somalie"
            },
            "hrv": {
                "official": "Savezna Republika Somaliji",
                "common": "Somalija"
            },
            "hun": {
                "official": "Szom\xe1li Sz\xf6vets\xe9gi K\xf6zt\xe1rsas\xe1g",
                "common": "Szom\xe1lia"
            },
            "ita": {
                "official": "Repubblica federale di Somalia",
                "common": "Somalia"
            },
            "jpn": {
                "official": "\u30BD\u30DE\u30EA\u30A2\u9023\u90A6\u5171\u548C\u56FD",
                "common": "\u30BD\u30DE\u30EA\u30A2"
            },
            "kor": {
                "official": " \uC18C\uB9D0\uB9AC\uC544 \uC5F0\uBC29 \uACF5\uD654\uAD6D",
                "common": "\uC18C\uB9D0\uB9AC\uC544"
            },
            "nld": {
                "official": "Federale Republiek Somali\xeb",
                "common": "Somali\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0641\u062F\u0631\u0627\u0644 \u0633\u0648\u0645\u0627\u0644\u06CC",
                "common": "\u0633\u0648\u0645\u0627\u0644\u06CC"
            },
            "pol": {
                "official": "Federalna Republika Somalii",
                "common": "Somalia"
            },
            "por": {
                "official": "Rep\xfablica Federal da Som\xe1lia",
                "common": "Som\xe1lia"
            },
            "rus": {
                "official": "\u0424\u0435\u0434\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u043E\u043C\u0430\u043B\u0438",
                "common": "\u0421\u043E\u043C\u0430\u043B\u0438"
            },
            "slk": {
                "official": "Som\xe1lska federat\xedvna republika",
                "common": "Som\xe1lsko"
            },
            "spa": {
                "official": "Rep\xfablica Federal de Somalia",
                "common": "Somalia"
            },
            "srp": {
                "official": "\u0421\u0430\u0432\u0435\u0437\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u043E\u043C\u0430\u043B\u0438\u0458\u0430",
                "common": "\u0421\u043E\u043C\u0430\u043B\u0438\u0458\u0430"
            },
            "swe": {
                "official": "F\xf6rbundsrepubliken Somalia",
                "common": "Somalia"
            },
            "tur": {
                "official": "Somali Federal Cumhuriyeti",
                "common": "Somali"
            },
            "urd": {
                "official": "\u0648\u0641\u0627\u0642\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0635\u0648\u0645\u0627\u0644\u06CC\u06C1",
                "common": "\u0635\u0648\u0645\u0627\u0644\u06CC\u06C1"
            },
            "zho": {
                "official": "\u7D22\u9A6C\u91CC\u5171\u548C\u56FD",
                "common": "\u7D22\u9A6C\u91CC"
            }
        },
        "latlng": [
            10,
            49
        ],
        "landlocked": false,
        "borders": [
            "DJI",
            "ETH",
            "KEN"
        ],
        "area": 637657,
        "demonyms": {
            "eng": {
                "f": "Somali",
                "m": "Somali"
            },
            "fra": {
                "f": "Somalienne",
                "m": "Somalien"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDF4",
        "maps": {
            "googleMaps": "https://goo.gl/maps/8of8q7D1a8p7R6Fc9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192799"
        },
        "population": 15893219,
        "gini": {
            "2017": 36.8
        },
        "fifa": "SOM",
        "car": {
            "signs": [
                "SO"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/so.png",
            "svg": "https://flagcdn.com/so.svg",
            "alt": "The flag of Somalia features a large five-pointed white star centered on a light blue field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/so.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/so.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                2.07,
                45.33
            ]
        },
        "postalCode": {
            "format": "@@  #####",
            "regex": "^([A-Z]{2}\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Afghanistan",
            "official": "Islamic Republic of Afghanistan",
            "nativeName": {
                "prs": {
                    "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0627\u0645\u06CC \u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
                    "common": "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646"
                },
                "pus": {
                    "official": "\u062F \u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646 \u0627\u0633\u0644\u0627\u0645\u064A \u062C\u0645\u0647\u0648\u0631\u06CC\u062A",
                    "common": "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646"
                },
                "tuk": {
                    "official": "Owganystan Yslam Respublikasy",
                    "common": "Owganystan"
                }
            }
        },
        "tld": [
            ".af"
        ],
        "cca2": "AF",
        "ccn3": "004",
        "cca3": "AFG",
        "cioc": "AFG",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "AFN": {
                "name": "Afghan afghani",
                "symbol": "\u060B"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "3"
            ]
        },
        "capital": [
            "Kabul"
        ],
        "altSpellings": [
            "AF",
            "Af\u0121\u0101nist\u0101n"
        ],
        "region": "Asia",
        "subregion": "Southern Asia",
        "languages": {
            "prs": "Dari",
            "pus": "Pashto",
            "tuk": "Turkmen"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0641\u0641\u0627\u0646\u0633\u062A\u0627\u0646 \u0627\u0644\u0625\u0633\u0644\u0627\u0645\u064A\u0629",
                "common": "\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646"
            },
            "bre": {
                "official": "Republik Islamek Afghanistan",
                "common": "Afghanistan"
            },
            "ces": {
                "official": "Afgh\xe1nsk\xe1 isl\xe1msk\xe1 republika",
                "common": "Afgh\xe1nist\xe1n"
            },
            "cym": {
                "official": "Gweriniaeth Islamaidd Affganistan",
                "common": "Affganistan"
            },
            "deu": {
                "official": "Islamische Republik Afghanistan",
                "common": "Afghanistan"
            },
            "est": {
                "official": "Afganistani Islamivabariik",
                "common": "Afganistan"
            },
            "fin": {
                "official": "Afganistanin islamilainen tasavalta",
                "common": "Afganistan"
            },
            "fra": {
                "official": "R\xe9publique islamique d'Afghanistan",
                "common": "Afghanistan"
            },
            "hrv": {
                "official": "Islamska Republika Afganistan",
                "common": "Afganistan"
            },
            "hun": {
                "official": "Afganiszt\xe1ni Iszl\xe1m K\xf6zt\xe1rsas\xe1g",
                "common": "Afganiszt\xe1n"
            },
            "ita": {
                "official": "Repubblica islamica dell'Afghanistan",
                "common": "Afghanistan"
            },
            "jpn": {
                "official": "\u30A2\u30D5\u30AC\u30CB\u30B9\u30BF\u30F3\xb7\u30A4\u30B9\u30E9\u30E0\u5171\u548C\u56FD",
                "common": "\u30A2\u30D5\u30AC\u30CB\u30B9\u30BF\u30F3"
            },
            "kor": {
                "official": "\uC544\uD504\uAC00\uB2C8\uC2A4\uD0C4 \uC774\uC2AC\uB78C \uACF5\uD654\uAD6D",
                "common": "\uC544\uD504\uAC00\uB2C8\uC2A4\uD0C4"
            },
            "nld": {
                "official": "Islamitische Republiek Afghanistan",
                "common": "Afghanistan"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0627\u0645\u06CC \u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
                "common": "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646"
            },
            "pol": {
                "official": "Islamska Republika Afganistanu",
                "common": "Afganistan"
            },
            "por": {
                "official": "Rep\xfablica Isl\xe2mica do Afeganist\xe3o",
                "common": "Afeganist\xe3o"
            },
            "rus": {
                "official": "\u0418\u0441\u043B\u0430\u043C\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
                "common": "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D"
            },
            "slk": {
                "official": "Afg\xe1nsky islamsk\xfd \u0161t\xe1t",
                "common": "Afganistan"
            },
            "spa": {
                "official": "Rep\xfablica Isl\xe1mica de Afganist\xe1n",
                "common": "Afganist\xe1n"
            },
            "srp": {
                "official": "\u0418\u0441\u043B\u0430\u043C\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u0432\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
                "common": "\u0410\u0432\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D"
            },
            "swe": {
                "official": "Islamiska republiken Afghanistan",
                "common": "Afghanistan"
            },
            "tur": {
                "official": "Afganistan \u0130slam Cumhuriyeti",
                "common": "Afganistan"
            },
            "urd": {
                "official": "\u0627\u0633\u0644\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
                "common": "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646"
            },
            "zho": {
                "official": "\u963F\u5BCC\u6C57\u4F0A\u65AF\u5170\u5171\u548C\u56FD",
                "common": "\u963F\u5BCC\u6C57"
            }
        },
        "latlng": [
            33,
            65
        ],
        "landlocked": true,
        "borders": [
            "IRN",
            "PAK",
            "TKM",
            "UZB",
            "TJK",
            "CHN"
        ],
        "area": 652230,
        "demonyms": {
            "eng": {
                "f": "Afghan",
                "m": "Afghan"
            },
            "fra": {
                "f": "Afghane",
                "m": "Afghan"
            }
        },
        "flag": "\uD83C\uDDE6\uD83C\uDDEB",
        "maps": {
            "googleMaps": "https://goo.gl/maps/BXBGw7yUUFknCfva9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/303427"
        },
        "population": 40218234,
        "fifa": "AFG",
        "car": {
            "signs": [
                "AFG"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+04:30"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://upload.wikimedia.org/wikipedia/commons/thumb/5/5c/Flag_of_the_Taliban.svg/320px-Flag_of_the_Taliban.svg.png",
            "svg": "https://upload.wikimedia.org/wikipedia/commons/5/5c/Flag_of_the_Taliban.svg",
            "alt": "The flag of the Islamic Emirate of Afghanistan has a white field with Arabic inscriptions \u2014 the Shahada \u2014 in black across its center."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/af.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/af.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                34.52,
                69.18
            ]
        }
    },
    {
        "name": {
            "common": "Anguilla",
            "official": "Anguilla",
            "nativeName": {
                "eng": {
                    "official": "Anguilla",
                    "common": "Anguilla"
                }
            }
        },
        "tld": [
            ".ai"
        ],
        "cca2": "AI",
        "ccn3": "660",
        "cca3": "AIA",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "XCD": {
                "name": "Eastern Caribbean dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "264"
            ]
        },
        "capital": [
            "The Valley"
        ],
        "altSpellings": [
            "AI"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u0623\u0646\u063A\u0648\u064A\u0644\u0627",
                "common": "\u0623\u0646\u063A\u0648\u064A\u0644\u0627"
            },
            "bre": {
                "official": "Anguilla",
                "common": "Anguilla"
            },
            "ces": {
                "official": "Anguilla",
                "common": "Anguilla"
            },
            "cym": {
                "official": "Anguilla",
                "common": "Anguilla"
            },
            "deu": {
                "official": "Anguilla",
                "common": "Anguilla"
            },
            "est": {
                "official": "Anguilla",
                "common": "Anguilla"
            },
            "fin": {
                "official": "Anguilla",
                "common": "Anguilla"
            },
            "fra": {
                "official": "Anguilla",
                "common": "Anguilla"
            },
            "hrv": {
                "official": "Anguilla",
                "common": "Angvila"
            },
            "hun": {
                "official": "Anguilla",
                "common": "Anguilla"
            },
            "ita": {
                "official": "Anguilla",
                "common": "Anguilla"
            },
            "jpn": {
                "official": "\u30A2\u30F3\u30B0\u30A3\u30E9",
                "common": "\u30A2\u30F3\u30AE\u30E9"
            },
            "kor": {
                "official": "\uC575\uADC8\uB77C",
                "common": "\uC575\uADC8\uB77C"
            },
            "nld": {
                "official": "Anguilla",
                "common": "Anguilla"
            },
            "per": {
                "official": "\u0622\u0646\u06AF\u0648\u06CC\u0644\u0627",
                "common": "\u0622\u0646\u06AF\u0648\u06CC\u0644\u0627"
            },
            "pol": {
                "official": "Anguilla",
                "common": "Anguilla"
            },
            "por": {
                "official": "Anguilla",
                "common": "Anguilla"
            },
            "rus": {
                "official": "\u0410\u043D\u0433\u0438\u043B\u044C\u044F",
                "common": "\u0410\u043D\u0433\u0438\u043B\u044C\u044F"
            },
            "slk": {
                "official": "Anguilla",
                "common": "Anguilla"
            },
            "spa": {
                "official": "Anguila",
                "common": "Anguilla"
            },
            "srp": {
                "official": "\u0410\u043D\u0433\u0432\u0438\u043B\u0430",
                "common": "\u0410\u043D\u0433\u0432\u0438\u043B\u0430"
            },
            "swe": {
                "official": "Anguilla",
                "common": "Anguilla"
            },
            "tur": {
                "official": "Anguilla",
                "common": "Anguilla"
            },
            "urd": {
                "official": "\u0627\u06CC\u0646\u06AF\u0648\u06CC\u0644\u0627",
                "common": "\u0627\u06CC\u0646\u06AF\u0648\u06CC\u0644\u0627"
            },
            "zho": {
                "official": "\u5B89\u572D\u62C9",
                "common": "\u5B89\u572D\u62C9"
            }
        },
        "latlng": [
            18.25,
            -63.16666666
        ],
        "landlocked": false,
        "area": 91,
        "demonyms": {
            "eng": {
                "f": "Anguillian",
                "m": "Anguillian"
            },
            "fra": {
                "f": "Anguillane",
                "m": "Anguillan"
            }
        },
        "flag": "\uD83C\uDDE6\uD83C\uDDEE",
        "maps": {
            "googleMaps": "https://goo.gl/maps/3KgLnEyN7amdno2p9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2177161"
        },
        "population": 13452,
        "fifa": "AIA",
        "car": {
            "signs": [
                "GB"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ai.png",
            "svg": "https://flagcdn.com/ai.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ai.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ai.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                18.22,
                -63.05
            ]
        }
    },
    {
        "name": {
            "common": "Cook Islands",
            "official": "Cook Islands",
            "nativeName": {
                "eng": {
                    "official": "Cook Islands",
                    "common": "Cook Islands"
                },
                "rar": {
                    "official": "K\u016Bki '\u0100irani",
                    "common": "K\u016Bki '\u0100irani"
                }
            }
        },
        "tld": [
            ".ck"
        ],
        "cca2": "CK",
        "ccn3": "184",
        "cca3": "COK",
        "cioc": "COK",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "CKD": {
                "name": "Cook Islands dollar",
                "symbol": "$"
            },
            "NZD": {
                "name": "New Zealand dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "82"
            ]
        },
        "capital": [
            "Avarua"
        ],
        "altSpellings": [
            "CK",
            "K\u016Bki '\u0100irani"
        ],
        "region": "Oceania",
        "subregion": "Polynesia",
        "languages": {
            "eng": "English",
            "rar": "Cook Islands M\u0101ori"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0632\u0631 \u0643\u0648\u0643",
                "common": "\u062C\u0632\u0631 \u0643\u0648\u0643"
            },
            "bre": {
                "official": "Inizi Cook",
                "common": "Inizi Cook"
            },
            "ces": {
                "official": "Cookovy ostrovy",
                "common": "Cookovy ostrovy"
            },
            "cym": {
                "official": "Ynysoedd Cook",
                "common": "Ynysoedd Cook"
            },
            "deu": {
                "official": "Cookinseln",
                "common": "Cookinseln"
            },
            "est": {
                "official": "Cooki saared",
                "common": "Cooki saared"
            },
            "fin": {
                "official": "Cookinsaaret",
                "common": "Cookinsaaret"
            },
            "fra": {
                "official": "\xceles Cook",
                "common": "\xceles Cook"
            },
            "hrv": {
                "official": "Cook Islands",
                "common": "Cookovo Oto\u010Dje"
            },
            "hun": {
                "official": "Cook-szigetek",
                "common": "Cook-szigetek"
            },
            "ita": {
                "official": "Isole Cook",
                "common": "Isole Cook"
            },
            "jpn": {
                "official": "\u30AF\u30C3\u30AF\u8AF8\u5CF6",
                "common": "\u30AF\u30C3\u30AF\u8AF8\u5CF6"
            },
            "kor": {
                "official": "\uCFE1 \uC81C\uB3C4",
                "common": "\uCFE1 \uC81C\uB3C4"
            },
            "nld": {
                "official": "Cook eilanden",
                "common": "Cookeilanden"
            },
            "per": {
                "official": "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u0648\u06A9",
                "common": "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u0648\u06A9"
            },
            "pol": {
                "official": "Wyspy Cooka",
                "common": "Wyspy Cooka"
            },
            "por": {
                "official": "Ilhas Cook",
                "common": "Ilhas Cook"
            },
            "rus": {
                "official": "\u043E\u0441\u0442\u0440\u043E\u0432\u0430 \u041A\u0443\u043A\u0430",
                "common": "\u041E\u0441\u0442\u0440\u043E\u0432\u0430 \u041A\u0443\u043A\u0430"
            },
            "slk": {
                "official": "Cookove ostrovy",
                "common": "Cookove ostrovy"
            },
            "spa": {
                "official": "Islas Cook",
                "common": "Islas Cook"
            },
            "srp": {
                "official": "\u041A\u0443\u043A\u043E\u0432\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                "common": "\u041A\u0443\u043A\u043E\u0432\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            "swe": {
                "official": "Cook\xf6arna",
                "common": "Cook\xf6arna"
            },
            "tur": {
                "official": "Cook Adalar\u0131",
                "common": "Cook Adalar\u0131"
            },
            "urd": {
                "official": "\u062C\u0632\u0627\u0626\u0631 \u06A9\u06A9",
                "common": "\u062C\u0632\u0627\u0626\u0631 \u06A9\u06A9"
            },
            "zho": {
                "official": "\u5E93\u514B\u7FA4\u5C9B",
                "common": "\u5E93\u514B\u7FA4\u5C9B"
            }
        },
        "latlng": [
            -21.23333333,
            -159.76666666
        ],
        "landlocked": false,
        "area": 236,
        "demonyms": {
            "eng": {
                "f": "Cook Islander",
                "m": "Cook Islander"
            },
            "fra": {
                "f": "Cookienne",
                "m": "Cookien"
            }
        },
        "flag": "\uD83C\uDDE8\uD83C\uDDF0",
        "maps": {
            "googleMaps": "https://goo.gl/maps/nrGZrvWRGB4WHgDC9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2184233"
        },
        "population": 18100,
        "fifa": "COK",
        "car": {
            "signs": [
                "NZ"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-10:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ck.png",
            "svg": "https://flagcdn.com/ck.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ck.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ck.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -21.2,
                -159.77
            ]
        }
    },
    {
        "name": {
            "common": "Western Sahara",
            "official": "Sahrawi Arab Democratic Republic",
            "nativeName": {
                "ber": {
                    "official": "Sahrawi Arab Democratic Republic",
                    "common": "Western Sahara"
                },
                "mey": {
                    "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0635\u062D\u0631\u0627\u0648\u064A\u0629 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629",
                    "common": "\u0627\u0644\u0635\u062D\u0631\u0627\u0621 \u0627\u0644\u063A\u0631\u0628\u064A\u0629"
                },
                "spa": {
                    "official": "Rep\xfablica \xc1rabe Saharaui Democr\xe1tica",
                    "common": "Sahara Occidental"
                }
            }
        },
        "tld": [
            ".eh"
        ],
        "cca2": "EH",
        "ccn3": "732",
        "cca3": "ESH",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "DZD": {
                "name": "Algerian dinar",
                "symbol": "\u062F\u062C"
            },
            "MAD": {
                "name": "Moroccan dirham",
                "symbol": "DH"
            },
            "MRU": {
                "name": "Mauritanian ouguiya",
                "symbol": "UM"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "125288",
                "125289"
            ]
        },
        "capital": [
            "El Aai\xfan"
        ],
        "altSpellings": [
            "EH",
            "Tane\u1E93roft Tutrimt"
        ],
        "region": "Africa",
        "subregion": "Northern Africa",
        "languages": {
            "ber": "Berber",
            "mey": "Hassaniya",
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0635\u062D\u0631\u0627\u0648\u064A\u0629 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629",
                "common": "\u0627\u0644\u0635\u062D\u0631\u0627\u0621 \u0627\u0644\u063A\u0631\u0628\u064A\u0629"
            },
            "bre": {
                "official": "Republik Arab Saharaoui Demokratel",
                "common": "Sahara ar C'horn\xf4g"
            },
            "ces": {
                "official": "Z\xe1padn\xed Sahara",
                "common": "Z\xe1padn\xed Sahara"
            },
            "cym": {
                "official": "Sahrawi Arab Democratic Republic",
                "common": "Western Sahara"
            },
            "deu": {
                "official": "Demokratische Arabische Republik Sahara",
                "common": "Westsahara"
            },
            "est": {
                "official": "L\xe4\xe4ne-Sahara",
                "common": "L\xe4\xe4ne-Sahara"
            },
            "fin": {
                "official": "L\xe4nsi-Sahara",
                "common": "L\xe4nsi-Sahara"
            },
            "fra": {
                "official": "R\xe9publique arabe sahraouie d\xe9mocratique",
                "common": "Sahara Occidental"
            },
            "hrv": {
                "official": "Sahrawi Arab Demokratska Republika",
                "common": "Zapadna Sahara"
            },
            "hun": {
                "official": "Nyugat-Szahara",
                "common": "Nyugat-Szahara"
            },
            "ita": {
                "official": "Repubblica Araba Saharawi Democratica",
                "common": "Sahara Occidentale"
            },
            "jpn": {
                "official": "\u30B5\u30CF\u30E9\u30A2\u30E9\u30D6\u6C11\u4E3B\u5171\u548C\u56FD",
                "common": "\u897F\u30B5\u30CF\u30E9"
            },
            "kor": {
                "official": "\uC0AC\uD558\uB77C \uC544\uB78D \uBBFC\uC8FC \uACF5\uD654\uAD6D",
                "common": "\uC11C\uC0AC\uD558\uB77C"
            },
            "nld": {
                "official": "Sahrawi Arabische Democratische Republiek",
                "common": "Westelijke Sahara"
            },
            "per": {
                "official": "\u0635\u062D\u0631\u0627\u06CC \u063A\u0631\u0628\u06CC",
                "common": "\u0635\u062D\u0631\u0627\u06CC \u063A\u0631\u0628\u06CC"
            },
            "pol": {
                "official": "Saharyjska Arabska Republika Demokratyczna",
                "common": "Sahara Zachodnia"
            },
            "por": {
                "official": "Rep\xfablica \xc1rabe Saharaui Democr\xe1tica",
                "common": "Saara Ocidental"
            },
            "rus": {
                "official": "Sahrawi \u0410\u0440\u0430\u0431\u0441\u043A\u0430\u044F \u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0417\u0430\u043F\u0430\u0434\u043D\u0430\u044F \u0421\u0430\u0445\u0430\u0440\u0430"
            },
            "slk": {
                "official": "Z\xe1padn\xe1 Sahara",
                "common": "Z\xe1padn\xe1 Sahara"
            },
            "spa": {
                "official": "Rep\xfablica \xc1rabe Saharaui Democr\xe1tica",
                "common": "Sahara Occidental"
            },
            "srp": {
                "official": "\u0421\u0430\u0445\u0430\u0440\u0441\u043A\u0430 \u0410\u0440\u0430\u043F\u0441\u043A\u0430 \u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0421\u0430\u0445\u0430\u0440\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430"
            },
            "swe": {
                "official": "V\xe4stsahara",
                "common": "V\xe4stsahara"
            },
            "tur": {
                "official": "Sahra Demokratik Arap Cumhuriyeti",
                "common": "Sahra Demokratik Arap Cumhuriyeti"
            },
            "urd": {
                "official": "\u0635\u062D\u0631\u0627\u0648\u06CC \u0639\u0631\u0628 \u0639\u0648\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1",
                "common": "\u0645\u063A\u0631\u0628\u06CC \u0635\u062D\u0627\u0631\u0627"
            },
            "zho": {
                "official": "\u963F\u62C9\u4F2F\u6492\u54C8\u62C9\u6C11\u4E3B\u5171\u548C\u56FD",
                "common": "\u897F\u6492\u54C8\u62C9"
            }
        },
        "latlng": [
            24.5,
            -13
        ],
        "landlocked": false,
        "borders": [
            "DZA",
            "MRT",
            "MAR"
        ],
        "area": 266000,
        "demonyms": {
            "eng": {
                "f": "Sahrawi",
                "m": "Sahrawi"
            }
        },
        "flag": "\uD83C\uDDEA\uD83C\uDDED",
        "maps": {
            "googleMaps": "https://goo.gl/maps/7nU3mB69vP6zQp7A8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/5441968"
        },
        "population": 510713,
        "car": {
            "signs": [
                ""
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+00:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/eh.png",
            "svg": "https://flagcdn.com/eh.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -13.28,
                27.14
            ]
        }
    },
    {
        "name": {
            "common": "New Zealand",
            "official": "New Zealand",
            "nativeName": {
                "eng": {
                    "official": "New Zealand",
                    "common": "New Zealand"
                },
                "mri": {
                    "official": "Aotearoa",
                    "common": "Aotearoa"
                },
                "nzs": {
                    "official": "New Zealand",
                    "common": "New Zealand"
                }
            }
        },
        "tld": [
            ".nz"
        ],
        "cca2": "NZ",
        "ccn3": "554",
        "cca3": "NZL",
        "cioc": "NZL",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "NZD": {
                "name": "New Zealand dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "4"
            ]
        },
        "capital": [
            "Wellington"
        ],
        "altSpellings": [
            "NZ",
            "Aotearoa"
        ],
        "region": "Oceania",
        "subregion": "Australia and New Zealand",
        "languages": {
            "eng": "English",
            "mri": "M\u0101ori",
            "nzs": "New Zealand Sign Language"
        },
        "translations": {
            "ara": {
                "official": "\u0646\u064A\u0648\u0632\u064A\u0644\u0646\u062F\u0627",
                "common": "\u0646\u064A\u0648\u0632\u064A\u0644\u0646\u062F\u0627"
            },
            "bre": {
                "official": "Zeland-Nevez",
                "common": "Zeland-Nevez"
            },
            "ces": {
                "official": "Nov\xfd Z\xe9land",
                "common": "Nov\xfd Z\xe9land"
            },
            "cym": {
                "official": "New Zealand",
                "common": "New Zealand"
            },
            "deu": {
                "official": "Neuseeland",
                "common": "Neuseeland"
            },
            "est": {
                "official": "Uus-Meremaa",
                "common": "Uus-Meremaa"
            },
            "fin": {
                "official": "Uusi-Seelanti",
                "common": "Uusi-Seelanti"
            },
            "fra": {
                "official": "Nouvelle-Z\xe9lande",
                "common": "Nouvelle-Z\xe9lande"
            },
            "hrv": {
                "official": "Novi Zeland",
                "common": "Novi Zeland"
            },
            "hun": {
                "official": "\xdaj-Z\xe9land",
                "common": "\xdaj-Z\xe9land"
            },
            "ita": {
                "official": "Nuova Zelanda",
                "common": "Nuova Zelanda"
            },
            "jpn": {
                "official": "\u30CB\u30E5\u30FC\u30B8\u30FC\u30E9\u30F3\u30C9",
                "common": "\u30CB\u30E5\u30FC\u30B8\u30FC\u30E9\u30F3\u30C9"
            },
            "kor": {
                "official": "\uB274\uC9C8\uB79C\uB4DC",
                "common": "\uB274\uC9C8\uB79C\uB4DC"
            },
            "nld": {
                "official": "Nieuw Zeeland",
                "common": "Nieuw-Zeeland"
            },
            "per": {
                "official": "\u0646\u06CC\u0648\u0632\u06CC\u0644\u0646\u062F",
                "common": "\u0646\u06CC\u0648\u0632\u06CC\u0644\u0646\u062F"
            },
            "pol": {
                "official": "Nowa Zelandia",
                "common": "Nowa Zelandia"
            },
            "por": {
                "official": "nova Zel\xe2ndia",
                "common": "Nova Zel\xe2ndia"
            },
            "rus": {
                "official": "\u041D\u043E\u0432\u0430\u044F \u0417\u0435\u043B\u0430\u043D\u0434\u0438\u044F",
                "common": "\u041D\u043E\u0432\u0430\u044F \u0417\u0435\u043B\u0430\u043D\u0434\u0438\u044F"
            },
            "slk": {
                "official": "Nov\xfd Z\xe9land",
                "common": "Nov\xfd Z\xe9land"
            },
            "spa": {
                "official": "nueva Zelanda",
                "common": "Nueva Zelanda"
            },
            "srp": {
                "official": "\u041D\u043E\u0432\u0438 \u0417\u0435\u043B\u0430\u043D\u0434",
                "common": "\u041D\u043E\u0432\u0438 \u0417\u0435\u043B\u0430\u043D\u0434"
            },
            "swe": {
                "official": "Nya Zeeland",
                "common": "Nya Zeeland"
            },
            "tur": {
                "official": "Yeni Zelanda",
                "common": "Yeni Zelanda"
            },
            "urd": {
                "official": "\u0646\u06CC\u0648\u0632\u06CC \u0644\u06CC\u0646\u0688",
                "common": "\u0646\u06CC\u0648\u0632\u06CC \u0644\u06CC\u0646\u0688"
            },
            "zho": {
                "official": "\u65B0\u897F\u5170",
                "common": "\u65B0\u897F\u5170"
            }
        },
        "latlng": [
            -41,
            174
        ],
        "landlocked": false,
        "area": 270467,
        "demonyms": {
            "eng": {
                "f": "New Zealander",
                "m": "New Zealander"
            },
            "fra": {
                "f": "Neo-Z\xe9landaise",
                "m": "Neo-Z\xe9landais"
            }
        },
        "flag": "\uD83C\uDDF3\uD83C\uDDFF",
        "maps": {
            "googleMaps": "https://goo.gl/maps/xXiDQo65dwdpw9iu8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/556706#map=5/-46.710/172.046"
        },
        "population": 5084300,
        "fifa": "NZL",
        "car": {
            "signs": [
                "NZ"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-11:00",
            "UTC-10:00",
            "UTC+12:00",
            "UTC+12:45",
            "UTC+13:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/nz.png",
            "svg": "https://flagcdn.com/nz.svg",
            "alt": "The flag of New Zealand has a dark blue field with the flag of the United Kingdom \u2014 the Union Jack \u2014 in the canton and a representation of the Southern Cross constellation, made up of four five-pointed white-edged red stars, on the fly side of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/nz.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/nz.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -41.3,
                174.78
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Eritrea",
            "official": "State of Eritrea",
            "nativeName": {
                "ara": {
                    "official": "\u062F\u0648\u0644\u0629 \u0625\u0631\u062A\u0631\u064A\u0627",
                    "common": "\u0625\u0631\u062A\u0631\u064A\u0627\u200E"
                },
                "eng": {
                    "official": "State of Eritrea",
                    "common": "Eritrea"
                },
                "tir": {
                    "official": "\u1203\u1308\u1228 \u12A4\u122D\u1275\u122B",
                    "common": "\u12A4\u122D\u1275\u122B"
                }
            }
        },
        "tld": [
            ".er"
        ],
        "cca2": "ER",
        "ccn3": "232",
        "cca3": "ERI",
        "cioc": "ERI",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "ERN": {
                "name": "Eritrean nakfa",
                "symbol": "Nfk"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "91"
            ]
        },
        "capital": [
            "Asmara"
        ],
        "altSpellings": [
            "ER",
            "State of Eritrea",
            "\u1203\u1308\u1228 \u12A4\u122D\u1275\u122B",
            "Dawlat Iritriy\xe1",
            "\u02BEErtr\u0101",
            "Iritriy\u0101"
        ],
        "region": "Africa",
        "subregion": "Eastern Africa",
        "languages": {
            "ara": "Arabic",
            "eng": "English",
            "tir": "Tigrinya"
        },
        "translations": {
            "ara": {
                "official": "\u062F\u0648\u0644\u0629 \u0625\u0631\u064A\u062A\u0631\u064A\u0627",
                "common": "\u0625\u0631\u064A\u062A\u0631\u064A\u0627"
            },
            "bre": {
                "official": "Stad Eritrea",
                "common": "Eritrea"
            },
            "ces": {
                "official": "St\xe1t Eritrea",
                "common": "Eritrea"
            },
            "cym": {
                "official": "Gwladwriaeth Eritrea",
                "common": "Eritrea"
            },
            "deu": {
                "official": "Staat Eritrea",
                "common": "Eritrea"
            },
            "est": {
                "official": "Eritrea Riik",
                "common": "Eritrea"
            },
            "fin": {
                "official": "Eritrean valtio",
                "common": "Eritrea"
            },
            "fra": {
                "official": "\xc9tat d'\xc9rythr\xe9e",
                "common": "\xc9rythr\xe9e"
            },
            "hrv": {
                "official": "Dr\u017Eava Eritreji",
                "common": "Eritreja"
            },
            "hun": {
                "official": "Eritrea",
                "common": "Eritrea"
            },
            "ita": {
                "official": "Stato di Eritrea",
                "common": "Eritrea"
            },
            "jpn": {
                "official": "\u30A8\u30EA\u30C8\u30EA\u30A2\u56FD",
                "common": "\u30A8\u30EA\u30C8\u30EA\u30A2"
            },
            "kor": {
                "official": "\uC5D0\uB9AC\uD2B8\uB808\uC544\uAD6D",
                "common": "\uC5D0\uB9AC\uD2B8\uB808\uC544"
            },
            "nld": {
                "official": "Staat Eritrea",
                "common": "Eritrea"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0631\u06CC\u062A\u0631\u0647",
                "common": "\u0627\u0631\u06CC\u062A\u0631\u0647"
            },
            "pol": {
                "official": "Pa\u0144stwo Erytrea",
                "common": "Erytrea"
            },
            "por": {
                "official": "Estado da Eritreia",
                "common": "Eritreia"
            },
            "rus": {
                "official": "\u0413\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u042D\u0440\u0438\u0442\u0440\u0435\u044F",
                "common": "\u042D\u0440\u0438\u0442\u0440\u0435\u044F"
            },
            "slk": {
                "official": "Eritrejsk\xfd \u0161t\xe1t",
                "common": "Eritrea"
            },
            "spa": {
                "official": "Estado de Eritrea",
                "common": "Eritrea"
            },
            "srp": {
                "official": "\u0414\u0440\u0436\u0430\u0432\u0430 \u0415\u0440\u0438\u0442\u0440\u0435\u0458\u0430",
                "common": "\u0415\u0440\u0438\u0442\u0440\u0435\u0458\u0430"
            },
            "swe": {
                "official": "Staten Eritrea",
                "common": "Eritrea"
            },
            "tur": {
                "official": "Eritre Devleti",
                "common": "Eritre"
            },
            "urd": {
                "official": "\u0631\u06CC\u0627\u0633\u062A\u0650 \u0627\u0631\u062A\u0631\u06CC\u0627",
                "common": "\u0627\u0631\u062A\u0631\u06CC\u0627"
            },
            "zho": {
                "official": "\u5384\u7ACB\u7279\u91CC\u4E9A",
                "common": "\u5384\u7ACB\u7279\u91CC\u4E9A"
            }
        },
        "latlng": [
            15,
            39
        ],
        "landlocked": false,
        "borders": [
            "DJI",
            "ETH",
            "SDN"
        ],
        "area": 117600,
        "demonyms": {
            "eng": {
                "f": "Eritrean",
                "m": "Eritrean"
            },
            "fra": {
                "f": "\xc9rythr\xe9enne",
                "m": "\xc9rythr\xe9en"
            }
        },
        "flag": "\uD83C\uDDEA\uD83C\uDDF7",
        "maps": {
            "googleMaps": "https://goo.gl/maps/HRyqUpnPwwG6jY5j6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/296961"
        },
        "population": 5352000,
        "fifa": "ERI",
        "car": {
            "signs": [
                "ER"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/er.png",
            "svg": "https://flagcdn.com/er.svg",
            "alt": "The flag of Eritrea comprises three triangles \u2014 a large red isosceles triangle with its base spanning the hoist end and its apex at the midpoint on the fly end, and a green and blue right-angled triangle above and beneath the red triangle. On the hoist side of the red triangle is a golden vertical olive branch encircled by a golden olive wreath."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/er.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/er.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                15.33,
                38.93
            ]
        }
    },
    {
        "name": {
            "common": "Cambodia",
            "official": "Kingdom of Cambodia",
            "nativeName": {
                "khm": {
                    "official": "\u1796\u17D2\u179A\u17C7\u179A\u17B6\u1787\u17B6\u178E\u17B6\u1785\u1780\u17D2\u179A\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6",
                    "common": "K\xe2mp\u016Dch\xe9a"
                }
            }
        },
        "tld": [
            ".kh"
        ],
        "cca2": "KH",
        "ccn3": "116",
        "cca3": "KHM",
        "cioc": "CAM",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "KHR": {
                "name": "Cambodian riel",
                "symbol": "\u17DB"
            },
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+8",
            "suffixes": [
                "55"
            ]
        },
        "capital": [
            "Phnom Penh"
        ],
        "altSpellings": [
            "KH",
            "Kingdom of Cambodia"
        ],
        "region": "Asia",
        "subregion": "South-Eastern Asia",
        "languages": {
            "khm": "Khmer"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0645\u0644\u0643\u0629 \u0643\u0645\u0628\u0648\u062F\u064A\u0627",
                "common": "\u0643\u0645\u0628\u0648\u062F\u064A\u0627"
            },
            "bre": {
                "official": "Rouantelezh Kambodja",
                "common": "Kambodja"
            },
            "ces": {
                "official": "Kambod\u017Esk\xe9 kr\xe1lovstv\xed",
                "common": "Kambod\u017Ea"
            },
            "cym": {
                "official": "Teyrnas Cambodia",
                "common": "Cambodia"
            },
            "deu": {
                "official": "K\xf6nigreich Kambodscha",
                "common": "Kambodscha"
            },
            "est": {
                "official": "Kambod\u017Ea Kuningriik",
                "common": "Kambod\u017Ea"
            },
            "fin": {
                "official": "Kambod\u017Ean kuningaskunta",
                "common": "Kambod\u017Ea"
            },
            "fra": {
                "official": "Royaume du Cambodge",
                "common": "Cambodge"
            },
            "hrv": {
                "official": "Kraljevina Kambod\u017Ea",
                "common": "Kambod\u017Ea"
            },
            "hun": {
                "official": "Kambodzsai Kir\xe1lys\xe1g",
                "common": "Kambodzsa"
            },
            "ita": {
                "official": "Regno di Cambogia",
                "common": "Cambogia"
            },
            "jpn": {
                "official": "\u30AB\u30F3\u30DC\u30B8\u30A2\u738B\u56FD",
                "common": "\u30AB\u30F3\u30DC\u30B8\u30A2"
            },
            "kor": {
                "official": "\uCE84\uBCF4\uB514\uC544 \uC655\uAD6D",
                "common": "\uCE84\uBCF4\uB514\uC544"
            },
            "nld": {
                "official": "Koninkrijk Cambodja",
                "common": "Cambodja"
            },
            "per": {
                "official": "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u06A9\u0627\u0645\u0628\u0648\u062C",
                "common": "\u06A9\u0627\u0645\u0628\u0648\u062C"
            },
            "pol": {
                "official": "Kr\xf3lestwo Kambod\u017Cy",
                "common": "Kambod\u017Ca"
            },
            "por": {
                "official": "Reino do Camboja",
                "common": "Camboja"
            },
            "rus": {
                "official": "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u041A\u0430\u043C\u0431\u043E\u0434\u0436\u0430",
                "common": "\u041A\u0430\u043C\u0431\u043E\u0434\u0436\u0430"
            },
            "slk": {
                "official": "Kambo\u01C6sk\xe9 kr\xe1\u013Eovstvo",
                "common": "Kambo\u01C6a"
            },
            "spa": {
                "official": "Reino de Camboya",
                "common": "Camboya"
            },
            "srp": {
                "official": "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u041A\u0430\u043C\u0431\u043E\u045F\u0430",
                "common": "\u041A\u0430\u043C\u0431\u043E\u045F\u0430"
            },
            "swe": {
                "official": "Konungariket Kambodja",
                "common": "Kambodja"
            },
            "tur": {
                "official": "Kambo\xe7ya Krall\u0131\u011F\u0131",
                "common": "Kambo\xe7ya"
            },
            "urd": {
                "official": "\u0645\u0645\u0644\u06A9\u062A\u0650 \u06A9\u0645\u0628\u0648\u0688\u06CC\u0627",
                "common": "\u06A9\u0645\u0628\u0648\u0688\u06CC\u0627"
            },
            "zho": {
                "official": "\u67EC\u57D4\u5BE8\u738B\u56FD",
                "common": "\u67EC\u57D4\u5BE8"
            }
        },
        "latlng": [
            13,
            105
        ],
        "landlocked": false,
        "borders": [
            "LAO",
            "THA",
            "VNM"
        ],
        "area": 181035,
        "demonyms": {
            "eng": {
                "f": "Cambodian",
                "m": "Cambodian"
            },
            "fra": {
                "f": "Cambodgienne",
                "m": "Cambodgien"
            }
        },
        "flag": "\uD83C\uDDF0\uD83C\uDDED",
        "maps": {
            "googleMaps": "https://goo.gl/maps/nztQtFSrUXZymJaW8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/49898"
        },
        "population": 16718971,
        "fifa": "CAM",
        "car": {
            "signs": [
                "K"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+07:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/kh.png",
            "svg": "https://flagcdn.com/kh.svg",
            "alt": "The flag of Cambodia features three horizontal bands of blue, red and blue, with a white depiction of the temple complex, Angkor Wat centered in the red band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/kh.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/kh.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                11.55,
                104.92
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Bahamas",
            "official": "Commonwealth of the Bahamas",
            "nativeName": {
                "eng": {
                    "official": "Commonwealth of the Bahamas",
                    "common": "Bahamas"
                }
            }
        },
        "tld": [
            ".bs"
        ],
        "cca2": "BS",
        "ccn3": "044",
        "cca3": "BHS",
        "cioc": "BAH",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "BSD": {
                "name": "Bahamian dollar",
                "symbol": "$"
            },
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "242"
            ]
        },
        "capital": [
            "Nassau"
        ],
        "altSpellings": [
            "BS",
            "Commonwealth of the Bahamas"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u0643\u0648\u0645\u0646\u0648\u0644\u062B \u062C\u0632\u0631 \u0627\u0644\u0628\u0647\u0627\u0645\u0627",
                "common": "\u0628\u0627\u0647\u0627\u0645\u0627\u0633"
            },
            "bre": {
                "official": "Kenglad ar Bahamas",
                "common": "Bahamas"
            },
            "ces": {
                "official": "Bahamsk\xe9 spole\u010Denstv\xed",
                "common": "Bahamy"
            },
            "cym": {
                "official": "Cymanwlad y Bahamas",
                "common": "Bahamas"
            },
            "deu": {
                "official": "Commonwealth der Bahamas",
                "common": "Bahamas"
            },
            "est": {
                "official": "Bahama \xdchendus",
                "common": "Bahama"
            },
            "fin": {
                "official": "Bahaman liittovaltio",
                "common": "Bahamasaaret"
            },
            "fra": {
                "official": "Commonwealth des Bahamas",
                "common": "Bahamas"
            },
            "hrv": {
                "official": "Zajednica Bahama",
                "common": "Bahami"
            },
            "hun": {
                "official": "Bahamai K\xf6z\xf6ss\xe9g",
                "common": "Bahama-szigetek"
            },
            "ita": {
                "official": "Commonwealth delle Bahamas",
                "common": "Bahamas"
            },
            "jpn": {
                "official": "\u30D0\u30CF\u30DE",
                "common": "\u30D0\u30CF\u30DE"
            },
            "kor": {
                "official": "\uBC14\uD558\uB9C8 \uC5F0\uBC29",
                "common": "\uBC14\uD558\uB9C8"
            },
            "nld": {
                "official": "Gemenebest van de Bahama's",
                "common": "Bahama\u2019s"
            },
            "per": {
                "official": "\u0642\u0644\u0645\u0631\u0648 \u0647\u0645\u0633\u0648\u062F \u0628\u0627\u0647\u0627\u0645\u0627",
                "common": "\u0628\u0627\u0647\u0627\u0645\u0627"
            },
            "pol": {
                "official": "Bahamy",
                "common": "Bahamy"
            },
            "por": {
                "official": "Comunidade das Bahamas",
                "common": "Bahamas"
            },
            "rus": {
                "official": "\u0421\u043E\u0434\u0440\u0443\u0436\u0435\u0441\u0442\u0432\u043E \u0411\u0430\u0433\u0430\u043C\u0441\u043A\u0438\u0445 \u041E\u0441\u0442\u0440\u043E\u0432\u043E\u0432",
                "common": "\u0411\u0430\u0433\u0430\u043C\u0441\u043A\u0438\u0435 \u041E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            "slk": {
                "official": "Bahamsk\xe9 spolo\u010Denstvo",
                "common": "Bahamy"
            },
            "spa": {
                "official": "Commonwealth de las Bahamas",
                "common": "Bahamas"
            },
            "srp": {
                "official": "\u041A\u043E\u043C\u043E\u043D\u0432\u0435\u043B\u0442 \u0411\u0430\u0445\u0430\u043C\u0430",
                "common": "\u0411\u0430\u0445\u0430\u043C\u0438"
            },
            "swe": {
                "official": "Samv\xe4ldet Bahamas",
                "common": "Bahamas"
            },
            "tur": {
                "official": "Bahama Milletler Toplulu\u011Fu",
                "common": "Bahamalar"
            },
            "urd": {
                "official": "\u062F\u0648\u0644\u062A\u0650 \u0645\u0634\u062A\u0631\u06A9\u06C1 \u0628\u06C1\u0627\u0645\u0627\u0633",
                "common": "\u0628\u06C1\u0627\u0645\u0627\u0633"
            },
            "zho": {
                "official": "\u5DF4\u54C8\u9A6C\u8054\u90A6",
                "common": "\u5DF4\u54C8\u9A6C"
            }
        },
        "latlng": [
            25.0343,
            -77.3963
        ],
        "landlocked": false,
        "area": 13943,
        "demonyms": {
            "eng": {
                "f": "Bahamian",
                "m": "Bahamian"
            },
            "fra": {
                "f": "Bahamienne",
                "m": "Bahamien"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDF8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/1YzRs1BZrG8p8pmVA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/547469"
        },
        "population": 393248,
        "fifa": "BAH",
        "car": {
            "signs": [
                "BS"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-05:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/bs.png",
            "svg": "https://flagcdn.com/bs.svg",
            "alt": "The flag of the Bahamas is composed of three equal horizontal bands of aquamarine, yellow and aquamarine, with a black equilateral triangle superimposed on the hoist side of the field. This triangle has its base on the hoist end and spans about one-third the width of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/bs.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/bs.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                25.08,
                -77.35
            ]
        }
    },
    {
        "name": {
            "common": "Belarus",
            "official": "Republic of Belarus",
            "nativeName": {
                "bel": {
                    "official": "\u0420\u044D\u0441\u043F\u0443\u0431\u043B\u0456\u043A\u0430 \u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C",
                    "common": "\u0411\u0435\u043B\u0430\u0440\u0443\u0301\u0441\u044C"
                },
                "rus": {
                    "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C",
                    "common": "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C"
                }
            }
        },
        "tld": [
            ".by"
        ],
        "cca2": "BY",
        "ccn3": "112",
        "cca3": "BLR",
        "cioc": "BLR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "BYN": {
                "name": "Belarusian ruble",
                "symbol": "Br"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "75"
            ]
        },
        "capital": [
            "Minsk"
        ],
        "altSpellings": [
            "BY",
            "Bielaru\u015B",
            "Republic of Belarus",
            "\u0411\u0435\u043B\u043E\u0440\u0443\u0441\u0441\u0438\u044F",
            "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0435\u043B\u043E\u0440\u0443\u0441\u0441\u0438\u044F"
        ],
        "region": "Europe",
        "subregion": "Eastern Europe",
        "languages": {
            "bel": "Belarusian",
            "rus": "Russian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u064A\u0644\u0627\u0631\u0648\u0633\u064A\u0627",
                "common": "\u0628\u064A\u0644\u0627\u0631\u0648\u0633\u064A\u0627"
            },
            "bre": {
                "official": "Republik Belarus",
                "common": "Belarus"
            },
            "ces": {
                "official": "B\u011Blorusk\xe1 republika",
                "common": "B\u011Blorusko"
            },
            "cym": {
                "official": "Gweriniaeth Belarws",
                "common": "Belarws"
            },
            "deu": {
                "official": "Republik Belarus",
                "common": "Wei\xdfrussland"
            },
            "est": {
                "official": "Valgevene Vabariik",
                "common": "Valgevene"
            },
            "fin": {
                "official": "Valko-Ven\xe4j\xe4n tasavalta",
                "common": "Valko-Ven\xe4j\xe4"
            },
            "fra": {
                "official": "R\xe9publique de Bi\xe9lorussie",
                "common": "Bi\xe9lorussie"
            },
            "hrv": {
                "official": "Republika Bjelorusija",
                "common": "Bjelorusija"
            },
            "hun": {
                "official": "Feh\xe9rorosz K\xf6zt\xe1rsas\xe1g",
                "common": "Feh\xe9roroszorsz\xe1g"
            },
            "ita": {
                "official": "Repubblica di Belarus",
                "common": "Bielorussia"
            },
            "jpn": {
                "official": "\u30D9\u30E9\u30EB\u30FC\u30B7\u5171\u548C\u56FD",
                "common": "\u30D9\u30E9\u30EB\u30FC\u30B7"
            },
            "kor": {
                "official": "\uBCA8\uB77C\uB8E8\uC2A4 \uACF5\uD654\uAD6D",
                "common": "\uBCA8\uB77C\uB8E8\uC2A4"
            },
            "nld": {
                "official": "Republiek Belarus",
                "common": "Wit-Rusland"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0628\u0644\u0627\u0631\u0648\u0633",
                "common": "\u0628\u0644\u0627\u0631\u0648\u0633"
            },
            "pol": {
                "official": "Republika Bia\u0142orusi",
                "common": "Bia\u0142oru\u015B"
            },
            "por": {
                "official": "Rep\xfablica da Bielorr\xfassia",
                "common": "Bielor\xfassia"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C",
                "common": "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C"
            },
            "slk": {
                "official": "Bielorusk\xe1 republika",
                "common": "Bielorusko"
            },
            "spa": {
                "official": "Rep\xfablica de Belar\xfas",
                "common": "Bielorrusia"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0435\u043B\u043E\u0440\u0443\u0441\u0438\u0458\u0430",
                "common": "\u0411\u0435\u043B\u043E\u0440\u0443\u0441\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Vitryssland",
                "common": "Belarus"
            },
            "tur": {
                "official": "Belarus Cumhuriyeti",
                "common": "Belarus"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0628\u06CC\u0644\u0627\u0631\u0648\u0633",
                "common": "\u0628\u06CC\u0644\u0627\u0631\u0648\u0633"
            },
            "zho": {
                "official": "\u767D\u4FC4\u7F57\u65AF\u5171\u548C\u56FD",
                "common": "\u767D\u4FC4\u7F57\u65AF"
            }
        },
        "latlng": [
            53,
            28
        ],
        "landlocked": true,
        "borders": [
            "LVA",
            "LTU",
            "POL",
            "RUS",
            "UKR"
        ],
        "area": 207600,
        "demonyms": {
            "eng": {
                "f": "Belarusian",
                "m": "Belarusian"
            },
            "fra": {
                "f": "Bi\xe9lorusse",
                "m": "Bi\xe9lorusse"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDFE",
        "maps": {
            "googleMaps": "https://goo.gl/maps/PJUDU3EBPSszCQcu6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/59065"
        },
        "population": 9398861,
        "gini": {
            "2019": 25.3
        },
        "fifa": "BLR",
        "car": {
            "signs": [
                "BY"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/by.png",
            "svg": "https://flagcdn.com/by.svg",
            "alt": "The flag of Belarus features a vertical band, with a white and red ornamental pattern, spanning about one-fifth the width of the field on the hoist side. Adjoining the vertical band are two horizontal bands of red and green, with the red band twice the height of the green band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/by.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/by.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                53.9,
                27.57
            ]
        },
        "postalCode": {
            "format": "######",
            "regex": "^(\\d{6})$"
        }
    },
    {
        "name": {
            "common": "Norfolk Island",
            "official": "Territory of Norfolk Island",
            "nativeName": {
                "eng": {
                    "official": "Territory of Norfolk Island",
                    "common": "Norfolk Island"
                },
                "pih": {
                    "official": "Teratri of Norf'k Ailen",
                    "common": "Norf'k Ailen"
                }
            }
        },
        "tld": [
            ".nf"
        ],
        "cca2": "NF",
        "ccn3": "574",
        "cca3": "NFK",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "AUD": {
                "name": "Australian dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "72"
            ]
        },
        "capital": [
            "Kingston"
        ],
        "altSpellings": [
            "NF",
            "Territory of Norfolk Island",
            "Teratri of Norf'k Ailen"
        ],
        "region": "Oceania",
        "subregion": "Australia and New Zealand",
        "languages": {
            "eng": "English",
            "pih": "Norfuk"
        },
        "translations": {
            "ara": {
                "official": "\u0625\u0642\u0644\u064A\u0645 \u062C\u0632\u064A\u0631\u0629 \u0646\u0648\u0631\u0641\u0648\u0644\u0643",
                "common": "\u062C\u0632\u064A\u0631\u0629 \u0646\u0648\u0631\u0641\u0648\u0644\u0643"
            },
            "bre": {
                "official": "Tiriad Enez Norfolk",
                "common": "Enez Norfolk"
            },
            "ces": {
                "official": "Teritorium ostrova Norfolk",
                "common": "Norfolk"
            },
            "cym": {
                "official": "Territory of Norfolk Island",
                "common": "Norfolk Island"
            },
            "deu": {
                "official": "Gebiet der Norfolkinsel",
                "common": "Norfolkinsel"
            },
            "est": {
                "official": "Norfolki saare ala",
                "common": "Norfolk"
            },
            "fin": {
                "official": "Norfolkinsaaren territorio",
                "common": "Norfolkinsaari"
            },
            "fra": {
                "official": "Territoire de l'\xeele Norfolk",
                "common": "\xcele Norfolk"
            },
            "hrv": {
                "official": "Teritorij Norfolk Island",
                "common": "Otok Norfolk"
            },
            "hun": {
                "official": "Norfolk-sziget",
                "common": "Norfolk-sziget"
            },
            "ita": {
                "official": "Territorio di Norfolk Island",
                "common": "Isola Norfolk"
            },
            "jpn": {
                "official": "\u30CE\u30FC\u30D5\u30A9\u30FC\u30AF\u5CF6\u306E\u9818\u571F",
                "common": "\u30CE\u30FC\u30D5\u30A9\u30FC\u30AF\u5CF6"
            },
            "kor": {
                "official": "\uB178\uD37D \uC12C",
                "common": "\uB178\uD37D \uC12C"
            },
            "nld": {
                "official": "Grondgebied van Norfolk Island",
                "common": "Norfolkeiland"
            },
            "per": {
                "official": "\u0642\u0644\u0645\u0631\u0648 \u062C\u0632\u0627\u06CC\u0631 \u0646\u0648\u0631\u0641\u06A9",
                "common": "\u062C\u0632\u06CC\u0631\u0647 \u0646\u0648\u0631\u0641\u06A9"
            },
            "pol": {
                "official": "Terytorium Wyspy Norfolk",
                "common": "Wyspa Norfolk"
            },
            "por": {
                "official": "Territ\xf3rio da Ilha Norfolk",
                "common": "Ilha Norfolk"
            },
            "rus": {
                "official": "\u0422\u0435\u0440\u0440\u0438\u0442\u043E\u0440\u0438\u044F \u043E\u0441\u0442\u0440\u043E\u0432\u0430 \u041D\u043E\u0440\u0444\u043E\u043B\u043A",
                "common": "\u041D\u043E\u0440\u0444\u043E\u043B\u043A"
            },
            "slk": {
                "official": "Terit\xf3rium ostrova Norfolk",
                "common": "Norfolk"
            },
            "spa": {
                "official": "Territorio de la Isla Norfolk",
                "common": "Isla de Norfolk"
            },
            "srp": {
                "official": "\u0422\u0435\u0440\u0438\u0442\u043E\u0440\u0438\u0458\u0430 \u041E\u0441\u0442\u0440\u0432\u0430 \u041D\u043E\u0440\u0444\u043E\u043A",
                "common": "\u041D\u043E\u0440\u0444\u043E\u043A"
            },
            "swe": {
                "official": "Norfolk\xf6n",
                "common": "Norfolk\xf6n"
            },
            "tur": {
                "official": "Norfolk Adas\u0131",
                "common": "Norfolk Adas\u0131"
            },
            "urd": {
                "official": "\u062C\u0632\u06CC\u0631\u06C1 \u0646\u0648\u0631\u0641\u06A9 \u062E\u0637\u06C1",
                "common": "\u062C\u0632\u06CC\u0631\u06C1 \u0646\u0648\u0631\u0641\u06A9"
            },
            "zho": {
                "official": "\u8BFA\u798F\u514B\u5C9B",
                "common": "\u8BFA\u798F\u514B\u5C9B"
            }
        },
        "latlng": [
            -29.03333333,
            167.95
        ],
        "landlocked": false,
        "area": 36,
        "demonyms": {
            "eng": {
                "f": "Norfolk Islander",
                "m": "Norfolk Islander"
            },
            "fra": {
                "f": "Norfolkaise",
                "m": "Norfolkais"
            }
        },
        "flag": "\uD83C\uDDF3\uD83C\uDDEB",
        "maps": {
            "googleMaps": "https://goo.gl/maps/pbvtm6XYd1iZbjky5",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2574988"
        },
        "population": 2302,
        "car": {
            "signs": [
                "AUS"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+11:30"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/nf.png",
            "svg": "https://flagcdn.com/nf.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -29.05,
                167.97
            ]
        }
    },
    {
        "name": {
            "common": "Tuvalu",
            "official": "Tuvalu",
            "nativeName": {
                "eng": {
                    "official": "Tuvalu",
                    "common": "Tuvalu"
                },
                "tvl": {
                    "official": "Tuvalu",
                    "common": "Tuvalu"
                }
            }
        },
        "tld": [
            ".tv"
        ],
        "cca2": "TV",
        "ccn3": "798",
        "cca3": "TUV",
        "cioc": "TUV",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "AUD": {
                "name": "Australian dollar",
                "symbol": "$"
            },
            "TVD": {
                "name": "Tuvaluan dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "88"
            ]
        },
        "capital": [
            "Funafuti"
        ],
        "altSpellings": [
            "TV"
        ],
        "region": "Oceania",
        "subregion": "Polynesia",
        "languages": {
            "eng": "English",
            "tvl": "Tuvaluan"
        },
        "translations": {
            "ara": {
                "official": "\u062A\u0648\u0641\u0627\u0644\u0648",
                "common": "\u062A\u0648\u0641\u0627\u0644\u0648"
            },
            "bre": {
                "official": "Tuvalu",
                "common": "Tuvalu"
            },
            "ces": {
                "official": "Tuvalu",
                "common": "Tuvalu"
            },
            "cym": {
                "official": "Tuvalu",
                "common": "Tuvalu"
            },
            "deu": {
                "official": "Tuvalu",
                "common": "Tuvalu"
            },
            "est": {
                "official": "Tuvalu",
                "common": "Tuvalu"
            },
            "fin": {
                "official": "Tuvalu",
                "common": "Tuvalu"
            },
            "fra": {
                "official": "Tuvalu",
                "common": "Tuvalu"
            },
            "hrv": {
                "official": "Tuvalu",
                "common": "Tuvalu"
            },
            "hun": {
                "official": "Tuvalu",
                "common": "Tuvalu"
            },
            "ita": {
                "official": "Tuvalu",
                "common": "Tuvalu"
            },
            "jpn": {
                "official": "\u30C4\u30D0\u30EB",
                "common": "\u30C4\u30D0\u30EB"
            },
            "kor": {
                "official": "\uD22C\uBC1C\uB8E8",
                "common": "\uD22C\uBC1C\uB8E8"
            },
            "nld": {
                "official": "Tuvalu",
                "common": "Tuvalu"
            },
            "per": {
                "official": "\u062A\u0648\u0648\u0627\u0644\u0648",
                "common": "\u062A\u0648\u0648\u0627\u0644\u0648"
            },
            "pol": {
                "official": "Tuvalu",
                "common": "Tuvalu"
            },
            "por": {
                "official": "Tuvalu",
                "common": "Tuvalu"
            },
            "rus": {
                "official": "\u0422\u0443\u0432\u0430\u043B\u0443",
                "common": "\u0422\u0443\u0432\u0430\u043B\u0443"
            },
            "slk": {
                "official": "Tuvalu",
                "common": "Tuvalu"
            },
            "spa": {
                "official": "Tuvalu",
                "common": "Tuvalu"
            },
            "srp": {
                "official": "\u0422\u0443\u0432\u0430\u043B\u0443",
                "common": "\u0422\u0443\u0432\u0430\u043B\u0443"
            },
            "swe": {
                "official": "Tuvalu",
                "common": "Tuvalu"
            },
            "tur": {
                "official": "Tuvalu",
                "common": "Tuvalu"
            },
            "urd": {
                "official": "\u062A\u0648\u0648\u0627\u0644\u0648",
                "common": "\u062A\u0648\u0648\u0627\u0644\u0648"
            },
            "zho": {
                "official": "\u56FE\u74E6\u5362",
                "common": "\u56FE\u74E6\u5362"
            }
        },
        "latlng": [
            -8,
            178
        ],
        "landlocked": false,
        "area": 26,
        "demonyms": {
            "eng": {
                "f": "Tuvaluan",
                "m": "Tuvaluan"
            },
            "fra": {
                "f": "Tuvaluane",
                "m": "Tuvaluan"
            }
        },
        "flag": "\uD83C\uDDF9\uD83C\uDDFB",
        "maps": {
            "googleMaps": "https://goo.gl/maps/LbuUxtkgm1dfN1Pn6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2177266"
        },
        "population": 11792,
        "gini": {
            "2010": 39.1
        },
        "car": {
            "signs": [
                "TUV"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+12:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/tv.png",
            "svg": "https://flagcdn.com/tv.svg",
            "alt": "The flag of Tuvalu has a light blue field with the flag of the United Kingdom \u2014 the Union Jack \u2014 in the canton. A representation of the country's nine Islands using nine five-pointed yellow stars is situated in the fly half of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/tv.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/tv.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -8.52,
                179.22
            ]
        }
    },
    {
        "name": {
            "common": "South Georgia",
            "official": "South Georgia and the South Sandwich Islands",
            "nativeName": {
                "eng": {
                    "official": "South Georgia and the South Sandwich Islands",
                    "common": "South Georgia"
                }
            }
        },
        "tld": [
            ".gs"
        ],
        "cca2": "GS",
        "ccn3": "239",
        "cca3": "SGS",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "SHP": {
                "name": "Saint Helena pound",
                "symbol": "\xa3"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "00"
            ]
        },
        "capital": [
            "King Edward Point"
        ],
        "altSpellings": [
            "GS",
            "South Georgia and the South Sandwich Islands"
        ],
        "region": "Antarctic",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0648\u0631\u062C\u064A\u0627 \u0627\u0644\u062C\u0646\u0648\u0628\u064A\u0629 \u0648\u062C\u0632\u0631 \u0633\u0627\u0646\u062F\u0648\u062A\u0634 \u0627\u0644\u062C\u0646\u0648\u0628\u064A\u0629",
                "common": "\u062C\u0648\u0631\u062C\u064A\u0627 \u0627\u0644\u062C\u0646\u0648\u0628\u064A\u0629"
            },
            "bre": {
                "official": "Georgia ar Su hag Inizi Sandwich ar Su",
                "common": "Georgia ar Su hag Inizi Sandwich ar Su"
            },
            "ces": {
                "official": "Ji\u017En\xed Georgie a Ji\u017En\xed Sandwichovy ostrovy",
                "common": "Ji\u017En\xed Georgie a Ji\u017En\xed Sandwichovy ostrovy"
            },
            "cym": {
                "official": "South Georgia and the South Sandwich Islands",
                "common": "South Georgia"
            },
            "deu": {
                "official": "S\xfcdgeorgien und die S\xfcdlichen Sandwichinseln",
                "common": "S\xfcdgeorgien und die S\xfcdlichen Sandwichinseln"
            },
            "est": {
                "official": "L\xf5una-Georgia ja L\xf5una-Sandwichi saared",
                "common": "L\xf5una-Georgia ja L\xf5una-Sandwichi saared"
            },
            "fin": {
                "official": "Etel\xe4-Georgia ja Etel\xe4iset Sandwichsaaret",
                "common": "Etel\xe4-Georgia ja Etel\xe4iset Sandwichsaaret"
            },
            "fra": {
                "official": "G\xe9orgie du Sud et les \xeeles Sandwich du Sud",
                "common": "G\xe9orgie du Sud-et-les \xceles Sandwich du Sud"
            },
            "hrv": {
                "official": "Ju\u017Ena D\u017Eord\u017Eija i Otoci Ju\u017Eni Sendvi\u010D",
                "common": "Ju\u017Ena Georgija i oto\u010Dje Ju\u017Eni Sandwich"
            },
            "hun": {
                "official": "D\xe9li-Georgia \xe9s D\xe9li-Sandwich-szigetek",
                "common": "D\xe9li-Georgia \xe9s D\xe9li-Sandwich-szigetek"
            },
            "ita": {
                "official": "Georgia del Sud e isole Sandwich del Sud",
                "common": "Georgia del Sud e Isole Sandwich Meridionali"
            },
            "jpn": {
                "official": "\u30B5\u30A6\u30B9\u30B8\u30E7\u30FC\u30B8\u30A2\xb7\u30B5\u30A6\u30B9\u30B5\u30F3\u30C9\u30A6\u30A3\u30C3\u30C1\u8AF8\u5CF6",
                "common": "\u30B5\u30A6\u30B9\u30B8\u30E7\u30FC\u30B8\u30A2\u30FB\u30B5\u30A6\u30B9\u30B5\u30F3\u30C9\u30A6\u30A3\u30C3\u30C1\u8AF8\u5CF6"
            },
            "kor": {
                "official": "\uC870\uC9C0\uC544",
                "common": "\uC870\uC9C0\uC544"
            },
            "nld": {
                "official": "Zuid-Georgi\xeb en de Zuidelijke Sandwich-eilanden",
                "common": "Zuid-Georgia en Zuidelijke Sandwicheilanden"
            },
            "per": {
                "official": "\u062C\u0632\u0627\u06CC\u0631 \u062C\u0648\u0631\u062C\u06CC\u0627\u06CC \u062C\u0646\u0648\u0628\u06CC \u0648 \u0633\u0627\u0646\u062F\u0648\u06CC\u0686 \u062C\u0646\u0648\u0628\u06CC",
                "common": "\u062C\u0632\u0627\u06CC\u0631 \u062C\u0648\u0631\u062C\u06CC\u0627\u06CC \u062C\u0646\u0648\u0628\u06CC \u0648 \u0633\u0627\u0646\u062F\u0648\u06CC\u0686 \u062C\u0646\u0648\u0628\u06CC"
            },
            "pol": {
                "official": "Georgia Po\u0142udniowa i Sandwich Po\u0142udniowy",
                "common": "Georgia Po\u0142udniowa i Sandwich Po\u0142udniowy"
            },
            "por": {
                "official": "Ge\xf3rgia do Sul e Sandwich do Sul",
                "common": "Ilhas Ge\xf3rgia do Sul e Sandwich do Sul"
            },
            "rus": {
                "official": "\u042E\u0436\u043D\u0430\u044F \u0413\u0435\u043E\u0440\u0433\u0438\u044F \u0438 \u042E\u0436\u043D\u044B\u0435 \u0421\u0430\u043D\u0434\u0432\u0438\u0447\u0435\u0432\u044B \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                "common": "\u042E\u0436\u043D\u0430\u044F \u0413\u0435\u043E\u0440\u0433\u0438\u044F \u0438 \u042E\u0436\u043D\u044B\u0435 \u0421\u0430\u043D\u0434\u0432\u0438\u0447\u0435\u0432\u044B \u043E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            "slk": {
                "official": "Ju\u017En\xe1 Georgia a Ju\u017En\xe9 Sandwichove ostrovy",
                "common": "Ju\u017En\xe1 Georgia a Ju\u017En\xe9 Sandwichove ostrovy"
            },
            "spa": {
                "official": "Georgia del Sur y las Islas Sandwich del Sur",
                "common": "Islas Georgias del Sur y Sandwich del Sur"
            },
            "srp": {
                "official": "\u0408\u0443\u0436\u043D\u0430 \u040F\u043E\u0440\u045F\u0438\u0458\u0430 \u0438 \u0408\u0443\u0436\u043D\u0430 \u0421\u0435\u043D\u0434\u0432\u0438\u0447\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                "common": "\u0408\u0443\u0436\u043D\u0430 \u040F\u043E\u0440\u045F\u0438\u0458\u0430 \u0438 \u0408\u0443\u0436\u043D\u0430 \u0421\u0435\u043D\u0434\u0432\u0438\u0447\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            "swe": {
                "official": "Sydgeorgien",
                "common": "Sydgeorgien"
            },
            "tur": {
                "official": "G\xfcney Georgia ve G\xfcney Sandwich Adalar\u0131",
                "common": "G\xfcney Georgia ve G\xfcney Sandwich Adalar\u0131"
            },
            "urd": {
                "official": "\u062C\u0646\u0648\u0628\u06CC \u062C\u0627\u0631\u062C\u06CC\u0627 \u0648 \u062C\u0632\u0627\u0626\u0631 \u062C\u0646\u0648\u0628\u06CC \u0633\u06CC\u0646\u0688\u0648\u0686",
                "common": "\u062C\u0646\u0648\u0628\u06CC \u062C\u0627\u0631\u062C\u06CC\u0627"
            },
            "zho": {
                "official": "\u5357\u4E54\u6CBB\u4E9A\u5C9B\u548C\u5357\u6851\u5A01\u5947\u7FA4\u5C9B",
                "common": "\u5357\u4E54\u6CBB\u4E9A"
            }
        },
        "latlng": [
            -54.5,
            -37
        ],
        "landlocked": false,
        "area": 3903,
        "demonyms": {
            "eng": {
                "f": "South Georgian South Sandwich Islander",
                "m": "South Georgian South Sandwich Islander"
            }
        },
        "flag": "\uD83C\uDDEC\uD83C\uDDF8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/mJzdaBwKBbm2B81q9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1983629"
        },
        "population": 30,
        "car": {
            "signs": [
                ""
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-02:00"
        ],
        "continents": [
            "Antarctica"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/gs.png",
            "svg": "https://flagcdn.com/gs.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -54.28,
                -36.5
            ]
        }
    },
    {
        "name": {
            "common": "Mauritania",
            "official": "Islamic Republic of Mauritania",
            "nativeName": {
                "ara": {
                    "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0625\u0633\u0644\u0627\u0645\u064A\u0629 \u0627\u0644\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0629",
                    "common": "\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0627"
                }
            }
        },
        "tld": [
            ".mr"
        ],
        "cca2": "MR",
        "ccn3": "478",
        "cca3": "MRT",
        "cioc": "MTN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "MRU": {
                "name": "Mauritanian ouguiya",
                "symbol": "UM"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "22"
            ]
        },
        "capital": [
            "Nouakchott"
        ],
        "altSpellings": [
            "MR",
            "Islamic Republic of Mauritania",
            "al-Jumh\u016Briyyah al-\u02BEIsl\u0101miyyah al-M\u016Br\u012Bt\u0101niyyah"
        ],
        "region": "Africa",
        "subregion": "Western Africa",
        "languages": {
            "ara": "Arabic"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0625\u0633\u0644\u0627\u0645\u064A\u0629 \u0627\u0644\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0629",
                "common": "\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0627"
            },
            "bre": {
                "official": "Republik islamek Maouritania",
                "common": "Maouritania"
            },
            "ces": {
                "official": "Maurit\xe1nsk\xe1 isl\xe1msk\xe1 republika",
                "common": "Maurit\xe1nie"
            },
            "cym": {
                "official": "Islamic Republic of Mauritania",
                "common": "Mauritania"
            },
            "deu": {
                "official": "Islamische Republik Mauretanien",
                "common": "Mauretanien"
            },
            "est": {
                "official": "Mauritaania Islamivabariik",
                "common": "Mauritaania"
            },
            "fin": {
                "official": "Mauritanian islamilainen tasavalta",
                "common": "Mauritania"
            },
            "fra": {
                "official": "R\xe9publique islamique de Mauritanie",
                "common": "Mauritanie"
            },
            "hrv": {
                "official": "Islamska Republika Mauritanija",
                "common": "Mauritanija"
            },
            "hun": {
                "official": "Maurit\xe1niai Iszl\xe1m K\xf6zt\xe1rsas\xe1g",
                "common": "Maurit\xe1nia"
            },
            "ita": {
                "official": "Repubblica islamica di Mauritania",
                "common": "Mauritania"
            },
            "jpn": {
                "official": "\u30E2\u30FC\u30EA\u30BF\u30CB\u30A2\xb7\u30A4\u30B9\u30E9\u30E0\u5171\u548C\u56FD",
                "common": "\u30E2\u30FC\u30EA\u30BF\u30CB\u30A2"
            },
            "kor": {
                "official": "\uBAA8\uB9AC\uD0C0\uB2C8 \uC774\uC2AC\uB78C \uACF5\uD654\uAD6D",
                "common": "\uBAA8\uB9AC\uD0C0\uB2C8"
            },
            "nld": {
                "official": "Islamitische Republiek Mauritani\xeb",
                "common": "Mauritani\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0627\u0645\u06CC \u0645\u0648\u0631\u06CC\u062A\u0627\u0646\u06CC",
                "common": "\u0645\u0648\u0631\u06CC\u062A\u0627\u0646\u06CC"
            },
            "pol": {
                "official": "Islamska Republika Maureta\u0144ska",
                "common": "Mauretania"
            },
            "por": {
                "official": "Rep\xfablica Isl\xe2mica da Maurit\xe2nia",
                "common": "Maurit\xe2nia"
            },
            "rus": {
                "official": "\u0418\u0441\u043B\u0430\u043C\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u0432\u0440\u0438\u0442\u0430\u043D\u0438\u044F",
                "common": "\u041C\u0430\u0432\u0440\u0438\u0442\u0430\u043D\u0438\u044F"
            },
            "slk": {
                "official": "Maurit\xe1nska islamsk\xe1 republika",
                "common": "Maurit\xe1nia"
            },
            "spa": {
                "official": "Rep\xfablica Isl\xe1mica de Mauritania",
                "common": "Mauritania"
            },
            "srp": {
                "official": "\u0418\u0441\u043B\u0430\u043C\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u0443\u0440\u0438\u0442\u0430\u043D\u0438\u0458\u0430",
                "common": "\u041C\u0430\u0443\u0440\u0438\u0442\u0430\u043D\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Islamiska republiken Mauretanien",
                "common": "Mauretanien"
            },
            "tur": {
                "official": "Moritanya \u0130slam Cumhuriyeti",
                "common": "Moritanya"
            },
            "urd": {
                "official": "\u0627\u0633\u0644\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0648\u0631\u06CC\u062A\u0627\u0646\u06CC\u06C1",
                "common": "\u0645\u0648\u0631\u06CC\u062A\u0627\u0646\u06CC\u06C1"
            },
            "zho": {
                "official": "\u6BDB\u91CC\u5854\u5C3C\u4E9A\u4F0A\u65AF\u5170\u5171\u548C\u56FD",
                "common": "\u6BDB\u91CC\u5854\u5C3C\u4E9A"
            }
        },
        "latlng": [
            20,
            -12
        ],
        "landlocked": false,
        "borders": [
            "DZA",
            "MLI",
            "SEN",
            "ESH"
        ],
        "area": 1030700,
        "demonyms": {
            "eng": {
                "f": "Mauritanian",
                "m": "Mauritanian"
            },
            "fra": {
                "f": "Mauritanienne",
                "m": "Mauritanien"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDF7",
        "maps": {
            "googleMaps": "https://goo.gl/maps/im2MmQ5jFjzxWBks5",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192763"
        },
        "population": 4649660,
        "gini": {
            "2014": 32.6
        },
        "fifa": "MTN",
        "car": {
            "signs": [
                "RIM"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/mr.png",
            "svg": "https://flagcdn.com/mr.svg",
            "alt": "The flag of Mauritania has a green field with a thin red horizontal band at the top and bottom of the field. At the center of the field is a five-pointed yellow star above an upward facing yellow crescent."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/mr.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/mr.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                18.07,
                -15.97
            ]
        }
    },
    {
        "name": {
            "common": "New Caledonia",
            "official": "New Caledonia",
            "nativeName": {
                "fra": {
                    "official": "Nouvelle-Cal\xe9donie",
                    "common": "Nouvelle-Cal\xe9donie"
                }
            }
        },
        "tld": [
            ".nc"
        ],
        "cca2": "NC",
        "ccn3": "540",
        "cca3": "NCL",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "XPF": {
                "name": "CFP franc",
                "symbol": "\u20A3"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "87"
            ]
        },
        "capital": [
            "Noum\xe9a"
        ],
        "altSpellings": [
            "NC"
        ],
        "region": "Oceania",
        "subregion": "Melanesia",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u0643\u0627\u0644\u064A\u062F\u0648\u0646\u064A\u0627 \u0627\u0644\u062C\u062F\u064A\u062F\u0629",
                "common": "\u0643\u0627\u0644\u064A\u062F\u0648\u0646\u064A\u0627 \u0627\u0644\u062C\u062F\u064A\u062F\u0629"
            },
            "bre": {
                "official": "Kaledonia-Nevez",
                "common": "Kaledonia-Nevez"
            },
            "ces": {
                "official": "Nov\xe1 Kaledonie",
                "common": "Nov\xe1 Kaledonie"
            },
            "cym": {
                "official": "New Caledonia",
                "common": "New Caledonia"
            },
            "deu": {
                "official": "Neukaledonien",
                "common": "Neukaledonien"
            },
            "est": {
                "official": "Uus-Kaledoonia",
                "common": "Uus-Kaledoonia"
            },
            "fin": {
                "official": "Uusi-Kaledonia",
                "common": "Uusi-Kaledonia"
            },
            "fra": {
                "official": "Nouvelle-Cal\xe9donie",
                "common": "Nouvelle-Cal\xe9donie"
            },
            "hrv": {
                "official": "Nova Kaledonija",
                "common": "Nova Kaledonija"
            },
            "hun": {
                "official": "\xdaj-Kaled\xf3nia",
                "common": "\xdaj-Kaled\xf3nia"
            },
            "ita": {
                "official": "Nuova Caledonia",
                "common": "Nuova Caledonia"
            },
            "jpn": {
                "official": "\u30CB\u30E5\u30FC\u30AB\u30EC\u30C9\u30CB\u30A2",
                "common": "\u30CB\u30E5\u30FC\u30AB\u30EC\u30C9\u30CB\u30A2"
            },
            "kor": {
                "official": "\uB204\uBCA8\uCE7C\uB808\uB3C4\uB2C8",
                "common": "\uB204\uBCA8\uCE7C\uB808\uB3C4\uB2C8"
            },
            "nld": {
                "official": "nieuw -Caledoni\xeb",
                "common": "Nieuw-Caledoni\xeb"
            },
            "per": {
                "official": "\u06A9\u0627\u0644\u062F\u0648\u0646\u06CC\u0627\u06CC \u062C\u062F\u06CC\u062F",
                "common": "\u06A9\u0627\u0644\u062F\u0648\u0646\u06CC\u0627\u06CC \u062C\u062F\u06CC\u062F"
            },
            "pol": {
                "official": "Nowa Kaledonia",
                "common": "Nowa Kaledonia"
            },
            "por": {
                "official": "New Caledonia",
                "common": "Nova Caled\xf3nia"
            },
            "rus": {
                "official": "\u041D\u043E\u0432\u0430\u044F \u041A\u0430\u043B\u0435\u0434\u043E\u043D\u0438\u044F",
                "common": "\u041D\u043E\u0432\u0430\u044F \u041A\u0430\u043B\u0435\u0434\u043E\u043D\u0438\u044F"
            },
            "slk": {
                "official": "Nov\xe1 Kaled\xf3nia",
                "common": "Nov\xe1 Kaled\xf3nia"
            },
            "spa": {
                "official": "nueva Caledonia",
                "common": "Nueva Caledonia"
            },
            "srp": {
                "official": "\u041D\u043E\u0432\u0430 \u041A\u0430\u043B\u0435\u0434\u043E\u043D\u0438\u0458\u0430",
                "common": "\u041D\u043E\u0432\u0430 \u041A\u0430\u043B\u0435\u0434\u043E\u043D\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Nya Kaledonien",
                "common": "Nya Kaledonien"
            },
            "tur": {
                "official": "Yeni Kaledonya",
                "common": "Yeni Kaledonya"
            },
            "urd": {
                "official": "\u0646\u06CC\u0648 \u06A9\u06CC\u0644\u06CC\u0688\u0648\u0646\u06CC\u0627",
                "common": "\u0646\u06CC\u0648 \u06A9\u06CC\u0644\u06CC\u0688\u0648\u0646\u06CC\u0627"
            },
            "zho": {
                "official": "\u65B0\u5580\u91CC\u591A\u5C3C\u4E9A",
                "common": "\u65B0\u5580\u91CC\u591A\u5C3C\u4E9A"
            }
        },
        "latlng": [
            -21.5,
            165.5
        ],
        "landlocked": false,
        "area": 18575,
        "demonyms": {
            "eng": {
                "f": "New Caledonian",
                "m": "New Caledonian"
            },
            "fra": {
                "f": "N\xe9o-Cal\xe9donienne",
                "m": "N\xe9o-Cal\xe9donien"
            }
        },
        "flag": "\uD83C\uDDF3\uD83C\uDDE8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/cBhtCeMdob4U7FRU9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/3407643"
        },
        "population": 271960,
        "fifa": "NCL",
        "car": {
            "signs": [
                "F"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+11:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/nc.png",
            "svg": "https://flagcdn.com/nc.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/nc.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/nc.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -22.27,
                166.45
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Bulgaria",
            "official": "Republic of Bulgaria",
            "nativeName": {
                "bul": {
                    "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F",
                    "common": "\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F"
                }
            }
        },
        "tld": [
            ".bg"
        ],
        "cca2": "BG",
        "ccn3": "100",
        "cca3": "BGR",
        "cioc": "BUL",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "BGN": {
                "name": "Bulgarian lev",
                "symbol": "\u043B\u0432"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "59"
            ]
        },
        "capital": [
            "Sofia"
        ],
        "altSpellings": [
            "BG",
            "Republic of Bulgaria",
            "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F"
        ],
        "region": "Europe",
        "subregion": "Southeast Europe",
        "languages": {
            "bul": "Bulgarian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u0644\u063A\u0627\u0631\u064A\u0627",
                "common": "\u0628\u0644\u063A\u0627\u0631\u064A\u0627"
            },
            "bre": {
                "official": "Republik Bulgaria",
                "common": "Bulgaria"
            },
            "ces": {
                "official": "Bulharsk\xe1 republika",
                "common": "Bulharsko"
            },
            "cym": {
                "official": "Gweriniaeth Bwlgaria",
                "common": "Bwlgaria"
            },
            "deu": {
                "official": "Republik Bulgarien",
                "common": "Bulgarien"
            },
            "est": {
                "official": "Bulgaaria Vabariik",
                "common": "Bulgaaria"
            },
            "fin": {
                "official": "Bulgarian tasavalta",
                "common": "Bulgaria"
            },
            "fra": {
                "official": "R\xe9publique de Bulgarie",
                "common": "Bulgarie"
            },
            "hrv": {
                "official": "Republika Bugarska",
                "common": "Bugarska"
            },
            "hun": {
                "official": "Bolg\xe1r K\xf6zt\xe1rsas\xe1g",
                "common": "Bulg\xe1ria"
            },
            "ita": {
                "official": "Repubblica di Bulgaria",
                "common": "Bulgaria"
            },
            "jpn": {
                "official": "\u30D6\u30EB\u30AC\u30EA\u30A2\u5171\u548C\u56FD",
                "common": "\u30D6\u30EB\u30AC\u30EA\u30A2"
            },
            "kor": {
                "official": "\uBD88\uAC00\uB9AC\uC544 \uACF5\uD654\uAD6D",
                "common": "\uBD88\uAC00\uB9AC\uC544"
            },
            "nld": {
                "official": "Republiek Bulgarije",
                "common": "Bulgarije"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0628\u0644\u063A\u0627\u0631\u0633\u062A\u0627\u0646",
                "common": "\u0628\u0644\u063A\u0627\u0631\u0633\u062A\u0627\u0646"
            },
            "pol": {
                "official": "Republika Bu\u0142garii",
                "common": "Bu\u0142garia"
            },
            "por": {
                "official": "Rep\xfablica da Bulg\xe1ria",
                "common": "Bulg\xe1ria"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u043E\u043B\u0433\u0430\u0440\u0438\u044F",
                "common": "\u0411\u043E\u043B\u0433\u0430\u0440\u0438\u044F"
            },
            "slk": {
                "official": "Bulharsk\xe1 republika",
                "common": "Bulharsko"
            },
            "spa": {
                "official": "Rep\xfablica de Bulgaria",
                "common": "Bulgaria"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0443\u0433\u0430\u0440\u0441\u043A\u0430",
                "common": "\u0411\u0443\u0433\u0430\u0440\u0441\u043A\u0430"
            },
            "swe": {
                "official": "Republiken Bulgarien",
                "common": "Bulgarien"
            },
            "tur": {
                "official": "Bulgaristan Cumhuriyeti",
                "common": "Bulgaristan"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0628\u0644\u063A\u0627\u0631\u06CC\u06C1",
                "common": "\u0628\u0644\u063A\u0627\u0631\u06CC\u06C1"
            },
            "zho": {
                "official": "\u4FDD\u52A0\u5229\u4E9A\u5171\u548C\u56FD",
                "common": "\u4FDD\u52A0\u5229\u4E9A"
            }
        },
        "latlng": [
            43,
            25
        ],
        "landlocked": false,
        "borders": [
            "GRC",
            "MKD",
            "ROU",
            "SRB",
            "TUR"
        ],
        "area": 110879,
        "demonyms": {
            "eng": {
                "f": "Bulgarian",
                "m": "Bulgarian"
            },
            "fra": {
                "f": "Bulgare",
                "m": "Bulgare"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDEC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/F5uAhDGWzc3BrHfm9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/186382"
        },
        "population": 6927288,
        "gini": {
            "2018": 41.3
        },
        "fifa": "BUL",
        "car": {
            "signs": [
                "BG"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/bg.png",
            "svg": "https://flagcdn.com/bg.svg",
            "alt": "The flag of Bulgaria is composed of three equal horizontal bands of white, green and red."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/bg.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/bg.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                42.68,
                23.32
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Mozambique",
            "official": "Republic of Mozambique",
            "nativeName": {
                "por": {
                    "official": "Rep\xfablica de Mo\xe7ambique",
                    "common": "Mo\xe7ambique"
                }
            }
        },
        "tld": [
            ".mz"
        ],
        "cca2": "MZ",
        "ccn3": "508",
        "cca3": "MOZ",
        "cioc": "MOZ",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "MZN": {
                "name": "Mozambican metical",
                "symbol": "MT"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "58"
            ]
        },
        "capital": [
            "Maputo"
        ],
        "altSpellings": [
            "MZ",
            "Republic of Mozambique",
            "Rep\xfablica de Mo\xe7ambique"
        ],
        "region": "Africa",
        "subregion": "Eastern Africa",
        "languages": {
            "por": "Portuguese"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u0648\u0632\u0645\u0628\u064A\u0642",
                "common": "\u0645\u0648\u0632\u0645\u0628\u064A\u0642"
            },
            "bre": {
                "official": "Republik Mozambik",
                "common": "Mozambik"
            },
            "ces": {
                "official": "Mosambick\xe1 republika",
                "common": "Mosambik"
            },
            "cym": {
                "official": "Republic of Mozambique",
                "common": "Mozambique"
            },
            "deu": {
                "official": "Republik Mosambik",
                "common": "Mosambik"
            },
            "est": {
                "official": "Mosambiigi Vabariik",
                "common": "Mosambiik"
            },
            "fin": {
                "official": "Mosambikin tasavalta",
                "common": "Mosambik"
            },
            "fra": {
                "official": "R\xe9publique du Mozambique",
                "common": "Mozambique"
            },
            "hrv": {
                "official": "Republika Mozambiku",
                "common": "Mozambik"
            },
            "hun": {
                "official": "Mozambiki K\xf6zt\xe1rsas\xe1g",
                "common": "Mozambik"
            },
            "ita": {
                "official": "Repubblica del Mozambico",
                "common": "Mozambico"
            },
            "jpn": {
                "official": "\u30E2\u30B6\u30F3\u30D3\u30FC\u30AF\u5171\u548C\u56FD",
                "common": "\u30E2\u30B6\u30F3\u30D3\u30FC\u30AF"
            },
            "kor": {
                "official": "\uBAA8\uC7A0\uBE44\uD06C \uACF5\uD654\uAD6D",
                "common": "\uBAA8\uC7A0\uBE44\uD06C"
            },
            "nld": {
                "official": "Republiek Mozambique",
                "common": "Mozambique"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u0648\u0632\u0627\u0645\u0628\u06CC\u06A9",
                "common": "\u0645\u0648\u0632\u0627\u0645\u0628\u06CC\u06A9"
            },
            "pol": {
                "official": "Republika Mozambiku",
                "common": "Mozambik"
            },
            "por": {
                "official": "Rep\xfablica de Mo\xe7ambique",
                "common": "Mo\xe7ambique"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u043E\u0437\u0430\u043C\u0431\u0438\u043A",
                "common": "\u041C\u043E\u0437\u0430\u043C\u0431\u0438\u043A"
            },
            "slk": {
                "official": "Mozambick\xe1 republika",
                "common": "Mozambik"
            },
            "spa": {
                "official": "Rep\xfablica de Mozambique",
                "common": "Mozambique"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u043E\u0437\u0430\u043C\u0431\u0438\u043A",
                "common": "\u041C\u043E\u0437\u0430\u043C\u0431\u0438\u043A"
            },
            "swe": {
                "official": "Republiken Mo\xe7ambique",
                "common": "Mo\xe7ambique"
            },
            "tur": {
                "official": "Mozambik Cumhuriyeti",
                "common": "Mozambik"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0648\u0632\u0645\u0628\u06CC\u0642",
                "common": "\u0645\u0648\u0632\u0645\u0628\u06CC\u0642"
            },
            "zho": {
                "official": "\u83AB\u6851\u6BD4\u514B\u5171\u548C\u56FD",
                "common": "\u83AB\u6851\u6BD4\u514B"
            }
        },
        "latlng": [
            -18.25,
            35
        ],
        "landlocked": false,
        "borders": [
            "MWI",
            "ZAF",
            "SWZ",
            "TZA",
            "ZMB",
            "ZWE"
        ],
        "area": 801590,
        "demonyms": {
            "eng": {
                "f": "Mozambican",
                "m": "Mozambican"
            },
            "fra": {
                "f": "Mozambicaine",
                "m": "Mozambicain"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDFF",
        "maps": {
            "googleMaps": "https://goo.gl/maps/xCLcY9fzU6x4Pueu5",
            "openStreetMaps": "https://www.openstreetmap.org/relation/195273"
        },
        "population": 31255435,
        "gini": {
            "2014": 54
        },
        "fifa": "MOZ",
        "car": {
            "signs": [
                "MOC"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/mz.png",
            "svg": "https://flagcdn.com/mz.svg",
            "alt": "The flag of Mozambique is composed of three equal horizontal bands of teal, black with white top and bottom edges, and yellow. A red isosceles triangle spanning about two-fifth the width of the field is superimposed on the hoist side with its base on the hoist end. This triangle bears a crossed rifle and hoe in black superimposed on an open white book which is superimposed on a five-pointed yellow star."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/mz.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/mz.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -25.95,
                32.58
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Niue",
            "official": "Niue",
            "nativeName": {
                "eng": {
                    "official": "Niue",
                    "common": "Niue"
                },
                "niu": {
                    "official": "Niu\u0113",
                    "common": "Niu\u0113"
                }
            }
        },
        "tld": [
            ".nu"
        ],
        "cca2": "NU",
        "ccn3": "570",
        "cca3": "NIU",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "NZD": {
                "name": "New Zealand dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "83"
            ]
        },
        "capital": [
            "Alofi"
        ],
        "altSpellings": [
            "NU"
        ],
        "region": "Oceania",
        "subregion": "Polynesia",
        "languages": {
            "eng": "English",
            "niu": "Niuean"
        },
        "translations": {
            "ara": {
                "official": "\u0646\u064A\u064A\u0648\u064A",
                "common": "\u0646\u064A\u064A\u0648\u064A"
            },
            "bre": {
                "official": "Niue",
                "common": "Niue"
            },
            "ces": {
                "official": "Niue",
                "common": "Niue"
            },
            "cym": {
                "official": "Niue",
                "common": "Niue"
            },
            "deu": {
                "official": "Niue",
                "common": "Niue"
            },
            "est": {
                "official": "Niue",
                "common": "Niue"
            },
            "fin": {
                "official": "Niue",
                "common": "Niue"
            },
            "fra": {
                "official": "Niue",
                "common": "Niue"
            },
            "hrv": {
                "official": "Niue",
                "common": "Niue"
            },
            "hun": {
                "official": "Niue",
                "common": "Niue"
            },
            "ita": {
                "official": "Niue",
                "common": "Niue"
            },
            "jpn": {
                "official": "\u30CB\u30A6\u30A8",
                "common": "\u30CB\u30A6\u30A8"
            },
            "kor": {
                "official": "\uB2C8\uC6B0\uC5D0",
                "common": "\uB2C8\uC6B0\uC5D0"
            },
            "nld": {
                "official": "Niue",
                "common": "Niue"
            },
            "per": {
                "official": "\u0646\u06CC\u0648\u0648\u06CC",
                "common": "\u0646\u06CC\u0648\u0648\u06CC"
            },
            "pol": {
                "official": "Niue",
                "common": "Niue"
            },
            "por": {
                "official": "Niue",
                "common": "Niue"
            },
            "rus": {
                "official": "\u041D\u0438\u0443\u044D",
                "common": "\u041D\u0438\u0443\u044D"
            },
            "slk": {
                "official": "Niue",
                "common": "Niue"
            },
            "spa": {
                "official": "Niue",
                "common": "Niue"
            },
            "srp": {
                "official": "\u041D\u0438\u0458\u0443\u0435",
                "common": "\u041D\u0438\u0458\u0443\u0435"
            },
            "swe": {
                "official": "Niue",
                "common": "Niue"
            },
            "tur": {
                "official": "Niue",
                "common": "Niue"
            },
            "urd": {
                "official": "\u0646\u06CC\u0648\u0648\u06D2",
                "common": "\u0646\u06CC\u0648\u0648\u06D2"
            },
            "zho": {
                "official": "\u7EBD\u57C3",
                "common": "\u7EBD\u57C3"
            }
        },
        "latlng": [
            -19.03333333,
            -169.86666666
        ],
        "landlocked": false,
        "area": 260,
        "demonyms": {
            "eng": {
                "f": "Niuean",
                "m": "Niuean"
            },
            "fra": {
                "f": "Niu\xe9enne",
                "m": "Niu\xe9en"
            }
        },
        "flag": "\uD83C\uDDF3\uD83C\uDDFA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/xFgdzs3E55Rk1y8P9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1558556"
        },
        "population": 1470,
        "car": {
            "signs": [
                "NZ"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-11:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/nu.png",
            "svg": "https://flagcdn.com/nu.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -19.02,
                -169.92
            ]
        }
    },
    {
        "name": {
            "common": "Estonia",
            "official": "Republic of Estonia",
            "nativeName": {
                "est": {
                    "official": "Eesti Vabariik",
                    "common": "Eesti"
                }
            }
        },
        "tld": [
            ".ee"
        ],
        "cca2": "EE",
        "ccn3": "233",
        "cca3": "EST",
        "cioc": "EST",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "72"
            ]
        },
        "capital": [
            "Tallinn"
        ],
        "altSpellings": [
            "EE",
            "Eesti",
            "Republic of Estonia",
            "Eesti Vabariik"
        ],
        "region": "Europe",
        "subregion": "Northern Europe",
        "languages": {
            "est": "Estonian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0625\u0633\u062A\u0648\u0646\u064A\u0627",
                "common": "\u0625\u0633\u062A\u0648\u0646\u064A\u0627"
            },
            "bre": {
                "official": "Republik Estonia",
                "common": "Estonia"
            },
            "ces": {
                "official": "Estonsk\xe1 republika",
                "common": "Estonsko"
            },
            "cym": {
                "official": "Gweriniaeth Estonia",
                "common": "Estonia"
            },
            "deu": {
                "official": "Republik Estland",
                "common": "Estland"
            },
            "est": {
                "official": "Eesti Vabariik",
                "common": "Eesti"
            },
            "fin": {
                "official": "Viron tasavalta",
                "common": "Viro"
            },
            "fra": {
                "official": "R\xe9publique d'Estonie",
                "common": "Estonie"
            },
            "hrv": {
                "official": "Republika Estonija",
                "common": "Estonija"
            },
            "hun": {
                "official": "\xc9szt K\xf6zt\xe1rsas\xe1g",
                "common": "\xc9sztorsz\xe1g"
            },
            "ita": {
                "official": "Repubblica di Estonia",
                "common": "Estonia"
            },
            "jpn": {
                "official": "\u30A8\u30B9\u30C8\u30CB\u30A2\u5171\u548C\u56FD",
                "common": "\u30A8\u30B9\u30C8\u30CB\u30A2"
            },
            "kor": {
                "official": "\uC5D0\uC2A4\uD1A0\uB2C8\uC544 \uACF5\uD654\uAD6D",
                "common": "\uC5D0\uC2A4\uD1A0\uB2C8\uC544"
            },
            "nld": {
                "official": "Republiek Estland",
                "common": "Estland"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u062A\u0648\u0646\u06CC",
                "common": "\u0627\u0650\u0633\u062A\u0648\u0646\u06CC"
            },
            "pol": {
                "official": "Republika Esto\u0144ska",
                "common": "Estonia"
            },
            "por": {
                "official": "Rep\xfablica da Est\xf3nia",
                "common": "Est\xf3nia"
            },
            "rus": {
                "official": "\u042D\u0441\u0442\u043E\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u042D\u0441\u0442\u043E\u043D\u0438\u044F"
            },
            "slk": {
                "official": "Est\xf3nska republika",
                "common": "Est\xf3nsko"
            },
            "spa": {
                "official": "Rep\xfablica de Estonia",
                "common": "Estonia"
            },
            "srp": {
                "official": "\u0415\u0441\u0442\u043E\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0415\u0441\u0442\u043E\u043D\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Estland",
                "common": "Estland"
            },
            "tur": {
                "official": "Estonya Cumhuriyeti",
                "common": "Estonya"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0633\u0679\u0648\u0646\u06CC\u0627",
                "common": "\u0627\u0633\u0679\u0648\u0646\u06CC\u0627"
            },
            "zho": {
                "official": "\u7231\u6C99\u5C3C\u4E9A\u5171\u548C\u56FD",
                "common": "\u7231\u6C99\u5C3C\u4E9A"
            }
        },
        "latlng": [
            59,
            26
        ],
        "landlocked": false,
        "borders": [
            "LVA",
            "RUS"
        ],
        "area": 45227,
        "demonyms": {
            "eng": {
                "f": "Estonian",
                "m": "Estonian"
            },
            "fra": {
                "f": "Estonienne",
                "m": "Estonien"
            }
        },
        "flag": "\uD83C\uDDEA\uD83C\uDDEA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/6SsynwGUodL1sDvq8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/79510"
        },
        "population": 1331057,
        "gini": {
            "2018": 30.3
        },
        "fifa": "EST",
        "car": {
            "signs": [
                "EST"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ee.png",
            "svg": "https://flagcdn.com/ee.svg",
            "alt": "The flag of Estonia is composed of three equal horizontal bands of blue, black and white."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ee.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ee.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                59.43,
                24.72
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Italy",
            "official": "Italian Republic",
            "nativeName": {
                "ita": {
                    "official": "Repubblica italiana",
                    "common": "Italia"
                }
            }
        },
        "tld": [
            ".it"
        ],
        "cca2": "IT",
        "ccn3": "380",
        "cca3": "ITA",
        "cioc": "ITA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "9"
            ]
        },
        "capital": [
            "Rome"
        ],
        "altSpellings": [
            "IT",
            "Italian Republic",
            "Repubblica italiana"
        ],
        "region": "Europe",
        "subregion": "Southern Europe",
        "languages": {
            "ita": "Italian"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0625\u064A\u0637\u0627\u0644\u064A\u0629",
                "common": "\u0625\u064A\u0637\u0627\u0644\u064A\u0627"
            },
            "bre": {
                "official": "Republik Italia",
                "common": "Italia"
            },
            "ces": {
                "official": "Italsk\xe1 republika",
                "common": "It\xe1lie"
            },
            "cym": {
                "official": "Italian Republic",
                "common": "Italy"
            },
            "deu": {
                "official": "Italienische Republik",
                "common": "Italien"
            },
            "est": {
                "official": "Itaalia Vabariik",
                "common": "Itaalia"
            },
            "fin": {
                "official": "Italian tasavalta",
                "common": "Italia"
            },
            "fra": {
                "official": "R\xe9publique italienne",
                "common": "Italie"
            },
            "hrv": {
                "official": "talijanska Republika",
                "common": "Italija"
            },
            "hun": {
                "official": "Olasz K\xf6zt\xe1rsas\xe1g",
                "common": "Olaszorsz\xe1g"
            },
            "ita": {
                "official": "Repubblica italiana",
                "common": "Italia"
            },
            "jpn": {
                "official": "\u30A4\u30BF\u30EA\u30A2\u5171\u548C\u56FD",
                "common": "\u30A4\u30BF\u30EA\u30A2"
            },
            "kor": {
                "official": "\uC774\uD0C8\uB9AC\uC544 \uACF5\uD654\uAD6D",
                "common": "\uC774\uD0C8\uB9AC\uC544"
            },
            "nld": {
                "official": "Italiaanse Republiek",
                "common": "Itali\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u06CC\u062A\u0627\u0644\u06CC\u0627",
                "common": "\u0627\u06CC\u062A\u0627\u0644\u06CC\u0627"
            },
            "pol": {
                "official": "Republika W\u0142oska",
                "common": "W\u0142ochy"
            },
            "por": {
                "official": "Rep\xfablica Italiana",
                "common": "It\xe1lia"
            },
            "rus": {
                "official": "\u0438\u0442\u0430\u043B\u044C\u044F\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0418\u0442\u0430\u043B\u0438\u044F"
            },
            "slk": {
                "official": "Talianska republika",
                "common": "Taliansko"
            },
            "spa": {
                "official": "Rep\xfablica Italiana",
                "common": "Italia"
            },
            "srp": {
                "official": "\u0418\u0442\u0430\u043B\u0438\u0458\u0430\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0418\u0442\u0430\u043B\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Italien",
                "common": "Italien"
            },
            "tur": {
                "official": "\u0130talyan Cumhuriyeti",
                "common": "\u0130talya"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0637\u0627\u0644\u06CC\u06C1",
                "common": "\u0627\u0637\u0627\u0644\u06CC\u06C1"
            },
            "zho": {
                "official": "\u610F\u5927\u5229\u5171\u548C\u56FD",
                "common": "\u610F\u5927\u5229"
            }
        },
        "latlng": [
            42.83333333,
            12.83333333
        ],
        "landlocked": false,
        "borders": [
            "AUT",
            "FRA",
            "SMR",
            "SVN",
            "CHE",
            "VAT"
        ],
        "area": 301336,
        "demonyms": {
            "eng": {
                "f": "Italian",
                "m": "Italian"
            },
            "fra": {
                "f": "Italienne",
                "m": "Italien"
            }
        },
        "flag": "\uD83C\uDDEE\uD83C\uDDF9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/8M1K27TDj7StTRTq8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/365331"
        },
        "population": 59554023,
        "gini": {
            "2017": 35.9
        },
        "fifa": "ITA",
        "car": {
            "signs": [
                "I"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/it.png",
            "svg": "https://flagcdn.com/it.svg",
            "alt": "The flag of Italy is composed of three equal vertical bands of green, white and red."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/it.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/it.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                41.9,
                12.48
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Malta",
            "official": "Republic of Malta",
            "nativeName": {
                "eng": {
                    "official": "Republic of Malta",
                    "common": "Malta"
                },
                "mlt": {
                    "official": "Repubblika ta ' Malta",
                    "common": "Malta"
                }
            }
        },
        "tld": [
            ".mt"
        ],
        "cca2": "MT",
        "ccn3": "470",
        "cca3": "MLT",
        "cioc": "MLT",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "56"
            ]
        },
        "capital": [
            "Valletta"
        ],
        "altSpellings": [
            "MT",
            "Republic of Malta",
            "Repubblika ta' Malta"
        ],
        "region": "Europe",
        "subregion": "Southern Europe",
        "languages": {
            "eng": "English",
            "mlt": "Maltese"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u0627\u0644\u0637\u0627",
                "common": "\u0645\u0627\u0644\u0637\u0627"
            },
            "bre": {
                "official": "Republik Malta",
                "common": "Malta"
            },
            "ces": {
                "official": "Maltsk\xe1 republika",
                "common": "Malta"
            },
            "cym": {
                "official": "Republic of Malta",
                "common": "Malta"
            },
            "deu": {
                "official": "Republik Malta",
                "common": "Malta"
            },
            "est": {
                "official": "Malta Vabariik",
                "common": "Malta"
            },
            "fin": {
                "official": "Maltan tasavalta",
                "common": "Malta"
            },
            "fra": {
                "official": "R\xe9publique de Malte",
                "common": "Malte"
            },
            "hrv": {
                "official": "Republika Malta",
                "common": "Malta"
            },
            "hun": {
                "official": "M\xe1ltai K\xf6zt\xe1rsas\xe1g",
                "common": "M\xe1lta"
            },
            "ita": {
                "official": "Repubblica di Malta",
                "common": "Malta"
            },
            "jpn": {
                "official": "\u30DE\u30EB\u30BF\u5171\u548C\u56FD",
                "common": "\u30DE\u30EB\u30BF"
            },
            "kor": {
                "official": "\uBAB0\uD0C0 \uACF5\uD654\uAD6D",
                "common": "\uBAB0\uD0C0"
            },
            "nld": {
                "official": "Republiek Malta",
                "common": "Malta"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u0627\u0644\u062A",
                "common": "\u0645\u0627\u0644\u062A"
            },
            "pol": {
                "official": "Republika Malty",
                "common": "Malta"
            },
            "por": {
                "official": "Rep\xfablica de Malta",
                "common": "Malta"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u043B\u044C\u0442\u0430",
                "common": "\u041C\u0430\u043B\u044C\u0442\u0430"
            },
            "slk": {
                "official": "Maltsk\xe1 republika",
                "common": "Malta"
            },
            "spa": {
                "official": "Rep\xfablica de Malta",
                "common": "Malta"
            },
            "srp": {
                "official": " \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u043B\u0442\u0430",
                "common": "\u041C\u0430\u043B\u0442\u0430"
            },
            "swe": {
                "official": "Republiken Malta",
                "common": "Malta"
            },
            "tur": {
                "official": "Malta Cumhuriyeti",
                "common": "Malta"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0627\u0644\u0679\u0627",
                "common": "\u0645\u0627\u0644\u0679\u0627"
            },
            "zho": {
                "official": "\u9A6C\u8033\u4ED6\u5171\u548C\u56FD",
                "common": "\u9A6C\u8033\u4ED6"
            }
        },
        "latlng": [
            35.9375,
            14.3754
        ],
        "landlocked": false,
        "area": 316,
        "demonyms": {
            "eng": {
                "f": "Maltese",
                "m": "Maltese"
            },
            "fra": {
                "f": "Maltaise",
                "m": "Maltais"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDF9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/skXCqguxDxxEKVk47",
            "openStreetMaps": "https://www.openstreetmap.org/relation/365307"
        },
        "population": 525285,
        "gini": {
            "2018": 28.7
        },
        "fifa": "MLT",
        "car": {
            "signs": [
                "M"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/mt.png",
            "svg": "https://flagcdn.com/mt.svg",
            "alt": "The flag of Malta is composed of two equal vertical bands of white and red. A representation of the George cross edged in red is situated on the upper hoist-side corner of the white band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/mt.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/mt.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                35.88,
                14.5
            ]
        },
        "postalCode": {
            "format": "@@@ ###|@@@ ##",
            "regex": "^([A-Z]{3}\\d{2}\\d?)$"
        }
    },
    {
        "name": {
            "common": "Slovenia",
            "official": "Republic of Slovenia",
            "nativeName": {
                "slv": {
                    "official": "Republika Slovenija",
                    "common": "Slovenija"
                }
            }
        },
        "tld": [
            ".si"
        ],
        "cca2": "SI",
        "ccn3": "705",
        "cca3": "SVN",
        "cioc": "SLO",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "86"
            ]
        },
        "capital": [
            "Ljubljana"
        ],
        "altSpellings": [
            "SI",
            "Republic of Slovenia",
            "Republika Slovenija"
        ],
        "region": "Europe",
        "subregion": "Central Europe",
        "languages": {
            "slv": "Slovene"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u0644\u0648\u0641\u064A\u0646\u064A\u0627",
                "common": "\u0633\u0644\u0648\u0641\u064A\u0646\u064A\u0627"
            },
            "bre": {
                "official": "Republik Slovenia",
                "common": "Slovenia"
            },
            "ces": {
                "official": "Slovinsk\xe1 republika",
                "common": "Slovinsko"
            },
            "cym": {
                "official": "Republic of Slovenia",
                "common": "Slovenia"
            },
            "deu": {
                "official": "Republik Slowenien",
                "common": "Slowenien"
            },
            "est": {
                "official": "Sloveenia Vabariik",
                "common": "Sloveenia"
            },
            "fin": {
                "official": "Slovenian tasavalta",
                "common": "Slovenia"
            },
            "fra": {
                "official": "R\xe9publique de Slov\xe9nie",
                "common": "Slov\xe9nie"
            },
            "hrv": {
                "official": "Republika Slovenija",
                "common": "Slovenija"
            },
            "hun": {
                "official": "Szlov\xe9n K\xf6zt\xe1rsas\xe1g",
                "common": "Szlov\xe9nia"
            },
            "ita": {
                "official": "Repubblica di Slovenia",
                "common": "Slovenia"
            },
            "jpn": {
                "official": "\u30B9\u30ED\u30D9\u30CB\u30A2\u5171\u548C\u56FD",
                "common": "\u30B9\u30ED\u30D9\u30CB\u30A2"
            },
            "kor": {
                "official": "\uC2AC\uB85C\uBCA0\uB2C8\uC544 \uACF5\uD654\uAD6D",
                "common": "\uC2AC\uB85C\uBCA0\uB2C8\uC544"
            },
            "nld": {
                "official": "Republiek Sloveni\xeb",
                "common": "Sloveni\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0648\u0648\u0646\u06CC",
                "common": "\u0627\u0633\u0644\u0648\u0648\u0646\u06CC"
            },
            "pol": {
                "official": "Republika S\u0142owenii",
                "common": "S\u0142owenia"
            },
            "por": {
                "official": "Rep\xfablica da Eslov\xe9nia",
                "common": "Eslov\xe9nia"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u043B\u043E\u0432\u0435\u043D\u0438\u044F",
                "common": "\u0421\u043B\u043E\u0432\u0435\u043D\u0438\u044F"
            },
            "slk": {
                "official": "Slovinsk\xe1 republika",
                "common": "Slovinsko"
            },
            "spa": {
                "official": "Rep\xfablica de Eslovenia",
                "common": "Eslovenia"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u043B\u043E\u0432\u0435\u043D\u0438\u0458\u0430",
                "common": "\u0421\u043B\u043E\u0432\u0435\u043D\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Slovenien",
                "common": "Slovenien"
            },
            "tur": {
                "official": "Slovenya Cumhuriyeti",
                "common": "Slovenya"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0644\u0648\u0648\u06CC\u0646\u06CC\u0627",
                "common": "\u0633\u0644\u0648\u0648\u06CC\u0646\u06CC\u0627"
            },
            "zho": {
                "official": "\u65AF\u6D1B\u6587\u5C3C\u4E9A\u5171\u548C\u56FD",
                "common": "\u65AF\u6D1B\u6587\u5C3C\u4E9A"
            }
        },
        "latlng": [
            46.11666666,
            14.81666666
        ],
        "landlocked": false,
        "borders": [
            "AUT",
            "HRV",
            "ITA",
            "HUN"
        ],
        "area": 20273,
        "demonyms": {
            "eng": {
                "f": "Slovene",
                "m": "Slovene"
            },
            "fra": {
                "f": "Slov\xe8ne",
                "m": "Slov\xe8ne"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDEE",
        "maps": {
            "googleMaps": "https://goo.gl/maps/7zgFmswcCJh5L5D49",
            "openStreetMaps": "https://www.openstreetmap.org/relation/218657"
        },
        "population": 2100126,
        "gini": {
            "2018": 24.6
        },
        "fifa": "SVN",
        "car": {
            "signs": [
                "SLO"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/si.png",
            "svg": "https://flagcdn.com/si.svg",
            "alt": "The flag of Slovenia is composed of three equal horizontal bands of white, blue and red. The national coat of arms is situated in the upper hoist side of the field centered on the boundary between the white and blue bands."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/si.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/si.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                46.05,
                14.52
            ]
        },
        "postalCode": {
            "format": "SI- ####",
            "regex": "^(?:SI)*(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "India",
            "official": "Republic of India",
            "nativeName": {
                "eng": {
                    "official": "Republic of India",
                    "common": "India"
                },
                "hin": {
                    "official": "\u092D\u093E\u0930\u0924 \u0917\u0923\u0930\u093E\u091C\u094D\u092F",
                    "common": "\u092D\u093E\u0930\u0924"
                },
                "tam": {
                    "official": "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0B95\u0BCD \u0B95\u0BC1\u0B9F\u0BBF\u0BAF\u0BB0\u0B9A\u0BC1",
                    "common": "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE"
                }
            }
        },
        "tld": [
            ".in"
        ],
        "cca2": "IN",
        "ccn3": "356",
        "cca3": "IND",
        "cioc": "IND",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "INR": {
                "name": "Indian rupee",
                "symbol": "\u20B9"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "1"
            ]
        },
        "capital": [
            "New Delhi"
        ],
        "altSpellings": [
            "IN",
            "Bh\u0101rat",
            "Republic of India",
            "Bharat Ganrajya",
            "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE"
        ],
        "region": "Asia",
        "subregion": "Southern Asia",
        "languages": {
            "eng": "English",
            "hin": "Hindi",
            "tam": "Tamil"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0647\u0646\u062F",
                "common": "\u0627\u0644\u0647\u0646\u062F"
            },
            "bre": {
                "official": "Republik India",
                "common": "India"
            },
            "ces": {
                "official": "Indick\xe1 republika",
                "common": "Indie"
            },
            "cym": {
                "official": "Republic of India",
                "common": "India"
            },
            "deu": {
                "official": "Republik Indien",
                "common": "Indien"
            },
            "est": {
                "official": "India Vabariik",
                "common": "India"
            },
            "fin": {
                "official": "Intian tasavalta",
                "common": "Intia"
            },
            "fra": {
                "official": "R\xe9publique de l'Inde",
                "common": "Inde"
            },
            "hrv": {
                "official": "Republika Indija",
                "common": "Indija"
            },
            "hun": {
                "official": "Indiai K\xf6zt\xe1rsas\xe1g",
                "common": "India"
            },
            "ita": {
                "official": "Repubblica dell'India",
                "common": "India"
            },
            "jpn": {
                "official": "\u30A4\u30F3\u30C9\u5171\u548C\u56FD",
                "common": "\u30A4\u30F3\u30C9"
            },
            "kor": {
                "official": "\uC778\uB3C4 \uACF5\uD654\uAD6D",
                "common": "\uC778\uB3C4"
            },
            "nld": {
                "official": "Republiek India",
                "common": "India"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0647\u0646\u062F\u0648\u0633\u062A\u0627\u0646",
                "common": "\u0647\u0646\u062F"
            },
            "pol": {
                "official": "Republika Indii",
                "common": "Indie"
            },
            "por": {
                "official": "Rep\xfablica da \xcdndia",
                "common": "\xcdndia"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u043D\u0434\u0438\u044F",
                "common": "\u0418\u043D\u0434\u0438\u044F"
            },
            "slk": {
                "official": "Indick\xe1 republika",
                "common": "India"
            },
            "spa": {
                "official": "Rep\xfablica de la India",
                "common": "India"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u043D\u0434\u0438\u0458\u0430",
                "common": "\u0418\u043D\u0434\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Indien",
                "common": "Indien"
            },
            "tur": {
                "official": "Hindistan Cumhuriyeti",
                "common": "Hindistan"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0628\u06BE\u0627\u0631\u062A",
                "common": "\u0628\u06BE\u0627\u0631\u062A"
            },
            "zho": {
                "official": "\u5370\u5EA6\u5171\u548C\u56FD",
                "common": "\u5370\u5EA6"
            }
        },
        "latlng": [
            20,
            77
        ],
        "landlocked": false,
        "borders": [
            "BGD",
            "BTN",
            "MMR",
            "CHN",
            "NPL",
            "PAK"
        ],
        "area": 3287590,
        "demonyms": {
            "eng": {
                "f": "Indian",
                "m": "Indian"
            },
            "fra": {
                "f": "Indienne",
                "m": "Indien"
            }
        },
        "flag": "\uD83C\uDDEE\uD83C\uDDF3",
        "maps": {
            "googleMaps": "https://goo.gl/maps/WSk3fLwG4vtPQetp7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/304716"
        },
        "population": 1380004385,
        "gini": {
            "2011": 35.7
        },
        "fifa": "IND",
        "car": {
            "signs": [
                "IND"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+05:30"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/in.png",
            "svg": "https://flagcdn.com/in.svg",
            "alt": "The flag of India is composed of three equal horizontal bands of saffron, white and green. A navy blue wheel with twenty-four spokes \u2014 the Ashoka Chakra \u2014 is centered in the white band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/in.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/in.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                28.6,
                77.2
            ]
        },
        "postalCode": {
            "format": "######",
            "regex": "^(\\d{6})$"
        }
    },
    {
        "name": {
            "common": "Peru",
            "official": "Republic of Peru",
            "nativeName": {
                "aym": {
                    "official": "Piruw Suyu",
                    "common": "Piruw"
                },
                "que": {
                    "official": "Piruw Ripuwlika",
                    "common": "Piruw"
                },
                "spa": {
                    "official": "Rep\xfablica del Per\xfa",
                    "common": "Per\xfa"
                }
            }
        },
        "tld": [
            ".pe"
        ],
        "cca2": "PE",
        "ccn3": "604",
        "cca3": "PER",
        "cioc": "PER",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "PEN": {
                "name": "Peruvian sol",
                "symbol": "S/ "
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "1"
            ]
        },
        "capital": [
            "Lima"
        ],
        "altSpellings": [
            "PE",
            "Republic of Peru",
            "Rep\xfablica del Per\xfa"
        ],
        "region": "Americas",
        "subregion": "South America",
        "languages": {
            "aym": "Aymara",
            "que": "Quechua",
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u064A\u0631\u0648",
                "common": "\u0628\u064A\u0631\u0648"
            },
            "bre": {
                "official": "Republik Perou",
                "common": "Perou"
            },
            "ces": {
                "official": "Peru\xe1nsk\xe1 republika",
                "common": "Peru"
            },
            "cym": {
                "official": "Republic of Peru",
                "common": "Peru"
            },
            "deu": {
                "official": "Republik Peru",
                "common": "Peru"
            },
            "est": {
                "official": "Peruu Vabariik",
                "common": "Peruu"
            },
            "fin": {
                "official": "Perun tasavalta",
                "common": "Peru"
            },
            "fra": {
                "official": "R\xe9publique du P\xe9rou",
                "common": "P\xe9rou"
            },
            "hrv": {
                "official": "Republika Peru",
                "common": "Peru"
            },
            "hun": {
                "official": "Perui K\xf6zt\xe1rsas\xe1g",
                "common": "Peru"
            },
            "ita": {
                "official": "Repubblica del Per\xf9",
                "common": "Per\xf9"
            },
            "jpn": {
                "official": "\u30DA\u30EB\u30FC\u5171\u548C\u56FD",
                "common": "\u30DA\u30EB\u30FC"
            },
            "kor": {
                "official": "\uD398\uB8E8 \uACF5\uD654\uAD6D",
                "common": "\uD398\uB8E8"
            },
            "nld": {
                "official": "Republiek Peru",
                "common": "Peru"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u067E\u0631\u0648",
                "common": "\u067E\u0631\u0648"
            },
            "pol": {
                "official": "Republika Peru",
                "common": "Peru"
            },
            "por": {
                "official": "Rep\xfablica do Peru",
                "common": "Per\xfa"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0435\u0440\u0443",
                "common": "\u041F\u0435\u0440\u0443"
            },
            "slk": {
                "official": "Peru\xe1nska republika",
                "common": "Peru"
            },
            "spa": {
                "official": "Rep\xfablica de Per\xfa",
                "common": "Per\xfa"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0435\u0440\u0443",
                "common": "\u041F\u0435\u0440\u0443"
            },
            "swe": {
                "official": "Republiken Peru",
                "common": "Peru"
            },
            "tur": {
                "official": "Peru Cumhuriyeti",
                "common": "Peru"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u067E\u06CC\u0631\u0648",
                "common": "\u067E\u06CC\u0631\u0648"
            },
            "zho": {
                "official": "\u79D8\u9C81\u5171\u548C\u56FD",
                "common": "\u79D8\u9C81"
            }
        },
        "latlng": [
            -10,
            -76
        ],
        "landlocked": false,
        "borders": [
            "BOL",
            "BRA",
            "CHL",
            "COL",
            "ECU"
        ],
        "area": 1285216,
        "demonyms": {
            "eng": {
                "f": "Peruvian",
                "m": "Peruvian"
            },
            "fra": {
                "f": "P\xe9ruvienne",
                "m": "P\xe9ruvien"
            }
        },
        "flag": "\uD83C\uDDF5\uD83C\uDDEA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/uDWEUaXNcZTng1fP6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/288247"
        },
        "population": 32971846,
        "gini": {
            "2019": 41.5
        },
        "fifa": "PER",
        "car": {
            "signs": [
                "PE"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-05:00"
        ],
        "continents": [
            "South America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/pe.png",
            "svg": "https://flagcdn.com/pe.svg",
            "alt": "The flag of Peru is composed of three equal vertical bands of red, white and red, with the national emblem centered in the white band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/pe.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/pe.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -12.05,
                -77.05
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Burundi",
            "official": "Republic of Burundi",
            "nativeName": {
                "fra": {
                    "official": "R\xe9publique du Burundi",
                    "common": "Burundi"
                },
                "run": {
                    "official": "Republika y'Uburundi ",
                    "common": "Uburundi"
                }
            }
        },
        "tld": [
            ".bi"
        ],
        "cca2": "BI",
        "ccn3": "108",
        "cca3": "BDI",
        "cioc": "BDI",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "BIF": {
                "name": "Burundian franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "57"
            ]
        },
        "capital": [
            "Gitega"
        ],
        "altSpellings": [
            "BI",
            "Republic of Burundi",
            "Republika y'Uburundi",
            "R\xe9publique du Burundi"
        ],
        "region": "Africa",
        "subregion": "Eastern Africa",
        "languages": {
            "fra": "French",
            "run": "Kirundi"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u0648\u0631\u0648\u0646\u062F\u064A",
                "common": "\u0628\u0648\u0631\u0648\u0646\u062F\u064A"
            },
            "bre": {
                "official": "Republik Burundi",
                "common": "Burundi"
            },
            "ces": {
                "official": "Burundsk\xe1 republika",
                "common": "Burundi"
            },
            "cym": {
                "official": "Gweriniaeth Bwrwndi",
                "common": "Bwrwndi"
            },
            "deu": {
                "official": "Republik Burundi",
                "common": "Burundi"
            },
            "est": {
                "official": "Burundi Vabariik",
                "common": "Burundi"
            },
            "fin": {
                "official": "Burundin tasavalta",
                "common": "Burundi"
            },
            "fra": {
                "official": "R\xe9publique du Burundi",
                "common": "Burundi"
            },
            "hrv": {
                "official": "Burundi",
                "common": "Burundi"
            },
            "hun": {
                "official": "Burundi",
                "common": "Burundi"
            },
            "ita": {
                "official": "Repubblica del Burundi",
                "common": "Burundi"
            },
            "jpn": {
                "official": "\u30D6\u30EB\u30F3\u30B8\u5171\u548C\u56FD",
                "common": "\u30D6\u30EB\u30F3\u30B8"
            },
            "kor": {
                "official": "\uBD80\uB8EC\uB514",
                "common": "\uBD80\uB8EC\uB514"
            },
            "nld": {
                "official": "Republiek Burundi",
                "common": "Burundi"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0628\u0648\u0631\u0648\u0646\u062F\u06CC",
                "common": "\u0628\u0648\u0631\u0648\u0646\u062F\u06CC"
            },
            "pol": {
                "official": "Republika Burundi",
                "common": "Burundi"
            },
            "por": {
                "official": "Rep\xfablica do Burundi",
                "common": "Burundi"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0443\u0440\u0443\u043D\u0434\u0438",
                "common": "\u0411\u0443\u0440\u0443\u043D\u0434\u0438"
            },
            "slk": {
                "official": "Burundsk\xe1 republika",
                "common": "Burundi"
            },
            "spa": {
                "official": "Rep\xfablica de Burundi",
                "common": "Burundi"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0443\u0440\u0443\u043D\u0434\u0438",
                "common": "\u0411\u0443\u0440\u0443\u043D\u0434\u0438"
            },
            "swe": {
                "official": "Republiken Burundi",
                "common": "Burundi"
            },
            "tur": {
                "official": "Burundi Cumhuriyeti",
                "common": "Burundi"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0628\u0631\u0648\u0646\u0688\u06CC",
                "common": "\u0628\u0631\u0648\u0646\u0688\u06CC"
            },
            "zho": {
                "official": "\u5E03\u9686\u8FEA\u5171\u548C\u56FD",
                "common": "\u5E03\u9686\u8FEA"
            }
        },
        "latlng": [
            -3.5,
            30
        ],
        "landlocked": true,
        "borders": [
            "COD",
            "RWA",
            "TZA"
        ],
        "area": 27834,
        "demonyms": {
            "eng": {
                "f": "Burundian",
                "m": "Burundian"
            },
            "fra": {
                "f": "Burundaise",
                "m": "Burundais"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDEE",
        "maps": {
            "googleMaps": "https://goo.gl/maps/RXPWoRrB9tfrJpUG7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/195269"
        },
        "population": 11890781,
        "gini": {
            "2013": 38.6
        },
        "fifa": "BDI",
        "car": {
            "signs": [
                "RU"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/bi.png",
            "svg": "https://flagcdn.com/bi.svg",
            "alt": "The flag of Burundi is divided by a white diagonal cross into four alternating triangular areas of red at the top and bottom, and green on the hoist and fly sides. A white circle, with three green-edged red six-pointed stars arranged to form a triangle, is superimposed at the center of the cross."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/bi.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/bi.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -3.43,
                29.93
            ]
        }
    },
    {
        "name": {
            "common": "Lithuania",
            "official": "Republic of Lithuania",
            "nativeName": {
                "lit": {
                    "official": "Lietuvos Respublikos",
                    "common": "Lietuva"
                }
            }
        },
        "tld": [
            ".lt"
        ],
        "cca2": "LT",
        "ccn3": "440",
        "cca3": "LTU",
        "cioc": "LTU",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "70"
            ]
        },
        "capital": [
            "Vilnius"
        ],
        "altSpellings": [
            "LT",
            "Republic of Lithuania",
            "Lietuvos Respublika"
        ],
        "region": "Europe",
        "subregion": "Northern Europe",
        "languages": {
            "lit": "Lithuanian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0644\u064A\u062A\u0648\u0627\u0646\u064A\u0627",
                "common": "\u0644\u064A\u062A\u0648\u0627\u0646\u064A\u0627"
            },
            "bre": {
                "official": "Republik Lituania",
                "common": "Lituania"
            },
            "ces": {
                "official": "Litevsk\xe1 republika",
                "common": "Litva"
            },
            "cym": {
                "official": "Republic of Lithuania",
                "common": "Lithuania"
            },
            "deu": {
                "official": "Republik Litauen",
                "common": "Litauen"
            },
            "est": {
                "official": "Leedu Vabariik",
                "common": "Leedu"
            },
            "fin": {
                "official": "Liettuan tasavalta",
                "common": "Liettua"
            },
            "fra": {
                "official": "R\xe9publique de Lituanie",
                "common": "Lituanie"
            },
            "hrv": {
                "official": "Republika Litva",
                "common": "Litva"
            },
            "hun": {
                "official": "Litv\xe1n K\xf6zt\xe1rsas\xe1g",
                "common": "Litv\xe1nia"
            },
            "ita": {
                "official": "Repubblica di Lituania",
                "common": "Lituania"
            },
            "jpn": {
                "official": "\u30EA\u30C8\u30A2\u30CB\u30A2\u5171\u548C\u56FD",
                "common": "\u30EA\u30C8\u30A2\u30CB\u30A2"
            },
            "kor": {
                "official": "\uB9AC\uD22C\uC544\uB2C8\uC544 \uACF5\uD654\uAD6D",
                "common": "\uB9AC\uD22C\uC544\uB2C8\uC544"
            },
            "nld": {
                "official": "Republiek Litouwen",
                "common": "Litouwen"
            },
            "per": {
                "official": "\u0644\u06CC\u062A\u0648\u0627\u0646\u06CC\u0627\u06CC\u06CC\u200C\u0647\u0627",
                "common": "\u0644\u06CC\u062A\u0648\u0627\u0646\u06CC\u0627\u06CC\u06CC\u200C\u0647\u0627"
            },
            "pol": {
                "official": "Republika Litewska",
                "common": "Litwa"
            },
            "por": {
                "official": "Rep\xfablica da Litu\xe2nia",
                "common": "Litu\xe2nia"
            },
            "rus": {
                "official": "\u041B\u0438\u0442\u043E\u0432\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u041B\u0438\u0442\u0432\u0430"
            },
            "slk": {
                "official": "Litovsk\xe1 republika",
                "common": "Litva"
            },
            "spa": {
                "official": "Rep\xfablica de Lituania",
                "common": "Lituania"
            },
            "srp": {
                "official": "\u041B\u0438\u0442\u0432\u0430\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u041B\u0438\u0442\u0432\u0430\u043D\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Litauen",
                "common": "Litauen"
            },
            "tur": {
                "official": "Litvanya Cumhuriyeti",
                "common": "Litvanya"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0644\u062A\u06BE\u0648\u0648\u06CC\u0646\u06CC\u0627",
                "common": "\u0644\u062A\u06BE\u0648\u0648\u06CC\u0646\u06CC\u0627"
            },
            "zho": {
                "official": "\u7ACB\u9676\u5B9B\u5171\u548C\u56FD",
                "common": "\u7ACB\u9676\u5B9B"
            }
        },
        "latlng": [
            56,
            24
        ],
        "landlocked": false,
        "borders": [
            "BLR",
            "LVA",
            "POL",
            "RUS"
        ],
        "area": 65300,
        "demonyms": {
            "eng": {
                "f": "Lithuanian",
                "m": "Lithuanian"
            },
            "fra": {
                "f": "Lituanienne",
                "m": "Lituanien"
            }
        },
        "flag": "\uD83C\uDDF1\uD83C\uDDF9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/dd1s9rrLjrK2G8yY6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/72596"
        },
        "population": 2794700,
        "gini": {
            "2018": 35.7
        },
        "fifa": "LTU",
        "car": {
            "signs": [
                "LT"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/lt.png",
            "svg": "https://flagcdn.com/lt.svg",
            "alt": "The flag of Lithuania is composed of three equal horizontal bands of yellow, green and red."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/lt.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/lt.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                54.68,
                25.32
            ]
        },
        "postalCode": {
            "format": "LT-#####",
            "regex": "^(?:LT)*(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "United States",
            "official": "United States of America",
            "nativeName": {
                "eng": {
                    "official": "United States of America",
                    "common": "United States"
                }
            }
        },
        "tld": [
            ".us"
        ],
        "cca2": "US",
        "ccn3": "840",
        "cca3": "USA",
        "cioc": "USA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "201",
                "202",
                "203",
                "205",
                "206",
                "207",
                "208",
                "209",
                "210",
                "212",
                "213",
                "214",
                "215",
                "216",
                "217",
                "218",
                "219",
                "220",
                "224",
                "225",
                "227",
                "228",
                "229",
                "231",
                "234",
                "239",
                "240",
                "248",
                "251",
                "252",
                "253",
                "254",
                "256",
                "260",
                "262",
                "267",
                "269",
                "270",
                "272",
                "274",
                "276",
                "281",
                "283",
                "301",
                "302",
                "303",
                "304",
                "305",
                "307",
                "308",
                "309",
                "310",
                "312",
                "313",
                "314",
                "315",
                "316",
                "317",
                "318",
                "319",
                "320",
                "321",
                "323",
                "325",
                "327",
                "330",
                "331",
                "334",
                "336",
                "337",
                "339",
                "346",
                "347",
                "351",
                "352",
                "360",
                "361",
                "364",
                "380",
                "385",
                "386",
                "401",
                "402",
                "404",
                "405",
                "406",
                "407",
                "408",
                "409",
                "410",
                "412",
                "413",
                "414",
                "415",
                "417",
                "419",
                "423",
                "424",
                "425",
                "430",
                "432",
                "434",
                "435",
                "440",
                "442",
                "443",
                "447",
                "458",
                "463",
                "464",
                "469",
                "470",
                "475",
                "478",
                "479",
                "480",
                "484",
                "501",
                "502",
                "503",
                "504",
                "505",
                "507",
                "508",
                "509",
                "510",
                "512",
                "513",
                "515",
                "516",
                "517",
                "518",
                "520",
                "530",
                "531",
                "534",
                "539",
                "540",
                "541",
                "551",
                "559",
                "561",
                "562",
                "563",
                "564",
                "567",
                "570",
                "571",
                "573",
                "574",
                "575",
                "580",
                "585",
                "586",
                "601",
                "602",
                "603",
                "605",
                "606",
                "607",
                "608",
                "609",
                "610",
                "612",
                "614",
                "615",
                "616",
                "617",
                "618",
                "619",
                "620",
                "623",
                "626",
                "628",
                "629",
                "630",
                "631",
                "636",
                "641",
                "646",
                "650",
                "651",
                "657",
                "660",
                "661",
                "662",
                "667",
                "669",
                "678",
                "681",
                "682",
                "701",
                "702",
                "703",
                "704",
                "706",
                "707",
                "708",
                "712",
                "713",
                "714",
                "715",
                "716",
                "717",
                "718",
                "719",
                "720",
                "724",
                "725",
                "727",
                "730",
                "731",
                "732",
                "734",
                "737",
                "740",
                "743",
                "747",
                "754",
                "757",
                "760",
                "762",
                "763",
                "765",
                "769",
                "770",
                "772",
                "773",
                "774",
                "775",
                "779",
                "781",
                "785",
                "786",
                "801",
                "802",
                "803",
                "804",
                "805",
                "806",
                "808",
                "810",
                "812",
                "813",
                "814",
                "815",
                "816",
                "817",
                "818",
                "828",
                "830",
                "831",
                "832",
                "843",
                "845",
                "847",
                "848",
                "850",
                "854",
                "856",
                "857",
                "858",
                "859",
                "860",
                "862",
                "863",
                "864",
                "865",
                "870",
                "872",
                "878",
                "901",
                "903",
                "904",
                "906",
                "907",
                "908",
                "909",
                "910",
                "912",
                "913",
                "914",
                "915",
                "916",
                "917",
                "918",
                "919",
                "920",
                "925",
                "928",
                "929",
                "930",
                "931",
                "934",
                "936",
                "937",
                "938",
                "940",
                "941",
                "947",
                "949",
                "951",
                "952",
                "954",
                "956",
                "959",
                "970",
                "971",
                "972",
                "973",
                "975",
                "978",
                "979",
                "980",
                "984",
                "985",
                "989"
            ]
        },
        "capital": [
            "Washington, D.C."
        ],
        "altSpellings": [
            "US",
            "USA",
            "United States of America"
        ],
        "region": "Americas",
        "subregion": "North America",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u0648\u0644\u0627\u064A\u0627\u062A \u0627\u0644\u0645\u062A\u062D\u062F\u0629 \u0627\u0644\u0627\u0645\u0631\u064A\u0643\u064A\u0629",
                "common": "\u0627\u0644\u0648\u0644\u0627\u064A\u0627\u062A \u0627\u0644\u0645\u062A\u062D\u062F\u0629"
            },
            "bre": {
                "official": "Stado\xf9-Unanet Amerika",
                "common": "Stado\xf9-Unanet"
            },
            "ces": {
                "official": "Spojen\xe9 st\xe1ty americk\xe9",
                "common": "Spojen\xe9 st\xe1ty"
            },
            "cym": {
                "official": "United States of America",
                "common": "United States"
            },
            "deu": {
                "official": "Vereinigte Staaten von Amerika",
                "common": "Vereinigte Staaten"
            },
            "est": {
                "official": "Ameerika \xdchendriigid",
                "common": "Ameerika \xdchendriigid"
            },
            "fin": {
                "official": "Amerikan yhdysvallat",
                "common": "Yhdysvallat"
            },
            "fra": {
                "official": "Les \xe9tats-unis d'Am\xe9rique",
                "common": "\xc9tats-Unis"
            },
            "hrv": {
                "official": "Sjedinjene Dr\u017Eave Amerike",
                "common": "Sjedinjene Ameri\u010Dke Dr\u017Eave"
            },
            "hun": {
                "official": "Amerikai Egyes\xfclt \xc1llamok",
                "common": "Amerikai Egyes\xfclt \xc1llamok"
            },
            "ita": {
                "official": "Stati Uniti d'America",
                "common": "Stati Uniti d'America"
            },
            "jpn": {
                "official": "\u30A2\u30E1\u30EA\u30AB\u5408\u8846\u56FD",
                "common": "\u30A2\u30E1\u30EA\u30AB\u5408\u8846\u56FD"
            },
            "kor": {
                "official": "\uC544\uBA54\uB9AC\uCE74 \uD569\uC911\uAD6D",
                "common": "\uBBF8\uAD6D"
            },
            "nld": {
                "official": "Verenigde Staten van Amerika",
                "common": "Verenigde Staten"
            },
            "per": {
                "official": "\u0627\u06CC\u0627\u0644\u0627\u062A \u0645\u062A\u062D\u062F\u0647 \u0622\u0645\u0631\u06CC\u06A9\u0627",
                "common": "\u0627\u06CC\u0627\u0644\u0627\u062A \u0645\u062A\u062D\u062F\u0647 \u0622\u0645\u0631\u06CC\u06A9\u0627"
            },
            "pol": {
                "official": "Stany Zjednoczone Ameryki",
                "common": "Stany Zjednoczone"
            },
            "por": {
                "official": "Estados Unidos da Am\xe9rica",
                "common": "Estados Unidos"
            },
            "rus": {
                "official": "\u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u043D\u044B\u0435 \u0428\u0442\u0430\u0442\u044B \u0410\u043C\u0435\u0440\u0438\u043A\u0438",
                "common": "\u0421\u043E\u0435\u0434\u0438\u043D\u0451\u043D\u043D\u044B\u0435 \u0428\u0442\u0430\u0442\u044B \u0410\u043C\u0435\u0440\u0438\u043A\u0438"
            },
            "slk": {
                "official": "Spojen\xe9 \u0161t\xe1ty Americk\xe9",
                "common": "Spojen\xe9 \u0161t\xe1ty americk\xe9"
            },
            "spa": {
                "official": "Estados Unidos de Am\xe9rica",
                "common": "Estados Unidos"
            },
            "srp": {
                "official": "\u0421\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u0435 \u0410\u043C\u0435\u0440\u0438\u0447\u043A\u0435 \u0414\u0440\u0436\u0430\u0432\u0435",
                "common": "\u0421\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u0435 \u0410\u043C\u0435\u0440\u0438\u0447\u043A\u0435 \u0414\u0440\u0436\u0430\u0432\u0435"
            },
            "swe": {
                "official": "Amerikas f\xf6renta stater",
                "common": "USA"
            },
            "tur": {
                "official": "Amerika Birle\u015Fik Devletleri",
                "common": "Amerika Birle\u015Fik Devletleri"
            },
            "urd": {
                "official": "\u0631\u06CC\u0627\u0633\u062A\u06C1\u0627\u0626\u06D2 \u0645\u062A\u062D\u062F\u06C1 \u0627\u0645\u0631\u06CC\u06A9\u0627",
                "common": "\u0631\u06CC\u0627\u0633\u062A\u06C1\u0627\u0626\u06D2 \u0645\u062A\u062D\u062F\u06C1"
            },
            "zho": {
                "official": "\u7F8E\u5229\u575A\u5408\u4F17\u56FD",
                "common": "\u7F8E\u56FD"
            }
        },
        "latlng": [
            38,
            -97
        ],
        "landlocked": false,
        "borders": [
            "CAN",
            "MEX"
        ],
        "area": 9372610,
        "demonyms": {
            "eng": {
                "f": "American",
                "m": "American"
            },
            "fra": {
                "f": "Am\xe9ricaine",
                "m": "Am\xe9ricain"
            }
        },
        "flag": "\uD83C\uDDFA\uD83C\uDDF8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/e8M246zY4BSjkjAv6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/148838#map=2/20.6/-85.8"
        },
        "population": 329484123,
        "gini": {
            "2018": 41.4
        },
        "fifa": "USA",
        "car": {
            "signs": [
                "USA"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-12:00",
            "UTC-11:00",
            "UTC-10:00",
            "UTC-09:00",
            "UTC-08:00",
            "UTC-07:00",
            "UTC-06:00",
            "UTC-05:00",
            "UTC-04:00",
            "UTC+10:00",
            "UTC+12:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/us.png",
            "svg": "https://flagcdn.com/us.svg",
            "alt": "The flag of the United States of America is composed of thirteen equal horizontal bands of red alternating with white. A blue rectangle, bearing fifty small five-pointed white stars arranged in nine rows where rows of six stars alternate with rows of five stars, is superimposed in the canton."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/us.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/us.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                38.89,
                -77.05
            ]
        },
        "postalCode": {
            "format": "#####-####",
            "regex": "^\\d{5}(-\\d{4})?$"
        }
    },
    {
        "name": {
            "common": "Honduras",
            "official": "Republic of Honduras",
            "nativeName": {
                "spa": {
                    "official": "Rep\xfablica de Honduras",
                    "common": "Honduras"
                }
            }
        },
        "tld": [
            ".hn"
        ],
        "cca2": "HN",
        "ccn3": "340",
        "cca3": "HND",
        "cioc": "HON",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "HNL": {
                "name": "Honduran lempira",
                "symbol": "L"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "04"
            ]
        },
        "capital": [
            "Tegucigalpa"
        ],
        "altSpellings": [
            "HN",
            "Republic of Honduras",
            "Rep\xfablica de Honduras"
        ],
        "region": "Americas",
        "subregion": "Central America",
        "languages": {
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0647\u0646\u062F\u0648\u0631\u0627\u0633",
                "common": "\u0647\u0646\u062F\u0648\u0631\u0627\u0633"
            },
            "bre": {
                "official": "Republik Honduras",
                "common": "Honduras"
            },
            "ces": {
                "official": "Hondurask\xe1 republika",
                "common": "Honduras"
            },
            "cym": {
                "official": "Republic of Honduras",
                "common": "Honduras"
            },
            "deu": {
                "official": "Republik Honduras",
                "common": "Honduras"
            },
            "est": {
                "official": "Hondurase Vabariik",
                "common": "Honduras"
            },
            "fin": {
                "official": "Hondurasin tasavalta",
                "common": "Honduras"
            },
            "fra": {
                "official": "R\xe9publique du Honduras",
                "common": "Honduras"
            },
            "hrv": {
                "official": "Republika Honduras",
                "common": "Honduras"
            },
            "hun": {
                "official": "Hondurasi K\xf6zt\xe1rsas\xe1g",
                "common": "Honduras"
            },
            "ita": {
                "official": "Repubblica di Honduras",
                "common": "Honduras"
            },
            "jpn": {
                "official": "\u30DB\u30F3\u30B8\u30E5\u30E9\u30B9\u5171\u548C\u56FD",
                "common": "\u30DB\u30F3\u30B8\u30E5\u30E9\u30B9"
            },
            "kor": {
                "official": "\uC628\uB450\uB77C\uC2A4 \uACF5\uD654\uAD6D",
                "common": "\uC628\uB450\uB77C\uC2A4"
            },
            "nld": {
                "official": "Republiek Honduras",
                "common": "Honduras"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0647\u0646\u062F\u0648\u0631\u0627\u0633",
                "common": "\u0647\u064F\u0646\u062F\u0648\u0631\u0627\u0633"
            },
            "pol": {
                "official": "Republika Hondurasu",
                "common": "Honduras"
            },
            "por": {
                "official": "Rep\xfablica de Honduras",
                "common": "Honduras"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u043E\u043D\u0434\u0443\u0440\u0430\u0441",
                "common": "\u0413\u043E\u043D\u0434\u0443\u0440\u0430\u0441"
            },
            "slk": {
                "official": "Hondurask\xe1 republika",
                "common": "Honduras"
            },
            "spa": {
                "official": "Rep\xfablica de Honduras",
                "common": "Honduras"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0425\u043E\u043D\u0434\u0443\u0440\u0430\u0441",
                "common": "\u0425\u043E\u043D\u0434\u0443\u0440\u0430\u0441"
            },
            "swe": {
                "official": "Republiken Honduras",
                "common": "Honduras"
            },
            "tur": {
                "official": "Honduras Cumhuriyeti",
                "common": "Honduras"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06C1\u0648\u0646\u0688\u0648\u0631\u0627\u0633",
                "common": "\u06C1\u0648\u0646\u0688\u0648\u0631\u0627\u0633"
            },
            "zho": {
                "official": "\u6D2A\u90FD\u62C9\u65AF\u5171\u548C\u56FD",
                "common": "\u6D2A\u90FD\u62C9\u65AF"
            }
        },
        "latlng": [
            15,
            -86.5
        ],
        "landlocked": false,
        "borders": [
            "GTM",
            "SLV",
            "NIC"
        ],
        "area": 112492,
        "demonyms": {
            "eng": {
                "f": "Honduran",
                "m": "Honduran"
            },
            "fra": {
                "f": "Hondurienne",
                "m": "Hondurien"
            }
        },
        "flag": "\uD83C\uDDED\uD83C\uDDF3",
        "maps": {
            "googleMaps": "https://goo.gl/maps/BbeJK8Sk2VkMHbdF8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/287670"
        },
        "population": 9904608,
        "gini": {
            "2019": 48.2
        },
        "fifa": "HON",
        "car": {
            "signs": [
                "HN"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-06:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/hn.png",
            "svg": "https://flagcdn.com/hn.svg",
            "alt": "The flag of Honduras is composed of three equal horizontal bands of turquoise, white and turquoise, with five small five-pointed turquoise stars arranged in a quincuncial pattern at the center of the white band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/hn.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/hn.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                14.1,
                -87.22
            ]
        },
        "postalCode": {
            "format": "@@####",
            "regex": "^([A-Z]{2}\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Tonga",
            "official": "Kingdom of Tonga",
            "nativeName": {
                "eng": {
                    "official": "Kingdom of Tonga",
                    "common": "Tonga"
                },
                "ton": {
                    "official": "Kingdom of Tonga",
                    "common": "Tonga"
                }
            }
        },
        "tld": [
            ".to"
        ],
        "cca2": "TO",
        "ccn3": "776",
        "cca3": "TON",
        "cioc": "TGA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "TOP": {
                "name": "Tongan pa\u02BBanga",
                "symbol": "T$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "76"
            ]
        },
        "capital": [
            "Nuku'alofa"
        ],
        "altSpellings": [
            "TO"
        ],
        "region": "Oceania",
        "subregion": "Polynesia",
        "languages": {
            "eng": "English",
            "ton": "Tongan"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0645\u0644\u0643\u0629 \u062A\u0648\u0646\u063A\u0627",
                "common": "\u062A\u0648\u0646\u063A\u0627"
            },
            "bre": {
                "official": "Rouantelezh Tonga",
                "common": "Tonga"
            },
            "ces": {
                "official": "Kr\xe1lovstv\xed Tonga",
                "common": "Tonga"
            },
            "cym": {
                "official": "Kingdom of Tonga",
                "common": "Tonga"
            },
            "deu": {
                "official": "K\xf6nigreich Tonga",
                "common": "Tonga"
            },
            "est": {
                "official": "Tonga Kuningriik",
                "common": "Tonga"
            },
            "fin": {
                "official": "Tongan kuningaskunta",
                "common": "Tonga"
            },
            "fra": {
                "official": "Royaume des Tonga",
                "common": "Tonga"
            },
            "hrv": {
                "official": "Kraljevina Tonga",
                "common": "Tonga"
            },
            "hun": {
                "official": "Tongai Kir\xe1lys\xe1g",
                "common": "Tonga"
            },
            "ita": {
                "official": "Regno di Tonga",
                "common": "Tonga"
            },
            "jpn": {
                "official": "\u30C8\u30F3\u30AC\u738B\u56FD",
                "common": "\u30C8\u30F3\u30AC"
            },
            "kor": {
                "official": "\uD1B5\uAC00 \uC655\uAD6D",
                "common": "\uD1B5\uAC00"
            },
            "nld": {
                "official": "Koninkrijk Tonga",
                "common": "Tonga"
            },
            "per": {
                "official": "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u062A\u0648\u0646\u06AF\u0627",
                "common": "\u062A\u0648\u0646\u06AF\u0627"
            },
            "pol": {
                "official": "Kr\xf3lestwo Tonga",
                "common": "Tonga"
            },
            "por": {
                "official": "Reino de Tonga",
                "common": "Tonga"
            },
            "rus": {
                "official": "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0422\u043E\u043D\u0433\u0430",
                "common": "\u0422\u043E\u043D\u0433\u0430"
            },
            "slk": {
                "official": "Tongsk\xe9 kr\xe1\u013Eovstvo",
                "common": "Tonga"
            },
            "spa": {
                "official": "Reino de Tonga",
                "common": "Tonga"
            },
            "srp": {
                "official": "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0422\u043E\u043D\u0433\u0430",
                "common": "\u0422\u043E\u043D\u0433\u0430"
            },
            "swe": {
                "official": "Konungariket Tonga",
                "common": "Tonga"
            },
            "tur": {
                "official": "Tonga Krall\u0131\u011F\u0131",
                "common": "Tonga"
            },
            "urd": {
                "official": "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0679\u0648\u0646\u06AF\u0627",
                "common": "\u0679\u0648\u0646\u06AF\u0627"
            },
            "zho": {
                "official": "\u6C64\u52A0\u738B\u56FD",
                "common": "\u6C64\u52A0"
            }
        },
        "latlng": [
            -20,
            -175
        ],
        "landlocked": false,
        "area": 747,
        "demonyms": {
            "eng": {
                "f": "Tongan",
                "m": "Tongan"
            },
            "fra": {
                "f": "Tonguienne",
                "m": "Tonguien"
            }
        },
        "flag": "\uD83C\uDDF9\uD83C\uDDF4",
        "maps": {
            "googleMaps": "https://goo.gl/maps/p5YALBY2QdEzswRo7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2186665"
        },
        "population": 105697,
        "gini": {
            "2015": 37.6
        },
        "fifa": "TGA",
        "car": {
            "signs": [
                "TO"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+13:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/to.png",
            "svg": "https://flagcdn.com/to.svg",
            "alt": "The flag of Tonga has a red field. A white rectangle bearing a red Greek cross is superimposed in the canton."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/to.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/to.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -21.13,
                -175.2
            ]
        }
    },
    {
        "name": {
            "common": "Saudi Arabia",
            "official": "Kingdom of Saudi Arabia",
            "nativeName": {
                "ara": {
                    "official": "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629",
                    "common": "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629"
                }
            }
        },
        "tld": [
            ".sa",
            ".\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629"
        ],
        "cca2": "SA",
        "ccn3": "682",
        "cca3": "SAU",
        "cioc": "KSA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "SAR": {
                "name": "Saudi riyal",
                "symbol": "\u0631.\u0633"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "66"
            ]
        },
        "capital": [
            "Riyadh"
        ],
        "altSpellings": [
            "Saudi",
            "SA",
            "Kingdom of Saudi Arabia",
            "Al-Mamlakah al-\u2018Arabiyyah as-Su\u2018\u016Bdiyyah"
        ],
        "region": "Asia",
        "subregion": "Western Asia",
        "languages": {
            "ara": "Arabic"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629",
                "common": "\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629"
            },
            "bre": {
                "official": "Rouantelezh Arabia Saoudat",
                "common": "Arabia Saoudat"
            },
            "ces": {
                "official": "Sa\xfadskoarabsk\xe9 kr\xe1lovstv\xed",
                "common": "Sa\xfadsk\xe1 Ar\xe1bie"
            },
            "cym": {
                "official": "Kingdom of Saudi Arabia",
                "common": "Saudi Arabia"
            },
            "deu": {
                "official": "K\xf6nigreich Saudi-Arabien",
                "common": "Saudi-Arabien"
            },
            "est": {
                "official": "Saudi Araabia Kuningriik",
                "common": "Saudi Araabia"
            },
            "fin": {
                "official": "Saudi-Arabian kuningaskunta",
                "common": "Saudi-Arabia"
            },
            "fra": {
                "official": "Royaume d'Arabie Saoudite",
                "common": "Arabie Saoudite"
            },
            "hrv": {
                "official": "Kraljevina Saudijska Arabija",
                "common": "Saudijska Arabija"
            },
            "hun": {
                "official": "Sza\xfad-Ar\xe1bia",
                "common": "Sza\xfad-Ar\xe1bia"
            },
            "ita": {
                "official": "Arabia Saudita",
                "common": "Arabia Saudita"
            },
            "jpn": {
                "official": "\u30B5\u30A6\u30B8\u30A2\u30E9\u30D3\u30A2\u738B\u56FD",
                "common": "\u30B5\u30A6\u30B8\u30A2\u30E9\u30D3\u30A2"
            },
            "kor": {
                "official": "\uC0AC\uC6B0\uB514\uC544\uB77C\uBE44\uC544 \uC655\uAD6D",
                "common": "\uC0AC\uC6B0\uB514\uC544\uB77C\uBE44\uC544"
            },
            "nld": {
                "official": "Koninkrijk van Saoedi-Arabi\xeb",
                "common": "Saoedi-Arabi\xeb"
            },
            "per": {
                "official": "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0639\u0631\u0628\u06CC \u0633\u064E\u0639\u0648\u062F\u06CC",
                "common": "\u0639\u0631\u0628\u0633\u062A\u0627\u0646 \u0633\u0639\u0648\u062F\u06CC"
            },
            "pol": {
                "official": "Kr\xf3lestwo Arabii Saudyjskiej",
                "common": "Arabia Saudyjska"
            },
            "por": {
                "official": "Reino da Ar\xe1bia Saudita",
                "common": "Ar\xe1bia Saudita"
            },
            "rus": {
                "official": "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0421\u0430\u0443\u0434\u043E\u0432\u0441\u043A\u0430\u044F \u0410\u0440\u0430\u0432\u0438\u044F",
                "common": "\u0421\u0430\u0443\u0434\u043E\u0432\u0441\u043A\u0430\u044F \u0410\u0440\u0430\u0432\u0438\u044F"
            },
            "slk": {
                "official": "Saudskoarabsk\xe9 kr\xe1\u013Eovstvo",
                "common": "Saudsk\xe1 Ar\xe1bia"
            },
            "spa": {
                "official": "Reino de Arabia Saudita",
                "common": "Arabia Saud\xed"
            },
            "srp": {
                "official": "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0421\u0430\u0443\u0434\u0438\u0458\u0441\u043A\u0430 \u0410\u0440\u0430\u0431\u0438\u0458\u0430",
                "common": "\u0421\u0430\u0443\u0434\u0438\u0458\u0441\u043A\u0430 \u0410\u0440\u0430\u0431\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Kungad\xf6met Saudiarabien",
                "common": "Saudiarabien"
            },
            "tur": {
                "official": "Suudi Arabistan Krall\u0131\u011F\u0131",
                "common": "Suudi Arabistan"
            },
            "urd": {
                "official": "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0633\u0639\u0648\u062F\u06CC \u0639\u0631\u0628",
                "common": "\u0633\u0639\u0648\u062F\u06CC \u0639\u0631\u0628"
            },
            "zho": {
                "official": "\u6C99\u7279\u963F\u62C9\u4F2F\u738B\u56FD",
                "common": "\u6C99\u7279\u963F\u62C9\u4F2F"
            }
        },
        "latlng": [
            25,
            45
        ],
        "landlocked": false,
        "borders": [
            "IRQ",
            "JOR",
            "KWT",
            "OMN",
            "QAT",
            "ARE",
            "YEM"
        ],
        "area": 2149690,
        "demonyms": {
            "eng": {
                "f": "Saudi Arabian",
                "m": "Saudi Arabian"
            },
            "fra": {
                "f": "Saoudienne",
                "m": "Saoudien"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDE6",
        "maps": {
            "googleMaps": "https://goo.gl/maps/5PSjvdJ1AyaLFRrG9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/307584"
        },
        "population": 34813867,
        "fifa": "KSA",
        "car": {
            "signs": [
                "SA"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/sa.png",
            "svg": "https://flagcdn.com/sa.svg",
            "alt": "The flag of Saudi Arabia has a green field, at the center of which is an Arabic inscription \u2014 the Shahada \u2014 in white above a white horizontal sabre with its tip pointed to the hoist side of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/sa.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/sa.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                24.65,
                46.7
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Suriname",
            "official": "Republic of Suriname",
            "nativeName": {
                "nld": {
                    "official": "Republiek Suriname",
                    "common": "Suriname"
                }
            }
        },
        "tld": [
            ".sr"
        ],
        "cca2": "SR",
        "ccn3": "740",
        "cca3": "SUR",
        "cioc": "SUR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "SRD": {
                "name": "Surinamese dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "97"
            ]
        },
        "capital": [
            "Paramaribo"
        ],
        "altSpellings": [
            "SR",
            "Sarnam",
            "Sranangron",
            "Republic of Suriname",
            "Republiek Suriname"
        ],
        "region": "Americas",
        "subregion": "South America",
        "languages": {
            "nld": "Dutch"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u0648\u0631\u064A\u0646\u0627\u0645",
                "common": "\u0633\u0648\u0631\u064A\u0646\u0627\u0645"
            },
            "bre": {
                "official": "Republik Surinam",
                "common": "Surinam"
            },
            "ces": {
                "official": "Republika Surinam",
                "common": "Surinam"
            },
            "cym": {
                "official": "Republic of Suriname",
                "common": "Suriname"
            },
            "deu": {
                "official": "Republik Suriname",
                "common": "Suriname"
            },
            "est": {
                "official": "Suriname Vabariik",
                "common": "Suriname"
            },
            "fin": {
                "official": "Surinamen tasavalta",
                "common": "Suriname"
            },
            "fra": {
                "official": "R\xe9publique du Suriname",
                "common": "Surinam"
            },
            "hrv": {
                "official": "Republika Surinam",
                "common": "Surinam"
            },
            "hun": {
                "official": "Suriname K\xf6zt\xe1rsas\xe1g",
                "common": "Suriname"
            },
            "ita": {
                "official": "Repubblica del Suriname",
                "common": "Suriname"
            },
            "jpn": {
                "official": "\u30B9\u30EA\u30CA\u30E0\u5171\u548C\u56FD",
                "common": "\u30B9\u30EA\u30CA\u30E0"
            },
            "kor": {
                "official": "\uC218\uB9AC\uB0A8 \uACF5\uD654\uAD6D",
                "common": "\uC218\uB9AC\uB0A8"
            },
            "nld": {
                "official": "Republiek Suriname",
                "common": "Suriname"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u0648\u0631\u06CC\u0646\u0627\u0645",
                "common": "\u0633\u0648\u0631\u06CC\u0646\u0627\u0645"
            },
            "pol": {
                "official": "Republika Surinamu",
                "common": "Surinam"
            },
            "por": {
                "official": "Rep\xfablica do Suriname",
                "common": "Suriname"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0443\u0440\u0438\u043D\u0430\u043C",
                "common": "\u0421\u0443\u0440\u0438\u043D\u0430\u043C"
            },
            "slk": {
                "official": "Surinamsk\xe1 republika",
                "common": "Surinam"
            },
            "spa": {
                "official": "Rep\xfablica de Suriname",
                "common": "Surinam"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0443\u0440\u0438\u043D\u0430\u043C",
                "common": "\u0421\u0443\u0440\u0438\u043D\u0430\u043C"
            },
            "swe": {
                "official": "Republiken Surinam",
                "common": "Surinam"
            },
            "tur": {
                "official": "Surinam Cumhuriyeti",
                "common": "Surinam"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0631\u06CC\u0646\u0627\u0645",
                "common": "\u0633\u0631\u06CC\u0646\u0627\u0645"
            },
            "zho": {
                "official": "\u82CF\u91CC\u5357\u5171\u548C\u56FD",
                "common": "\u82CF\u91CC\u5357"
            }
        },
        "latlng": [
            4,
            -56
        ],
        "landlocked": false,
        "borders": [
            "BRA",
            "GUF",
            "GUY"
        ],
        "area": 163820,
        "demonyms": {
            "eng": {
                "f": "Surinamer",
                "m": "Surinamer"
            },
            "fra": {
                "f": "Surinamaise",
                "m": "Surinamais"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDF7",
        "maps": {
            "googleMaps": "https://goo.gl/maps/iy7TuQLSi4qgoBoG7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/287082"
        },
        "population": 586634,
        "gini": {
            "1999": 57.9
        },
        "fifa": "SUR",
        "car": {
            "signs": [
                "SME"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-03:00"
        ],
        "continents": [
            "South America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/sr.png",
            "svg": "https://flagcdn.com/sr.svg",
            "alt": "The flag of Suriname is composed of five horizontal bands of green, white, red, white and green in the ratio of 2:1:4:1:2. A large five-pointed yellow star is centered in the red band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/sr.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/sr.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                5.83,
                -55.17
            ]
        }
    },
    {
        "name": {
            "common": "Qatar",
            "official": "State of Qatar",
            "nativeName": {
                "ara": {
                    "official": "\u062F\u0648\u0644\u0629 \u0642\u0637\u0631",
                    "common": "\u0642\u0637\u0631"
                }
            }
        },
        "tld": [
            ".qa",
            "\u0642\u0637\u0631."
        ],
        "cca2": "QA",
        "ccn3": "634",
        "cca3": "QAT",
        "cioc": "QAT",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "QAR": {
                "name": "Qatari riyal",
                "symbol": "\u0631.\u0642"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "74"
            ]
        },
        "capital": [
            "Doha"
        ],
        "altSpellings": [
            "QA",
            "State of Qatar",
            "Dawlat Qa\u1E6Dar"
        ],
        "region": "Asia",
        "subregion": "Western Asia",
        "languages": {
            "ara": "Arabic"
        },
        "translations": {
            "ara": {
                "official": "\u062F\u0648\u0644\u0629 \u0642\u0637\u0631",
                "common": "\u0642\u0637\u0631"
            },
            "bre": {
                "official": "Stad Katar",
                "common": "Katar"
            },
            "ces": {
                "official": "St\xe1t Katar",
                "common": "Katar"
            },
            "cym": {
                "official": "State of Qatar",
                "common": "Qatar"
            },
            "deu": {
                "official": "Staat Katar",
                "common": "Katar"
            },
            "est": {
                "official": "Katari Riik",
                "common": "Katar"
            },
            "fin": {
                "official": "Qatarin valtio",
                "common": "Qatar"
            },
            "fra": {
                "official": "\xc9tat du Qatar",
                "common": "Qatar"
            },
            "hrv": {
                "official": "Dr\u017Eava Katar",
                "common": "Katar"
            },
            "hun": {
                "official": "Katari \xc1llam",
                "common": "Katar"
            },
            "ita": {
                "official": "Stato del Qatar",
                "common": "Qatar"
            },
            "jpn": {
                "official": "\u30AB\u30BF\u30FC\u30EB\u56FD",
                "common": "\u30AB\u30BF\u30FC\u30EB"
            },
            "kor": {
                "official": "\uCE74\uD0C0\uB974\uAD6D",
                "common": "\uCE74\uD0C0\uB974"
            },
            "nld": {
                "official": "Staat Qatar",
                "common": "Qatar"
            },
            "per": {
                "official": "\u062F\u0648\u0644\u062A \u0642\u0637\u0631",
                "common": "\u0642\u0637\u0631"
            },
            "pol": {
                "official": "Pa\u0144stwo Katar",
                "common": "Katar"
            },
            "por": {
                "official": "Estado do Qatar",
                "common": "Catar"
            },
            "rus": {
                "official": "\u0413\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u041A\u0430\u0442\u0430\u0440",
                "common": "\u041A\u0430\u0442\u0430\u0440"
            },
            "slk": {
                "official": "Katarsk\xfd \u0161t\xe1t",
                "common": "Katar"
            },
            "spa": {
                "official": "Estado de Qatar",
                "common": "Catar"
            },
            "srp": {
                "official": "\u0414\u0440\u0436\u0430\u0432\u0430 \u041A\u0430\u0442\u0430\u0440",
                "common": "\u041A\u0430\u0442\u0430\u0440"
            },
            "swe": {
                "official": "Staten Qatar",
                "common": "Qatar"
            },
            "tur": {
                "official": "Katar Devleti",
                "common": "Katar"
            },
            "urd": {
                "official": "\u0631\u06CC\u0627\u0633\u062A\u0650 \u0642\u0637\u0631",
                "common": "\u0642\u0637\u0631"
            },
            "zho": {
                "official": "\u5361\u5854\u5C14\u56FD",
                "common": "\u5361\u5854\u5C14"
            }
        },
        "latlng": [
            25.5,
            51.25
        ],
        "landlocked": false,
        "borders": [
            "SAU"
        ],
        "area": 11586,
        "demonyms": {
            "eng": {
                "f": "Qatari",
                "m": "Qatari"
            },
            "fra": {
                "f": "Qatarienne",
                "m": "Qatarien"
            }
        },
        "flag": "\uD83C\uDDF6\uD83C\uDDE6",
        "maps": {
            "googleMaps": "https://goo.gl/maps/ZV76Y49z7LLUZ2KQ6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/305095"
        },
        "population": 2881060,
        "fifa": "QAT",
        "car": {
            "signs": [
                "Q"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/qa.png",
            "svg": "https://flagcdn.com/qa.svg",
            "alt": "The flag of Qatar has a maroon field, on the hoist side of which is a white vertical band that spans about one-third the width of the field and is separated from the rest of the field by nine adjoining fly-side pointing white isosceles triangles that serve as a serrated line."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/qa.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/qa.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                25.28,
                51.53
            ]
        }
    },
    {
        "name": {
            "common": "Saint Helena, Ascension and Tristan da Cunha",
            "official": "Saint Helena, Ascension and Tristan da Cunha",
            "nativeName": {
                "eng": {
                    "official": "Saint Helena, Ascension and Tristan da Cunha",
                    "common": "Saint Helena, Ascension and Tristan da Cunha"
                }
            }
        },
        "tld": [
            ".sh",
            ".ac"
        ],
        "cca2": "SH",
        "ccn3": "654",
        "cca3": "SHN",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "GBP": {
                "name": "Pound sterling",
                "symbol": "\xa3"
            },
            "SHP": {
                "name": "Saint Helena pound",
                "symbol": "\xa3"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "90",
                "47"
            ]
        },
        "capital": [
            "Jamestown"
        ],
        "altSpellings": [
            "Saint Helena",
            "St. Helena, Ascension and Tristan da Cunha"
        ],
        "region": "Africa",
        "subregion": "Western Africa",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u0633\u0627\u0646\u062A \u0647\u064A\u0644\u064A\u0646\u0627 \u0648\u0623\u0633\u064A\u0646\u0634\u064A\u0646 \u0648\u062A\u0631\u064A\u0633\u062A\u0627\u0646 \u062F\u0627 \u0643\u0648\u0646\u0627",
                "common": "\u0633\u0627\u0646\u062A \u0647\u064A\u0644\u064A\u0646\u0627 \u0648\u0623\u0633\u064A\u0646\u0634\u064A\u0646 \u0648\u062A\u0631\u064A\u0633\u062A\u0627\u0646 \u062F\u0627 \u0643\u0648\u0646\u0627"
            },
            "bre": {
                "official": "Saint Helena, Ascension ha Tristan da Cunha",
                "common": "Saint Helena, Ascension ha Tristan da Cunha"
            },
            "ces": {
                "official": "Svat\xe1 Helena, Ascension a Tristan da Cunha",
                "common": "Svat\xe1 Helena, Ascension a Tristan da Cunha"
            },
            "cym": {
                "official": "Saint Helena, Ascension and Tristan da Cunha",
                "common": "Saint Helena, Ascension and Tristan da Cunha"
            },
            "deu": {
                "official": "Sankt Helena, Ascension und Tristan da Cunha",
                "common": "St. Helena, Ascension und Tristan da Cunha"
            },
            "est": {
                "official": "Saint Helena, Ascension ja Tristan da Cunha",
                "common": "Saint Helena, Ascension ja Tristan da Cunha"
            },
            "fin": {
                "official": "Saint Helena, Ascension ja Tristan da Cunha",
                "common": "Saint Helena, Ascension ja Tristan da Cunha"
            },
            "fra": {
                "official": "Sainte-H\xe9l\xe8ne, Ascension et Tristan da Cunha",
                "common": "Sainte-H\xe9l\xe8ne, Ascension et Tristan da Cunha"
            },
            "hrv": {
                "official": "Sveta Helena",
                "common": "Sveta Helena"
            },
            "hun": {
                "official": "Szent Ilona",
                "common": "Szent Ilona-sziget"
            },
            "ita": {
                "official": "Sant'Elena, Ascensione e Tristan da Cunha",
                "common": "Sant'Elena, Ascensione e Tristan da Cunha"
            },
            "jpn": {
                "official": "\u30BB\u30F3\u30C8\u30D8\u30EC\u30CA\u30FB\u30A2\u30BB\u30F3\u30B7\u30E7\u30F3\u304A\u3088\u3073\u30C8\u30EA\u30B9\u30BF\u30F3\u30C0\u30AF\u30FC\u30CB\u30E3",
                "common": "\u30BB\u30F3\u30C8\u30D8\u30EC\u30CA\u30FB\u30A2\u30BB\u30F3\u30B7\u30E7\u30F3\u304A\u3088\u3073\u30C8\u30EA\u30B9\u30BF\u30F3\u30C0\u30AF\u30FC\u30CB\u30E3"
            },
            "kor": {
                "official": "\uC138\uC778\uD2B8\uD5EC\uB808\uB098",
                "common": "\uC138\uC778\uD2B8\uD5EC\uB808\uB098"
            },
            "nld": {
                "official": "Sint-Helena, Ascension en Tristan da Cunha",
                "common": "Sint-Helena, Ascension en Tristan da Cunha"
            },
            "per": {
                "official": "\u0633\u0646\u062A \u0647\u0644\u0646",
                "common": "\u0633\u0646\u062A \u0647\u0644\u0646"
            },
            "pol": {
                "official": "Wyspa \u015Awi\u0119tej Heleny, Wyspa Wniebowst\u0105pienia i Tristan da Cunha",
                "common": "Wyspa \u015Awi\u0119tej Heleny, Wyspa Wniebowst\u0105pienia i Tristan da Cunha"
            },
            "por": {
                "official": "Santa Helena, Ascens\xe3o e Trist\xe3o da Cunha",
                "common": "Santa Helena, Ascens\xe3o e Trist\xe3o da Cunha"
            },
            "rus": {
                "official": "\u041E\u0441\u0442\u0440\u043E\u0432\u0430 \u0421\u0432\u044F\u0442\u043E\u0439 \u0415\u043B\u0435\u043D\u044B, \u0412\u043E\u0437\u043D\u0435\u0441\u0435\u043D\u0438\u044F \u0438 \u0422\u0440\u0438\u0441\u0442\u0430\u043D-\u0434\u0430-\u041A\u0443\u043D\u044C\u044F",
                "common": "\u041E\u0441\u0442\u0440\u043E\u0432\u0430 \u0421\u0432\u044F\u0442\u043E\u0439 \u0415\u043B\u0435\u043D\u044B, \u0412\u043E\u0437\u043D\u0435\u0441\u0435\u043D\u0438\u044F \u0438 \u0422\u0440\u0438\u0441\u0442\u0430\u043D-\u0434\u0430-\u041A\u0443\u043D\u044C\u044F"
            },
            "slk": {
                "official": "Sv\xe4t\xe1 Helena (z\xe1morsk\xe9 \xfazemie)",
                "common": "Sv\xe4t\xe1 Helena (z\xe1morsk\xe9 \xfazemie)"
            },
            "spa": {
                "official": "Santa Elena, Ascensi\xf3n y Trist\xe1n de Acu\xf1a",
                "common": "Santa Elena, Ascensi\xf3n y Trist\xe1n de Acu\xf1a"
            },
            "srp": {
                "official": "\u0421\u0432\u0435\u0442\u0430 \u0408\u0435\u043B\u0435\u043D\u0430, \u0410\u0441\u0435\u043D\u0441\u0438\u043E\u043D \u0438 \u0422\u0440\u0438\u0441\u0442\u0430\u043D \u0434\u0430 \u041A\u0443\u045A\u0430",
                "common": "\u0421\u0432\u0435\u0442\u0430 \u0408\u0435\u043B\u0435\u043D\u0430"
            },
            "swe": {
                "official": "Sankta Helena",
                "common": "Sankta Helena"
            },
            "tur": {
                "official": "Saint Helena",
                "common": "Saint Helena"
            },
            "urd": {
                "official": "\u0633\u06CC\u0646\u0679 \u06C1\u0644\u06CC\u0646\u0627\u060C \u0627\u0633\u06CC\u0646\u0634\u0646 \u0648 \u062A\u0631\u0633\u0679\u0627\u0646 \u062F\u0627 \u06A9\u0648\u0646\u06CC\u0627",
                "common": "\u0633\u06CC\u0646\u0679 \u06C1\u0644\u06CC\u0646\u0627\u060C \u0627\u0633\u06CC\u0646\u0634\u0646 \u0648 \u062A\u0631\u0633\u0679\u0627\u0646 \u062F\u0627 \u06A9\u0648\u0646\u06CC\u0627"
            },
            "zho": {
                "official": "\u5723\u8D6B\u52D2\u62FF\u3001\u963F\u68EE\u677E\u548C\u7279\u91CC\u65AF\u5766-\u8FBE\u5E93\u5C3C\u4E9A",
                "common": "\u5723\u8D6B\u52D2\u62FF\u3001\u963F\u68EE\u677E\u548C\u7279\u91CC\u65AF\u5766-\u8FBE\u5E93\u5C3C\u4E9A"
            }
        },
        "latlng": [
            -15.95,
            -5.72
        ],
        "landlocked": false,
        "area": 394,
        "demonyms": {
            "eng": {
                "f": "Saint Helenian",
                "m": "Saint Helenian"
            },
            "fra": {
                "f": "Sainte-H\xe9l\xe9noise",
                "m": "Sainte-H\xe9l\xe8nois"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDED",
        "maps": {
            "googleMaps": "https://goo.gl/maps/iv4VxnPzHkjLCJuc6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/4868269#map=13/-15.9657/-5.7120"
        },
        "population": 53192,
        "car": {
            "signs": [
                "GB"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+00:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/sh.png",
            "svg": "https://flagcdn.com/sh.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -15.93,
                -5.72
            ]
        },
        "postalCode": {
            "format": "STHL 1ZZ",
            "regex": "^(STHL1ZZ)$"
        }
    },
    {
        "name": {
            "common": "Gibraltar",
            "official": "Gibraltar",
            "nativeName": {
                "eng": {
                    "official": "Gibraltar",
                    "common": "Gibraltar"
                }
            }
        },
        "tld": [
            ".gi"
        ],
        "cca2": "GI",
        "ccn3": "292",
        "cca3": "GIB",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "GIP": {
                "name": "Gibraltar pound",
                "symbol": "\xa3"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "50"
            ]
        },
        "capital": [
            "Gibraltar"
        ],
        "altSpellings": [
            "GI"
        ],
        "region": "Europe",
        "subregion": "Southern Europe",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0628\u0644 \u0637\u0627\u0631\u0642",
                "common": "\u062C\u0628\u0644 \u0637\u0627\u0631\u0642"
            },
            "bre": {
                "official": "Jibraltar",
                "common": "Jibraltar"
            },
            "ces": {
                "official": "Gibraltar",
                "common": "Gibraltar"
            },
            "cym": {
                "official": "Gibraltar",
                "common": "Gibraltar"
            },
            "deu": {
                "official": "Gibraltar",
                "common": "Gibraltar"
            },
            "est": {
                "official": "Gibraltar",
                "common": "Gibraltar"
            },
            "fin": {
                "official": "Gibraltar",
                "common": "Gibraltar"
            },
            "fra": {
                "official": "Gibraltar",
                "common": "Gibraltar"
            },
            "hrv": {
                "official": "Gibraltar",
                "common": "Gibraltar"
            },
            "hun": {
                "official": "Gibralt\xe1r",
                "common": "Gibralt\xe1r"
            },
            "ita": {
                "official": "Gibilterra",
                "common": "Gibilterra"
            },
            "jpn": {
                "official": "\u30B8\u30D6\u30E9\u30EB\u30BF\u30EB",
                "common": "\u30B8\u30D6\u30E9\u30EB\u30BF\u30EB"
            },
            "kor": {
                "official": "\uC9C0\uBE0C\uB864\uD130",
                "common": "\uC9C0\uBE0C\uB864\uD130"
            },
            "nld": {
                "official": "Gibraltar",
                "common": "Gibraltar"
            },
            "per": {
                "official": "\u062C\u0628\u0644 \u0637\u0627\u0631\u0642",
                "common": "\u062C\u0628\u0644 \u0637\u0627\u0631\u0642"
            },
            "pol": {
                "official": "Gibraltar",
                "common": "Gibraltar"
            },
            "por": {
                "official": "Gibraltar",
                "common": "Gibraltar"
            },
            "rus": {
                "official": "\u0413\u0438\u0431\u0440\u0430\u043B\u0442\u0430\u0440",
                "common": "\u0413\u0438\u0431\u0440\u0430\u043B\u0442\u0430\u0440"
            },
            "slk": {
                "official": "Gibralt\xe1r",
                "common": "Gibralt\xe1r"
            },
            "spa": {
                "official": "Gibraltar",
                "common": "Gibraltar"
            },
            "srp": {
                "official": "\u0413\u0438\u0431\u0440\u0430\u043B\u0442\u0430\u0440",
                "common": "\u0413\u0438\u0431\u0440\u0430\u043B\u0442\u0430\u0440"
            },
            "swe": {
                "official": "Gibraltar",
                "common": "Gibraltar"
            },
            "tur": {
                "official": "Cebelitar\u0131k",
                "common": "Cebelitar\u0131k"
            },
            "urd": {
                "official": "\u062C\u0628\u0644 \u0627\u0644\u0637\u0627\u0631\u0642",
                "common": "\u062C\u0628\u0644 \u0627\u0644\u0637\u0627\u0631\u0642"
            },
            "zho": {
                "official": "\u76F4\u5E03\u7F57\u9640",
                "common": "\u76F4\u5E03\u7F57\u9640"
            }
        },
        "latlng": [
            36.13333333,
            -5.35
        ],
        "landlocked": false,
        "borders": [
            "ESP"
        ],
        "area": 6,
        "demonyms": {
            "eng": {
                "f": "Gibraltar",
                "m": "Gibraltar"
            },
            "fra": {
                "f": "Gibraltarienne",
                "m": "Gibraltarien"
            }
        },
        "flag": "\uD83C\uDDEC\uD83C\uDDEE",
        "maps": {
            "googleMaps": "https://goo.gl/maps/CEoHAs1t6byCBhHFA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1278736"
        },
        "population": 33691,
        "fifa": "GIB",
        "car": {
            "signs": [
                "GBZ"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/gi.png",
            "svg": "https://flagcdn.com/gi.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/gi.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/gi.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                36.13,
                -5.35
            ]
        }
    },
    {
        "name": {
            "common": "Northern Mariana Islands",
            "official": "Commonwealth of the Northern Mariana Islands",
            "nativeName": {
                "cal": {
                    "official": "Commonwealth of the Northern Mariana Islands",
                    "common": "Northern Mariana Islands"
                },
                "cha": {
                    "official": "Sankattan Siha Na Islas Mari\xe5nas",
                    "common": "Na Islas Mari\xe5nas"
                },
                "eng": {
                    "official": "Commonwealth of the Northern Mariana Islands",
                    "common": "Northern Mariana Islands"
                }
            }
        },
        "tld": [
            ".mp"
        ],
        "cca2": "MP",
        "ccn3": "580",
        "cca3": "MNP",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "670"
            ]
        },
        "capital": [
            "Saipan"
        ],
        "altSpellings": [
            "MP",
            "Commonwealth of the Northern Mariana Islands",
            "Sankattan Siha Na Islas Mari\xe5nas"
        ],
        "region": "Oceania",
        "subregion": "Micronesia",
        "languages": {
            "cal": "Carolinian",
            "cha": "Chamorro",
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u0643\u0648\u0645\u0648\u0646\u0648\u0644\u062B \u062C\u0632\u0631 \u0645\u0627\u0631\u064A\u0627\u0646\u0627 \u0627\u0644\u0634\u0645\u0627\u0644\u064A\u0629",
                "common": "\u062C\u0632\u0631 \u0645\u0627\u0631\u064A\u0627\u0646\u0627 \u0627\u0644\u0634\u0645\u0627\u0644\u064A\u0629"
            },
            "bre": {
                "official": "Kenglad Inizi Mariana an Norzh",
                "common": "Inizi Mariana an Norzh"
            },
            "ces": {
                "official": "Spole\u010Denstv\xed Severn\xedch Marian",
                "common": "Severn\xed Mariany"
            },
            "cym": {
                "official": "Commonwealth of the Northern Mariana Islands",
                "common": "Northern Mariana Islands"
            },
            "deu": {
                "official": "Commonwealth der N\xf6rdlichen Marianen",
                "common": "N\xf6rdliche Marianen"
            },
            "est": {
                "official": "P\xf5hja-Mariaani \xdchendus",
                "common": "P\xf5hja-Mariaanid"
            },
            "fin": {
                "official": "Pohjois-Mariaanit",
                "common": "Pohjois-Mariaanit"
            },
            "fra": {
                "official": "Commonwealth des \xeeles Mariannes du Nord",
                "common": "\xceles Mariannes du Nord"
            },
            "hrv": {
                "official": "Zajednica je Sjeverni Marijanski otoci",
                "common": "Sjevernomarijanski otoci"
            },
            "hun": {
                "official": "\xc9szaki-Mariana-szigetek",
                "common": "\xc9szaki-Mariana-szigetek"
            },
            "ita": {
                "official": "Commonwealth delle Isole Marianne Settentrionali",
                "common": "Isole Marianne Settentrionali"
            },
            "jpn": {
                "official": "\u5317\u30DE\u30EA\u30A2\u30CA\u8AF8\u5CF6",
                "common": "\u5317\u30DE\u30EA\u30A2\u30CA\u8AF8\u5CF6"
            },
            "kor": {
                "official": "\uBD81\uB9C8\uB9AC\uC544\uB098 \uC81C\uB3C4",
                "common": "\uBD81\uB9C8\uB9AC\uC544\uB098 \uC81C\uB3C4"
            },
            "nld": {
                "official": "Commonwealth van de Noordelijke Marianen",
                "common": "Noordelijke Marianeneilanden"
            },
            "per": {
                "official": "\u062C\u0632\u0627\u06CC\u0631 \u0645\u0627\u0631\u06CC\u0627\u0646\u0627\u06CC \u0634\u0645\u0627\u0644\u06CC",
                "common": "\u062C\u0632\u0627\u06CC\u0631 \u0645\u0627\u0631\u06CC\u0627\u0646\u0627\u06CC \u0634\u0645\u0627\u0644\u06CC"
            },
            "pol": {
                "official": "Wsp\xf3lnota Marian\xf3w P\xf3\u0142nocnych",
                "common": "Mariany P\xf3\u0142nocne"
            },
            "por": {
                "official": "Comunidade das Ilhas Marianas do Norte",
                "common": "Marianas Setentrionais"
            },
            "rus": {
                "official": "\u0421\u043E\u0434\u0440\u0443\u0436\u0435\u0441\u0442\u0432\u043E \u0421\u0435\u0432\u0435\u0440\u043D\u044B\u0445 \u041C\u0430\u0440\u0438\u0430\u043D\u0441\u043A\u0438\u0445 \u043E\u0441\u0442\u0440\u043E\u0432\u043E\u0432",
                "common": "\u0421\u0435\u0432\u0435\u0440\u043D\u044B\u0435 \u041C\u0430\u0440\u0438\u0430\u043D\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            "slk": {
                "official": "Spolo\u010Denstvo ostrovov Severn\xe9 Mari\xe1ny",
                "common": "Severn\xe9 Mari\xe1ny"
            },
            "spa": {
                "official": "Mancomunidad de las Islas Marianas del Norte",
                "common": "Islas Marianas del Norte"
            },
            "srp": {
                "official": "\u041A\u043E\u043C\u043E\u043D\u0432\u0435\u043B\u0442 \u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u0440\u0438\u0458\u0430\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                "common": "\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u0440\u0438\u0458\u0430\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            "swe": {
                "official": "Nordmarianerna",
                "common": "Nordmarianerna"
            },
            "tur": {
                "official": "Kuzey Mariana Adalar\u0131 Milletler Toplulu\u011Fu",
                "common": "Kuzey Mariana Adalar\u0131"
            },
            "urd": {
                "official": "\u062F\u0648\u0644\u062A\u0650 \u0645\u0634\u062A\u0631\u06A9\u06C1 \u062C\u0632\u0627\u0626\u0631 \u0634\u0645\u0627\u0644\u06CC \u0645\u0627\u0631\u06CC\u0627\u0646\u0627",
                "common": "\u062C\u0632\u0627\u0626\u0631 \u0634\u0645\u0627\u0644\u06CC \u0645\u0627\u0631\u06CC\u0627\u0646\u0627"
            },
            "zho": {
                "official": "\u5317\u9A6C\u91CC\u4E9A\u7EB3\u7FA4\u5C9B",
                "common": "\u5317\u9A6C\u91CC\u4E9A\u7EB3\u7FA4\u5C9B"
            }
        },
        "latlng": [
            15.2,
            145.75
        ],
        "landlocked": false,
        "area": 464,
        "demonyms": {
            "eng": {
                "f": "American",
                "m": "American"
            },
            "fra": {
                "f": "Am\xe9ricaine",
                "m": "Am\xe9rican"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDF5",
        "maps": {
            "googleMaps": "https://goo.gl/maps/cpZ67knoRAcfu1417",
            "openStreetMaps": "https://www.openstreetmap.org/relation/306004"
        },
        "population": 57557,
        "car": {
            "signs": [
                "USA"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+10:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/mp.png",
            "svg": "https://flagcdn.com/mp.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                15.2,
                145.75
            ]
        }
    },
    {
        "name": {
            "common": "Mauritius",
            "official": "Republic of Mauritius",
            "nativeName": {
                "eng": {
                    "official": "Republic of Mauritius",
                    "common": "Mauritius"
                },
                "fra": {
                    "official": "R\xe9publique de Maurice",
                    "common": "Maurice"
                },
                "mfe": {
                    "official": "Republik Moris",
                    "common": "Moris"
                }
            }
        },
        "tld": [
            ".mu"
        ],
        "cca2": "MU",
        "ccn3": "480",
        "cca3": "MUS",
        "cioc": "MRI",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "MUR": {
                "name": "Mauritian rupee",
                "symbol": "\u20A8"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "30"
            ]
        },
        "capital": [
            "Port Louis"
        ],
        "altSpellings": [
            "MU",
            "Republic of Mauritius",
            "R\xe9publique de Maurice"
        ],
        "region": "Africa",
        "subregion": "Eastern Africa",
        "languages": {
            "eng": "English",
            "fra": "French",
            "mfe": "Mauritian Creole"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u0648\u0631\u064A\u0634\u064A\u0648\u0633",
                "common": "\u0645\u0648\u0631\u064A\u0634\u064A\u0648\u0633"
            },
            "bre": {
                "official": "Republik Moris",
                "common": "Moris"
            },
            "ces": {
                "official": "Mauricijsk\xe1 republika",
                "common": "Mauricius"
            },
            "cym": {
                "official": "Republic of Mauritius",
                "common": "Mauritius"
            },
            "deu": {
                "official": "Republik Mauritius",
                "common": "Mauritius"
            },
            "est": {
                "official": "Mauritiuse Vabariik",
                "common": "Mauritius"
            },
            "fin": {
                "official": "Mauritiuksen tasavalta",
                "common": "Mauritius"
            },
            "fra": {
                "official": "R\xe9publique de Maurice",
                "common": "\xcele Maurice"
            },
            "hrv": {
                "official": "Republika Mauricijus",
                "common": "Mauricijus"
            },
            "hun": {
                "official": "Mauritiusi K\xf6zt\xe1rsas\xe1g",
                "common": "Mauritius"
            },
            "ita": {
                "official": "Repubblica di Mauritius",
                "common": "Mauritius"
            },
            "jpn": {
                "official": "\u30E2\u30FC\u30EA\u30B7\u30E3\u30B9\u5171\u548C\u56FD",
                "common": "\u30E2\u30FC\u30EA\u30B7\u30E3\u30B9"
            },
            "kor": {
                "official": "\uBAA8\uB9AC\uC154\uC2A4 \uACF5\uD654\uAD6D",
                "common": "\uBAA8\uB9AC\uC154\uC2A4"
            },
            "nld": {
                "official": "Republiek Mauritius",
                "common": "Mauritius"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u0648\u0631\u06CC\u0633",
                "common": "\u0645\u0648\u0631\u06CC\u0633"
            },
            "pol": {
                "official": "Republika Mauritiusu",
                "common": "Mauritius"
            },
            "por": {
                "official": "Rep\xfablica das Maur\xedcias",
                "common": "Maur\xedcio"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u0432\u0440\u0438\u043A\u0438\u0439",
                "common": "\u041C\u0430\u0432\u0440\u0438\u043A\u0438\u0439"
            },
            "slk": {
                "official": "Maur\xedcijsk\xe1 republika",
                "common": "Maur\xedcius"
            },
            "spa": {
                "official": "Rep\xfablica de Mauricio",
                "common": "Mauricio"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u0443\u0440\u0438\u0446\u0438\u0458\u0443\u0441",
                "common": "\u041C\u0430\u0443\u0440\u0438\u0446\u0438\u0458\u0443\u0441"
            },
            "swe": {
                "official": "Republiken Mauritius",
                "common": "Mauritius"
            },
            "tur": {
                "official": "Mauritius Cumhuriyeti",
                "common": "Mauritius"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0648\u0631\u06CC\u0634\u0633",
                "common": "\u0645\u0648\u0631\u06CC\u0634\u0633"
            },
            "zho": {
                "official": "\u6BDB\u91CC\u6C42\u65AF\u5171\u548C\u56FD",
                "common": "\u6BDB\u91CC\u6C42\u65AF"
            }
        },
        "latlng": [
            -20.28333333,
            57.55
        ],
        "landlocked": false,
        "area": 2040,
        "demonyms": {
            "eng": {
                "f": "Mauritian",
                "m": "Mauritian"
            },
            "fra": {
                "f": "Mauricienne",
                "m": "Mauricien"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDFA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/PpKtZ4W3tir5iGrz7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/535828"
        },
        "population": 1265740,
        "gini": {
            "2017": 36.8
        },
        "fifa": "MRI",
        "car": {
            "signs": [
                "MS"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+04:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/mu.png",
            "svg": "https://flagcdn.com/mu.svg",
            "alt": "The flag of Mauritius is composed of four equal horizontal bands of red, blue, yellow and green."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/mu.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/mu.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -20.15,
                57.48
            ]
        }
    },
    {
        "name": {
            "common": "Barbados",
            "official": "Barbados",
            "nativeName": {
                "eng": {
                    "official": "Barbados",
                    "common": "Barbados"
                }
            }
        },
        "tld": [
            ".bb"
        ],
        "cca2": "BB",
        "ccn3": "052",
        "cca3": "BRB",
        "cioc": "BAR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "BBD": {
                "name": "Barbadian dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "246"
            ]
        },
        "capital": [
            "Bridgetown"
        ],
        "altSpellings": [
            "BB"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u0628\u0627\u0631\u0628\u0627\u062F\u0648\u0633",
                "common": "\u0628\u0627\u0631\u0628\u0627\u062F\u0648\u0633"
            },
            "bre": {
                "official": "Barbados",
                "common": "Barbados"
            },
            "ces": {
                "official": "Barbados",
                "common": "Barbados"
            },
            "cym": {
                "official": "Barbados",
                "common": "Barbados"
            },
            "deu": {
                "official": "Barbados",
                "common": "Barbados"
            },
            "est": {
                "official": "Barbados",
                "common": "Barbados"
            },
            "fin": {
                "official": "Barbados",
                "common": "Barbados"
            },
            "fra": {
                "official": "Barbade",
                "common": "Barbade"
            },
            "hrv": {
                "official": "Barbados",
                "common": "Barbados"
            },
            "hun": {
                "official": "Barbados",
                "common": "Barbados"
            },
            "ita": {
                "official": "Barbados",
                "common": "Barbados"
            },
            "jpn": {
                "official": "\u30D0\u30EB\u30D0\u30C9\u30B9",
                "common": "\u30D0\u30EB\u30D0\u30C9\u30B9"
            },
            "kor": {
                "official": "\uBC14\uBCA0\uC774\uB3C4\uC2A4",
                "common": "\uBC14\uBCA0\uC774\uB3C4\uC2A4"
            },
            "nld": {
                "official": "Barbados",
                "common": "Barbados"
            },
            "per": {
                "official": "\u0628\u0627\u0631\u0628\u0627\u062F\u0648\u0633",
                "common": "\u0628\u0627\u0631\u0628\u0627\u062F\u0648\u0633"
            },
            "pol": {
                "official": "Barbados",
                "common": "Barbados"
            },
            "por": {
                "official": "Barbados",
                "common": "Barbados"
            },
            "rus": {
                "official": "\u0411\u0430\u0440\u0431\u0430\u0434\u043E\u0441",
                "common": "\u0411\u0430\u0440\u0431\u0430\u0434\u043E\u0441"
            },
            "slk": {
                "official": "Barbados",
                "common": "Barbados"
            },
            "spa": {
                "official": "Barbados",
                "common": "Barbados"
            },
            "srp": {
                "official": "\u0411\u0430\u0440\u0431\u0430\u0434\u043E\u0441",
                "common": "\u0411\u0430\u0440\u0431\u0430\u0434\u043E\u0441"
            },
            "swe": {
                "official": "Barbados",
                "common": "Barbados"
            },
            "tur": {
                "official": "Barbados",
                "common": "Barbados"
            },
            "urd": {
                "official": "\u0628\u0627\u0631\u0628\u0627\u0688\u0648\u0633",
                "common": "\u0628\u0627\u0631\u0628\u0627\u0688\u0648\u0633"
            },
            "zho": {
                "official": "\u5DF4\u5DF4\u591A\u65AF",
                "common": "\u5DF4\u5DF4\u591A\u65AF"
            }
        },
        "latlng": [
            13.16666666,
            -59.53333333
        ],
        "landlocked": false,
        "area": 430,
        "demonyms": {
            "eng": {
                "f": "Barbadian",
                "m": "Barbadian"
            },
            "fra": {
                "f": "Barbadienne",
                "m": "Barbadien"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDE7",
        "maps": {
            "googleMaps": "https://goo.gl/maps/2m36v8STvbGAWd9c7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/547511"
        },
        "population": 287371,
        "fifa": "BRB",
        "car": {
            "signs": [
                "BDS"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/bb.png",
            "svg": "https://flagcdn.com/bb.svg",
            "alt": "The flag of Barbados is composed of three equal vertical bands of ultramarine, gold and ultramarine. The head of a black trident is centered in the gold band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/bb.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/bb.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                13.1,
                -59.62
            ]
        },
        "postalCode": {
            "format": "BB#####",
            "regex": "^(?:BB)*(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "R\xe9union",
            "official": "R\xe9union Island",
            "nativeName": {
                "fra": {
                    "official": "Ile de la R\xe9union",
                    "common": "La R\xe9union"
                }
            }
        },
        "tld": [
            ".re"
        ],
        "cca2": "RE",
        "ccn3": "638",
        "cca3": "REU",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "62"
            ]
        },
        "capital": [
            "Saint-Denis"
        ],
        "altSpellings": [
            "RE",
            "Reunion"
        ],
        "region": "Africa",
        "subregion": "Eastern Africa",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0632\u064A\u0631\u0629 \u0644\u0627 \u0631\u064A\u0648\u0646\u064A\u0648\u0646",
                "common": "\u0644\u0627 \u0631\u064A\u0648\u0646\u064A\u0648\u0646"
            },
            "bre": {
                "official": "Enez ar Re\xfcnion",
                "common": "Re\xfcnion"
            },
            "ces": {
                "official": "R\xe9union",
                "common": "R\xe9union"
            },
            "cym": {
                "official": "R\xe9union Island",
                "common": "R\xe9union"
            },
            "deu": {
                "official": "R\xe9union",
                "common": "R\xe9union"
            },
            "est": {
                "official": "R\xe9unioni departemang",
                "common": "R\xe9union"
            },
            "fin": {
                "official": "R\xe9union",
                "common": "R\xe9union"
            },
            "fra": {
                "official": "Ile de la R\xe9union",
                "common": "R\xe9union"
            },
            "hrv": {
                "official": "R\xe9union Island",
                "common": "R\xe9union"
            },
            "hun": {
                "official": "R\xe9union",
                "common": "R\xe9union"
            },
            "ita": {
                "official": "R\xe9union",
                "common": "Riunione"
            },
            "jpn": {
                "official": "\u30EC\u30E6\u30CB\u30AA\u30F3\u5CF6",
                "common": "\u30EC\u30E6\u30CB\u30AA\u30F3"
            },
            "kor": {
                "official": "\uB808\uC704\uB2C8\uC639",
                "common": "\uB808\uC704\uB2C8\uC639"
            },
            "nld": {
                "official": "R\xe9union",
                "common": "R\xe9union"
            },
            "per": {
                "official": "\u0631\u0626\u0648\u0646\u06CC\u0648\u0646",
                "common": "\u0631\u0626\u0648\u0646\u06CC\u0648\u0646"
            },
            "pol": {
                "official": "Reunion",
                "common": "Reunion"
            },
            "por": {
                "official": "Ilha da Reuni\xe3o",
                "common": "Reuni\xe3o"
            },
            "rus": {
                "official": "\u0420\u0435\u044E\u043D\u044C\u043E\u043D",
                "common": "\u0420\u0435\u044E\u043D\u044C\u043E\u043D"
            },
            "slk": {
                "official": "R\xe9unionsk\xfd z\xe1morsk\xfd departm\xe1n",
                "common": "R\xe9union"
            },
            "spa": {
                "official": "Isla de la Reuni\xf3n",
                "common": "Reuni\xf3n"
            },
            "srp": {
                "official": "\u0420\u0435\u0438\u043D\u0438\u043E\u043D",
                "common": "\u0420\u0435\u0438\u043D\u0438\u043E\u043D"
            },
            "swe": {
                "official": "R\xe9union",
                "common": "R\xe9union"
            },
            "tur": {
                "official": "R\xe9union",
                "common": "R\xe9union"
            },
            "urd": {
                "official": "\u0631\u06D2 \u06CC\u0648\u0646\u06CC\u0648\u06BA \u062C\u0632\u06CC\u0631\u06C1",
                "common": "\u0631\u06D2 \u06CC\u0648\u0646\u06CC\u0648\u06BA"
            },
            "zho": {
                "official": "\u7559\u5C3C\u65FA\u5C9B",
                "common": "\u7559\u5C3C\u65FA\u5C9B"
            }
        },
        "latlng": [
            -21.15,
            55.5
        ],
        "landlocked": false,
        "area": 2511,
        "demonyms": {
            "eng": {
                "f": "R\xe9unionese",
                "m": "R\xe9unionese"
            },
            "fra": {
                "f": "R\xe9unionnaise",
                "m": "R\xe9unionnais"
            }
        },
        "flag": "\uD83C\uDDF7\uD83C\uDDEA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/wWpBrXsp8UHVbah29",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1785276"
        },
        "population": 840974,
        "car": {
            "signs": [
                "F"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+04:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/re.png",
            "svg": "https://flagcdn.com/re.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -20.88,
                55.45
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^((97|98)(4|7|8)\\d{2})$"
        }
    },
    {
        "name": {
            "common": "British Indian Ocean Territory",
            "official": "British Indian Ocean Territory",
            "nativeName": {
                "eng": {
                    "official": "British Indian Ocean Territory",
                    "common": "British Indian Ocean Territory"
                }
            }
        },
        "tld": [
            ".io"
        ],
        "cca2": "IO",
        "ccn3": "086",
        "cca3": "IOT",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "46"
            ]
        },
        "capital": [
            "Diego Garcia"
        ],
        "altSpellings": [
            "IO"
        ],
        "region": "Africa",
        "subregion": "Eastern Africa",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u0625\u0642\u0644\u064A\u0645 \u0627\u0644\u0645\u062D\u064A\u0637 \u0627\u0644\u0647\u0646\u062F\u064A \u0627\u0644\u0628\u0631\u064A\u0637\u0627\u0646\u064A",
                "common": "\u0625\u0642\u0644\u064A\u0645 \u0627\u0644\u0645\u062D\u064A\u0637 \u0627\u0644\u0647\u0646\u062F\u064A \u0627\u0644\u0628\u0631\u064A\u0637\u0627\u0646\u064A"
            },
            "bre": {
                "official": "Tiriad breizhveurat Meurvor Indez",
                "common": "Tiriad breizhveurat Meurvor Indez"
            },
            "ces": {
                "official": "Britsk\xe9 indickooce\xe1nsk\xe9 \xfazem\xed",
                "common": "Britsk\xe9 indickooce\xe1nsk\xe9 \xfazem\xed"
            },
            "cym": {
                "official": "Tiriogaeth Brydeinig Cefnfor India",
                "common": "Tiriogaeth Brydeinig Cefnfor India"
            },
            "deu": {
                "official": "Britisches Territorium im Indischen Ozean",
                "common": "Britisches Territorium im Indischen Ozean"
            },
            "est": {
                "official": "Briti India ookeani ala",
                "common": "Briti India ookeani ala"
            },
            "fin": {
                "official": "Brittil\xe4inen Intian valtameren alue",
                "common": "Brittil\xe4inen Intian valtameren alue"
            },
            "fra": {
                "official": "Territoire britannique de l' oc\xe9an Indien",
                "common": "Territoire britannique de l'oc\xe9an Indien"
            },
            "hrv": {
                "official": "British Indian Ocean Territory",
                "common": "Britanski Indijskooceanski teritorij"
            },
            "hun": {
                "official": "Brit Indiai-\xf3ce\xe1ni Ter\xfclet",
                "common": "Brit Indiai-\xf3ce\xe1ni Ter\xfclet"
            },
            "ita": {
                "official": "Territorio britannico dell'Oceano Indiano",
                "common": "Territorio britannico dell'oceano indiano"
            },
            "jpn": {
                "official": "\u30A4\u30AE\u30EA\u30B9\u9818\u30A4\u30F3\u30C9\u6D0B\u5730\u57DF",
                "common": "\u30A4\u30AE\u30EA\u30B9\u9818\u30A4\u30F3\u30C9\u6D0B\u5730\u57DF"
            },
            "kor": {
                "official": "\uC778\uB3C4 \uACF5\uD654\uAD6D",
                "common": "\uC778\uB3C4"
            },
            "nld": {
                "official": "Brits Indische Oceaan Territorium",
                "common": "Britse Gebieden in de Indische Oceaan"
            },
            "per": {
                "official": "\u0642\u0644\u0645\u0631\u0648 \u0628\u0631\u06CC\u062A\u0627\u0646\u06CC\u0627 \u062F\u0631 \u0627\u0642\u06CC\u0627\u0646\u0648\u0633 \u0647\u0646\u062F",
                "common": "\u0642\u0644\u0645\u0631\u0648 \u0628\u0631\u06CC\u062A\u0627\u0646\u06CC\u0627 \u062F\u0631 \u0627\u0642\u06CC\u0627\u0646\u0648\u0633 \u0647\u0646\u062F"
            },
            "pol": {
                "official": "Brytyjskie Terytorium Oceanu Indyjskiego",
                "common": "Brytyjskie Terytorium Oceanu Indyjskiego"
            },
            "por": {
                "official": "British Indian Ocean Territory",
                "common": "Territ\xf3rio Brit\xe2nico do Oceano \xcdndico"
            },
            "rus": {
                "official": "\u0411\u0440\u0438\u0442\u0430\u043D\u0441\u043A\u0430\u044F \u0442\u0435\u0440\u0440\u0438\u0442\u043E\u0440\u0438\u044F \u0418\u043D\u0434\u0438\u0439\u0441\u043A\u043E\u0433\u043E \u043E\u043A\u0435\u0430\u043D\u0430",
                "common": "\u0411\u0440\u0438\u0442\u0430\u043D\u0441\u043A\u0430\u044F \u0442\u0435\u0440\u0440\u0438\u0442\u043E\u0440\u0438\u044F \u0432 \u0418\u043D\u0434\u0438\u0439\u0441\u043A\u043E\u043C \u043E\u043A\u0435\u0430\u043D\u0435"
            },
            "slk": {
                "official": "Britsk\xe9 indickooce\xe1nske \xfazemie",
                "common": "Britsk\xe9 indickooce\xe1nske \xfazemie"
            },
            "spa": {
                "official": "Territorio Brit\xe1nico del Oc\xe9ano \xcdndico",
                "common": "Territorio Brit\xe1nico del Oc\xe9ano \xcdndico"
            },
            "srp": {
                "official": "\u0411\u0440\u0438\u0442\u0430\u043D\u0441\u043A\u0430 \u0442\u0435\u0440\u0438\u0442\u043E\u0440\u0438\u0458\u0430 \u0418\u043D\u0434\u0438\u0458\u0441\u043A\u043E\u0433 \u043E\u043A\u0435\u0430\u043D\u0430",
                "common": "\u0411\u0440\u0438\u0442\u0430\u043D\u0441\u043A\u0430 \u0442\u0435\u0440\u0438\u0442\u043E\u0440\u0438\u0458\u0430 \u0418\u043D\u0434\u0438\u0458\u0441\u043A\u043E\u0433 \u043E\u043A\u0435\u0430\u043D\u0430"
            },
            "swe": {
                "official": "Brittiska territoriet i Indiska Oceanen",
                "common": "Brittiska territoriet i Indiska Oceanen"
            },
            "tur": {
                "official": "Britanya Hint Okyanusu Topraklar\u0131",
                "common": "Britanya Hint Okyanusu Topraklar\u0131"
            },
            "urd": {
                "official": "\u0628\u0631\u0637\u0627\u0646\u0648\u06CC \u0628\u062D\u0631\u06C1\u0646\u062F \u062E\u0637\u06C1",
                "common": "\u0628\u0631\u0637\u0627\u0646\u0648\u06CC \u0628\u062D\u0631\u06C1\u0646\u062F \u062E\u0637\u06C1"
            },
            "zho": {
                "official": "\u82F1\u5C5E\u5370\u5EA6\u6D0B\u9886\u5730",
                "common": "\u82F1\u5C5E\u5370\u5EA6\u6D0B\u9886\u5730"
            }
        },
        "latlng": [
            -6,
            71.5
        ],
        "landlocked": false,
        "area": 60,
        "demonyms": {
            "eng": {
                "f": "Indian",
                "m": "Indian"
            }
        },
        "flag": "\uD83C\uDDEE\uD83C\uDDF4",
        "maps": {
            "googleMaps": "https://goo.gl/maps/bheNucgekVEYozoi6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1993867"
        },
        "population": 3000,
        "car": {
            "signs": [
                "GB"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+06:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/io.png",
            "svg": "https://flagcdn.com/io.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -7.3,
                72.4
            ]
        }
    },
    {
        "name": {
            "common": "Syria",
            "official": "Syrian Arab Republic",
            "nativeName": {
                "ara": {
                    "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0648\u0631\u064A\u0629",
                    "common": "\u0633\u0648\u0631\u064A\u0627"
                }
            }
        },
        "tld": [
            ".sy",
            "\u0633\u0648\u0631\u064A\u0627."
        ],
        "cca2": "SY",
        "ccn3": "760",
        "cca3": "SYR",
        "cioc": "SYR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "SYP": {
                "name": "Syrian pound",
                "symbol": "\xa3"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "63"
            ]
        },
        "capital": [
            "Damascus"
        ],
        "altSpellings": [
            "SY",
            "Syrian Arab Republic",
            "Al-Jumh\u016Br\u012Byah Al-\u02BBArab\u012Byah As-S\u016Br\u012Byah"
        ],
        "region": "Asia",
        "subregion": "Western Asia",
        "languages": {
            "ara": "Arabic"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0648\u0631\u064A\u0629",
                "common": "\u0633\u0648\u0631\u064A\u0627"
            },
            "bre": {
                "official": "Republik Arab Siriat",
                "common": "Siria"
            },
            "ces": {
                "official": "Syrsk\xe1 arabsk\xe1 republika",
                "common": "S\xfdrie"
            },
            "cym": {
                "official": "Syrian Arab Republic",
                "common": "Syria"
            },
            "deu": {
                "official": "Arabische Republik Syrien",
                "common": "Syrien"
            },
            "est": {
                "official": "S\xfc\xfcria Araabia Vabariik",
                "common": "S\xfc\xfcria"
            },
            "fin": {
                "official": "Syyrian arabitasavalta",
                "common": "Syyria"
            },
            "fra": {
                "official": "R\xe9publique arabe syrienne",
                "common": "Syrie"
            },
            "hrv": {
                "official": "Sirijska Arapska Republika",
                "common": "Sirija"
            },
            "hun": {
                "official": "Sz\xedriai Arab K\xf6zt\xe1rsas\xe1g",
                "common": "Sz\xedria"
            },
            "ita": {
                "official": "Repubblica araba siriana",
                "common": "Siria"
            },
            "jpn": {
                "official": "\u30B7\u30EA\u30A2\u30A2\u30E9\u30D6\u5171\u548C\u56FD",
                "common": "\u30B7\u30EA\u30A2\u30FB\u30A2\u30E9\u30D6\u5171\u548C\u56FD"
            },
            "kor": {
                "official": "\uC2DC\uB9AC\uC544 \uC544\uB78D \uACF5\uD654\uAD6D",
                "common": "\uC2DC\uB9AC\uC544"
            },
            "nld": {
                "official": "Syrische Arabische Republiek",
                "common": "Syri\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0639\u0631\u0628\u06CC \u0633\u0648\u0631\u06CC\u0647",
                "common": "\u0633\u0648\u0631\u06CC\u0647"
            },
            "pol": {
                "official": "Syryjska Republika Arabska",
                "common": "Syria"
            },
            "por": {
                "official": "Rep\xfablica \xc1rabe S\xedria",
                "common": "S\xedria"
            },
            "rus": {
                "official": "\u0421\u0438\u0440\u0438\u0439\u0441\u043A\u0430\u044F \u0410\u0440\u0430\u0431\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0421\u0438\u0440\u0438\u044F"
            },
            "slk": {
                "official": "S\xfdrska arabsk\xe1 republika",
                "common": "S\xfdria"
            },
            "spa": {
                "official": "Rep\xfablica \xc1rabe Siria",
                "common": "Siria"
            },
            "srp": {
                "official": "\u0421\u0438\u0440\u0438\u0458\u0441\u043A\u0430 \u0410\u0440\u0430\u043F\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0421\u0438\u0440\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Syriska arabiska republiken",
                "common": "Syrien"
            },
            "tur": {
                "official": "Suriye Arap Cumhuriyeti",
                "common": "Suriye"
            },
            "urd": {
                "official": "\u0639\u0631\u0628 \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0648\u0631\u06CC\u06C1",
                "common": "\u0633\u0648\u0631\u06CC\u06C1"
            },
            "zho": {
                "official": "\u53D9\u5229\u4E9A\u963F\u62C9\u4F2F\u5171\u548C\u56FD",
                "common": "\u53D9\u5229\u4E9A"
            }
        },
        "latlng": [
            35,
            38
        ],
        "landlocked": false,
        "borders": [
            "IRQ",
            "ISR",
            "JOR",
            "LBN",
            "TUR"
        ],
        "area": 185180,
        "demonyms": {
            "eng": {
                "f": "Syrian",
                "m": "Syrian"
            },
            "fra": {
                "f": "Syrienne",
                "m": "Syrien"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDFE",
        "maps": {
            "googleMaps": "https://goo.gl/maps/Xe3VnFbwdb4nv2SM9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/184840"
        },
        "population": 17500657,
        "gini": {
            "2003": 37.5
        },
        "fifa": "SYR",
        "car": {
            "signs": [
                "SYR"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/sy.png",
            "svg": "https://flagcdn.com/sy.svg",
            "alt": "The flag of Syria is composed of three equal horizontal bands of red, white and black. At the center of the white band are two small five-pointed green stars arranged in a horizontal line."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/sy.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/sy.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                33.5,
                36.3
            ]
        }
    },
    {
        "name": {
            "common": "Egypt",
            "official": "Arab Republic of Egypt",
            "nativeName": {
                "ara": {
                    "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u0635\u0631 \u0627\u0644\u0639\u0631\u0628\u064A\u0629",
                    "common": "\u0645\u0635\u0631"
                }
            }
        },
        "tld": [
            ".eg",
            ".\u0645\u0635\u0631"
        ],
        "cca2": "EG",
        "ccn3": "818",
        "cca3": "EGY",
        "cioc": "EGY",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EGP": {
                "name": "Egyptian pound",
                "symbol": "\xa3"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "0"
            ]
        },
        "capital": [
            "Cairo"
        ],
        "altSpellings": [
            "EG",
            "Arab Republic of Egypt"
        ],
        "region": "Africa",
        "subregion": "Northern Africa",
        "languages": {
            "ara": "Arabic"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u0635\u0631 \u0627\u0644\u0639\u0631\u0628\u064A\u0629",
                "common": "\u0645\u0635\u0631"
            },
            "bre": {
                "official": "Republik arab Egipt",
                "common": "Egipt"
            },
            "ces": {
                "official": "Egyptsk\xe1 arabsk\xe1 republika",
                "common": "Egypt"
            },
            "cym": {
                "official": "Gweriniaeth Arabaidd yr Aifft",
                "common": "Yr Aifft"
            },
            "deu": {
                "official": "Arabische Republik \xc4gypten",
                "common": "\xc4gypten"
            },
            "est": {
                "official": "Egiptuse Araabia Vabariik",
                "common": "Egiptus"
            },
            "fin": {
                "official": "Egyptin arabitasavalta",
                "common": "Egypti"
            },
            "fra": {
                "official": "R\xe9publique arabe d'\xc9gypte",
                "common": "\xc9gypte"
            },
            "hrv": {
                "official": "Arapska Republika Egipat",
                "common": "Egipat"
            },
            "hun": {
                "official": "Egyiptomi Arab K\xf6zt\xe1rsas\xe1g",
                "common": "Egyiptom"
            },
            "ita": {
                "official": "Repubblica araba d'Egitto",
                "common": "Egitto"
            },
            "jpn": {
                "official": "\u30A8\u30B8\u30D7\u30C8\xb7\u30A2\u30E9\u30D6\u5171\u548C\u56FD",
                "common": "\u30A8\u30B8\u30D7\u30C8"
            },
            "kor": {
                "official": "\uC774\uC9D1\uD2B8 \uC544\uB78D \uACF5\uD654\uAD6D",
                "common": "\uC774\uC9D1\uD2B8"
            },
            "nld": {
                "official": "Arabische Republiek Egypte",
                "common": "Egypte"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0639\u0631\u0628\u06CC \u0645\u0635\u0631",
                "common": "\u0645\u0635\u0631"
            },
            "pol": {
                "official": "Arabska Republika Egiptu",
                "common": "Egipt"
            },
            "por": {
                "official": "Rep\xfablica \xc1rabe do Egipto",
                "common": "Egito"
            },
            "rus": {
                "official": "\u0410\u0440\u0430\u0431\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0415\u0433\u0438\u043F\u0435\u0442",
                "common": "\u0415\u0433\u0438\u043F\u0435\u0442"
            },
            "slk": {
                "official": "Egyptsk\xe1 arabsk\xe1 republika",
                "common": "Egypt"
            },
            "spa": {
                "official": "Rep\xfablica \xc1rabe de Egipto",
                "common": "Egipto"
            },
            "srp": {
                "official": "\u0410\u0440\u0430\u043F\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0415\u0433\u0438\u043F\u0430\u0442",
                "common": "\u0415\u0433\u0438\u043F\u0430\u0442"
            },
            "swe": {
                "official": "Arabrepubliken Egypten",
                "common": "Egypten"
            },
            "tur": {
                "official": "M\u0131s\u0131r Arap Cumhuriyeti",
                "common": "M\u0131s\u0131r"
            },
            "urd": {
                "official": "\u0645\u0635\u0631\u06CC \u0639\u0631\u0628 \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1",
                "common": "\u0645\u0635\u0631"
            },
            "zho": {
                "official": "\u963F\u62C9\u4F2F\u57C3\u53CA\u5171\u548C\u56FD",
                "common": "\u57C3\u53CA"
            }
        },
        "latlng": [
            27,
            30
        ],
        "landlocked": false,
        "borders": [
            "ISR",
            "LBY",
            "PSE",
            "SDN"
        ],
        "area": 1002450,
        "demonyms": {
            "eng": {
                "f": "Egyptian",
                "m": "Egyptian"
            },
            "fra": {
                "f": "\xc9gyptienne",
                "m": "\xc9gyptien"
            }
        },
        "flag": "\uD83C\uDDEA\uD83C\uDDEC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/uoDRhXbsqjG6L7VG7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1473947"
        },
        "population": 102334403,
        "gini": {
            "2017": 31.5
        },
        "fifa": "EGY",
        "car": {
            "signs": [
                "ET"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/eg.png",
            "svg": "https://flagcdn.com/eg.svg",
            "alt": "The flag of Egypt is composed of three equal horizontal bands of red, white and black, with Egypt's national emblem \u2014 a hoist-side facing gold eagle of Saladin \u2014 centered in the white band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/eg.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/eg.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                30.05,
                31.25
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "S\xe3o Tom\xe9 and Pr\xedncipe",
            "official": "Democratic Republic of S\xe3o Tom\xe9 and Pr\xedncipe",
            "nativeName": {
                "por": {
                    "official": "Rep\xfablica Democr\xe1tica do S\xe3o Tom\xe9 e Pr\xedncipe",
                    "common": "S\xe3o Tom\xe9 e Pr\xedncipe"
                }
            }
        },
        "tld": [
            ".st"
        ],
        "cca2": "ST",
        "ccn3": "678",
        "cca3": "STP",
        "cioc": "STP",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "STN": {
                "name": "S\xe3o Tom\xe9 and Pr\xedncipe dobra",
                "symbol": "Db"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "39"
            ]
        },
        "capital": [
            "S\xe3o Tom\xe9"
        ],
        "altSpellings": [
            "ST",
            "Democratic Republic of S\xe3o Tom\xe9 and Pr\xedncipe",
            "Sao Tome and Principe",
            "Rep\xfablica Democr\xe1tica de S\xe3o Tom\xe9 e Pr\xedncipe"
        ],
        "region": "Africa",
        "subregion": "Middle Africa",
        "languages": {
            "por": "Portuguese"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u0627\u0648 \u062A\u0648\u0645\u064A \u0648\u0628\u0631\u064A\u0646\u0633\u064A\u0628 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629",
                "common": "\u0633\u0627\u0648 \u062A\u0648\u0645\u064A \u0648\u0628\u0631\u064A\u0646\u0633\u064A\u0628"
            },
            "bre": {
                "official": "Republik Demokratel S\xe3o Tom\xe9 ha Pr\xedncipe",
                "common": "S\xe3o Tom\xe9 ha Pr\xedncipe"
            },
            "ces": {
                "official": "Demokratick\xe1 republika Svat\xfd Tom\xe1\u0161 a Princ\u016Fv ostrov",
                "common": "Svat\xfd Tom\xe1\u0161 a Princ\u016Fv ostrov"
            },
            "cym": {
                "official": "Democratic Republic of S\xe3o Tom\xe9 and Pr\xedncipe",
                "common": "S\xe3o Tom\xe9 and Pr\xedncipe"
            },
            "deu": {
                "official": "Demokratische Republik S\xe3o Tom\xe9 und Pr\xedncipe",
                "common": "S\xe3o Tom\xe9 und Pr\xedncipe"
            },
            "est": {
                "official": "S\xe3o Tom\xe9 ja Pr\xedncipe Demokraatlik Vabariik",
                "common": "S\xe3o Tom\xe9 ja Pr\xedncipe"
            },
            "fin": {
                "official": "S\xe3o Tom\xe9 ja Pr\xedncipen demokraattinen tasavalta",
                "common": "S\xe3o T\xe9me ja Pr\xedncipe"
            },
            "fra": {
                "official": "R\xe9publique d\xe9mocratique de S\xe3o Tom\xe9 et Pr\xedncipe",
                "common": "S\xe3o Tom\xe9 et Pr\xedncipe"
            },
            "hrv": {
                "official": "Demokratska Republika S\xe3o Tome i Principe",
                "common": "Sveti Toma i Princip"
            },
            "hun": {
                "official": "S\xe3o Tom\xe9 \xe9s Pr\xedncipe Demokratikus K\xf6zt\xe1rsas\xe1g",
                "common": "S\xe3o Tom\xe9 \xe9s Pr\xedncipe"
            },
            "ita": {
                "official": "Repubblica democratica di S\xe3o Tom\xe9 e Pr\xedncipe",
                "common": "S\xe3o Tom\xe9 e Pr\xedncipe"
            },
            "jpn": {
                "official": "\u30B5\u30F3\u30C8\u30E1\xb7\u30D7\u30EA\u30F3\u30B7\u30DA\u6C11\u4E3B\u5171\u548C\u56FD",
                "common": "\u30B5\u30F3\u30C8\u30E1\u30FB\u30D7\u30EA\u30F3\u30B7\u30DA"
            },
            "kor": {
                "official": "\uC0C1\uD22C\uBA54 \uD504\uB9B0\uC2DC\uD398 \uBBFC\uC8FC \uACF5\uD654\uAD6D",
                "common": "\uC0C1\uD22C\uBA54 \uD504\uB9B0\uC2DC\uD398"
            },
            "nld": {
                "official": "Democratische Republiek Sao Tom\xe9 en Principe",
                "common": "Sao Tom\xe9 en Principe"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9 \u0633\u0627\u0626\u0648\u062A\u0648\u0645\u0647 \u0648 \u067E\u0631\u0646\u0633\u06CC\u067E",
                "common": "\u0633\u0627\u0626\u0648\u062A\u0648\u0645\u0647 \u0648 \u067E\u0631\u0646\u0633\u06CC\u067E"
            },
            "pol": {
                "official": "Demokratyczna Republika Wysp \u015Awi\u0119tego Tomasza i Ksi\u0105\u017C\u0119cej",
                "common": "Wyspy \u015Awi\u0119tego Tomasza i Ksi\u0105\u017C\u0119ca"
            },
            "por": {
                "official": "Rep\xfablica Democr\xe1tica de S\xe3o Tom\xe9 e Pr\xedncipe",
                "common": "S\xe3o Tom\xe9 e Pr\xedncipe"
            },
            "rus": {
                "official": "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0430\u043D-\u0422\u043E\u043C\u0435 \u0438 \u041F\u0440\u0438\u043D\u0441\u0438\u043F\u0438",
                "common": "\u0421\u0430\u043D-\u0422\u043E\u043C\u0435 \u0438 \u041F\u0440\u0438\u043D\u0441\u0438\u043F\u0438"
            },
            "slk": {
                "official": "Demokratick\xe1 republika Sv\xe4t\xe9ho Tom\xe1\u0161a A princovho ostrova",
                "common": "Sv\xe4t\xfd Tom\xe1\u0161 a Princov ostrov"
            },
            "spa": {
                "official": "Rep\xfablica Democr\xe1tica de Santo Tom\xe9 y Pr\xedncipe",
                "common": "Santo Tom\xe9 y Pr\xedncipe"
            },
            "srp": {
                "official": "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0430\u043E \u0422\u043E\u043C\u0435 \u0438 \u041F\u0440\u0438\u043D\u0441\u0438\u043F\u0435",
                "common": "\u0421\u0430\u043E \u0422\u043E\u043C\u0435 \u0438 \u041F\u0440\u0438\u043D\u0441\u0438\u043F\u0435"
            },
            "swe": {
                "official": "Demokratiska republiken S\xe3o Tom\xe9 och Pr\xedncipe",
                "common": "S\xe3o Tom\xe9 och Pr\xedncipe"
            },
            "tur": {
                "official": "S\xe3o Tom\xe9 ve Pr\xedncipe Demokratik Cumhuriyeti",
                "common": "S\xe3o Tom\xe9 ve Pr\xedncipe"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0627\u0624 \u0679\u0648\u0645\u06D2 \u0648 \u067E\u0631\u0646\u0633\u067E\u06D2",
                "common": "\u0633\u0627\u0624 \u0679\u0648\u0645\u06D2 \u0648 \u067E\u0631\u0646\u0633\u067E\u06D2"
            },
            "zho": {
                "official": "\u5723\u591A\u7F8E\u548C\u666E\u6797\u897F\u6BD4\u6C11\u4E3B\u5171\u548C\u56FD",
                "common": "\u5723\u591A\u7F8E\u548C\u666E\u6797\u897F\u6BD4"
            }
        },
        "latlng": [
            1,
            7
        ],
        "landlocked": false,
        "area": 964,
        "demonyms": {
            "eng": {
                "f": "Sao Tomean",
                "m": "Sao Tomean"
            },
            "fra": {
                "f": "Santom\xe9enne",
                "m": "Santom\xe9en"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDF9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/9EUppm13RtPX9oF46",
            "openStreetMaps": "https://www.openstreetmap.org/relation/535880"
        },
        "population": 219161,
        "gini": {
            "2017": 56.3
        },
        "fifa": "STP",
        "car": {
            "signs": [
                "STP"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/st.png",
            "svg": "https://flagcdn.com/st.svg",
            "alt": "The flag of South Sudan is composed of three equal horizontal bands of black, red with white top and bottom edges, and green. A blue equilateral triangle which spans about two-fifth the width of the field is superimposed on the hoist side with its base on the hoist end of the field. At the center of this triangle is a five-pointed yellow star."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/st.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/st.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                0.34,
                6.73
            ]
        }
    },
    {
        "name": {
            "common": "Kiribati",
            "official": "Independent and Sovereign Republic of Kiribati",
            "nativeName": {
                "eng": {
                    "official": "Independent and Sovereign Republic of Kiribati",
                    "common": "Kiribati"
                },
                "gil": {
                    "official": "Ribaberiki Kiribati",
                    "common": "Kiribati"
                }
            }
        },
        "tld": [
            ".ki"
        ],
        "cca2": "KI",
        "ccn3": "296",
        "cca3": "KIR",
        "cioc": "KIR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "AUD": {
                "name": "Australian dollar",
                "symbol": "$"
            },
            "KID": {
                "name": "Kiribati dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "86"
            ]
        },
        "capital": [
            "South Tarawa"
        ],
        "altSpellings": [
            "KI",
            "Republic of Kiribati",
            "Ribaberiki Kiribati"
        ],
        "region": "Oceania",
        "subregion": "Micronesia",
        "languages": {
            "eng": "English",
            "gil": "Gilbertese"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u064A\u0631\u064A\u0628\u0627\u062A\u064A",
                "common": "\u0643\u064A\u0631\u064A\u0628\u0627\u062A\u064A"
            },
            "bre": {
                "official": "Republik Kiribati",
                "common": "Kiribati"
            },
            "ces": {
                "official": "Republika Kiribati",
                "common": "Kiribati"
            },
            "cym": {
                "official": "Independent and Sovereign Republic of Kiribati",
                "common": "Kiribati"
            },
            "deu": {
                "official": "Republik Kiribati",
                "common": "Kiribati"
            },
            "est": {
                "official": "Kiribati Vabariik",
                "common": "Kiribati"
            },
            "fin": {
                "official": "Kiribatin tasavalta",
                "common": "Kiribati"
            },
            "fra": {
                "official": "R\xe9publique de Kiribati",
                "common": "Kiribati"
            },
            "hrv": {
                "official": "Samostalne i suverene Republike Kiribati",
                "common": "Kiribati"
            },
            "hun": {
                "official": "Kiribati K\xf6zt\xe1rsas\xe1g",
                "common": "Kiribati"
            },
            "ita": {
                "official": "Repubblica indipendente e sovrano di Kiribati",
                "common": "Kiribati"
            },
            "jpn": {
                "official": "\u30AD\u30EA\u30D0\u30B9\u306E\u72EC\u7ACB\u3068\u4E3B\u6A29\u5171\u548C\u56FD",
                "common": "\u30AD\u30EA\u30D0\u30B9"
            },
            "kor": {
                "official": "\uD0A4\uB9AC\uBC14\uC2DC \uACF5\uD654\uAD6D",
                "common": "\uD0A4\uB9AC\uBC14\uC2DC"
            },
            "nld": {
                "official": "Onafhankelijke en soevereine republiek Kiribati",
                "common": "Kiribati"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u06CC\u0631\u06CC\u0628\u0627\u062A\u06CC",
                "common": "\u06A9\u06CC\u0631\u06CC\u0628\u0627\u062A\u06CC"
            },
            "pol": {
                "official": "Republika Kiribati",
                "common": "Kiribati"
            },
            "por": {
                "official": "Independente e soberano Rep\xfablica de Kiribati",
                "common": "Kiribati"
            },
            "rus": {
                "official": "\u041D\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043C\u043E\u0439 \u0438 \u0441\u0443\u0432\u0435\u0440\u0435\u043D\u043D\u043E\u0439 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0438 \u041A\u0438\u0440\u0438\u0431\u0430\u0442\u0438",
                "common": "\u041A\u0438\u0440\u0438\u0431\u0430\u0442\u0438"
            },
            "slk": {
                "official": "Kiribatsk\xe1 republika",
                "common": "Kiribati"
            },
            "spa": {
                "official": "Rep\xfablica Independiente y Soberano de Kiribati",
                "common": "Kiribati"
            },
            "srp": {
                "official": "\u041D\u0435\u0437\u0430\u0432\u0438\u0441\u043D\u0430 \u0438 \u0421\u0443\u0432\u0435\u0440\u0435\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0438\u0440\u0438\u0431\u0430\u0442\u0438",
                "common": "\u041A\u0438\u0440\u0438\u0431\u0430\u0442\u0438"
            },
            "swe": {
                "official": "Republiken Kiribati",
                "common": "Kiribati"
            },
            "tur": {
                "official": "Kiribati Cumhuriyeti",
                "common": "Kiribati"
            },
            "urd": {
                "official": "\u0633\u0644\u0637\u0646\u062A \u0622\u0632\u0627\u062F \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u06CC\u0631\u06CC\u0628\u0627\u062A\u06CC",
                "common": "\u06A9\u06CC\u0631\u06CC\u0628\u0627\u062A\u06CC"
            },
            "zho": {
                "official": "\u57FA\u91CC\u5DF4\u65AF\u5171\u548C\u56FD",
                "common": "\u57FA\u91CC\u5DF4\u65AF"
            }
        },
        "latlng": [
            1.41666666,
            173
        ],
        "landlocked": false,
        "area": 811,
        "demonyms": {
            "eng": {
                "f": "I-Kiribati",
                "m": "I-Kiribati"
            },
            "fra": {
                "f": "Kiribatienne",
                "m": "Kiribatien"
            }
        },
        "flag": "\uD83C\uDDF0\uD83C\uDDEE",
        "maps": {
            "googleMaps": "https://goo.gl/maps/NBfYvrndW4skAimw9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/571178"
        },
        "population": 119446,
        "gini": {
            "2006": 37
        },
        "car": {
            "signs": [
                "KIR"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+12:00",
            "UTC+13:00",
            "UTC+14:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ki.png",
            "svg": "https://flagcdn.com/ki.svg",
            "alt": "The flag of Kiribati is divided into two halves. While the upper half has a red field, at the center of which is a yellow frigate bird flying over the top half of a rising yellow sun with seventeen visible rays, the lower half is composed of six horizontal wavy bands of white alternating with blue to depict the ocean."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ki.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ki.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                1.33,
                172.98
            ]
        }
    },
    {
        "name": {
            "common": "Timor-Leste",
            "official": "Democratic Republic of Timor-Leste",
            "nativeName": {
                "por": {
                    "official": "Rep\xfablica Democr\xe1tica de Timor-Leste",
                    "common": "Timor-Leste"
                },
                "tet": {
                    "official": "Rep\xfablika Demokr\xe1tika Tim\xf3r-Leste",
                    "common": "Tim\xf3r-Leste"
                }
            }
        },
        "tld": [
            ".tl"
        ],
        "cca2": "TL",
        "ccn3": "626",
        "cca3": "TLS",
        "cioc": "TLS",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "70"
            ]
        },
        "capital": [
            "Dili"
        ],
        "altSpellings": [
            "TL",
            "East Timor",
            "Democratic Republic of Timor-Leste",
            "Rep\xfablica Democr\xe1tica de Timor-Leste",
            "Rep\xfablika Demokr\xe1tika Tim\xf3r-Leste",
            "Tim\xf3r Lorosa'e",
            "Timor Lorosae"
        ],
        "region": "Asia",
        "subregion": "South-Eastern Asia",
        "languages": {
            "por": "Portuguese",
            "tet": "Tetum"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062A\u064A\u0645\u0648\u0631 \u0627\u0644\u0634\u0631\u0642\u064A\u0629 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629",
                "common": "\u062A\u064A\u0645\u0648\u0631 \u0627\u0644\u0634\u0631\u0642\u064A\u0629"
            },
            "bre": {
                "official": "Republik demakratel Timor ar Reter",
                "common": "Timor ar Reter"
            },
            "ces": {
                "official": "Demokratick\xe1 republika V\xfdchodn\xed Timor",
                "common": "V\xfdchodn\xed Timor"
            },
            "cym": {
                "official": "Democratic Republic of Timor-Leste",
                "common": "Timor-Leste"
            },
            "deu": {
                "official": "Demokratische Republik Timor-Leste",
                "common": "Osttimor"
            },
            "est": {
                "official": "Timor-Leste Demokraatlik Vabariik",
                "common": "Ida-Timor"
            },
            "fin": {
                "official": "It\xe4-Timorin demokraattinen tasavalta",
                "common": "It\xe4-Timor"
            },
            "fra": {
                "official": "R\xe9publique d\xe9mocratique du Timor oriental",
                "common": "Timor oriental"
            },
            "hrv": {
                "official": "Demokratska Republika Timor-Leste",
                "common": "Isto\u010Dni Timor"
            },
            "hun": {
                "official": "Kelet-timori Demokratikus K\xf6zt\xe1rsas\xe1g",
                "common": "Kelet-Timor"
            },
            "ita": {
                "official": "Repubblica Democratica di Timor Est",
                "common": "Timor Est"
            },
            "jpn": {
                "official": "\u6771\u30C6\u30A3\u30E2\u30FC\u30EB\u6C11\u4E3B\u5171\u548C\u56FD",
                "common": "\u6771\u30C6\u30A3\u30E2\u30FC\u30EB"
            },
            "kor": {
                "official": "\uB3D9\uD2F0\uBAA8\uB974 \uBBFC\uC8FC \uACF5\uD654\uAD6D",
                "common": "\uB3D9\uD2F0\uBAA8\uB974"
            },
            "nld": {
                "official": "Democratische Republiek Oost-Timor",
                "common": "Oost-Timor"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9 \u062A\u06CC\u0645\u0648\u0631 \u0634\u0631\u0642\u06CC",
                "common": "\u062A\u06CC\u0645\u0648\u0631 \u0634\u0631\u0642\u06CC"
            },
            "pol": {
                "official": "Demokratyczna Republika Timoru Wschodniego",
                "common": "Timor Wschodni"
            },
            "por": {
                "official": "Rep\xfablica Democr\xe1tica de Timor-Leste",
                "common": "Timor-Leste"
            },
            "rus": {
                "official": "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u0438\u043C\u043E\u0440 -\u041B\u0435\u0448\u0442\u0438",
                "common": "\u0412\u043E\u0441\u0442\u043E\u0447\u043D\u044B\u0439 \u0422\u0438\u043C\u043E\u0440"
            },
            "slk": {
                "official": "V\xfdchodotimorsk\xe1 demokratick\xe1 republika",
                "common": "V\xfdchodn\xfd Timor"
            },
            "spa": {
                "official": "Rep\xfablica Democr\xe1tica de Timor-Leste",
                "common": "Timor Oriental"
            },
            "srp": {
                "official": "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u0441\u0442\u043E\u0447\u043D\u0438 \u0422\u0438\u043C\u043E\u0440",
                "common": "\u0418\u0441\u0442\u043E\u0447\u043D\u0438 \u0422\u0438\u043C\u043E\u0440"
            },
            "swe": {
                "official": "Demokratiska republiken \xd6sttimor",
                "common": "\xd6sttimor"
            },
            "tur": {
                "official": "Do\u011Fu Timor Demokratik Cumhuriyeti",
                "common": "Do\u011Fu Timor"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0634\u0631\u0642\u06CC \u062A\u06CC\u0645\u0648\u0631",
                "common": "\u0645\u0634\u0631\u0642\u06CC \u062A\u06CC\u0645\u0648\u0631"
            },
            "zho": {
                "official": "\u4E1C\u5E1D\u6C76\u6C11\u4E3B\u5171\u548C\u56FD",
                "common": "\u4E1C\u5E1D\u6C76"
            }
        },
        "latlng": [
            -8.83333333,
            125.91666666
        ],
        "landlocked": false,
        "borders": [
            "IDN"
        ],
        "area": 14874,
        "demonyms": {
            "eng": {
                "f": "East Timorese",
                "m": "East Timorese"
            },
            "fra": {
                "f": "Est-timoraise",
                "m": "Est-timorais"
            }
        },
        "flag": "\uD83C\uDDF9\uD83C\uDDF1",
        "maps": {
            "googleMaps": "https://goo.gl/maps/sFqBC9zjgUXPR1iTA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/305142"
        },
        "population": 1318442,
        "gini": {
            "2014": 28.7
        },
        "fifa": "TLS",
        "car": {
            "signs": [
                "TL"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+09:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/tl.png",
            "svg": "https://flagcdn.com/tl.svg",
            "alt": "The flag of Timor-Leste has a red field with two isosceles triangles which share a common base on the hoist end. The smaller black triangle, which bears a five-pointed white star at its center and spans one-third the width of the field, is superimposed on the larger yellow triangle that extends to the center of the field."
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -8.58,
                125.6
            ]
        }
    },
    {
        "name": {
            "common": "Lesotho",
            "official": "Kingdom of Lesotho",
            "nativeName": {
                "eng": {
                    "official": "Kingdom of Lesotho",
                    "common": "Lesotho"
                },
                "sot": {
                    "official": "Kingdom of Lesotho",
                    "common": "Lesotho"
                }
            }
        },
        "tld": [
            ".ls"
        ],
        "cca2": "LS",
        "ccn3": "426",
        "cca3": "LSO",
        "cioc": "LES",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "LSL": {
                "name": "Lesotho loti",
                "symbol": "L"
            },
            "ZAR": {
                "name": "South African rand",
                "symbol": "R"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "66"
            ]
        },
        "capital": [
            "Maseru"
        ],
        "altSpellings": [
            "LS",
            "Kingdom of Lesotho",
            "Muso oa Lesotho"
        ],
        "region": "Africa",
        "subregion": "Southern Africa",
        "languages": {
            "eng": "English",
            "sot": "Sotho"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0645\u0644\u0643\u0629 \u0644\u064A\u0633\u0648\u062A\u0648",
                "common": "\u0644\u064A\u0633\u0648\u062A\u0648"
            },
            "bre": {
                "official": "Rouantelezh Lesotho",
                "common": "Lesotho"
            },
            "ces": {
                "official": "Lesothsk\xe9 kr\xe1lovstv\xed",
                "common": "Lesotho"
            },
            "cym": {
                "official": "Kingdom of Lesotho",
                "common": "Lesotho"
            },
            "deu": {
                "official": "K\xf6nigreich Lesotho",
                "common": "Lesotho"
            },
            "est": {
                "official": "Lesotho Kuningriik",
                "common": "Lesotho"
            },
            "fin": {
                "official": "Lesothon kuningaskunta",
                "common": "Lesotho"
            },
            "fra": {
                "official": "Royaume du Lesotho",
                "common": "Lesotho"
            },
            "hrv": {
                "official": "Kraljevina Lesoto",
                "common": "Lesoto"
            },
            "hun": {
                "official": "Lesoth\xf3i Kir\xe1lys\xe1g",
                "common": "Lesotho"
            },
            "ita": {
                "official": "Regno del Lesotho",
                "common": "Lesotho"
            },
            "jpn": {
                "official": "\u30EC\u30BD\u30C8\u738B\u56FD",
                "common": "\u30EC\u30BD\u30C8"
            },
            "kor": {
                "official": "\uB808\uC18C\uD1A0 \uC655\uAD6D",
                "common": "\uB808\uC18C\uD1A0"
            },
            "nld": {
                "official": "Koninkrijk Lesotho",
                "common": "Lesotho"
            },
            "per": {
                "official": "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0644\u0633\u0648\u062A\u0648",
                "common": "\u0644\u0633\u0648\u062A\u0648"
            },
            "pol": {
                "official": "Kr\xf3lestwo Lesotho",
                "common": "Lesotho"
            },
            "por": {
                "official": "Reino do Lesoto",
                "common": "Lesoto"
            },
            "rus": {
                "official": "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u041B\u0435\u0441\u043E\u0442\u043E",
                "common": "\u041B\u0435\u0441\u043E\u0442\u043E"
            },
            "slk": {
                "official": "Lesothsk\xe9 kr\xe1\u013Eovstvo",
                "common": "Lesotho"
            },
            "spa": {
                "official": "Reino de Lesotho",
                "common": "Lesotho"
            },
            "srp": {
                "official": "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u041B\u0435\u0441\u043E\u0442\u043E",
                "common": "\u041B\u0435\u0441\u043E\u0442\u043E"
            },
            "swe": {
                "official": "Konungariket Lesotho",
                "common": "Lesotho"
            },
            "tur": {
                "official": "Lesotho Krall\u0131\u011F\u0131",
                "common": "Lesotho"
            },
            "urd": {
                "official": "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0644\u06CC\u0633\u0648\u062A\u06BE\u0648",
                "common": "\u0644\u06CC\u0633\u0648\u062A\u06BE\u0648"
            },
            "zho": {
                "official": "\u83B1\u7D22\u6258\u738B\u56FD",
                "common": "\u83B1\u7D22\u6258"
            }
        },
        "latlng": [
            -29.5,
            28.5
        ],
        "landlocked": true,
        "borders": [
            "ZAF"
        ],
        "area": 30355,
        "demonyms": {
            "eng": {
                "f": "Mosotho",
                "m": "Mosotho"
            },
            "fra": {
                "f": "L\xe9sothienne",
                "m": "L\xe9sothien"
            }
        },
        "flag": "\uD83C\uDDF1\uD83C\uDDF8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/H8gJi5mL4Cmd1SF28",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2093234"
        },
        "population": 2142252,
        "gini": {
            "2017": 44.9
        },
        "fifa": "LES",
        "car": {
            "signs": [
                "LS"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ls.png",
            "svg": "https://flagcdn.com/ls.svg",
            "alt": "The flag of Lesotho is composed of three horizontal bands of blue, white and green in the ratio of 3:4:3. A black mokorotlo \u2014 a Basotho hat \u2014 is centered in the white band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ls.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ls.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -29.32,
                27.48
            ]
        },
        "postalCode": {
            "format": "###",
            "regex": "^(\\d{3})$"
        }
    },
    {
        "name": {
            "common": "Solomon Islands",
            "official": "Solomon Islands",
            "nativeName": {
                "eng": {
                    "official": "Solomon Islands",
                    "common": "Solomon Islands"
                }
            }
        },
        "tld": [
            ".sb"
        ],
        "cca2": "SB",
        "ccn3": "090",
        "cca3": "SLB",
        "cioc": "SOL",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "SBD": {
                "name": "Solomon Islands dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "77"
            ]
        },
        "capital": [
            "Honiara"
        ],
        "altSpellings": [
            "SB"
        ],
        "region": "Oceania",
        "subregion": "Melanesia",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0632\u0631 \u0633\u0644\u064A\u0645\u0627\u0646",
                "common": "\u062C\u0632\u0631 \u0633\u0644\u064A\u0645\u0627\u0646"
            },
            "bre": {
                "official": "Inizi Salomon",
                "common": "Inizi Salomon"
            },
            "ces": {
                "official": "\u0160alamounovy ostrovy",
                "common": "\u0160alamounovy ostrovy"
            },
            "cym": {
                "official": "Solomon Islands",
                "common": "Solomon Islands"
            },
            "deu": {
                "official": "Salomonen",
                "common": "Salomonen"
            },
            "est": {
                "official": "Saalomoni Saared",
                "common": "Saalomoni Saared"
            },
            "fin": {
                "official": "Salomonsaaret",
                "common": "Salomonsaaret"
            },
            "fra": {
                "official": "\xceles Salomon",
                "common": "\xceles Salomon"
            },
            "hrv": {
                "official": "Solomonski Otoci",
                "common": "Solomonski Otoci"
            },
            "hun": {
                "official": "Salamon-szigetek",
                "common": "Salamon-szigetek"
            },
            "ita": {
                "official": "Isole Salomone",
                "common": "Isole Salomone"
            },
            "jpn": {
                "official": "\u30BD\u30ED\u30E2\u30F3\u8AF8\u5CF6",
                "common": "\u30BD\u30ED\u30E2\u30F3\u8AF8\u5CF6"
            },
            "kor": {
                "official": "\uC194\uB85C\uBAAC \uC81C\uB3C4",
                "common": "\uC194\uB85C\uBAAC \uC81C\uB3C4"
            },
            "nld": {
                "official": "Solomon eilanden",
                "common": "Salomonseilanden"
            },
            "per": {
                "official": "\u062C\u0632\u0627\u06CC\u0631 \u0633\u0644\u06CC\u0645\u0627\u0646",
                "common": "\u062C\u0632\u0627\u06CC\u0631 \u0633\u0644\u06CC\u0645\u0627\u0646"
            },
            "pol": {
                "official": "Wyspy Salomona",
                "common": "Wyspy Salomona"
            },
            "por": {
                "official": "Ilhas Salom\xe3o",
                "common": "Ilhas Salom\xe3o"
            },
            "rus": {
                "official": "\u0421\u043E\u043B\u043E\u043C\u043E\u043D\u043E\u0432\u044B \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                "common": "\u0421\u043E\u043B\u043E\u043C\u043E\u043D\u043E\u0432\u044B \u041E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            "slk": {
                "official": "Salomonove ostrovy",
                "common": "Salomonove ostrovy"
            },
            "spa": {
                "official": "islas Salom\xf3n",
                "common": "Islas Salom\xf3n"
            },
            "srp": {
                "official": "\u0421\u043E\u043B\u043E\u043C\u043E\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                "common": "\u0421\u043E\u043B\u043E\u043C\u043E\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            "swe": {
                "official": "Salomon\xf6arna",
                "common": "Salomon\xf6arna"
            },
            "tur": {
                "official": "Solomon Adalar\u0131",
                "common": "Solomon Adalar\u0131"
            },
            "urd": {
                "official": "\u062C\u0632\u0627\u0626\u0631 \u0633\u0644\u06CC\u0645\u0627\u0646",
                "common": "\u062C\u0632\u0627\u0626\u0631 \u0633\u0644\u06CC\u0645\u0627\u0646"
            },
            "zho": {
                "official": "\u6240\u7F57\u95E8\u7FA4\u5C9B",
                "common": "\u6240\u7F57\u95E8\u7FA4\u5C9B"
            }
        },
        "latlng": [
            -8,
            159
        ],
        "landlocked": false,
        "area": 28896,
        "demonyms": {
            "eng": {
                "f": "Solomon Islander",
                "m": "Solomon Islander"
            },
            "fra": {
                "f": "Salomonienne",
                "m": "Salomonien"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDE7",
        "maps": {
            "googleMaps": "https://goo.gl/maps/JbPkx86Ywjv8C1n8A",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1857436"
        },
        "population": 686878,
        "gini": {
            "2012": 37.1
        },
        "fifa": "SOL",
        "car": {
            "signs": [
                "SOL"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+11:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/sb.png",
            "svg": "https://flagcdn.com/sb.svg",
            "alt": "The flag of Solomon Islands features a thin yellow diagonal band that extends from the lower hoist-side corner to the upper fly-side corner of the field. Above and beneath this band are a blue and green triangle respectively. Five white five-pointed stars arranged in an X shape are situated on the hoist side of the upper blue triangle."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/sb.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/sb.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -9.43,
                159.95
            ]
        }
    },
    {
        "name": {
            "common": "Libya",
            "official": "State of Libya",
            "nativeName": {
                "ara": {
                    "official": "\u0627\u0644\u062F\u0648\u0644\u0629 \u0644\u064A\u0628\u064A\u0627",
                    "common": "\u200F\u0644\u064A\u0628\u064A\u0627"
                }
            }
        },
        "tld": [
            ".ly"
        ],
        "cca2": "LY",
        "ccn3": "434",
        "cca3": "LBY",
        "cioc": "LBA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "LYD": {
                "name": "Libyan dinar",
                "symbol": "\u0644.\u062F"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "18"
            ]
        },
        "capital": [
            "Tripoli"
        ],
        "altSpellings": [
            "LY",
            "State of Libya",
            "Dawlat Libya"
        ],
        "region": "Africa",
        "subregion": "Northern Africa",
        "languages": {
            "ara": "Arabic"
        },
        "translations": {
            "ara": {
                "official": "\u062F\u0648\u0644\u0629 \u0644\u064A\u0628\u064A\u0627",
                "common": "\u200F\u0644\u064A\u0628\u064A\u0627"
            },
            "bre": {
                "official": "Stad Libia",
                "common": "Libia"
            },
            "ces": {
                "official": "St\xe1t Libye",
                "common": "Libye"
            },
            "cym": {
                "official": "State of Libya",
                "common": "Libya"
            },
            "deu": {
                "official": "Staat Libyen",
                "common": "Libyen"
            },
            "est": {
                "official": "Liib\xfca",
                "common": "Liib\xfca"
            },
            "fin": {
                "official": "Libyan valtio",
                "common": "Libya"
            },
            "fra": {
                "official": "Grande R\xe9publique arabe libyenne populaire et socialiste",
                "common": "Libye"
            },
            "hrv": {
                "official": "Dr\u017Eava Libiji",
                "common": "Libija"
            },
            "hun": {
                "official": "L\xedbia \xc1llam",
                "common": "L\xedbia"
            },
            "ita": {
                "official": "Stato della Libia",
                "common": "Libia"
            },
            "jpn": {
                "official": "\u30EA\u30D3\u30A2\u306E\u56FD\u5BB6",
                "common": "\u30EA\u30D3\u30A2"
            },
            "kor": {
                "official": "\uB9AC\uBE44\uC544",
                "common": "\uB9AC\uBE44\uC544"
            },
            "nld": {
                "official": "Staat van Libi\xeb",
                "common": "Libi\xeb"
            },
            "per": {
                "official": "\u062F\u0648\u0644\u062A \u0644\u06CC\u0628\u06CC",
                "common": "\u0644\u06CC\u0628\u06CC"
            },
            "pol": {
                "official": "Pa\u0144stwo Libia",
                "common": "Libia"
            },
            "por": {
                "official": "Estado da L\xedbia",
                "common": "L\xedbia"
            },
            "rus": {
                "official": "\u0413\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u041B\u0438\u0432\u0438\u0438",
                "common": "\u041B\u0438\u0432\u0438\u044F"
            },
            "slk": {
                "official": "L\xedbya",
                "common": "L\xedbya"
            },
            "spa": {
                "official": "Estado de Libia",
                "common": "Libia"
            },
            "srp": {
                "official": "\u0414\u0440\u0436\u0430\u0432\u0430 \u041B\u0438\u0431\u0438\u0458\u0430",
                "common": "\u041B\u0438\u0431\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Staten Libyen",
                "common": "Libyen"
            },
            "tur": {
                "official": "Libya Devleti",
                "common": "Libya"
            },
            "urd": {
                "official": "\u0631\u06CC\u0627\u0633\u062A\u0650 \u0644\u06CC\u0628\u06CC\u0627",
                "common": "\u0644\u06CC\u0628\u06CC\u0627"
            },
            "zho": {
                "official": "\u5229\u6BD4\u4E9A\u56FD",
                "common": "\u5229\u6BD4\u4E9A"
            }
        },
        "latlng": [
            25,
            17
        ],
        "landlocked": false,
        "borders": [
            "DZA",
            "TCD",
            "EGY",
            "NER",
            "SDN",
            "TUN"
        ],
        "area": 1759540,
        "demonyms": {
            "eng": {
                "f": "Libyan",
                "m": "Libyan"
            },
            "fra": {
                "f": "Libyenne",
                "m": "Libyen"
            }
        },
        "flag": "\uD83C\uDDF1\uD83C\uDDFE",
        "maps": {
            "googleMaps": "https://goo.gl/maps/eLgGnaQWcJEdYRMy5",
            "openStreetMaps": "openstreetmap.org/relation/192758"
        },
        "population": 6871287,
        "fifa": "LBY",
        "car": {
            "signs": [
                "LAR"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ly.png",
            "svg": "https://flagcdn.com/ly.svg",
            "alt": "The flag of Libya is composed of three horizontal bands of red, black and green, with the black band twice the height of the other two bands. At the center of the black band is a fly-side facing white crescent and a five-pointed white star placed just outside the crescent opening."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ly.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ly.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                32.88,
                13.17
            ]
        }
    },
    {
        "name": {
            "common": "South Korea",
            "official": "Republic of Korea",
            "nativeName": {
                "kor": {
                    "official": "\uB300\uD55C\uBBFC\uAD6D",
                    "common": "\uD55C\uAD6D"
                }
            }
        },
        "tld": [
            ".kr",
            ".\uD55C\uAD6D"
        ],
        "cca2": "KR",
        "ccn3": "410",
        "cca3": "KOR",
        "cioc": "KOR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "KRW": {
                "name": "South Korean won",
                "symbol": "\u20A9"
            }
        },
        "idd": {
            "root": "+8",
            "suffixes": [
                "2"
            ]
        },
        "capital": [
            "Seoul"
        ],
        "altSpellings": [
            "KR",
            "Korea, Republic of",
            "Republic of Korea",
            "\uB0A8\uD55C",
            "\uB0A8\uC870\uC120"
        ],
        "region": "Asia",
        "subregion": "Eastern Asia",
        "languages": {
            "kor": "Korean"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u0648\u0631\u064A\u0627",
                "common": "\u0643\u0648\u0631\u064A\u0627 \u0627\u0644\u062C\u0646\u0648\u0628\u064A\u0629"
            },
            "bre": {
                "official": "Republik Korea",
                "common": "Korea ar Su"
            },
            "ces": {
                "official": "Korejsk\xe1 republika",
                "common": "Ji\u017En\xed Korea"
            },
            "cym": {
                "official": "Republic of Korea",
                "common": "South Korea"
            },
            "deu": {
                "official": "Republik Korea",
                "common": "S\xfcdkorea"
            },
            "est": {
                "official": "Korea Vabariik",
                "common": "L\xf5una-Korea"
            },
            "fin": {
                "official": "Korean tasavalta",
                "common": "Etel\xe4-Korea"
            },
            "fra": {
                "official": "R\xe9publique de Cor\xe9e",
                "common": "Cor\xe9e du Sud"
            },
            "hrv": {
                "official": "Republika Koreja",
                "common": "Ju\u017Ena Koreja"
            },
            "hun": {
                "official": "Koreai K\xf6zt\xe1rsas\xe1g",
                "common": "D\xe9l-Korea"
            },
            "ita": {
                "official": "Repubblica di Corea",
                "common": "Corea del Sud"
            },
            "jpn": {
                "official": "\u5927\u97D3\u6C11\u56FD",
                "common": "\u97D3\u56FD"
            },
            "kor": {
                "official": "\uB300\uD55C\uBBFC\uAD6D",
                "common": "\uD55C\uAD6D"
            },
            "nld": {
                "official": "Republiek Korea",
                "common": "Zuid-Korea"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u0631\u0647",
                "common": "\u06A9\u0631\u0647\u0654 \u062C\u0646\u0648\u0628\u06CC"
            },
            "pol": {
                "official": "Republika Korei",
                "common": "Korea Po\u0142udniowa"
            },
            "por": {
                "official": "Rep\xfablica da Coreia",
                "common": "Coreia do Sul"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0440\u0435\u044F",
                "common": "\u042E\u0436\u043D\u0430\u044F \u041A\u043E\u0440\u0435\u044F"
            },
            "slk": {
                "official": "K\xf3rejsk\xe1 republika",
                "common": "Ju\u017En\xe1 K\xf3rea"
            },
            "spa": {
                "official": "Rep\xfablica de Corea",
                "common": "Corea del Sur"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0440\u0435\u0458\u0430",
                "common": "\u0408\u0443\u0436\u043D\u0430 \u041A\u043E\u0440\u0435\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Korea",
                "common": "Sydkorea"
            },
            "tur": {
                "official": "Kore Cumhuriyeti",
                "common": "G\xfcney Kore"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0648\u0631\u06CC\u0627 ",
                "common": "\u062C\u0646\u0648\u0628\u06CC \u06A9\u0648\u0631\u06CC\u0627"
            },
            "zho": {
                "official": "\u5927\u97E9\u6C11\u56FD",
                "common": "\u97E9\u56FD"
            }
        },
        "latlng": [
            37,
            127.5
        ],
        "landlocked": false,
        "borders": [
            "PRK"
        ],
        "area": 100210,
        "demonyms": {
            "eng": {
                "f": "South Korean",
                "m": "South Korean"
            },
            "fra": {
                "f": "Sud-cor\xe9enne",
                "m": "Sud-cor\xe9en"
            }
        },
        "flag": "\uD83C\uDDF0\uD83C\uDDF7",
        "maps": {
            "googleMaps": "https://goo.gl/maps/7ecjaJXefjAQhxjGA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/307756"
        },
        "population": 51780579,
        "gini": {
            "2016": 31.4
        },
        "fifa": "KOR",
        "car": {
            "signs": [
                "ROK"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+09:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/kr.png",
            "svg": "https://flagcdn.com/kr.svg",
            "alt": "The flag of South Korea has a white field, at the center of which is a red and blue Taegeuk circle surrounded by four black trigrams, one in each corner."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/kr.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/kr.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                37.55,
                126.98
            ]
        },
        "postalCode": {
            "format": "SEOUL ###-###",
            "regex": "^(?:SEOUL)*(\\d{6})$"
        }
    },
    {
        "name": {
            "common": "Liechtenstein",
            "official": "Principality of Liechtenstein",
            "nativeName": {
                "deu": {
                    "official": "F\xfcrstentum Liechtenstein",
                    "common": "Liechtenstein"
                }
            }
        },
        "tld": [
            ".li"
        ],
        "cca2": "LI",
        "ccn3": "438",
        "cca3": "LIE",
        "cioc": "LIE",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "CHF": {
                "name": "Swiss franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+4",
            "suffixes": [
                "23"
            ]
        },
        "capital": [
            "Vaduz"
        ],
        "altSpellings": [
            "LI",
            "Principality of Liechtenstein",
            "F\xfcrstentum Liechtenstein"
        ],
        "region": "Europe",
        "subregion": "Western Europe",
        "languages": {
            "deu": "German"
        },
        "translations": {
            "ara": {
                "official": "\u0625\u0645\u0627\u0631\u0629 \u0644\u064A\u062E\u062A\u0646\u0634\u062A\u0627\u064A\u0646",
                "common": "\u0644\u064A\u062E\u062A\u0646\u0634\u062A\u0627\u064A\u0646"
            },
            "bre": {
                "official": "Pri\xf1selezh Liechtenstein",
                "common": "Liechtenstein"
            },
            "ces": {
                "official": "Kn\xed\u017Eectv\xed Lichten\u0161tejnsk\xe9",
                "common": "Lichten\u0161tejnsko"
            },
            "cym": {
                "official": "Principality of Liechtenstein",
                "common": "Liechtenstein"
            },
            "deu": {
                "official": "F\xfcrstentum Liechtenstein",
                "common": "Liechtenstein"
            },
            "est": {
                "official": "Liechtensteini V\xfcrstiriik",
                "common": "Liechtenstein"
            },
            "fin": {
                "official": "Liechensteinin ruhtinaskunta",
                "common": "Liechenstein"
            },
            "fra": {
                "official": "Principaut\xe9 du Liechtenstein",
                "common": "Liechtenstein"
            },
            "hrv": {
                "official": "Kne\u017Eevina Lihten\u0161tajn",
                "common": "Lihten\u0161tajn"
            },
            "hun": {
                "official": "Liechtensteini Hercegs\xe9g",
                "common": "Liechtenstein"
            },
            "ita": {
                "official": "Principato del Liechtenstein",
                "common": "Liechtenstein"
            },
            "jpn": {
                "official": "\u30EA\u30D2\u30C6\u30F3\u30B7\u30E5\u30BF\u30A4\u30F3\u516C\u56FD",
                "common": "\u30EA\u30D2\u30C6\u30F3\u30B7\u30E5\u30BF\u30A4\u30F3"
            },
            "kor": {
                "official": "\uB9AC\uD788\uD150\uC288\uD0C0\uC778 \uACF5\uAD6D",
                "common": "\uB9AC\uD788\uD150\uC288\uD0C0\uC778"
            },
            "nld": {
                "official": "Vorstendom Liechtenstein",
                "common": "Liechtenstein"
            },
            "per": {
                "official": "\u0634\u0627\u0647\u0632\u0627\u062F\u0647\u200C\u0646\u0634\u06CC\u0646 \u0644\u06CC\u062E\u062A\u0646\u200C\u0627\u0634\u062A\u0627\u06CC\u0646",
                "common": "\u0644\u06CC\u062E\u062A\u0646\u200C\u0627\u0634\u062A\u0627\u06CC\u0646"
            },
            "pol": {
                "official": "Ksi\u0119stwo Liechtensteinu",
                "common": "Liechtenstein"
            },
            "por": {
                "official": "Principado de Liechtenstein",
                "common": "Liechtenstein"
            },
            "rus": {
                "official": "\u041A\u043D\u044F\u0436\u0435\u0441\u0442\u0432\u043E \u041B\u0438\u0445\u0442\u0435\u043D\u0448\u0442\u0435\u0439\u043D",
                "common": "\u041B\u0438\u0445\u0442\u0435\u043D\u0448\u0442\u0435\u0439\u043D"
            },
            "slk": {
                "official": "Lichten\u0161tajnsk\xe9 knie\u017Eatstvo",
                "common": "Lichten\u0161tajnsko"
            },
            "spa": {
                "official": "Principado de Liechtenstein",
                "common": "Liechtenstein"
            },
            "srp": {
                "official": "\u041A\u043D\u0435\u0436\u0435\u0432\u0438\u043D\u0430 \u041B\u0438\u0445\u0442\u0435\u043D\u0448\u0442\u0430\u0458\u043D",
                "common": "\u041B\u0438\u0445\u0442\u0435\u043D\u0448\u0442\u0430\u0458\u043D"
            },
            "swe": {
                "official": "Furstend\xf6met Liechtenstein",
                "common": "Liechtenstein"
            },
            "tur": {
                "official": "Lihten\u015Ftayn Prensli\u011Fi",
                "common": "Lihten\u015Ftayn"
            },
            "urd": {
                "official": "\u0627\u0645\u0627\u0631\u0627\u062A \u0644\u06CC\u062E\u062A\u06CC\u0646\u0633\u062A\u0627\u0626\u0646",
                "common": "\u0644\u06CC\u062E\u062A\u06CC\u0646\u0633\u062A\u0627\u0626\u0646"
            },
            "zho": {
                "official": "\u5217\u652F\u6566\u58EB\u767B\u516C\u56FD",
                "common": "\u5217\u652F\u6566\u58EB\u767B"
            }
        },
        "latlng": [
            47.26666666,
            9.53333333
        ],
        "landlocked": true,
        "borders": [
            "AUT",
            "CHE"
        ],
        "area": 160,
        "demonyms": {
            "eng": {
                "f": "Liechtensteiner",
                "m": "Liechtensteiner"
            },
            "fra": {
                "f": "Liechtensteinoise",
                "m": "Liechtensteinois"
            }
        },
        "flag": "\uD83C\uDDF1\uD83C\uDDEE",
        "maps": {
            "googleMaps": "https://goo.gl/maps/KNuHeiJzAPodwM7y6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1155955"
        },
        "population": 38137,
        "fifa": "LIE",
        "car": {
            "signs": [
                "FL"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/li.png",
            "svg": "https://flagcdn.com/li.svg",
            "alt": "The flag of Liechtenstein is composed of two equal horizontal bands of blue and red, with a golden-yellow crown on the hoist side of the blue band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/li.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/li.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                47.13,
                9.52
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Nicaragua",
            "official": "Republic of Nicaragua",
            "nativeName": {
                "spa": {
                    "official": "Rep\xfablica de Nicaragua",
                    "common": "Nicaragua"
                }
            }
        },
        "tld": [
            ".ni"
        ],
        "cca2": "NI",
        "ccn3": "558",
        "cca3": "NIC",
        "cioc": "NCA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "NIO": {
                "name": "Nicaraguan c\xf3rdoba",
                "symbol": "C$"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "05"
            ]
        },
        "capital": [
            "Managua"
        ],
        "altSpellings": [
            "NI",
            "Republic of Nicaragua",
            "Rep\xfablica de Nicaragua"
        ],
        "region": "Americas",
        "subregion": "Central America",
        "languages": {
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0646\u064A\u0643\u0627\u0631\u0627\u063A\u0648\u0627",
                "common": "\u0646\u064A\u0643\u0627\u0631\u0627\u063A\u0648\u0627"
            },
            "bre": {
                "official": "Republik Nicaragua",
                "common": "Nicaragua"
            },
            "ces": {
                "official": "Republika Nikaragua",
                "common": "Nikaragua"
            },
            "cym": {
                "official": "Republic of Nicaragua",
                "common": "Nicaragua"
            },
            "deu": {
                "official": "Republik Nicaragua",
                "common": "Nicaragua"
            },
            "est": {
                "official": "Nicaragua Vabariik",
                "common": "Nicaragua"
            },
            "fin": {
                "official": "Nicaraguan tasavalta",
                "common": "Nicaragua"
            },
            "fra": {
                "official": "R\xe9publique du Nicaragua",
                "common": "Nicaragua"
            },
            "hrv": {
                "official": "Republika Nikaragva",
                "common": "Nikaragva"
            },
            "hun": {
                "official": "Nicaraguai K\xf6zt\xe1rsas\xe1g",
                "common": "Nicaragua"
            },
            "ita": {
                "official": "Repubblica del Nicaragua",
                "common": "Nicaragua"
            },
            "jpn": {
                "official": "\u30CB\u30AB\u30E9\u30B0\u30A2\u5171\u548C\u56FD",
                "common": "\u30CB\u30AB\u30E9\u30B0\u30A2"
            },
            "kor": {
                "official": "\uB2C8\uCE74\uB77C\uACFC \uACF5\uD654\uAD6D",
                "common": "\uB2C8\uCE74\uB77C\uACFC"
            },
            "nld": {
                "official": "Republiek Nicaragua",
                "common": "Nicaragua"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0646\u06CC\u06A9\u0627\u0631\u0627\u06AF\u0648\u0626\u0647",
                "common": "\u0646\u06CC\u06A9\u0627\u0631\u0627\u06AF\u0648\u0626\u0647"
            },
            "pol": {
                "official": "Republika Nikaragui",
                "common": "Nikaragua"
            },
            "por": {
                "official": "Rep\xfablica da Nicar\xe1gua",
                "common": "Nicar\xe1gua"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0438\u043A\u0430\u0440\u0430\u0433\u0443\u0430",
                "common": "\u041D\u0438\u043A\u0430\u0440\u0430\u0433\u0443\u0430"
            },
            "slk": {
                "official": "Nikaragujsk\xe1 republika",
                "common": "Nikaragua"
            },
            "spa": {
                "official": "Rep\xfablica de Nicaragua",
                "common": "Nicaragua"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0438\u043A\u0430\u0440\u0430\u0433\u0432\u0430",
                "common": "\u041D\u0438\u043A\u0430\u0440\u0430\u0433\u0432\u0430"
            },
            "swe": {
                "official": "Republiken Nicaragua",
                "common": "Nicaragua"
            },
            "tur": {
                "official": "Nikaragua Cumhuriyeti",
                "common": "Nikaragua"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0646\u06A9\u0627\u0631\u0627\u06AF\u0648\u0627",
                "common": "\u0646\u06A9\u0627\u0631\u0627\u06AF\u0648\u0627"
            },
            "zho": {
                "official": "\u5C3C\u52A0\u62C9\u74DC\u5171\u548C\u56FD",
                "common": "\u5C3C\u52A0\u62C9\u74DC"
            }
        },
        "latlng": [
            13,
            -85
        ],
        "landlocked": false,
        "borders": [
            "CRI",
            "HND"
        ],
        "area": 130373,
        "demonyms": {
            "eng": {
                "f": "Nicaraguan",
                "m": "Nicaraguan"
            },
            "fra": {
                "f": "Nicaraguayenne",
                "m": "Nicaraguayen"
            }
        },
        "flag": "\uD83C\uDDF3\uD83C\uDDEE",
        "maps": {
            "googleMaps": "https://goo.gl/maps/P77LaEVkKJKXneRC6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/287666"
        },
        "population": 6624554,
        "gini": {
            "2014": 46.2
        },
        "fifa": "NCA",
        "car": {
            "signs": [
                "NIC"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-06:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ni.png",
            "svg": "https://flagcdn.com/ni.svg",
            "alt": "The flag of Nicaragua is composed of three equal horizontal bands of blue, white and blue, with the national coat of arms centered in the white band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ni.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ni.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                12.13,
                -86.25
            ]
        },
        "postalCode": {
            "format": "###-###-#",
            "regex": "^(\\d{7})$"
        }
    },
    {
        "name": {
            "common": "Ecuador",
            "official": "Republic of Ecuador",
            "nativeName": {
                "spa": {
                    "official": "Rep\xfablica del Ecuador",
                    "common": "Ecuador"
                }
            }
        },
        "tld": [
            ".ec"
        ],
        "cca2": "EC",
        "ccn3": "218",
        "cca3": "ECU",
        "cioc": "ECU",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "93"
            ]
        },
        "capital": [
            "Quito"
        ],
        "altSpellings": [
            "EC",
            "Republic of Ecuador",
            "Rep\xfablica del Ecuador"
        ],
        "region": "Americas",
        "subregion": "South America",
        "languages": {
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0625\u0643\u0648\u0627\u062F\u0648\u0631",
                "common": "\u0627\u0644\u0625\u0643\u0648\u0627\u062F\u0648\u0631"
            },
            "bre": {
                "official": "Republik Ecuador",
                "common": "Ecuador"
            },
            "ces": {
                "official": "Ekv\xe1dorsk\xe1 republika",
                "common": "Ekv\xe1dor"
            },
            "cym": {
                "official": "Gweriniaeth Ecwador",
                "common": "Ecwador"
            },
            "deu": {
                "official": "Republik Ecuador",
                "common": "Ecuador"
            },
            "est": {
                "official": "Ecuadori Vabariik",
                "common": "Ecuador"
            },
            "fin": {
                "official": "Ecuadorin tasavalta",
                "common": "Ecuador"
            },
            "fra": {
                "official": "R\xe9publique de l'\xc9quateur",
                "common": "\xc9quateur"
            },
            "hrv": {
                "official": "Republika Ekvador",
                "common": "Ekvador"
            },
            "hun": {
                "official": "Ecuadori K\xf6zt\xe1rsas\xe1g",
                "common": "Ecuador"
            },
            "ita": {
                "official": "Repubblica dell'Ecuador",
                "common": "Ecuador"
            },
            "jpn": {
                "official": "\u30A8\u30AF\u30A2\u30C9\u30EB\u5171\u548C\u56FD",
                "common": "\u30A8\u30AF\u30A2\u30C9\u30EB"
            },
            "kor": {
                "official": "\uC5D0\uCF70\uB3C4\uB974 \uACF5\uD654\uAD6D",
                "common": "\uC5D0\uCF70\uB3C4\uB974"
            },
            "nld": {
                "official": "Republiek Ecuador",
                "common": "Ecuador"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u06A9\u0648\u0627\u062F\u0648\u0631",
                "common": "\u0627\u06A9\u0648\u0627\u062F\u0648\u0631"
            },
            "pol": {
                "official": "Ekwador",
                "common": "Ekwador"
            },
            "por": {
                "official": "Rep\xfablica do Equador",
                "common": "Equador"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u042D\u043A\u0432\u0430\u0434\u043E\u0440",
                "common": "\u042D\u043A\u0432\u0430\u0434\u043E\u0440"
            },
            "slk": {
                "official": "Ekv\xe1dorsk\xe1 republika",
                "common": "Ekv\xe1dor"
            },
            "spa": {
                "official": "Rep\xfablica del Ecuador",
                "common": "Ecuador"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0415\u043A\u0432\u0430\u0434\u043E\u0440",
                "common": "\u0415\u043A\u0432\u0430\u0434\u043E\u0440"
            },
            "swe": {
                "official": "Republiken Ecuador",
                "common": "Ecuador"
            },
            "tur": {
                "official": "Ekvador Cumhuriyeti",
                "common": "Ekvador"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u06CC\u06A9\u0648\u0688\u0648\u0631",
                "common": "\u0627\u06CC\u06A9\u0648\u0627\u0688\u0648\u0631"
            },
            "zho": {
                "official": "\u5384\u74DC\u591A\u5C14\u5171\u548C\u56FD",
                "common": "\u5384\u74DC\u591A\u5C14"
            }
        },
        "latlng": [
            -2,
            -77.5
        ],
        "landlocked": false,
        "borders": [
            "COL",
            "PER"
        ],
        "area": 276841,
        "demonyms": {
            "eng": {
                "f": "Ecuadorean",
                "m": "Ecuadorean"
            },
            "fra": {
                "f": "\xc9quatorienne",
                "m": "\xc9quatorien"
            }
        },
        "flag": "\uD83C\uDDEA\uD83C\uDDE8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/TbX8hUW4gcbRPZiK7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/108089"
        },
        "population": 17643060,
        "gini": {
            "2019": 45.7
        },
        "fifa": "ECU",
        "car": {
            "signs": [
                "EC"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-06:00",
            "UTC-05:00"
        ],
        "continents": [
            "South America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ec.png",
            "svg": "https://flagcdn.com/ec.svg",
            "alt": "The flag of Ecuador is composed of the horizontal bands of yellow, blue and red, with the yellow band twice the height of the other two bands. The Ecuadorian coat of arms is superimposed in the center of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ec.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ec.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -0.22,
                -78.5
            ]
        },
        "postalCode": {
            "format": "@####@",
            "regex": "^([a-zA-Z]\\d{4}[a-zA-Z])$"
        }
    },
    {
        "name": {
            "common": "Maldives",
            "official": "Republic of the Maldives",
            "nativeName": {
                "div": {
                    "official": "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0783\u07A7\u0787\u07B0\u0796\u07AD\u078E\u07AC \u0796\u07AA\u0789\u07B0\u0780\u07AB\u0783\u07A8\u0787\u07B0\u0794\u07A7",
                    "common": "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0783\u07A7\u0787\u07B0\u0796\u07AD\u078E\u07AC"
                }
            }
        },
        "tld": [
            ".mv"
        ],
        "cca2": "MV",
        "ccn3": "462",
        "cca3": "MDV",
        "cioc": "MDV",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "MVR": {
                "name": "Maldivian rufiyaa",
                "symbol": ".\u0783"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "60"
            ]
        },
        "capital": [
            "Mal\xe9"
        ],
        "altSpellings": [
            "MV",
            "Maldive Islands",
            "Republic of the Maldives",
            "Dhivehi Raajjeyge Jumhooriyya"
        ],
        "region": "Asia",
        "subregion": "Southern Asia",
        "languages": {
            "div": "Maldivian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0645\u0627\u0644\u062F\u064A\u0641",
                "common": "\u0627\u0644\u0645\u0627\u0644\u062F\u064A\u0641"
            },
            "bre": {
                "official": "Republik Maldivez",
                "common": "Maldivez"
            },
            "ces": {
                "official": "Maledivsk\xe1 republika",
                "common": "Maledivy"
            },
            "cym": {
                "official": "Republic of the Maldives",
                "common": "Maldives"
            },
            "deu": {
                "official": "Republik Malediven",
                "common": "Malediven"
            },
            "est": {
                "official": "Maldiivi Vabariik",
                "common": "Maldiivid"
            },
            "fin": {
                "official": "Malediivien tasavalta",
                "common": "Malediivit"
            },
            "fra": {
                "official": "R\xe9publique des Maldives",
                "common": "Maldives"
            },
            "hrv": {
                "official": "Republika Maldivi",
                "common": "Maldivi"
            },
            "hun": {
                "official": "Mald\xedv-szigetek",
                "common": "Mald\xedv-szigetek"
            },
            "ita": {
                "official": "Repubblica delle Maldive",
                "common": "Maldive"
            },
            "jpn": {
                "official": "\u30E2\u30EB\u30C7\u30A3\u30D6\u5171\u548C\u56FD",
                "common": "\u30E2\u30EB\u30C7\u30A3\u30D6"
            },
            "kor": {
                "official": "\uBAB0\uB514\uBE0C \uACF5\uD654\uAD6D",
                "common": "\uBAB0\uB514\uBE0C"
            },
            "nld": {
                "official": "Republiek van de Malediven",
                "common": "Maldiven"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u0627\u0644\u062F\u06CC\u0648",
                "common": "\u0645\u0627\u0644\u062F\u06CC\u0648"
            },
            "pol": {
                "official": "Republika Malediw\xf3w",
                "common": "Malediwy"
            },
            "por": {
                "official": "Rep\xfablica das Maldivas",
                "common": "Maldivas"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u043B\u044C\u0434\u0438\u0432\u044B",
                "common": "\u041C\u0430\u043B\u044C\u0434\u0438\u0432\u044B"
            },
            "slk": {
                "official": "Maldivsk\xe1 republika",
                "common": "Maldivy"
            },
            "spa": {
                "official": "Rep\xfablica de las Maldivas",
                "common": "Maldivas"
            },
            "srp": {
                "official": "\u041C\u0430\u043B\u0434\u0438\u0432\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u041C\u0430\u043B\u0434\u0438\u0432\u0438"
            },
            "swe": {
                "official": "Republiken Maldiverna",
                "common": "Maldiverna"
            },
            "tur": {
                "official": "Maldivler Cumhuriyeti",
                "common": "Maldivler"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0627\u0644\u062F\u06CC\u067E",
                "common": "\u0645\u0627\u0644\u062F\u06CC\u067E"
            },
            "zho": {
                "official": "\u9A6C\u5C14\u4EE3\u592B\u5171\u548C\u56FD",
                "common": "\u9A6C\u5C14\u4EE3\u592B"
            }
        },
        "latlng": [
            3.25,
            73
        ],
        "landlocked": false,
        "area": 300,
        "demonyms": {
            "eng": {
                "f": "Maldivan",
                "m": "Maldivan"
            },
            "fra": {
                "f": "Maldivienne",
                "m": "Maldivien"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDFB",
        "maps": {
            "googleMaps": "https://goo.gl/maps/MNAWGq9vEdbZ9vUV7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/536773"
        },
        "population": 540542,
        "gini": {
            "2016": 31.3
        },
        "fifa": "MDV",
        "car": {
            "signs": [
                "MV"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+05:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/mv.png",
            "svg": "https://flagcdn.com/mv.svg",
            "alt": "The flag of Maldives has a red field, at the center of which is a large green rectangle bearing a fly-side facing white crescent."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/mv.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/mv.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                4.17,
                73.51
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Algeria",
            "official": "People's Democratic Republic of Algeria",
            "nativeName": {
                "ara": {
                    "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629 \u0627\u0644\u0634\u0639\u0628\u064A\u0629 \u0627\u0644\u062C\u0632\u0627\u0626\u0631\u064A\u0629",
                    "common": "\u0627\u0644\u062C\u0632\u0627\u0626\u0631"
                }
            }
        },
        "tld": [
            ".dz",
            "\u0627\u0644\u062C\u0632\u0627\u0626\u0631."
        ],
        "cca2": "DZ",
        "ccn3": "012",
        "cca3": "DZA",
        "cioc": "ALG",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "DZD": {
                "name": "Algerian dinar",
                "symbol": "\u062F.\u062C"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "13"
            ]
        },
        "capital": [
            "Algiers"
        ],
        "altSpellings": [
            "DZ",
            "Dzayer",
            "Alg\xe9rie"
        ],
        "region": "Africa",
        "subregion": "Northern Africa",
        "languages": {
            "ara": "Arabic"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629 \u0627\u0644\u0634\u0639\u0628\u064A\u0629 \u0627\u0644\u062C\u0632\u0627\u0626\u0631\u064A\u0629",
                "common": "\u0627\u0644\u062C\u0632\u0627\u0626\u0631"
            },
            "bre": {
                "official": "Republik Aljerian Demokratel ha Poblel",
                "common": "Aljeria"
            },
            "ces": {
                "official": "Al\u017E\xedrsk\xe1 demokratick\xe1 a lidov\xe1 republika",
                "common": "Al\u017E\xedrsko"
            },
            "cym": {
                "official": "Gweriniaeth Ddemocrataidd Pobl Algeria",
                "common": "Algeria"
            },
            "deu": {
                "official": "Demokratische Volksrepublik Algerien",
                "common": "Algerien"
            },
            "est": {
                "official": "Al\u017Eeeria Demokraatlik Rahvavabariik",
                "common": "Al\u017Eeeria"
            },
            "fin": {
                "official": "Algerian demokraattinen kansantasavalta",
                "common": "Algeria"
            },
            "fra": {
                "official": "R\xe9publique d\xe9mocratique et populaire d'Alg\xe9rie",
                "common": "Alg\xe9rie"
            },
            "hrv": {
                "official": "Narodna Demokratska Republika Al\u017Eir",
                "common": "Al\u017Eir"
            },
            "hun": {
                "official": "Alg\xe9riai N\xe9pi Demokratikus K\xf6zt\xe1rsas\xe1g",
                "common": "Alg\xe9ria"
            },
            "ita": {
                "official": "Repubblica popolare democratica di Algeria",
                "common": "Algeria"
            },
            "jpn": {
                "official": "\u30A2\u30EB\u30B8\u30A7\u30EA\u30A2\u4EBA\u6C11\u6C11\u4E3B\u5171\u548C\u56FD",
                "common": "\u30A2\u30EB\u30B8\u30A7\u30EA\u30A2"
            },
            "kor": {
                "official": "\uC54C\uC81C\uB9AC \uC778\uBBFC \uBBFC\uC8FC \uACF5\uD654\uAD6D",
                "common": "\uC54C\uC81C\uB9AC"
            },
            "nld": {
                "official": "Democratische Volksrepubliek Algerije",
                "common": "Algerije"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9 \u062E\u0644\u0642 \u0627\u0644\u062C\u0632\u0627\u06CC\u0631",
                "common": "\u0627\u0644\u062C\u0632\u0627\u06CC\u0631"
            },
            "pol": {
                "official": "Algierska Republika Ludowo-Demokratyczna",
                "common": "Algieria"
            },
            "por": {
                "official": "Rep\xfablica Argelina Democr\xe1tica e Popular",
                "common": "Arg\xe9lia"
            },
            "rus": {
                "official": "\u041D\u0430\u0440\u043E\u0434\u043D\u043E-\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u043B\u0436\u0438\u0440",
                "common": "\u0410\u043B\u0436\u0438\u0440"
            },
            "slk": {
                "official": "Al\u017E\xedrska demokratick\xe1 \u013Eudov\xe1 republika",
                "common": "Al\u017E\xedrsko"
            },
            "spa": {
                "official": "Rep\xfablica Argelina Democr\xe1tica y Popular",
                "common": "Argelia"
            },
            "srp": {
                "official": "\u041D\u0430\u0440\u043E\u0434\u043D\u0430 \u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u043B\u0436\u0438\u0440",
                "common": "\u0410\u043B\u0436\u0438\u0440"
            },
            "swe": {
                "official": "Demokratiska folkrepubliken Algeriet",
                "common": "Algeriet"
            },
            "tur": {
                "official": "Cezayir Demokratik Halk Cumhuriyeti",
                "common": "Cezayir"
            },
            "urd": {
                "official": "\u0639\u0648\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0644\u062C\u0632\u0627\u0626\u0631",
                "common": "\u0627\u0644\u062C\u0632\u0627\u0626\u0631"
            },
            "zho": {
                "official": "\u963F\u5C14\u53CA\u5229\u4E9A\u4EBA\u6C11\u6C11\u4E3B\u5171\u548C\u56FD",
                "common": "\u963F\u5C14\u53CA\u5229\u4E9A"
            }
        },
        "latlng": [
            28,
            3
        ],
        "landlocked": false,
        "borders": [
            "TUN",
            "LBY",
            "NER",
            "ESH",
            "MRT",
            "MLI",
            "MAR"
        ],
        "area": 2381741,
        "demonyms": {
            "eng": {
                "f": "Algerian",
                "m": "Algerian"
            },
            "fra": {
                "f": "Alg\xe9rienne",
                "m": "Alg\xe9rien"
            }
        },
        "flag": "\uD83C\uDDE9\uD83C\uDDFF",
        "maps": {
            "googleMaps": "https://goo.gl/maps/RsAyAfyaiNVb8DpW8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192756"
        },
        "population": 44700000,
        "gini": {
            "2011": 27.6
        },
        "fifa": "ALG",
        "car": {
            "signs": [
                "DZ"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/dz.png",
            "svg": "https://flagcdn.com/dz.svg",
            "alt": "The flag of Algeria features two equal vertical bands of green and white. A five-pointed red star within a fly-side facing red crescent is centered over the two-color boundary."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/dz.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/dz.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                36.75,
                3.05
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Kyrgyzstan",
            "official": "Kyrgyz Republic",
            "nativeName": {
                "kir": {
                    "official": "\u041A\u044B\u0440\u0433\u044B\u0437 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430\u0441\u044B",
                    "common": "\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D"
                },
                "rus": {
                    "official": "\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                    "common": "\u041A\u0438\u0440\u0433\u0438\u0437\u0438\u044F"
                }
            }
        },
        "tld": [
            ".kg"
        ],
        "cca2": "KG",
        "ccn3": "417",
        "cca3": "KGZ",
        "cioc": "KGZ",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "KGS": {
                "name": "Kyrgyzstani som",
                "symbol": "\u0441"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "96"
            ]
        },
        "capital": [
            "Bishkek"
        ],
        "altSpellings": [
            "KG",
            "\u041A\u0438\u0440\u0433\u0438\u0437\u0438\u044F",
            "Kyrgyz Republic",
            "\u041A\u044B\u0440\u0433\u044B\u0437 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430\u0441\u044B",
            "Kyrgyz Respublikasy"
        ],
        "region": "Asia",
        "subregion": "Central Asia",
        "languages": {
            "kir": "Kyrgyz",
            "rus": "Russian"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0642\u064A\u0631\u063A\u064A\u0632\u064A\u0629",
                "common": "\u0642\u064A\u0631\u063A\u064A\u0632\u0633\u062A\u0627\u0646"
            },
            "bre": {
                "official": "Republik Kirgiz",
                "common": "Kirgizstan"
            },
            "ces": {
                "official": "Kyrgyzsk\xe1 republika",
                "common": "Kyrgyzst\xe1n"
            },
            "cym": {
                "official": "Kyrgyz Republic",
                "common": "Kyrgyzstan"
            },
            "deu": {
                "official": "Kirgisische Republik",
                "common": "Kirgisistan"
            },
            "est": {
                "official": "Kirgiisi Vabariik",
                "common": "K\xf5rg\xf5zstan"
            },
            "fin": {
                "official": "Kirgisian tasavalta",
                "common": "Kirgisia"
            },
            "fra": {
                "official": "R\xe9publique kirghize",
                "common": "Kirghizistan"
            },
            "hrv": {
                "official": "Kirgistanu",
                "common": "Kirgistan"
            },
            "hun": {
                "official": "Kirgiz K\xf6zt\xe1rsas\xe1g",
                "common": "Kirgiziszt\xe1n"
            },
            "ita": {
                "official": "Kirghizistan",
                "common": "Kirghizistan"
            },
            "jpn": {
                "official": "\u30AD\u30EB\u30AE\u30B9\u5171\u548C\u56FD",
                "common": "\u30AD\u30EB\u30AE\u30B9"
            },
            "kor": {
                "official": "\uD0A4\uB974\uAE30\uC2A4 \uACF5\uD654\uAD6D",
                "common": "\uD0A4\uB974\uAE30\uC2A4\uC2A4\uD0C4"
            },
            "nld": {
                "official": "Kirgizische Republiek",
                "common": "Kirgizi\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0642\u0650\u0631\u0642\u06CC\u0632\u0633\u062A\u0627\u0646",
                "common": "\u0642\u0631\u0642\u06CC\u0632\u0633\u062A\u0627\u0646"
            },
            "pol": {
                "official": "Republika Kirgiska",
                "common": "Kirgistan"
            },
            "por": {
                "official": "Rep\xfablica do Quirguist\xe3o",
                "common": "Quirguist\xe3o"
            },
            "rus": {
                "official": "\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u041A\u0438\u0440\u0433\u0438\u0437\u0438\u044F"
            },
            "slk": {
                "official": "Kirgizsk\xe1 republika",
                "common": "Kirgizsko"
            },
            "spa": {
                "official": "Rep\xfablica Kirguisa",
                "common": "Kirguizist\xe1n"
            },
            "srp": {
                "official": "\u041A\u0438\u0440\u0433\u0438\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u041A\u0438\u0440\u0433\u0438\u0437\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Kirgizistan",
                "common": "Kirgizistan"
            },
            "tur": {
                "official": "K\u0131rg\u0131zistan Cumhuriyeti",
                "common": "K\u0131rg\u0131zistan"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0631\u063A\u06CC\u0632\u0633\u062A\u0627\u0646",
                "common": "\u06A9\u0631\u063A\u06CC\u0632\u0633\u062A\u0627\u0646"
            },
            "zho": {
                "official": "\u5409\u5C14\u5409\u65AF\u65AF\u5766\u5171\u548C\u56FD",
                "common": "\u5409\u5C14\u5409\u65AF\u65AF\u5766"
            }
        },
        "latlng": [
            41,
            75
        ],
        "landlocked": true,
        "borders": [
            "CHN",
            "KAZ",
            "TJK",
            "UZB"
        ],
        "area": 199951,
        "demonyms": {
            "eng": {
                "f": "Kirghiz",
                "m": "Kirghiz"
            },
            "fra": {
                "f": "Kirghize",
                "m": "Kirghize"
            }
        },
        "flag": "\uD83C\uDDF0\uD83C\uDDEC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/SKG8BSMMQVvxkRkB7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/178009"
        },
        "population": 6591600,
        "gini": {
            "2019": 29.7
        },
        "fifa": "KGZ",
        "car": {
            "signs": [
                "KS"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+06:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/kg.png",
            "svg": "https://flagcdn.com/kg.svg",
            "alt": "The flag of Kyrgyzstan features a yellow sun with forty rays at the center of a red field. At the center of the sun is a stylized depiction of a tunduk."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/kg.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/kg.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                42.87,
                74.6
            ]
        },
        "postalCode": {
            "format": "######",
            "regex": "^(\\d{6})$"
        }
    },
    {
        "name": {
            "common": "Finland",
            "official": "Republic of Finland",
            "nativeName": {
                "fin": {
                    "official": "Suomen tasavalta",
                    "common": "Suomi"
                },
                "swe": {
                    "official": "Republiken Finland",
                    "common": "Finland"
                }
            }
        },
        "tld": [
            ".fi"
        ],
        "cca2": "FI",
        "ccn3": "246",
        "cca3": "FIN",
        "cioc": "FIN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "58"
            ]
        },
        "capital": [
            "Helsinki"
        ],
        "altSpellings": [
            "FI",
            "Suomi",
            "Republic of Finland",
            "Suomen tasavalta",
            "Republiken Finland"
        ],
        "region": "Europe",
        "subregion": "Northern Europe",
        "languages": {
            "fin": "Finnish",
            "swe": "Swedish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0641\u0646\u0644\u0646\u062F\u0627",
                "common": "\u0641\u0646\u0644\u0646\u062F\u0627"
            },
            "bre": {
                "official": "Republik Finland",
                "common": "Finland"
            },
            "ces": {
                "official": "Finsk\xe1 republika",
                "common": "Finsko"
            },
            "cym": {
                "official": "Republic of Finland",
                "common": "Finland"
            },
            "deu": {
                "official": "Republik Finnland",
                "common": "Finnland"
            },
            "est": {
                "official": "Soome Vabariik",
                "common": "Soome"
            },
            "fin": {
                "official": "Suomen tasavalta",
                "common": "Suomi"
            },
            "fra": {
                "official": "R\xe9publique de Finlande",
                "common": "Finlande"
            },
            "hrv": {
                "official": "Republika Finska",
                "common": "Finska"
            },
            "hun": {
                "official": "Finn K\xf6zt\xe1rsas\xe1g",
                "common": "Finnorsz\xe1g"
            },
            "ita": {
                "official": "Repubblica di Finlandia",
                "common": "Finlandia"
            },
            "jpn": {
                "official": "\u30D5\u30A3\u30F3\u30E9\u30F3\u30C9\u5171\u548C\u56FD",
                "common": "\u30D5\u30A3\u30F3\u30E9\u30F3\u30C9"
            },
            "kor": {
                "official": "\uD540\uB780\uB4DC \uACF5\uD654\uAD6D",
                "common": "\uD540\uB780\uB4DC"
            },
            "nld": {
                "official": "Republiek Finland",
                "common": "Finland"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0641\u0646\u0644\u0627\u0646\u062F",
                "common": "\u0641\u0646\u0644\u0627\u0646\u062F"
            },
            "pol": {
                "official": "Republika Finlandii",
                "common": "Finlandia"
            },
            "por": {
                "official": "Rep\xfablica da Finl\xe2ndia",
                "common": "Finl\xe2ndia"
            },
            "rus": {
                "official": "\u0424\u0438\u043D\u043B\u044F\u043D\u0434\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0424\u0438\u043D\u043B\u044F\u043D\u0434\u0438\u044F"
            },
            "slk": {
                "official": "F\xednska republika",
                "common": "F\xednsko"
            },
            "spa": {
                "official": "Rep\xfablica de Finlandia",
                "common": "Finlandia"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0424\u0438\u043D\u0441\u043A\u0430",
                "common": "\u0424\u0438\u043D\u0441\u043A\u0430"
            },
            "swe": {
                "official": "Republiken Finland",
                "common": "Finland"
            },
            "tur": {
                "official": "Finlandiya Cumhuriyeti",
                "common": "Finlandiya"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0641\u0646 \u0644\u06CC\u0646\u0688",
                "common": "\u0641\u0646 \u0644\u06CC\u0646\u0688"
            },
            "zho": {
                "official": "\u82AC\u5170\u5171\u548C\u56FD",
                "common": "\u82AC\u5170"
            }
        },
        "latlng": [
            64,
            26
        ],
        "landlocked": false,
        "borders": [
            "NOR",
            "SWE",
            "RUS"
        ],
        "area": 338424,
        "demonyms": {
            "eng": {
                "f": "Finnish",
                "m": "Finnish"
            },
            "fra": {
                "f": "Finlandaise",
                "m": "Finlandais"
            }
        },
        "flag": "\uD83C\uDDEB\uD83C\uDDEE",
        "maps": {
            "googleMaps": "https://goo.gl/maps/HjgWDCNKRAYHrkMn8",
            "openStreetMaps": "openstreetmap.org/relation/54224"
        },
        "population": 5530719,
        "gini": {
            "2018": 27.3
        },
        "fifa": "FIN",
        "car": {
            "signs": [
                "FIN"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/fi.png",
            "svg": "https://flagcdn.com/fi.svg",
            "alt": "The flag of Finland has a white field with a large blue cross that extend to the edges of the field. The vertical part of this cross is offset towards the hoist side."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/fi.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/fi.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                60.17,
                24.93
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(?:FI)*(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Antarctica",
            "official": "Antarctica"
        },
        "tld": [
            ".aq"
        ],
        "cca2": "AQ",
        "ccn3": "010",
        "cca3": "ATA",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "idd": {},
        "altSpellings": [
            "AQ"
        ],
        "region": "Antarctic",
        "translations": {
            "ara": {
                "official": "\u0623\u0646\u062A\u0627\u0631\u062A\u064A\u0643\u0627",
                "common": "\u0623\u0646\u062A\u0627\u0631\u062A\u064A\u0643\u0627"
            },
            "bre": {
                "official": "Antarktika",
                "common": "Antarktika"
            },
            "ces": {
                "official": "Antarktida",
                "common": "Antarktida"
            },
            "cym": {
                "official": "Yr Antarctig",
                "common": "Yr Antarctig"
            },
            "deu": {
                "official": "Antarktika",
                "common": "Antarktis"
            },
            "est": {
                "official": "Antarktika",
                "common": "Antarktika"
            },
            "fin": {
                "official": "Etel\xe4manner",
                "common": "Etel\xe4manner"
            },
            "fra": {
                "official": "Antarctique",
                "common": "Antarctique"
            },
            "hrv": {
                "official": "Antarktika",
                "common": "Antarktika"
            },
            "hun": {
                "official": "Antarktisz",
                "common": "Antarktisz"
            },
            "ita": {
                "official": "Antartide",
                "common": "Antartide"
            },
            "jpn": {
                "official": "\u5357\u6975\u5927\u9678",
                "common": "\u5357\u6975"
            },
            "kor": {
                "official": "\uB0A8\uADF9",
                "common": "\uB0A8\uADF9"
            },
            "nld": {
                "official": "Antarctica",
                "common": "Antarctica"
            },
            "per": {
                "official": "\u062C\u0646\u0648\u0628\u06AF\u0627\u0646",
                "common": "\u062C\u0646\u0648\u0628\u06AF\u0627\u0646"
            },
            "pol": {
                "official": "Antarktyka",
                "common": "Antarktyka"
            },
            "por": {
                "official": "Ant\xe1rtica",
                "common": "Ant\xe1rtida"
            },
            "rus": {
                "official": "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u0434\u0430",
                "common": "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u0434\u0430"
            },
            "slk": {
                "official": "Antarkt\xedda",
                "common": "Antarkt\xedda"
            },
            "spa": {
                "official": "Ant\xe1rtida",
                "common": "Ant\xe1rtida"
            },
            "srp": {
                "official": "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A",
                "common": "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A"
            },
            "swe": {
                "official": "Antarktis",
                "common": "Antarktis"
            },
            "tur": {
                "official": "Antarktika",
                "common": "Antarktika"
            },
            "urd": {
                "official": "\u0627\u0646\u0679\u0627\u0631\u06A9\u0679\u06A9\u0627",
                "common": "\u0627\u0646\u0679\u0627\u0631\u06A9\u0679\u06A9\u0627"
            },
            "zho": {
                "official": "\u5357\u6781\u6D32",
                "common": "\u5357\u6781\u6D32"
            }
        },
        "latlng": [
            -90,
            0
        ],
        "landlocked": false,
        "area": 14000000,
        "demonyms": {
            "eng": {
                "f": "Antarctican",
                "m": "Antarctican"
            },
            "fra": {
                "f": "Antarcticaine",
                "m": "Antarcticain"
            }
        },
        "flag": "\uD83C\uDDE6\uD83C\uDDF6",
        "maps": {
            "googleMaps": "https://goo.gl/maps/kyBuJriu4itiXank7",
            "openStreetMaps": "https://www.openstreetmap.org/node/36966060"
        },
        "population": 1000,
        "car": {
            "signs": [
                ""
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-03:00",
            "UTC+03:00",
            "UTC+05:00",
            "UTC+06:00",
            "UTC+07:00",
            "UTC+08:00",
            "UTC+10:00",
            "UTC+12:00"
        ],
        "continents": [
            "Antarctica"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/aq.png",
            "svg": "https://flagcdn.com/aq.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/aq.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/aq.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {}
    },
    {
        "name": {
            "common": "Kenya",
            "official": "Republic of Kenya",
            "nativeName": {
                "eng": {
                    "official": "Republic of Kenya",
                    "common": "Kenya"
                },
                "swa": {
                    "official": "Republic of Kenya",
                    "common": "Kenya"
                }
            }
        },
        "tld": [
            ".ke"
        ],
        "cca2": "KE",
        "ccn3": "404",
        "cca3": "KEN",
        "cioc": "KEN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "KES": {
                "name": "Kenyan shilling",
                "symbol": "Sh"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "54"
            ]
        },
        "capital": [
            "Nairobi"
        ],
        "altSpellings": [
            "KE",
            "Republic of Kenya",
            "Jamhuri ya Kenya"
        ],
        "region": "Africa",
        "subregion": "Eastern Africa",
        "languages": {
            "eng": "English",
            "swa": "Swahili"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u064A\u0646\u064A\u0627",
                "common": "\u0643\u064A\u0646\u064A\u0627"
            },
            "bre": {
                "official": "Republik Kenya",
                "common": "Kenya"
            },
            "ces": {
                "official": "Ke\u0148sk\xe1 republika",
                "common": "Ke\u0148a"
            },
            "cym": {
                "official": "Republic of Kenya",
                "common": "Kenya"
            },
            "deu": {
                "official": "Republik Kenia",
                "common": "Kenia"
            },
            "est": {
                "official": "Keenia Vabariik",
                "common": "Keenia"
            },
            "fin": {
                "official": "Kenian tasavalta",
                "common": "Kenia"
            },
            "fra": {
                "official": "R\xe9publique du Kenya",
                "common": "Kenya"
            },
            "hrv": {
                "official": "Republika Kenija",
                "common": "Kenija"
            },
            "hun": {
                "official": "Kenyai K\xf6zt\xe1rsas\xe1g",
                "common": "Kenya"
            },
            "ita": {
                "official": "Repubblica del Kenya",
                "common": "Kenya"
            },
            "jpn": {
                "official": "\u30B1\u30CB\u30A2\u5171\u548C\u56FD",
                "common": "\u30B1\u30CB\u30A2"
            },
            "kor": {
                "official": "\uCF00\uB0D0 \uACF5\uD654\uAD6D",
                "common": "\uCF00\uB0D0"
            },
            "nld": {
                "official": "Republiek Kenia",
                "common": "Kenia"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u0646\u06CC\u0627",
                "common": "\u06A9\u0646\u06CC\u0627"
            },
            "pol": {
                "official": "Republika Kenii",
                "common": "Kenia"
            },
            "por": {
                "official": "Rep\xfablica do Qu\xe9nia",
                "common": "Qu\xe9nia"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0435\u043D\u0438\u044F",
                "common": "\u041A\u0435\u043D\u0438\u044F"
            },
            "slk": {
                "official": "Kensk\xe1 republika",
                "common": "Ke\u0148a"
            },
            "spa": {
                "official": "Rep\xfablica de Kenya",
                "common": "Kenia"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0435\u043D\u0438\u0458\u0430",
                "common": "\u041A\u0435\u043D\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Kenya",
                "common": "Kenya"
            },
            "tur": {
                "official": "Kenya Cumhuriyeti",
                "common": "Kenya"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u06CC\u0646\u06CC\u0627",
                "common": "\u06A9\u06CC\u0646\u06CC\u0627"
            },
            "zho": {
                "official": "\u80AF\u5C3C\u4E9A\u5171\u548C\u56FD",
                "common": "\u80AF\u5C3C\u4E9A"
            }
        },
        "latlng": [
            1,
            38
        ],
        "landlocked": false,
        "borders": [
            "ETH",
            "SOM",
            "SSD",
            "TZA",
            "UGA"
        ],
        "area": 580367,
        "demonyms": {
            "eng": {
                "f": "Kenyan",
                "m": "Kenyan"
            },
            "fra": {
                "f": "K\xe9nyane",
                "m": "K\xe9nyan"
            }
        },
        "flag": "\uD83C\uDDF0\uD83C\uDDEA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/Ni9M7wcCxf8bJHLX8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192798"
        },
        "population": 53771300,
        "gini": {
            "2015": 40.8
        },
        "fifa": "KEN",
        "car": {
            "signs": [
                "EAK"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ke.png",
            "svg": "https://flagcdn.com/ke.svg",
            "alt": "The flag of Kenya is composed of three equal horizontal bands of black, red with white top and bottom edges, and green. An emblem comprising a red, black and white Maasai shield covering two crossed white spears is superimposed at the center of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ke.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ke.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -1.28,
                36.82
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Cuba",
            "official": "Republic of Cuba",
            "nativeName": {
                "spa": {
                    "official": "Rep\xfablica de Cuba",
                    "common": "Cuba"
                }
            }
        },
        "tld": [
            ".cu"
        ],
        "cca2": "CU",
        "ccn3": "192",
        "cca3": "CUB",
        "cioc": "CUB",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "CUC": {
                "name": "Cuban convertible peso",
                "symbol": "$"
            },
            "CUP": {
                "name": "Cuban peso",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "3"
            ]
        },
        "capital": [
            "Havana"
        ],
        "altSpellings": [
            "CU",
            "Republic of Cuba",
            "Rep\xfablica de Cuba"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u0648\u0628\u0627",
                "common": "\u0643\u0648\u0628\u0627"
            },
            "bre": {
                "official": "Republik Kuba",
                "common": "Kuba"
            },
            "ces": {
                "official": "Kub\xe1nsk\xe1 republika",
                "common": "Kuba"
            },
            "cym": {
                "official": "Gweriniaeth Ciwba",
                "common": "Ciwba"
            },
            "deu": {
                "official": "Republik Kuba",
                "common": "Kuba"
            },
            "est": {
                "official": "Kuuba Vabariik",
                "common": "Kuuba"
            },
            "fin": {
                "official": "Kuuban tasavalta",
                "common": "Kuuba"
            },
            "fra": {
                "official": "R\xe9publique de Cuba",
                "common": "Cuba"
            },
            "hrv": {
                "official": "Republika Kuba",
                "common": "Kuba"
            },
            "hun": {
                "official": "Kubai K\xf6zt\xe1rsas\xe1g",
                "common": "Kuba"
            },
            "ita": {
                "official": "Repubblica di Cuba",
                "common": "Cuba"
            },
            "jpn": {
                "official": "\u30AD\u30E5\u30FC\u30D0\u5171\u548C\u56FD",
                "common": "\u30AD\u30E5\u30FC\u30D0"
            },
            "kor": {
                "official": "\uCFE0\uBC14 \uACF5\uD654\uAD6D",
                "common": "\uCFE0\uBC14"
            },
            "nld": {
                "official": "Republiek Cuba",
                "common": "Cuba"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u0648\u0628\u0627",
                "common": "\u06A9\u0648\u0628\u0627"
            },
            "pol": {
                "official": "Republika Kuby",
                "common": "Kuba"
            },
            "por": {
                "official": "Rep\xfablica de Cuba",
                "common": "Cuba"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0443\u0431\u0430",
                "common": "\u041A\u0443\u0431\u0430"
            },
            "slk": {
                "official": "Kub\xe1nska republika",
                "common": "Kuba"
            },
            "spa": {
                "official": "Rep\xfablica de Cuba",
                "common": "Cuba"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0443\u0431\u0430",
                "common": "\u041A\u0443\u0431\u0430"
            },
            "swe": {
                "official": "Republiken Kuba",
                "common": "Kuba"
            },
            "tur": {
                "official": "K\xfcba Cumhuriyeti",
                "common": "K\xfcba"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u06CC\u0648\u0628\u0627",
                "common": "\u06A9\u06CC\u0648\u0628\u0627"
            },
            "zho": {
                "official": "\u53E4\u5DF4\u5171\u548C\u56FD",
                "common": "\u53E4\u5DF4"
            }
        },
        "latlng": [
            21.5,
            -80
        ],
        "landlocked": false,
        "area": 109884,
        "demonyms": {
            "eng": {
                "f": "Cuban",
                "m": "Cuban"
            },
            "fra": {
                "f": "Cubaine",
                "m": "Cubain"
            }
        },
        "flag": "\uD83C\uDDE8\uD83C\uDDFA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/1dDw1QfZspfMUTm99",
            "openStreetMaps": "https://www.openstreetmap.org/relation/307833"
        },
        "population": 11326616,
        "fifa": "CUB",
        "car": {
            "signs": [
                "C"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-05:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/cu.png",
            "svg": "https://flagcdn.com/cu.svg",
            "alt": "The flag of Cuba is composed of five equal horizontal bands of blue alternating with white and a red equilateral triangle superimposed on the hoist side of the field. The triangle has its base on the hoist end, spans about two-fifth the width of the field and bears a white five-pointed star at its center."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/cu.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/cu.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                23.12,
                -82.35
            ]
        },
        "postalCode": {
            "format": "CP #####",
            "regex": "^(?:CP)*(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Montserrat",
            "official": "Montserrat",
            "nativeName": {
                "eng": {
                    "official": "Montserrat",
                    "common": "Montserrat"
                }
            }
        },
        "tld": [
            ".ms"
        ],
        "cca2": "MS",
        "ccn3": "500",
        "cca3": "MSR",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "XCD": {
                "name": "Eastern Caribbean dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "664"
            ]
        },
        "capital": [
            "Plymouth"
        ],
        "altSpellings": [
            "MS"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0648\u0646\u062A\u0633\u0631\u0627\u062A",
                "common": "\u0645\u0648\u0646\u062A\u0633\u0631\u0627\u062A"
            },
            "bre": {
                "official": "Montserrat",
                "common": "Montserrat"
            },
            "ces": {
                "official": "Montserrat",
                "common": "Montserrat"
            },
            "cym": {
                "official": "Montserrat",
                "common": "Montserrat"
            },
            "deu": {
                "official": "Montserrat",
                "common": "Montserrat"
            },
            "est": {
                "official": "Montserrat",
                "common": "Montserrat"
            },
            "fin": {
                "official": "Montserrat",
                "common": "Montserrat"
            },
            "fra": {
                "official": "Montserrat",
                "common": "Montserrat"
            },
            "hrv": {
                "official": "Montserrat",
                "common": "Montserrat"
            },
            "hun": {
                "official": "Montserrat",
                "common": "Montserrat"
            },
            "ita": {
                "official": "Montserrat",
                "common": "Montserrat"
            },
            "jpn": {
                "official": "\u30E2\u30F3\u30C8\u30BB\u30E9\u30C8",
                "common": "\u30E2\u30F3\u30C8\u30BB\u30E9\u30C8"
            },
            "kor": {
                "official": "\uBAAC\uD2B8\uC138\uB7AB",
                "common": "\uBAAC\uD2B8\uC138\uB7AB"
            },
            "nld": {
                "official": "Montserrat",
                "common": "Montserrat"
            },
            "per": {
                "official": "\u0645\u0648\u0646\u062A\u0633\u0631\u0627\u062A",
                "common": "\u0645\u0648\u0646\u062A\u0633\u0631\u0627\u062A"
            },
            "pol": {
                "official": "Montserrat",
                "common": "Montserrat"
            },
            "por": {
                "official": "Montserrat",
                "common": "Montserrat"
            },
            "rus": {
                "official": "\u041C\u043E\u043D\u0442\u0441\u0435\u0440\u0440\u0430\u0442",
                "common": "\u041C\u043E\u043D\u0442\u0441\u0435\u0440\u0440\u0430\u0442"
            },
            "slk": {
                "official": "Montserrat",
                "common": "Montserrat"
            },
            "spa": {
                "official": "Montserrat",
                "common": "Montserrat"
            },
            "srp": {
                "official": "\u041C\u043E\u043D\u0442\u0441\u0435\u0440\u0430\u0442",
                "common": "\u041C\u043E\u043D\u0442\u0441\u0435\u0440\u0430\u0442"
            },
            "swe": {
                "official": "Montserrat",
                "common": "Montserrat"
            },
            "tur": {
                "official": "Montserrat",
                "common": "Montserrat"
            },
            "urd": {
                "official": "\u0645\u0627\u0646\u0679\u0633\u0631\u06CC\u0679",
                "common": "\u0645\u0627\u0646\u0679\u0633\u0631\u06CC\u0679"
            },
            "zho": {
                "official": "\u8499\u7279\u585E\u62C9\u7279",
                "common": "\u8499\u7279\u585E\u62C9\u7279"
            }
        },
        "latlng": [
            16.75,
            -62.2
        ],
        "landlocked": false,
        "area": 102,
        "demonyms": {
            "eng": {
                "f": "Montserratian",
                "m": "Montserratian"
            },
            "fra": {
                "f": "Montserratienne",
                "m": "Montserratien"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDF8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/CSbe7UmxPmiwQB7GA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/537257"
        },
        "population": 4922,
        "fifa": "MSR",
        "car": {
            "signs": [
                "GB"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ms.png",
            "svg": "https://flagcdn.com/ms.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ms.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ms.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                16.7,
                -62.22
            ]
        }
    },
    {
        "name": {
            "common": "Poland",
            "official": "Republic of Poland",
            "nativeName": {
                "pol": {
                    "official": "Rzeczpospolita Polska",
                    "common": "Polska"
                }
            }
        },
        "tld": [
            ".pl"
        ],
        "cca2": "PL",
        "ccn3": "616",
        "cca3": "POL",
        "cioc": "POL",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "PLN": {
                "name": "Polish z\u0142oty",
                "symbol": "z\u0142"
            }
        },
        "idd": {
            "root": "+4",
            "suffixes": [
                "8"
            ]
        },
        "capital": [
            "Warsaw"
        ],
        "altSpellings": [
            "PL",
            "Republic of Poland",
            "Rzeczpospolita Polska"
        ],
        "region": "Europe",
        "subregion": "Central Europe",
        "languages": {
            "pol": "Polish"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0628\u0648\u0644\u0646\u062F\u064A\u0629",
                "common": "\u0628\u0648\u0644\u0646\u062F\u0627"
            },
            "bre": {
                "official": "Republik Polonia",
                "common": "Polonia"
            },
            "ces": {
                "official": "Polsk\xe1 republika",
                "common": "Polsko"
            },
            "cym": {
                "official": "Republic of Poland",
                "common": "Poland"
            },
            "deu": {
                "official": "Republik Polen",
                "common": "Polen"
            },
            "est": {
                "official": "Poola Vabariik",
                "common": "Poola"
            },
            "fin": {
                "official": "Puolan tasavalta",
                "common": "Puola"
            },
            "fra": {
                "official": "R\xe9publique de Pologne",
                "common": "Pologne"
            },
            "hrv": {
                "official": "Republika Poljska",
                "common": "Poljska"
            },
            "hun": {
                "official": "Lengyel K\xf6zt\xe1rsas\xe1g",
                "common": "Lengyelorsz\xe1g"
            },
            "ita": {
                "official": "Repubblica di Polonia",
                "common": "Polonia"
            },
            "jpn": {
                "official": "\u30DD\u30FC\u30E9\u30F3\u30C9\u5171\u548C\u56FD",
                "common": "\u30DD\u30FC\u30E9\u30F3\u30C9"
            },
            "kor": {
                "official": "\uD3F4\uB780\uB4DC \uACF5\uD654\uAD6D",
                "common": "\uD3F4\uB780\uB4DC"
            },
            "nld": {
                "official": "Republiek Polen",
                "common": "Polen"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0644\u0647\u0633\u062A\u0627\u0646",
                "common": "\u0644\u0647\u0633\u062A\u0627\u0646"
            },
            "pol": {
                "official": "Rzeczpospolita Polska",
                "common": "Polska"
            },
            "por": {
                "official": "Rep\xfablica da Pol\xf3nia",
                "common": "Pol\xf3nia"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u043E\u043B\u044C\u0448\u0430",
                "common": "\u041F\u043E\u043B\u044C\u0448\u0430"
            },
            "slk": {
                "official": "Po\u013Esk\xe1 republika",
                "common": "Po\u013Esko"
            },
            "spa": {
                "official": "Rep\xfablica de Polonia",
                "common": "Polonia"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u043E\u0459\u0441\u043A\u0430",
                "common": "\u041F\u043E\u0459\u0441\u043A\u0430"
            },
            "swe": {
                "official": "Republiken Polen",
                "common": "Polen"
            },
            "tur": {
                "official": "Polonya Cumhuriyeti",
                "common": "Polonya"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u067E\u0648\u0644\u06CC\u0646\u0688",
                "common": "\u067E\u0648\u0644\u06CC\u0646\u0688"
            },
            "zho": {
                "official": "\u6CE2\u5170\u5171\u548C\u56FD",
                "common": "\u6CE2\u5170"
            }
        },
        "latlng": [
            52,
            20
        ],
        "landlocked": false,
        "borders": [
            "BLR",
            "CZE",
            "DEU",
            "LTU",
            "RUS",
            "SVK",
            "UKR"
        ],
        "area": 312679,
        "demonyms": {
            "eng": {
                "f": "Polish",
                "m": "Polish"
            },
            "fra": {
                "f": "Polonaise",
                "m": "Polonais"
            }
        },
        "flag": "\uD83C\uDDF5\uD83C\uDDF1",
        "maps": {
            "googleMaps": "https://goo.gl/maps/gY9Xw4Sf4415P4949",
            "openStreetMaps": "https://www.openstreetmap.org/relation/49715"
        },
        "population": 37950802,
        "gini": {
            "2018": 30.2
        },
        "fifa": "POL",
        "car": {
            "signs": [
                "PL"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/pl.png",
            "svg": "https://flagcdn.com/pl.svg",
            "alt": "The flag of Poland is composed of two equal horizontal bands of white and red."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/pl.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/pl.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                52.25,
                21
            ]
        },
        "postalCode": {
            "format": "##-###",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "\xc5land Islands",
            "official": "\xc5land Islands",
            "nativeName": {
                "swe": {
                    "official": "Landskapet \xc5land",
                    "common": "\xc5land"
                }
            }
        },
        "tld": [
            ".ax"
        ],
        "cca2": "AX",
        "ccn3": "248",
        "cca3": "ALA",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "5818"
            ]
        },
        "capital": [
            "Mariehamn"
        ],
        "altSpellings": [
            "AX",
            "Aaland",
            "Aland",
            "Ahvenanmaa"
        ],
        "region": "Europe",
        "subregion": "Northern Europe",
        "languages": {
            "swe": "Swedish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0632\u0631 \u0623\u0648\u0644\u0627\u0646\u062F",
                "common": "\u062C\u0632\u0631 \u0623\u0648\u0644\u0627\u0646\u062F"
            },
            "bre": {
                "official": "Inizi \xc5land",
                "common": "\xc5land"
            },
            "ces": {
                "official": "\xc5landsk\xe9 ostrovy",
                "common": "\xc5landy"
            },
            "cym": {
                "official": "\xc5land Islands",
                "common": "\xc5land Islands"
            },
            "deu": {
                "official": "\xc5land-Inseln",
                "common": "\xc5land"
            },
            "est": {
                "official": "Ahvenamaa maakond",
                "common": "Ahvenamaa"
            },
            "fin": {
                "official": "Ahvenanmaan maakunta",
                "common": "Ahvenanmaa"
            },
            "fra": {
                "official": "Ahvenanmaa",
                "common": "Ahvenanmaa"
            },
            "hrv": {
                "official": "Aland Islands",
                "common": "\xc5landski otoci"
            },
            "hun": {
                "official": "\xc5land-szigetek",
                "common": "\xc5land-szigetek"
            },
            "ita": {
                "official": "Isole \xc5land",
                "common": "Isole Aland"
            },
            "jpn": {
                "official": "\u30AA\u30FC\u30E9\u30F3\u30C9\u8AF8\u5CF6",
                "common": "\u30AA\u30FC\u30E9\u30F3\u30C9\u8AF8\u5CF6"
            },
            "kor": {
                "official": "\uC62C\uB780\uB4DC \uC81C\uB3C4",
                "common": "\uC62C\uB780\uB4DC \uC81C\uB3C4"
            },
            "nld": {
                "official": "\xc5land eilanden",
                "common": "\xc5landeilanden"
            },
            "per": {
                "official": "\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u0646\u062F",
                "common": "\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u0646\u062F"
            },
            "pol": {
                "official": "Wyspy Alandzkie",
                "common": "Wyspy Alandzkie"
            },
            "por": {
                "official": "Ilhas \xc5land",
                "common": "Al\xe2ndia"
            },
            "rus": {
                "official": "\u0410\u043B\u0430\u043D\u0434\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                "common": "\u0410\u043B\u0430\u043D\u0434\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            "slk": {
                "official": "Alandsk\xe9 ostrovy",
                "common": "Alandy"
            },
            "spa": {
                "official": "Islas \xc5land",
                "common": "Alandia"
            },
            "srp": {
                "official": "\u041E\u043B\u0430\u043D\u0434\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                "common": "\u041E\u043B\u0430\u043D\u0434\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            "swe": {
                "official": "\xc5land",
                "common": "\xc5land"
            },
            "tur": {
                "official": "\xc5land Adalar\u0131",
                "common": "\xc5land"
            },
            "urd": {
                "official": "\u062C\u0632\u0627\u0626\u0631 \u0627\u0648\u0644\u0646\u062F",
                "common": "\u062C\u0632\u0627\u0626\u0631 \u0627\u0648\u0644\u0646\u062F"
            },
            "zho": {
                "official": "\u5965\u5170\u7FA4\u5C9B",
                "common": "\u5965\u5170\u7FA4\u5C9B"
            }
        },
        "latlng": [
            60.116667,
            19.9
        ],
        "landlocked": false,
        "area": 1580,
        "demonyms": {
            "eng": {
                "f": "\xc5landish",
                "m": "\xc5landish"
            },
            "fra": {
                "f": "\xc5landaise",
                "m": "\xc5landais"
            }
        },
        "flag": "\uD83C\uDDE6\uD83C\uDDFD",
        "maps": {
            "googleMaps": "https://goo.gl/maps/ewFb3vYsfUmVCoSb8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1650407"
        },
        "population": 29458,
        "car": {
            "signs": [
                ""
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ax.png",
            "svg": "https://flagcdn.com/ax.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ax.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ax.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                60.12,
                19.9
            ]
        }
    },
    {
        "name": {
            "common": "Ethiopia",
            "official": "Federal Democratic Republic of Ethiopia",
            "nativeName": {
                "amh": {
                    "official": "\u12E8\u12A2\u1275\u12EE\u1335\u12EB \u134C\u12F4\u122B\u120B\u12CA \u12F2\u121E\u12AD\u122B\u1232\u12EB\u12CA \u122A\u1350\u1265\u120A\u12AD",
                    "common": "\u12A2\u1275\u12EE\u1335\u12EB"
                }
            }
        },
        "tld": [
            ".et"
        ],
        "cca2": "ET",
        "ccn3": "231",
        "cca3": "ETH",
        "cioc": "ETH",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "ETB": {
                "name": "Ethiopian birr",
                "symbol": "Br"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "51"
            ]
        },
        "capital": [
            "Addis Ababa"
        ],
        "altSpellings": [
            "ET",
            "\u02BE\u012Aty\u014D\u1E57\u1E57y\u0101",
            "Federal Democratic Republic of Ethiopia",
            "\u12E8\u12A2\u1275\u12EE\u1335\u12EB \u134C\u12F4\u122B\u120B\u12CA \u12F2\u121E\u12AD\u122B\u1232\u12EB\u12CA \u122A\u1350\u1265\u120A\u12AD"
        ],
        "region": "Africa",
        "subregion": "Eastern Africa",
        "languages": {
            "amh": "Amharic"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0625\u062B\u064A\u0648\u0628\u064A\u0627 \u0627\u0644\u0641\u062F\u0631\u0627\u0644\u064A\u0629 \u0627\u0644\u062F\u064A\u0645\u0648\u0642\u0631\u0627\u0637\u064A\u0629",
                "common": "\u0625\u062B\u064A\u0648\u0628\u064A\u0627"
            },
            "bre": {
                "official": "Republik Demokratel Kevredadel Etiopia",
                "common": "Etiopia"
            },
            "ces": {
                "official": "Etiopsk\xe1 federativn\xed demokratick\xe1 republika",
                "common": "Etiopie"
            },
            "cym": {
                "official": "Gweriniaeth Ddemocrataidd Ffederal Ethiopia",
                "common": "Ethiopia"
            },
            "deu": {
                "official": "Demokratische Bundesrepublik \xc4thiopien",
                "common": "\xc4thiopien"
            },
            "est": {
                "official": "Etioopia Demokraatlik Liitvabariik",
                "common": "Etioopia"
            },
            "fin": {
                "official": "Etiopian demokraattinen liittotasavalta",
                "common": "Etiopia"
            },
            "fra": {
                "official": "R\xe9publique f\xe9d\xe9rale d\xe9mocratique d'\xc9thiopie",
                "common": "\xc9thiopie"
            },
            "hrv": {
                "official": "Savezna Demokratska Republika Etiopija",
                "common": "Etiopija"
            },
            "hun": {
                "official": "Eti\xf3p Sz\xf6vets\xe9gi Demokratikus K\xf6zt\xe1rsas\xe1g",
                "common": "Eti\xf3pia"
            },
            "ita": {
                "official": "Repubblica federale democratica di Etiopia",
                "common": "Etiopia"
            },
            "jpn": {
                "official": "\u30A8\u30C1\u30AA\u30D4\u30A2\u9023\u90A6\u6C11\u4E3B\u5171\u548C\u56FD",
                "common": "\u30A8\u30C1\u30AA\u30D4\u30A2"
            },
            "kor": {
                "official": "\uC5D0\uD2F0\uC624\uD53C\uC544 \uC5F0\uBC29 \uBBFC\uC8FC \uACF5\uD654\uAD6D",
                "common": "\uC5D0\uD2F0\uC624\uD53C\uC544"
            },
            "nld": {
                "official": "Federale Democratische Republiek Ethiopi\xeb",
                "common": "Ethiopi\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0641\u062F\u0631\u0627\u0644 \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9 \u0627\u062A\u06CC\u0648\u067E\u06CC",
                "common": "\u0627\u0650\u062A\u06CC\u0648\u067E\u06CC"
            },
            "pol": {
                "official": "Federalna Demokratyczna Republika Etiopii",
                "common": "Etiopia"
            },
            "por": {
                "official": "Rep\xfablica Federal Democr\xe1tica da Eti\xf3pia",
                "common": "Eti\xf3pia"
            },
            "rus": {
                "official": "\u0424\u0435\u0434\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0430\u044F \u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u042D\u0444\u0438\u043E\u043F\u0438\u044F",
                "common": "\u042D\u0444\u0438\u043E\u043F\u0438\u044F"
            },
            "slk": {
                "official": "Eti\xf3pska federat\xedvna demokratick\xe1 republika",
                "common": "Eti\xf3pia"
            },
            "spa": {
                "official": "Rep\xfablica Democr\xe1tica Federal de Etiop\xeda",
                "common": "Etiop\xeda"
            },
            "srp": {
                "official": "\u0421\u0430\u0432\u0435\u0437\u043D\u0430 \u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0415\u0442\u0438\u043E\u043F\u0438\u0458\u0430",
                "common": "\u0415\u0442\u0438\u043E\u043F\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Demokratiska f\xf6rbundsrepubliken Etiopien",
                "common": "Etiopien"
            },
            "tur": {
                "official": "Etiyopya Federal Demokratik Cumhuriyeti",
                "common": "Etiyopya"
            },
            "urd": {
                "official": "\u0648\u0641\u0627\u0642\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u06CC\u062A\u06BE\u0648\u067E\u06CC\u0627",
                "common": "\u0627\u06CC\u062A\u06BE\u0648\u067E\u06CC\u0627"
            },
            "zho": {
                "official": "\u57C3\u585E\u4FC4\u6BD4\u4E9A\u8054\u90A6\u6C11\u4E3B\u5171\u548C\u56FD",
                "common": "\u57C3\u585E\u4FC4\u6BD4\u4E9A"
            }
        },
        "latlng": [
            8,
            38
        ],
        "landlocked": true,
        "borders": [
            "DJI",
            "ERI",
            "KEN",
            "SOM",
            "SSD",
            "SDN"
        ],
        "area": 1104300,
        "demonyms": {
            "eng": {
                "f": "Ethiopian",
                "m": "Ethiopian"
            },
            "fra": {
                "f": "\xc9thiopienne",
                "m": "\xc9thiopien"
            }
        },
        "flag": "\uD83C\uDDEA\uD83C\uDDF9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/2Q4hQWCbhuZLj3fG6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192800"
        },
        "population": 114963583,
        "gini": {
            "2015": 35
        },
        "fifa": "ETH",
        "car": {
            "signs": [
                "ETH"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/et.png",
            "svg": "https://flagcdn.com/et.svg",
            "alt": "The flag of Ethiopia is composed of three equal horizontal bands of green, yellow and red, with the national emblem superimposed at the center of the field. The national emblem comprises a light blue circle bearing a golden-yellow pentagram with single yellow rays emanating from the angles between the points of the pentagram."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/et.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/et.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                9.03,
                38.7
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Togo",
            "official": "Togolese Republic",
            "nativeName": {
                "fra": {
                    "official": "R\xe9publique togolaise",
                    "common": "Togo"
                }
            }
        },
        "tld": [
            ".tg"
        ],
        "cca2": "TG",
        "ccn3": "768",
        "cca3": "TGO",
        "cioc": "TOG",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "XOF": {
                "name": "West African CFA franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "28"
            ]
        },
        "capital": [
            "Lom\xe9"
        ],
        "altSpellings": [
            "TG",
            "Togolese",
            "Togolese Republic",
            "R\xe9publique Togolaise"
        ],
        "region": "Africa",
        "subregion": "Western Africa",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062A\u0648\u063A\u0648",
                "common": "\u062A\u0648\u063A\u0648"
            },
            "bre": {
                "official": "Republik Togoat",
                "common": "Togo"
            },
            "ces": {
                "official": "Republika Togo",
                "common": "Togo"
            },
            "cym": {
                "official": "Togolese Republic",
                "common": "Togo"
            },
            "deu": {
                "official": "Republik Togo",
                "common": "Togo"
            },
            "est": {
                "official": "Togo Vabariik",
                "common": "Togo"
            },
            "fin": {
                "official": "Togon tasavalta",
                "common": "Togo"
            },
            "fra": {
                "official": "R\xe9publique togolaise",
                "common": "Togo"
            },
            "hrv": {
                "official": "Togolese Republika",
                "common": "Togo"
            },
            "hun": {
                "official": "Tog\xf3i K\xf6zt\xe1rsas\xe1g",
                "common": "Togo"
            },
            "ita": {
                "official": "Repubblica del Togo",
                "common": "Togo"
            },
            "jpn": {
                "official": "\u30C8\u30FC\u30B4\u5171\u548C\u56FD",
                "common": "\u30C8\u30FC\u30B4"
            },
            "kor": {
                "official": "\uD1A0\uACE0 \uACF5\uD654\uAD6D",
                "common": "\uD1A0\uACE0"
            },
            "nld": {
                "official": "Republiek Togo",
                "common": "Togo"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062A\u0648\u06AF\u0648",
                "common": "\u062A\u0648\u06AF\u0648"
            },
            "pol": {
                "official": "Republika Togijska",
                "common": "Togo"
            },
            "por": {
                "official": "Rep\xfablica do Togo",
                "common": "Togo"
            },
            "rus": {
                "official": "\u0422\u043E\u0433\u043E \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0422\u043E\u0433\u043E"
            },
            "slk": {
                "official": "Togsk\xe1 republika",
                "common": "Togo"
            },
            "spa": {
                "official": "Rep\xfablica de Togo",
                "common": "Togo"
            },
            "srp": {
                "official": "\u0422\u043E\u0433\u043E\u043B\u0435\u0448\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0422\u043E\u0433\u043E"
            },
            "swe": {
                "official": "Republiken Togo",
                "common": "Togo"
            },
            "tur": {
                "official": "Togo Cumhuriyeti",
                "common": "Togo"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0679\u0648\u06AF\u0648",
                "common": "\u0679\u0648\u06AF\u0648"
            },
            "zho": {
                "official": "\u591A\u54E5\u5171\u548C\u56FD",
                "common": "\u591A\u54E5"
            }
        },
        "latlng": [
            8,
            1.16666666
        ],
        "landlocked": false,
        "borders": [
            "BEN",
            "BFA",
            "GHA"
        ],
        "area": 56785,
        "demonyms": {
            "eng": {
                "f": "Togolese",
                "m": "Togolese"
            },
            "fra": {
                "f": "Togolaise",
                "m": "Togolais"
            }
        },
        "flag": "\uD83C\uDDF9\uD83C\uDDEC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/jzAa9feXuXPrKVb89",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192782"
        },
        "population": 8278737,
        "gini": {
            "2015": 43.1
        },
        "fifa": "TOG",
        "car": {
            "signs": [
                "TG"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/tg.png",
            "svg": "https://flagcdn.com/tg.svg",
            "alt": "The flag of Togo is composed of five equal horizontal bands of green alternating with yellow. A red square bearing a five-pointed white star is superimposed in the canton."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/tg.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/tg.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                6.14,
                1.21
            ]
        }
    },
    {
        "name": {
            "common": "Bosnia and Herzegovina",
            "official": "Bosnia and Herzegovina",
            "nativeName": {
                "bos": {
                    "official": "Bosna i Hercegovina",
                    "common": "Bosna i Hercegovina"
                },
                "hrv": {
                    "official": "Bosna i Hercegovina",
                    "common": "Bosna i Hercegovina"
                },
                "srp": {
                    "official": "\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430",
                    "common": "\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430"
                }
            }
        },
        "tld": [
            ".ba"
        ],
        "cca2": "BA",
        "ccn3": "070",
        "cca3": "BIH",
        "cioc": "BIH",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "BAM": {
                "name": "Bosnia and Herzegovina convertible mark"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "87"
            ]
        },
        "capital": [
            "Sarajevo"
        ],
        "altSpellings": [
            "BA",
            "Bosnia-Herzegovina",
            "\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430"
        ],
        "region": "Europe",
        "subregion": "Southeast Europe",
        "languages": {
            "bos": "Bosnian",
            "hrv": "Croatian",
            "srp": "Serbian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0628\u0648\u0633\u0646\u0629 \u0648\u0627\u0644\u0647\u0631\u0633\u0643",
                "common": "\u0627\u0644\u0628\u0648\u0633\u0646\u0629 \u0648\u0627\u0644\u0647\u0631\u0633\u0643"
            },
            "bre": {
                "official": "Bosnia-ha-Herzegovina",
                "common": "Bosnia-ha-Herzegovina"
            },
            "ces": {
                "official": "Bosna a Hercegovina",
                "common": "Bosna a Hercegovina"
            },
            "cym": {
                "official": "Bosnia a Hercegovina",
                "common": "Bosnia a Hercegovina"
            },
            "deu": {
                "official": "Bosnien und Herzegowina",
                "common": "Bosnien und Herzegowina"
            },
            "est": {
                "official": "Bosnia ja Hertsegoviina",
                "common": "Bosnia ja Hertsegoviina"
            },
            "fin": {
                "official": "Bosnia ja Hertsegovina",
                "common": "Bosnia ja Hertsegovina"
            },
            "fra": {
                "official": "Bosnie-et-Herz\xe9govine",
                "common": "Bosnie-Herz\xe9govine"
            },
            "hrv": {
                "official": "Bosna i Hercegovina",
                "common": "Bosna i Hercegovina"
            },
            "hun": {
                "official": "Bosznia-Hercegovina",
                "common": "Bosznia-Hercegovina"
            },
            "ita": {
                "official": "Bosnia-Erzegovina",
                "common": "Bosnia ed Erzegovina"
            },
            "jpn": {
                "official": "\u30DC\u30B9\u30CB\u30A2\xb7\u30D8\u30EB\u30C4\u30A7\u30B4\u30D3\u30CA",
                "common": "\u30DC\u30B9\u30CB\u30A2\u30FB\u30D8\u30EB\u30C4\u30A7\u30B4\u30D3\u30CA"
            },
            "kor": {
                "official": "\uBCF4\uC2A4\uB2C8\uC544 \uD5E4\uB974\uCCB4\uACE0\uBE44\uB098",
                "common": "\uBCF4\uC2A4\uB2C8\uC544 \uD5E4\uB974\uCCB4\uACE0\uBE44\uB098"
            },
            "nld": {
                "official": "Bosni\xeb-Herzegovina",
                "common": "Bosni\xeb en Herzegovina"
            },
            "per": {
                "official": "\u0628\u0648\u0633\u0646\u06CC \u0648 \u0647\u0631\u0632\u06AF\u0648\u06CC\u0646",
                "common": "\u0628\u0648\u0633\u0646\u06CC \u0648 \u0647\u0631\u0632\u06AF\u0648\u06CC\u0646"
            },
            "pol": {
                "official": "Bo\u015Bnia i Hercegowina",
                "common": "Bo\u015Bnia i Hercegowina"
            },
            "por": {
                "official": "B\xf3snia e Herzegovina",
                "common": "B\xf3snia e Herzegovina"
            },
            "rus": {
                "official": "\u0411\u043E\u0441\u043D\u0438\u044F \u0438 \u0413\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430",
                "common": "\u0411\u043E\u0441\u043D\u0438\u044F \u0438 \u0413\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430"
            },
            "slk": {
                "official": "Republika Bosny a Hercegoviny",
                "common": "Bosna a Hercegovina"
            },
            "spa": {
                "official": "Bosnia y Herzegovina",
                "common": "Bosnia y Herzegovina"
            },
            "srp": {
                "official": "\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430",
                "common": "\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430"
            },
            "swe": {
                "official": "Bosnien och Hercegovina",
                "common": "Bosnien och Hercegovina"
            },
            "tur": {
                "official": "Bosna ve Hersek",
                "common": "Bosna-Hersek"
            },
            "urd": {
                "official": "\u0628\u0648\u0633\u0646\u06CC\u0627 \u0648 \u06C1\u0631\u0632\u06CC\u06AF\u0648\u0648\u06CC\u0646\u0627",
                "common": "\u0628\u0648\u0633\u0646\u06CC\u0627 \u0648 \u06C1\u0631\u0632\u06CC\u06AF\u0648\u0648\u06CC\u0646\u0627"
            },
            "zho": {
                "official": "\u6CE2\u65AF\u5C3C\u4E9A\u548C\u9ED1\u585E\u54E5\u7EF4\u90A3",
                "common": "\u6CE2\u65AF\u5C3C\u4E9A\u548C\u9ED1\u585E\u54E5\u7EF4\u90A3"
            }
        },
        "latlng": [
            44,
            18
        ],
        "landlocked": false,
        "borders": [
            "HRV",
            "MNE",
            "SRB"
        ],
        "area": 51209,
        "demonyms": {
            "eng": {
                "f": "Bosnian, Herzegovinian",
                "m": "Bosnian, Herzegovinian"
            },
            "fra": {
                "f": "Bosnienne",
                "m": "Bosnien"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDE6",
        "maps": {
            "googleMaps": "https://www.google.com/maps/place/Bosnia+and+Herzegovina",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2528142"
        },
        "population": 3280815,
        "gini": {
            "2011": 33
        },
        "fifa": "BIH",
        "car": {
            "signs": [
                "BIH"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ba.png",
            "svg": "https://flagcdn.com/ba.svg",
            "alt": "The flag of Bosnia and Herzegovina has a blue field, at the center of which is a large yellow hoist-side facing right-angled triangle that is based on the top edge and spans the height of the field. Adjacent to the hypotenuse of this triangle are nine adjoining five-pointed white stars with the top and bottom stars cut in half by the edges of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ba.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ba.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                43.87,
                18.42
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Uruguay",
            "official": "Oriental Republic of Uruguay",
            "nativeName": {
                "spa": {
                    "official": "Rep\xfablica Oriental del Uruguay",
                    "common": "Uruguay"
                }
            }
        },
        "tld": [
            ".uy"
        ],
        "cca2": "UY",
        "ccn3": "858",
        "cca3": "URY",
        "cioc": "URU",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "UYU": {
                "name": "Uruguayan peso",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "98"
            ]
        },
        "capital": [
            "Montevideo"
        ],
        "altSpellings": [
            "UY",
            "Oriental Republic of Uruguay",
            "Rep\xfablica Oriental del Uruguay"
        ],
        "region": "Americas",
        "subregion": "South America",
        "languages": {
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0623\u0648\u0631\u0648\u063A\u0648\u0627\u064A \u0627\u0644\u0634\u0631\u0642\u064A\u0629",
                "common": "\u0627\u0644\u0623\u0648\u0631\u0648\u063A\u0648\u0627\u064A"
            },
            "bre": {
                "official": "Republik Reter Uruguay",
                "common": "Uruguay"
            },
            "ces": {
                "official": "Uruguaysk\xe1 v\xfdchodn\xed republika",
                "common": "Uruguay"
            },
            "cym": {
                "official": "Oriental Republic of Uruguay",
                "common": "Uruguay"
            },
            "deu": {
                "official": "Republik \xd6stlich des Uruguay",
                "common": "Uruguay"
            },
            "est": {
                "official": "Uruguay Idavabariik",
                "common": "Uruguay"
            },
            "fin": {
                "official": "Uruguayn it\xe4inen tasavalta",
                "common": "Uruguay"
            },
            "fra": {
                "official": "R\xe9publique orientale de l'Uruguay",
                "common": "Uruguay"
            },
            "hrv": {
                "official": "Orijentalna Republika Urugvaj",
                "common": "Urugvaj"
            },
            "hun": {
                "official": "Uruguayi Keleti K\xf6zt\xe1rsas\xe1g",
                "common": "Uruguay"
            },
            "ita": {
                "official": "Repubblica Orientale dell'Uruguay",
                "common": "Uruguay"
            },
            "jpn": {
                "official": "\u30A6\u30EB\u30B0\u30A2\u30A4\u6771\u65B9\u5171\u548C\u56FD",
                "common": "\u30A6\u30EB\u30B0\u30A2\u30A4"
            },
            "kor": {
                "official": "\uC6B0\uB8E8\uACFC\uC774 \uB3D9\uBC29 \uACF5\uD654\uAD6D",
                "common": "\uC6B0\uB8E8\uACFC\uC774"
            },
            "nld": {
                "official": "Oosterse Republiek Uruguay",
                "common": "Uruguay"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0631\u0648\u06AF\u0648\u0626\u0647",
                "common": "\u0627\u0631\u0648\u06AF\u0648\u0626\u0647"
            },
            "pol": {
                "official": "Wschodnia Republika Urugwaju",
                "common": "Urugwaj"
            },
            "por": {
                "official": "Rep\xfablica Oriental do Uruguai",
                "common": "Uruguai"
            },
            "rus": {
                "official": "\u0412\u043E\u0441\u0442\u043E\u0447\u043D\u043E\u0439 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0438 \u0423\u0440\u0443\u0433\u0432\u0430\u0439",
                "common": "\u0423\u0440\u0443\u0433\u0432\u0430\u0439"
            },
            "slk": {
                "official": "Uruguajsk\xe1 v\xfdchodn\xe1 republika",
                "common": "Uruguaj"
            },
            "spa": {
                "official": "Rep\xfablica Oriental del Uruguay",
                "common": "Uruguay"
            },
            "srp": {
                "official": "\u0418\u0441\u0442\u043E\u0447\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0423\u0440\u0443\u0433\u0432\u0430\u0458",
                "common": "\u0423\u0440\u0443\u0433\u0432\u0430\u0458"
            },
            "swe": {
                "official": "Republiken Uruguay",
                "common": "Uruguay"
            },
            "tur": {
                "official": "Uruguay Do\u011Fu Cumhuriyeti",
                "common": "Uruguay"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0634\u0631\u0642\u06CC\u06C1 \u06CC\u0648\u0631\u0627\u06AF\u0648\u0626\u06D2",
                "common": "\u06CC\u0648\u0631\u0627\u06AF\u0648\u0626\u06D2"
            },
            "zho": {
                "official": "\u4E4C\u62C9\u572D\u4E1C\u5CB8\u5171\u548C\u56FD",
                "common": "\u4E4C\u62C9\u572D"
            }
        },
        "latlng": [
            -33,
            -56
        ],
        "landlocked": false,
        "borders": [
            "ARG",
            "BRA"
        ],
        "area": 181034,
        "demonyms": {
            "eng": {
                "f": "Uruguayan",
                "m": "Uruguayan"
            },
            "fra": {
                "f": "Uruguayenne",
                "m": "Uruguayen"
            }
        },
        "flag": "\uD83C\uDDFA\uD83C\uDDFE",
        "maps": {
            "googleMaps": "https://goo.gl/maps/tiQ9Baekb1jQtDSD9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/287072"
        },
        "population": 3473727,
        "gini": {
            "2019": 39.7
        },
        "fifa": "URU",
        "car": {
            "signs": [
                "ROU"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-03:00"
        ],
        "continents": [
            "South America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/uy.png",
            "svg": "https://flagcdn.com/uy.svg",
            "alt": "The flag of Uruguay is composed of nine equal horizontal bands of white alternating with blue, with a white square superimposed in the canton. In the white square is a yellow sun bearing a human face \u2014 the Sun of May \u2014 from which sixteen rays extend. The sun's rays alternate between triangular and wavy."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/uy.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/uy.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -34.85,
                -56.17
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Guam",
            "official": "Guam",
            "nativeName": {
                "cha": {
                    "official": "Gu\xe5h\xe5n",
                    "common": "Gu\xe5h\xe5n"
                },
                "eng": {
                    "official": "Guam",
                    "common": "Guam"
                },
                "spa": {
                    "official": "Guam",
                    "common": "Guam"
                }
            }
        },
        "tld": [
            ".gu"
        ],
        "cca2": "GU",
        "ccn3": "316",
        "cca3": "GUM",
        "cioc": "GUM",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "671"
            ]
        },
        "capital": [
            "Hag\xe5t\xf1a"
        ],
        "altSpellings": [
            "GU",
            "Gu\xe5h\xe5n"
        ],
        "region": "Oceania",
        "subregion": "Micronesia",
        "languages": {
            "cha": "Chamorro",
            "eng": "English",
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u063A\u0648\u0627\u0645",
                "common": "\u063A\u0648\u0627\u0645"
            },
            "bre": {
                "official": "Guam",
                "common": "Guam"
            },
            "ces": {
                "official": "Guam",
                "common": "Guam"
            },
            "cym": {
                "official": "Guam",
                "common": "Guam"
            },
            "deu": {
                "official": "Guam",
                "common": "Guam"
            },
            "est": {
                "official": "Guami ala",
                "common": "Guam"
            },
            "fin": {
                "official": "Guam",
                "common": "Guam"
            },
            "fra": {
                "official": "Guam",
                "common": "Guam"
            },
            "hrv": {
                "official": "Guam",
                "common": "Guam"
            },
            "hun": {
                "official": "Guam",
                "common": "Guam"
            },
            "ita": {
                "official": "Guam",
                "common": "Guam"
            },
            "jpn": {
                "official": "\u30B0\u30A2\u30E0",
                "common": "\u30B0\u30A2\u30E0"
            },
            "kor": {
                "official": "\uAD0C",
                "common": "\uAD0C"
            },
            "nld": {
                "official": "Guam",
                "common": "Guam"
            },
            "per": {
                "official": "\u06AF\u0648\u0622\u0645",
                "common": "\u06AF\u0648\u0622\u0645"
            },
            "pol": {
                "official": "Terytorium Guamu",
                "common": "Guam"
            },
            "por": {
                "official": "Guam",
                "common": "Guam"
            },
            "rus": {
                "official": "\u0413\u0443\u0430\u043C",
                "common": "\u0413\u0443\u0430\u043C"
            },
            "slk": {
                "official": "Guam",
                "common": "Guam"
            },
            "spa": {
                "official": "Guam",
                "common": "Guam"
            },
            "srp": {
                "official": "\u0413\u0443\u0430\u043C",
                "common": "\u0413\u0443\u0430\u043C"
            },
            "swe": {
                "official": "Guam",
                "common": "Guam"
            },
            "tur": {
                "official": "Guam Topra\u011F\u0131",
                "common": "Guam"
            },
            "urd": {
                "official": "\u06AF\u0648\u0627\u0645",
                "common": "\u06AF\u0648\u0627\u0645"
            },
            "zho": {
                "official": "\u5173\u5C9B",
                "common": "\u5173\u5C9B"
            }
        },
        "latlng": [
            13.46666666,
            144.78333333
        ],
        "landlocked": false,
        "area": 549,
        "demonyms": {
            "eng": {
                "f": "Guamanian",
                "m": "Guamanian"
            }
        },
        "flag": "\uD83C\uDDEC\uD83C\uDDFA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/Xfnq2i279b18cH3C9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/306001"
        },
        "population": 168783,
        "fifa": "GUM",
        "car": {
            "signs": [
                "USA"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+10:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/gu.png",
            "svg": "https://flagcdn.com/gu.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/gu.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/gu.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                13.48,
                144.75
            ]
        },
        "postalCode": {
            "format": "969##",
            "regex": "^(969\\d{2})$"
        }
    },
    {
        "name": {
            "common": "Cape Verde",
            "official": "Republic of Cabo Verde",
            "nativeName": {
                "por": {
                    "official": "Rep\xfablica de Cabo Verde",
                    "common": "Cabo Verde"
                }
            }
        },
        "tld": [
            ".cv"
        ],
        "cca2": "CV",
        "ccn3": "132",
        "cca3": "CPV",
        "cioc": "CPV",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "CVE": {
                "name": "Cape Verdean escudo",
                "symbol": "Esc"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "38"
            ]
        },
        "capital": [
            "Praia"
        ],
        "altSpellings": [
            "CV",
            "Republic of Cabo Verde",
            "Rep\xfablica de Cabo Verde"
        ],
        "region": "Africa",
        "subregion": "Western Africa",
        "languages": {
            "por": "Portuguese"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u0627\u0628\u0648 \u0641\u064A\u0631\u062F\u064A",
                "common": "\u0643\u0627\u0628\u0648 \u0641\u064A\u0631\u062F\u064A"
            },
            "bre": {
                "official": "Republik Kab Glas",
                "common": "Kab Glas"
            },
            "ces": {
                "official": "Kapverdsk\xe1 republika",
                "common": "Kapverdy"
            },
            "cym": {
                "official": "Gweriniaeth Cabo Verde",
                "common": "Penrhyn Verde"
            },
            "deu": {
                "official": "Republik Cabo Verde",
                "common": "Kap Verde"
            },
            "est": {
                "official": "Cabo Verde Vabariik",
                "common": "Roheneemesaared"
            },
            "fin": {
                "official": "Kap Verden tasavalta",
                "common": "Kap Verde"
            },
            "fra": {
                "official": "R\xe9publique du Cap-Vert",
                "common": "\xceles du Cap-Vert"
            },
            "hrv": {
                "official": "Republika Cabo Verde",
                "common": "Zelenortska Republika"
            },
            "hun": {
                "official": "Z\xf6ld-foki K\xf6zt\xe1rsas\xe1g",
                "common": "Z\xf6ld-foki K\xf6zt\xe1rsas\xe1g"
            },
            "ita": {
                "official": "Repubblica di Capo Verde",
                "common": "Capo Verde"
            },
            "jpn": {
                "official": "\u30AB\u30FC\u30DC\u30D9\u30EB\u30C7\u5171\u548C\u56FD",
                "common": "\u30AB\u30FC\u30DC\u30D9\u30EB\u30C7"
            },
            "kor": {
                "official": "\uCE74\uBCF4\uBCA0\uB974\uB370 \uACF5\uD654\uAD6D",
                "common": "\uCE74\uBCF4\uBCA0\uB974\uB370"
            },
            "nld": {
                "official": "Republiek van Cabo Verde",
                "common": "Kaapverdi\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u0628\u0648 \u0648\u0631\u062F",
                "common": "\u062F\u0645\u0627\u063A\u0647\u0654 \u0633\u0628\u0632"
            },
            "pol": {
                "official": "Republika Zielonego Przyl\u0105dka",
                "common": "Republika Zielonego Przyl\u0105dka"
            },
            "por": {
                "official": "Rep\xfablica de Cabo Verde",
                "common": "Cabo Verde"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0430\u0431\u043E -\u0412\u0435\u0440\u0434\u0435",
                "common": "\u041A\u0430\u0431\u043E-\u0412\u0435\u0440\u0434\u0435"
            },
            "slk": {
                "official": "Kapverdsk\xe1 republika",
                "common": "Kapverdy"
            },
            "spa": {
                "official": "Rep\xfablica de Cabo Verde",
                "common": "Cabo Verde"
            },
            "srp": {
                "official": "\u0417\u0435\u043B\u0435\u043D\u043E\u0440\u0442\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0417\u0435\u043B\u0435\u043D\u043E\u0440\u0442\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            "swe": {
                "official": "Republiken Kap Verde",
                "common": "Kap Verde"
            },
            "tur": {
                "official": "Ye\u015Fil Burun Cumhuriyeti",
                "common": "Ye\u015Fil Burun"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u06CC\u067E \u0648\u0631\u0688\u06CC",
                "common": "\u06A9\u06CC\u067E \u0648\u0631\u0688\u06CC"
            },
            "zho": {
                "official": "\u4F5B\u5F97\u89D2\u5171\u548C\u56FD",
                "common": "\u4F5B\u5F97\u89D2"
            }
        },
        "latlng": [
            16.5388,
            23.0418
        ],
        "landlocked": false,
        "area": 4033,
        "demonyms": {
            "eng": {
                "f": "Cape Verdian",
                "m": "Cape Verdian"
            },
            "fra": {
                "f": "Cap-verdienne",
                "m": "Cap-verdien"
            }
        },
        "flag": "\uD83C\uDDE8\uD83C\uDDFB",
        "maps": {
            "googleMaps": "https://goo.gl/maps/Kc9vy5ChjuiAgMfXA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/535774"
        },
        "population": 555988,
        "gini": {
            "2015": 42.4
        },
        "fifa": "CPV",
        "car": {
            "signs": [
                "CV"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-01:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/cv.png",
            "svg": "https://flagcdn.com/cv.svg",
            "alt": "The flag of Cape Verde is composed of five horizontal bands of blue, white, red, white and blue in the ratio of 6:1:1:1:3. A ring of ten five-pointed yellow stars is centered at three-eighth of the height from the bottom edge and three-eighth of the width from the hoist end of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/cv.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/cv.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                14.92,
                -23.52
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Chad",
            "official": "Republic of Chad",
            "nativeName": {
                "ara": {
                    "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062A\u0634\u0627\u062F",
                    "common": "\u062A\u0634\u0627\u062F\u200E"
                },
                "fra": {
                    "official": "R\xe9publique du Tchad",
                    "common": "Tchad"
                }
            }
        },
        "tld": [
            ".td"
        ],
        "cca2": "TD",
        "ccn3": "148",
        "cca3": "TCD",
        "cioc": "CHA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "XAF": {
                "name": "Central African CFA franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "35"
            ]
        },
        "capital": [
            "N'Djamena"
        ],
        "altSpellings": [
            "TD",
            "Tchad",
            "Republic of Chad",
            "R\xe9publique du Tchad"
        ],
        "region": "Africa",
        "subregion": "Middle Africa",
        "languages": {
            "ara": "Arabic",
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062A\u0634\u0627\u062F",
                "common": "\u062A\u0634\u0627\u062F"
            },
            "bre": {
                "official": "Republik Tchad",
                "common": "Tchad"
            },
            "ces": {
                "official": "\u010Cadsk\xe1 republika",
                "common": "\u010Cad"
            },
            "cym": {
                "official": "Gweriniaeth Tsiad",
                "common": "Tsiad"
            },
            "deu": {
                "official": "Republik Tschad",
                "common": "Tschad"
            },
            "est": {
                "official": "T\u0161aadi Vabariik",
                "common": "T\u0161aad"
            },
            "fin": {
                "official": "T\u0161adin tasavalta",
                "common": "T\u0161ad"
            },
            "fra": {
                "official": "R\xe9publique du Tchad",
                "common": "Tchad"
            },
            "hrv": {
                "official": "\u010Cadu",
                "common": "\u010Cad"
            },
            "hun": {
                "official": "Cs\xe1d K\xf6zt\xe1rsas\xe1g",
                "common": "Cs\xe1d"
            },
            "ita": {
                "official": "Repubblica del Ciad",
                "common": "Ciad"
            },
            "jpn": {
                "official": "\u30C1\u30E3\u30C9\u5171\u548C\u56FD",
                "common": "\u30C1\u30E3\u30C9"
            },
            "kor": {
                "official": "\uCC28\uB4DC \uACF5\uD654\uAD6D",
                "common": "\uCC28\uB4DC"
            },
            "nld": {
                "official": "Republiek Tsjaad",
                "common": "Tsjaad"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0686\u0627\u062F",
                "common": "\u0686\u0627\u062F"
            },
            "pol": {
                "official": "Republika Czadu",
                "common": "Czad"
            },
            "por": {
                "official": "Rep\xfablica do Chade",
                "common": "Chade"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0427\u0430\u0434",
                "common": "\u0427\u0430\u0434"
            },
            "slk": {
                "official": "\u010Cadsk\xe1 republika",
                "common": "\u010Cad"
            },
            "spa": {
                "official": "Rep\xfablica de Chad",
                "common": "Chad"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0427\u0430\u0434",
                "common": "\u0427\u0430\u0434"
            },
            "swe": {
                "official": "Republiken Tchad",
                "common": "Tchad"
            },
            "tur": {
                "official": "\xc7ad Cumhuriyeti",
                "common": "\xc7ad"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0686\u0627\u0688",
                "common": "\u0686\u0627\u0688"
            },
            "zho": {
                "official": "\u4E4D\u5F97\u5171\u548C\u56FD",
                "common": "\u4E4D\u5F97"
            }
        },
        "latlng": [
            15,
            19
        ],
        "landlocked": true,
        "borders": [
            "CMR",
            "CAF",
            "LBY",
            "NER",
            "NGA",
            "SDN"
        ],
        "area": 1284000,
        "demonyms": {
            "eng": {
                "f": "Chadian",
                "m": "Chadian"
            },
            "fra": {
                "f": "Tchadienne",
                "m": "Tchadien"
            }
        },
        "flag": "\uD83C\uDDF9\uD83C\uDDE9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/ziUdAZ8skuNfx5Hx7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2361304"
        },
        "population": 16425859,
        "gini": {
            "2011": 43.3
        },
        "fifa": "CHA",
        "car": {
            "signs": [
                "TCH",
                "TD"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/td.png",
            "svg": "https://flagcdn.com/td.svg",
            "alt": "The flag of Chad is composed of three equal vertical bands of blue, gold and red."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/td.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/td.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                12.1,
                15.03
            ]
        }
    },
    {
        "name": {
            "common": "Vatican City",
            "official": "Vatican City State",
            "nativeName": {
                "ita": {
                    "official": "Stato della Citt\xe0 del Vaticano",
                    "common": "Vaticano"
                },
                "lat": {
                    "official": "Status Civitatis Vatican\xe6",
                    "common": "Vatican\xe6"
                }
            }
        },
        "tld": [
            ".va"
        ],
        "cca2": "VA",
        "ccn3": "336",
        "cca3": "VAT",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "906698",
                "79"
            ]
        },
        "capital": [
            "Vatican City"
        ],
        "altSpellings": [
            "VA",
            "Holy See (Vatican City State)",
            "Vatican City State",
            "Stato della Citt\xe0 del Vaticano"
        ],
        "region": "Europe",
        "subregion": "Southern Europe",
        "languages": {
            "ita": "Italian",
            "lat": "Latin"
        },
        "translations": {
            "ara": {
                "official": "\u062F\u0648\u0644\u0629 \u0645\u062F\u064A\u0646\u0629 \u0627\u0644\u0641\u0627\u062A\u064A\u0643\u0627\u0646",
                "common": "\u0645\u062F\u064A\u0646\u0629 \u0627\u0644\u0641\u0627\u062A\u064A\u0643\u0627\u0646"
            },
            "bre": {
                "official": "Riez Keoded ar Vatikan",
                "common": "Vatikan"
            },
            "ces": {
                "official": "M\u011Bstsk\xfd st\xe1t Vatik\xe1n",
                "common": "Vatik\xe1n"
            },
            "cym": {
                "official": "Vatican City State",
                "common": "Vatican City"
            },
            "deu": {
                "official": "Staat Vatikanstadt",
                "common": "Vatikanstadt"
            },
            "est": {
                "official": "Vatikani Linnriik",
                "common": "Vatikan"
            },
            "fin": {
                "official": "Vatikaanin kaupunkivaltio",
                "common": "Vatikaani"
            },
            "fra": {
                "official": "Cit\xe9 du Vatican",
                "common": "Cit\xe9 du Vatican"
            },
            "hrv": {
                "official": "Vatikan",
                "common": "Vatikan"
            },
            "hun": {
                "official": "Vatik\xe1n \xc1llam",
                "common": "Vatik\xe1n"
            },
            "ita": {
                "official": "Citt\xe0 del Vaticano",
                "common": "Citt\xe0 del Vaticano"
            },
            "jpn": {
                "official": "\u30D0\u30C1\u30AB\u30F3\u5E02\u56FD\u306E\u72B6\u614B",
                "common": "\u30D0\u30C1\u30AB\u30F3\u5E02\u56FD"
            },
            "kor": {
                "official": "\uBC14\uD2F0\uCE78 \uC2DC\uAD6D",
                "common": "\uBC14\uD2F0\uCE78"
            },
            "nld": {
                "official": "Vaticaanstad",
                "common": "Vaticaanstad"
            },
            "per": {
                "official": "\u062F\u0648\u0644\u062A\u200C\u0634\u0647\u0631 \u0648\u0627\u062A\u06CC\u06A9\u0627\u0646",
                "common": "\u0648\u0627\u062A\u06CC\u06A9\u0627\u0646"
            },
            "pol": {
                "official": "Pa\u0144stwo Watyka\u0144skie",
                "common": "Watykan"
            },
            "por": {
                "official": "Cidade do Vaticano",
                "common": "Cidade do Vaticano"
            },
            "rus": {
                "official": "\u0413\u043E\u0440\u043E\u0434-\u0433\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u0412\u0430\u0442\u0438\u043A\u0430\u043D",
                "common": "\u0412\u0430\u0442\u0438\u043A\u0430\u043D"
            },
            "slk": {
                "official": "Sv\xe4t\xe1 stolica (Vatik\xe1nsky mestsk\xfd \u0161t\xe1t",
                "common": "Vatik\xe1n"
            },
            "spa": {
                "official": "Ciudad del Vaticano",
                "common": "Ciudad del Vaticano"
            },
            "srp": {
                "official": "\u0413\u0440\u0430\u0434 \u0412\u0430\u0442\u0438\u043A\u0430\u043D",
                "common": "\u0412\u0430\u0442\u0438\u043A\u0430\u043D"
            },
            "swe": {
                "official": "Vatikanstaten",
                "common": "Vatikanstaten"
            },
            "tur": {
                "official": "Vatikan \u015Eehir Devleti",
                "common": "Vatikan"
            },
            "urd": {
                "official": "\u0648\u06CC\u0679\u06CC\u06A9\u0646 \u0633\u0679\u06CC",
                "common": "\u0648\u06CC\u0679\u06CC\u06A9\u0646 \u0633\u0679\u06CC"
            },
            "zho": {
                "official": "\u68B5\u8482\u5188\u57CE\u56FD",
                "common": "\u68B5\u8482\u5188"
            }
        },
        "latlng": [
            41.9,
            12.45
        ],
        "landlocked": true,
        "borders": [
            "ITA"
        ],
        "area": 0.44,
        "demonyms": {
            "eng": {
                "f": "Vatican",
                "m": "Vatican"
            },
            "fra": {
                "f": "Vaticane",
                "m": "Vatican"
            }
        },
        "flag": "\uD83C\uDDFB\uD83C\uDDE6",
        "maps": {
            "googleMaps": "https://goo.gl/maps/DTKvw5Bd1QZaDZmE8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/36989"
        },
        "population": 451,
        "car": {
            "signs": [
                "V"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/va.png",
            "svg": "https://flagcdn.com/va.svg",
            "alt": "The flag of Vatican City is square shaped. It is composed of two equal vertical bands of yellow and white, with national coat of arms centered in the white band. The national coat of arms comprises the Papal Tiara superimposed on two crossed keys."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/va.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/va.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                41.9,
                12.45
            ]
        }
    },
    {
        "name": {
            "common": "Palau",
            "official": "Republic of Palau",
            "nativeName": {
                "eng": {
                    "official": "Republic of Palau",
                    "common": "Palau"
                },
                "pau": {
                    "official": "Beluu er a Belau",
                    "common": "Belau"
                }
            }
        },
        "tld": [
            ".pw"
        ],
        "cca2": "PW",
        "ccn3": "585",
        "cca3": "PLW",
        "cioc": "PLW",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "80"
            ]
        },
        "capital": [
            "Ngerulmud"
        ],
        "altSpellings": [
            "PW",
            "Republic of Palau",
            "Beluu er a Belau"
        ],
        "region": "Oceania",
        "subregion": "Micronesia",
        "languages": {
            "eng": "English",
            "pau": "Palauan"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u0627\u0644\u0627\u0648",
                "common": "\u0628\u0627\u0644\u0627\u0648"
            },
            "bre": {
                "official": "Republik Palau",
                "common": "Palau"
            },
            "ces": {
                "official": "Republika Palau",
                "common": "Palau"
            },
            "cym": {
                "official": "Republic of Palau",
                "common": "Palau"
            },
            "deu": {
                "official": "Republik Palau",
                "common": "Palau"
            },
            "est": {
                "official": "Belau Vabariik",
                "common": "Belau"
            },
            "fin": {
                "official": "Palaun tasavalta",
                "common": "Palau"
            },
            "fra": {
                "official": "R\xe9publique des Palaos (Palau)",
                "common": "Palaos (Palau)"
            },
            "hrv": {
                "official": "Republika Palau",
                "common": "Palau"
            },
            "hun": {
                "official": "Palaui K\xf6zt\xe1rsas\xe1g",
                "common": "Palau"
            },
            "ita": {
                "official": "Repubblica di Palau",
                "common": "Palau"
            },
            "jpn": {
                "official": "\u30D1\u30E9\u30AA\u5171\u548C\u56FD",
                "common": "\u30D1\u30E9\u30AA"
            },
            "kor": {
                "official": "\uD314\uB77C\uC6B0 \uACF5\uD654\uAD6D",
                "common": "\uD314\uB77C\uC6B0"
            },
            "nld": {
                "official": "Republiek van Palau",
                "common": "Palau"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u067E\u0627\u0644\u0627\u0626\u0648",
                "common": "\u067E\u0627\u0644\u0627\u0626\u0648"
            },
            "pol": {
                "official": "Republika Palau",
                "common": "Palau"
            },
            "por": {
                "official": "Rep\xfablica de Palau",
                "common": "Palau"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0430\u043B\u0430\u0443",
                "common": "\u041F\u0430\u043B\u0430\u0443"
            },
            "slk": {
                "official": "Palausk\xe1 republika",
                "common": "Palau"
            },
            "spa": {
                "official": "Rep\xfablica de Palau",
                "common": "Palau"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0430\u043B\u0430\u0443",
                "common": "\u041F\u0430\u043B\u0430\u0443"
            },
            "swe": {
                "official": "Republiken Palau",
                "common": "Palau"
            },
            "tur": {
                "official": "Palau Cumhuriyeti",
                "common": "Palau"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u067E\u0644\u0627\u0624",
                "common": "\u067E\u0644\u0627\u0624"
            },
            "zho": {
                "official": "\u5E15\u52B3\u5171\u548C\u56FD",
                "common": "\u5E15\u52B3"
            }
        },
        "latlng": [
            7.5,
            134.5
        ],
        "landlocked": false,
        "area": 459,
        "demonyms": {
            "eng": {
                "f": "Palauan",
                "m": "Palauan"
            },
            "fra": {
                "f": "Paluane",
                "m": "Paluan"
            }
        },
        "flag": "\uD83C\uDDF5\uD83C\uDDFC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/MVasQBbUkQP7qQDR9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/571805"
        },
        "population": 18092,
        "car": {
            "signs": [
                "PAL"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+09:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/pw.png",
            "svg": "https://flagcdn.com/pw.svg",
            "alt": "The flag of Palau has a light blue field with a large golden-yellow circle that is offset slightly towards the hoist side of center."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/pw.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/pw.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                7.5,
                134.62
            ]
        },
        "postalCode": {
            "format": "96940",
            "regex": "^(96940)$"
        }
    },
    {
        "name": {
            "common": "Haiti",
            "official": "Republic of Haiti",
            "nativeName": {
                "fra": {
                    "official": "R\xe9publique d'Ha\xefti",
                    "common": "Ha\xefti"
                },
                "hat": {
                    "official": "Repiblik Ayiti",
                    "common": "Ayiti"
                }
            }
        },
        "tld": [
            ".ht"
        ],
        "cca2": "HT",
        "ccn3": "332",
        "cca3": "HTI",
        "cioc": "HAI",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "HTG": {
                "name": "Haitian gourde",
                "symbol": "G"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "09"
            ]
        },
        "capital": [
            "Port-au-Prince"
        ],
        "altSpellings": [
            "HT",
            "Republic of Haiti",
            "R\xe9publique d'Ha\xefti",
            "Repiblik Ayiti"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "fra": "French",
            "hat": "Haitian Creole"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0647\u0627\u064A\u062A\u064A",
                "common": "\u0647\u0627\u064A\u062A\u064A"
            },
            "bre": {
                "official": "Republik Haiti",
                "common": "Haiti"
            },
            "ces": {
                "official": "Republika Haiti",
                "common": "Haiti"
            },
            "cym": {
                "official": "Republic of Haiti",
                "common": "Haiti"
            },
            "deu": {
                "official": "Republik Haiti",
                "common": "Haiti"
            },
            "est": {
                "official": "Haiti Vabariik",
                "common": "Haiti"
            },
            "fin": {
                "official": "Haitin tasavalta",
                "common": "Haiti"
            },
            "fra": {
                "official": "R\xe9publique d'Ha\xefti",
                "common": "Ha\xefti"
            },
            "hrv": {
                "official": "Republika Haiti",
                "common": "Haiti"
            },
            "hun": {
                "official": "Haiti K\xf6zt\xe1rsas\xe1g",
                "common": "Haiti"
            },
            "ita": {
                "official": "Repubblica di Haiti",
                "common": "Haiti"
            },
            "jpn": {
                "official": "\u30CF\u30A4\u30C1\u5171\u548C\u56FD",
                "common": "\u30CF\u30A4\u30C1"
            },
            "kor": {
                "official": "\uC544\uC774\uD2F0 \uACF5\uD654\uAD6D",
                "common": "\uC544\uC774\uD2F0"
            },
            "nld": {
                "official": "Republiek Ha\xefti",
                "common": "Ha\xefti"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0647\u0627\u0626\u06CC\u062A\u06CC",
                "common": "\u0647\u0627\u0626\u06CC\u062A\u06CC"
            },
            "pol": {
                "official": "Republika Haiti",
                "common": "Haiti"
            },
            "por": {
                "official": "Rep\xfablica do Haiti",
                "common": "Haiti"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0430\u0438\u0442\u0438",
                "common": "\u0413\u0430\u0438\u0442\u0438"
            },
            "slk": {
                "official": "Haitsk\xe1 republika",
                "common": "Haiti"
            },
            "spa": {
                "official": "Rep\xfablica de Hait\xed",
                "common": "Hait\xed"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0425\u0430\u0438\u0442\u0438",
                "common": "\u0425\u0430\u0438\u0442\u0438"
            },
            "swe": {
                "official": "Republiken Haiti",
                "common": "Haiti"
            },
            "tur": {
                "official": "Haiti Cumhuriyeti",
                "common": "Haiti"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06C1\u06CC\u0679\u06CC",
                "common": "\u06C1\u06CC\u0679\u06CC"
            },
            "zho": {
                "official": "\u6D77\u5730\u5171\u548C\u56FD",
                "common": "\u6D77\u5730"
            }
        },
        "latlng": [
            19,
            -72.41666666
        ],
        "landlocked": false,
        "borders": [
            "DOM"
        ],
        "area": 27750,
        "demonyms": {
            "eng": {
                "f": "Haitian",
                "m": "Haitian"
            },
            "fra": {
                "f": "Ha\xeftienne",
                "m": "Ha\xeftien"
            }
        },
        "flag": "\uD83C\uDDED\uD83C\uDDF9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/9o13xtjuUdqFnHbn9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/307829"
        },
        "population": 11402533,
        "gini": {
            "2012": 41.1
        },
        "fifa": "HAI",
        "car": {
            "signs": [
                "RH"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-05:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ht.png",
            "svg": "https://flagcdn.com/ht.svg",
            "alt": "The flag of Haiti is composed of two equal horizontal bands of blue and red. A white square bearing the national coat of arms is superimposed at the center of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ht.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ht.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                18.53,
                -72.33
            ]
        },
        "postalCode": {
            "format": "HT####",
            "regex": "^(?:HT)*(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Yemen",
            "official": "Republic of Yemen",
            "nativeName": {
                "ara": {
                    "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u064A\u0645\u0646\u064A\u0629",
                    "common": "\u0627\u0644\u064A\u064E\u0645\u064E\u0646"
                }
            }
        },
        "tld": [
            ".ye"
        ],
        "cca2": "YE",
        "ccn3": "887",
        "cca3": "YEM",
        "cioc": "YEM",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "YER": {
                "name": "Yemeni rial",
                "symbol": "\uFDFC"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "67"
            ]
        },
        "capital": [
            "Sana'a"
        ],
        "altSpellings": [
            "YE",
            "Yemeni Republic",
            "al-Jumh\u016Briyyah al-Yamaniyyah"
        ],
        "region": "Asia",
        "subregion": "Western Asia",
        "languages": {
            "ara": "Arabic"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u064A\u0645\u0646\u064A\u0629",
                "common": "\u0627\u0644\u064A\u0645\u0646"
            },
            "bre": {
                "official": "Republik Yemen",
                "common": "Yemen"
            },
            "ces": {
                "official": "Jemensk\xe1 republika",
                "common": "Jemen"
            },
            "cym": {
                "official": "Republic of Yemen",
                "common": "Yemen"
            },
            "deu": {
                "official": "Republik Jemen",
                "common": "Jemen"
            },
            "est": {
                "official": "Jeemeni Vabariik",
                "common": "Jeemen"
            },
            "fin": {
                "official": "Jemenin tasavalta",
                "common": "Jemen"
            },
            "fra": {
                "official": "R\xe9publique du Y\xe9men",
                "common": "Y\xe9men"
            },
            "hrv": {
                "official": "Republika Jemen",
                "common": "Jemen"
            },
            "hun": {
                "official": "Jemeni K\xf6zt\xe1rsas\xe1g",
                "common": "Jemen"
            },
            "ita": {
                "official": "Repubblica dello Yemen",
                "common": "Yemen"
            },
            "jpn": {
                "official": "\u30A4\u30A8\u30E1\u30F3\u5171\u548C\u56FD",
                "common": "\u30A4\u30A8\u30E1\u30F3"
            },
            "kor": {
                "official": "\uC608\uBA58 \uACF5\uD654\uAD6D",
                "common": "\uC608\uBA58"
            },
            "nld": {
                "official": "Republiek Jemen",
                "common": "Jemen"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u06CC\u0645\u0646",
                "common": "\u06CC\u0645\u0646"
            },
            "pol": {
                "official": "Republika Jeme\u0144ska",
                "common": "Jemen"
            },
            "por": {
                "official": "Rep\xfablica do I\xeamen",
                "common": "I\xe9men"
            },
            "rus": {
                "official": "\u0419\u0435\u043C\u0435\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0419\u0435\u043C\u0435\u043D"
            },
            "slk": {
                "official": "Jemensk\xe1 republika",
                "common": "Jemen"
            },
            "spa": {
                "official": "Rep\xfablica de Yemen",
                "common": "Yemen"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0408\u0435\u043C\u0435\u043D",
                "common": "\u0408\u0435\u043C\u0435\u043D"
            },
            "swe": {
                "official": "Republiken Jemen",
                "common": "Jemen"
            },
            "tur": {
                "official": "Yemen Cumhuriyeti",
                "common": "Yemen"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06CC\u0645\u0646",
                "common": "\u06CC\u0645\u0646"
            },
            "zho": {
                "official": "\u4E5F\u95E8\u5171\u548C\u56FD",
                "common": "\u4E5F\u95E8"
            }
        },
        "latlng": [
            15,
            48
        ],
        "landlocked": false,
        "borders": [
            "OMN",
            "SAU"
        ],
        "area": 527968,
        "demonyms": {
            "eng": {
                "f": "Yemeni",
                "m": "Yemeni"
            },
            "fra": {
                "f": "Y\xe9m\xe9nite",
                "m": "Y\xe9m\xe9nite"
            }
        },
        "flag": "\uD83C\uDDFE\uD83C\uDDEA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/WCmE76HKcLideQQw7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/305092"
        },
        "population": 29825968,
        "gini": {
            "2014": 36.7
        },
        "fifa": "YEM",
        "car": {
            "signs": [
                "YAR"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ye.png",
            "svg": "https://flagcdn.com/ye.svg",
            "alt": "The flag of Yemen is composed of three equal horizontal bands of red, white and black."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ye.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ye.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                15.37,
                44.19
            ]
        }
    },
    {
        "name": {
            "common": "Eswatini",
            "official": "Kingdom of Eswatini",
            "nativeName": {
                "eng": {
                    "official": "Kingdom of Eswatini",
                    "common": "Eswatini"
                },
                "ssw": {
                    "official": "Umbuso weSwatini",
                    "common": "eSwatini"
                }
            }
        },
        "tld": [
            ".sz"
        ],
        "cca2": "SZ",
        "ccn3": "748",
        "cca3": "SWZ",
        "cioc": "SWZ",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "SZL": {
                "name": "Swazi lilangeni",
                "symbol": "L"
            },
            "ZAR": {
                "name": "South African rand",
                "symbol": "R"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "68"
            ]
        },
        "capital": [
            "Mbabane"
        ],
        "altSpellings": [
            "SZ",
            "Swaziland",
            "weSwatini",
            "Swatini",
            "Ngwane",
            "Kingdom of Eswatini",
            "Umbuso weSwatini"
        ],
        "region": "Africa",
        "subregion": "Southern Africa",
        "languages": {
            "eng": "English",
            "ssw": "Swazi"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0645\u0644\u0643\u0629 \u0625\u0633\u0648\u0627\u062A\u064A\u0646\u064A",
                "common": "\u0625\u0633\u0648\u0627\u062A\u064A\u0646\u064A"
            },
            "bre": {
                "official": "Rouantelezh Eswatini",
                "common": "Eswatini"
            },
            "ces": {
                "official": "Svazijsk\xe9 kr\xe1lovstv\xed",
                "common": "Svazijsko"
            },
            "cym": {
                "official": "Kingdom of Eswatini",
                "common": "Eswatini"
            },
            "deu": {
                "official": "K\xf6nigreich Eswatini",
                "common": "Swasiland"
            },
            "est": {
                "official": "eSwatini Kuningriik",
                "common": "Svaasimaa"
            },
            "fin": {
                "official": "Swazimaan kuningaskunta",
                "common": "Swazimaa"
            },
            "fra": {
                "official": "Royaume d\u2019Eswatini",
                "common": "Swaziland"
            },
            "hrv": {
                "official": "Kraljevina eSwatini",
                "common": "Svazi"
            },
            "hun": {
                "official": "Szv\xe1zif\xf6ldi Kir\xe1lys\xe1g",
                "common": "Szv\xe1zif\xf6ld"
            },
            "ita": {
                "official": "Regno di eSwatini",
                "common": "Swaziland"
            },
            "jpn": {
                "official": "\u30B9\u30EF\u30B8\u30E9\u30F3\u30C9\u738B\u56FD",
                "common": "\u30B9\u30EF\u30B8\u30E9\u30F3\u30C9"
            },
            "kor": {
                "official": "\uC5D0\uC2A4\uC640\uD2F0\uB2C8 \uC655\uAD6D",
                "common": "\uC5D0\uC2A4\uC640\uD2F0\uB2C8"
            },
            "nld": {
                "official": "Koninkrijk eSwatini",
                "common": "Swaziland"
            },
            "per": {
                "official": "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0633\u0648\u0627\u0632\u06CC\u0644\u0646\u062F",
                "common": "\u0627\u0633\u0648\u0627\u062A\u06CC\u0646\u06CC"
            },
            "pol": {
                "official": "Kr\xf3lestwo Suazi",
                "common": "Suazi"
            },
            "por": {
                "official": "Reino de eSwatini",
                "common": "Suazil\xe2ndia"
            },
            "rus": {
                "official": "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0421\u0432\u0430\u0437\u0438\u043B\u0435\u043D\u0434",
                "common": "\u0421\u0432\u0430\u0437\u0438\u043B\u0435\u043D\u0434"
            },
            "slk": {
                "official": "Svazijsk\xe9 kr\xe1\u013Eovstvo",
                "common": "Svazijsko"
            },
            "spa": {
                "official": "Reino de eSwatini",
                "common": "Suazilandia"
            },
            "srp": {
                "official": "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0415\u0441\u0432\u0430\u0442\u0438\u043D\u0438",
                "common": "\u0415\u0441\u0432\u0430\u0442\u0438\u043D\u0438"
            },
            "swe": {
                "official": "Konungariket Eswatini",
                "common": "Swaziland"
            },
            "tur": {
                "official": "Esvatini Krall\u0131\u011F\u0131",
                "common": "Esvatini"
            },
            "urd": {
                "official": "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0633\u0648\u0627\u0632\u06CC \u0644\u06CC\u0646\u0688",
                "common": "\u0633\u0648\u0627\u0632\u06CC \u0644\u06CC\u0646\u0688"
            },
            "zho": {
                "official": "\u65AF\u5A01\u58EB\u5170\u738B\u56FD",
                "common": "\u65AF\u5A01\u58EB\u5170"
            }
        },
        "latlng": [
            -26.5,
            31.5
        ],
        "landlocked": true,
        "borders": [
            "MOZ",
            "ZAF"
        ],
        "area": 17364,
        "demonyms": {
            "eng": {
                "f": "Swazi",
                "m": "Swazi"
            },
            "fra": {
                "f": "Swazie",
                "m": "Swazie"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDFF",
        "maps": {
            "googleMaps": "https://goo.gl/maps/cUY79eqQihFSE8hV6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/88210"
        },
        "population": 1160164,
        "gini": {
            "2016": 54.6
        },
        "fifa": "SWZ",
        "car": {
            "signs": [
                "SD"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/sz.png",
            "svg": "https://flagcdn.com/sz.svg",
            "alt": "The flag of Eswatini is composed of three horizontal bands \u2014 a large central yellow-edged red band, and a light blue band above and beneath the red band. The red band is three times the height of the blue bands and bears a centered emblem made up of a large black and white Nguni shield covering two spears and a staff decorated with feather tassels, all placed horizontally."
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -26.32,
                31.13
            ]
        },
        "postalCode": {
            "format": "@###",
            "regex": "^([A-Z]\\d{3})$"
        }
    },
    {
        "name": {
            "common": "Zimbabwe",
            "official": "Republic of Zimbabwe",
            "nativeName": {
                "bwg": {
                    "official": "Republic of Zimbabwe",
                    "common": "Zimbabwe"
                },
                "eng": {
                    "official": "Republic of Zimbabwe",
                    "common": "Zimbabwe"
                },
                "kck": {
                    "official": "Republic of Zimbabwe",
                    "common": "Zimbabwe"
                },
                "khi": {
                    "official": "Republic of Zimbabwe",
                    "common": "Zimbabwe"
                },
                "ndc": {
                    "official": "Republic of Zimbabwe",
                    "common": "Zimbabwe"
                },
                "nde": {
                    "official": "Republic of Zimbabwe",
                    "common": "Zimbabwe"
                },
                "nya": {
                    "official": "Republic of Zimbabwe",
                    "common": "Zimbabwe"
                },
                "sna": {
                    "official": "Republic of Zimbabwe",
                    "common": "Zimbabwe"
                },
                "sot": {
                    "official": "Republic of Zimbabwe",
                    "common": "Zimbabwe"
                },
                "toi": {
                    "official": "Republic of Zimbabwe",
                    "common": "Zimbabwe"
                },
                "tsn": {
                    "official": "Republic of Zimbabwe",
                    "common": "Zimbabwe"
                },
                "tso": {
                    "official": "Republic of Zimbabwe",
                    "common": "Zimbabwe"
                },
                "ven": {
                    "official": "Republic of Zimbabwe",
                    "common": "Zimbabwe"
                },
                "xho": {
                    "official": "Republic of Zimbabwe",
                    "common": "Zimbabwe"
                },
                "zib": {
                    "official": "Republic of Zimbabwe",
                    "common": "Zimbabwe"
                }
            }
        },
        "tld": [
            ".zw"
        ],
        "cca2": "ZW",
        "ccn3": "716",
        "cca3": "ZWE",
        "cioc": "ZIM",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "ZWL": {
                "name": "Zimbabwean dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "63"
            ]
        },
        "capital": [
            "Harare"
        ],
        "altSpellings": [
            "ZW",
            "Republic of Zimbabwe"
        ],
        "region": "Africa",
        "subregion": "Southern Africa",
        "languages": {
            "bwg": "Chibarwe",
            "eng": "English",
            "kck": "Kalanga",
            "khi": "Khoisan",
            "ndc": "Ndau",
            "nde": "Northern Ndebele",
            "nya": "Chewa",
            "sna": "Shona",
            "sot": "Sotho",
            "toi": "Tonga",
            "tsn": "Tswana",
            "tso": "Tsonga",
            "ven": "Venda",
            "xho": "Xhosa",
            "zib": "Zimbabwean Sign Language"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0632\u064A\u0645\u0628\u0627\u0628\u0648\u064A",
                "common": "\u0632\u064A\u0645\u0628\u0627\u0628\u0648\u064A"
            },
            "bre": {
                "official": "Republik Zimbabwe",
                "common": "Zimbabwe"
            },
            "ces": {
                "official": "Zimbabwsk\xe1 republika",
                "common": "Zimbabwe"
            },
            "cym": {
                "official": "Republic of Zimbabwe",
                "common": "Zimbabwe"
            },
            "deu": {
                "official": "Republik Simbabwe",
                "common": "Simbabwe"
            },
            "est": {
                "official": "Zimbabwe Vabariik",
                "common": "Zimbabwe"
            },
            "fin": {
                "official": "Zimbabwen tasavalta",
                "common": "Zimbabwe"
            },
            "fra": {
                "official": "R\xe9publique du Zimbabwe",
                "common": "Zimbabwe"
            },
            "hrv": {
                "official": "Republika Zimbabve",
                "common": "Zimbabve"
            },
            "hun": {
                "official": "Zimbabwei K\xf6zt\xe1rsas\xe1g",
                "common": "Zimbabwe"
            },
            "ita": {
                "official": "Repubblica dello Zimbabwe",
                "common": "Zimbabwe"
            },
            "jpn": {
                "official": "\u30B8\u30F3\u30D0\u30D6\u30A8\u5171\u548C\u56FD",
                "common": "\u30B8\u30F3\u30D0\u30D6\u30A8"
            },
            "kor": {
                "official": "\uC9D0\uBC14\uBE0C\uC6E8 \uACF5\uD654\uAD6D",
                "common": "\uC9D0\uBC14\uBE0C\uC6E8"
            },
            "nld": {
                "official": "Republiek Zimbabwe",
                "common": "Zimbabwe"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0632\u06CC\u0645\u0628\u0627\u0628\u0648\u0647",
                "common": "\u0632\u06CC\u0645\u0628\u0627\u0628\u0648\u0647"
            },
            "pol": {
                "official": "Republika Zimbabwe",
                "common": "Zimbabwe"
            },
            "por": {
                "official": "Rep\xfablica do Zimbabwe",
                "common": "Zimbabwe"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0417\u0438\u043C\u0431\u0430\u0431\u0432\u0435",
                "common": "\u0417\u0438\u043C\u0431\u0430\u0431\u0432\u0435"
            },
            "slk": {
                "official": "Zimbabwianska republika",
                "common": "Zimbabwe"
            },
            "spa": {
                "official": "Rep\xfablica de Zimbabue",
                "common": "Zimbabue"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0417\u0438\u043C\u0431\u0430\u0431\u0432\u0435",
                "common": "\u0417\u0438\u043C\u0431\u0430\u0431\u0432\u0435"
            },
            "swe": {
                "official": "Republiken Zimbabwe",
                "common": "Zimbabwe"
            },
            "tur": {
                "official": "Zimbabve Cumhuriyeti",
                "common": "Zimbabve"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0632\u0645\u0628\u0627\u0628\u0648\u06D2",
                "common": "\u0632\u0645\u0628\u0627\u0628\u0648\u06D2"
            },
            "zho": {
                "official": "\u6D25\u5DF4\u5E03\u97E6\u5171\u548C\u56FD",
                "common": "\u6D25\u5DF4\u5E03\u97E6"
            }
        },
        "latlng": [
            -20,
            30
        ],
        "landlocked": true,
        "borders": [
            "BWA",
            "MOZ",
            "ZAF",
            "ZMB"
        ],
        "area": 390757,
        "demonyms": {
            "eng": {
                "f": "Zimbabwean",
                "m": "Zimbabwean"
            },
            "fra": {
                "f": "Zimbabw\xe9enne",
                "m": "Zimbabw\xe9en"
            }
        },
        "flag": "\uD83C\uDDFF\uD83C\uDDFC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/M26BqdwQctqxXS65A",
            "openStreetMaps": "https://www.openstreetmap.org/relation/195272"
        },
        "population": 14862927,
        "gini": {
            "2019": 50.3
        },
        "fifa": "ZIM",
        "car": {
            "signs": [
                "ZW"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/zw.png",
            "svg": "https://flagcdn.com/zw.svg",
            "alt": "The flag of Zimbabwe is composed of seven equal horizontal bands of green, yellow, red, black, red, yellow and green, with a white isosceles triangle superimposed on the hoist side of the field. This triangle is edged in black, spans about one-fourth the width of the field and has its base on the hoist end. A yellow Zimbabwe bird superimposed on a five-pointed red star is centered in the triangle."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/zw.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/zw.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -17.82,
                31.03
            ]
        }
    },
    {
        "name": {
            "common": "Greece",
            "official": "Hellenic Republic",
            "nativeName": {
                "ell": {
                    "official": "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AE \u0394\u03B7\u03BC\u03BF\u03BA\u03C1\u03B1\u03C4\u03AF\u03B1",
                    "common": "\u0395\u03BB\u03BB\u03AC\u03B4\u03B1"
                }
            }
        },
        "tld": [
            ".gr"
        ],
        "cca2": "GR",
        "ccn3": "300",
        "cca3": "GRC",
        "cioc": "GRE",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "0"
            ]
        },
        "capital": [
            "Athens"
        ],
        "altSpellings": [
            "GR",
            "Ell\xe1da",
            "Hellenic Republic",
            "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AE \u0394\u03B7\u03BC\u03BF\u03BA\u03C1\u03B1\u03C4\u03AF\u03B1"
        ],
        "region": "Europe",
        "subregion": "Southern Europe",
        "languages": {
            "ell": "Greek"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0647\u064A\u0644\u064A\u0646\u064A\u0629",
                "common": "\u0627\u0644\u064A\u0648\u0646\u0627\u0646"
            },
            "bre": {
                "official": "Republik Hellenek",
                "common": "Gres"
            },
            "ces": {
                "official": "\u0158eck\xe1 republika",
                "common": "\u0158ecko"
            },
            "cym": {
                "official": "Hellenic Republic",
                "common": "Greece"
            },
            "deu": {
                "official": "Hellenische Republik",
                "common": "Griechenland"
            },
            "est": {
                "official": "Kreeka Vabariik",
                "common": "Kreeka"
            },
            "fin": {
                "official": "Helleenien tasavalta",
                "common": "Kreikka"
            },
            "fra": {
                "official": "R\xe9publique hell\xe9nique",
                "common": "Gr\xe8ce"
            },
            "hrv": {
                "official": "Helenska Republika",
                "common": "Gr\u010Dka"
            },
            "hun": {
                "official": "G\xf6r\xf6g K\xf6zt\xe1rsas\xe1g",
                "common": "G\xf6r\xf6gorsz\xe1g"
            },
            "ita": {
                "official": "Repubblica ellenica",
                "common": "Grecia"
            },
            "jpn": {
                "official": "\u30AE\u30EA\u30B7\u30E3\u5171\u548C\u56FD",
                "common": "\u30AE\u30EA\u30B7\u30E3"
            },
            "kor": {
                "official": "\uADF8\uB9AC\uC2A4 \uACF5\uD654\uAD6D",
                "common": "\uADF8\uB9AC\uC2A4"
            },
            "nld": {
                "official": "Helleense Republiek",
                "common": "Griekenland"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u06CC\u0648\u0646\u0627\u0646",
                "common": "\u06CC\u0648\u0646\u0627\u0646"
            },
            "pol": {
                "official": "Republika Grecka",
                "common": "Grecja"
            },
            "por": {
                "official": "Rep\xfablica Hel\xe9nica",
                "common": "Gr\xe9cia"
            },
            "rus": {
                "official": "\u0413\u0440\u0435\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0413\u0440\u0435\u0446\u0438\u044F"
            },
            "slk": {
                "official": "Gr\xe9cka republika",
                "common": "Gre\xe9cko"
            },
            "spa": {
                "official": "Rep\xfablica Hel\xe9nica",
                "common": "Grecia"
            },
            "srp": {
                "official": "\u0425\u0435\u043B\u0435\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0413\u0440\u0447\u043A\u0430"
            },
            "swe": {
                "official": "Republiken Grekland",
                "common": "Grekland"
            },
            "tur": {
                "official": "Helen Cumhuriyeti",
                "common": "Yunanistan"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06C1\u06CC\u0644\u06CC\u0646\u06CC\u06C1",
                "common": "\u06CC\u0648\u0646\u0627\u0646"
            },
            "zho": {
                "official": "\u5E0C\u814A\u5171\u548C\u56FD",
                "common": "\u5E0C\u814A"
            }
        },
        "latlng": [
            39,
            22
        ],
        "landlocked": false,
        "borders": [
            "ALB",
            "BGR",
            "TUR",
            "MKD"
        ],
        "area": 131990,
        "demonyms": {
            "eng": {
                "f": "Greek",
                "m": "Greek"
            },
            "fra": {
                "f": "Grecque",
                "m": "Grec"
            }
        },
        "flag": "\uD83C\uDDEC\uD83C\uDDF7",
        "maps": {
            "googleMaps": "https://goo.gl/maps/LHGcAvuRyD2iKECC6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192307"
        },
        "population": 10715549,
        "gini": {
            "2018": 32.9
        },
        "fifa": "GRE",
        "car": {
            "signs": [
                "GR"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/gr.png",
            "svg": "https://flagcdn.com/gr.svg",
            "alt": "The flag of Greece is composed of nine equal horizontal bands of blue alternating with white. A blue square bearing a white cross is superimposed in the canton."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/gr.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/gr.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                37.98,
                23.73
            ]
        },
        "postalCode": {
            "format": "### ##",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Israel",
            "official": "State of Israel",
            "nativeName": {
                "ara": {
                    "official": "\u062F\u0648\u0644\u0629 \u0625\u0633\u0631\u0627\u0626\u064A\u0644",
                    "common": "\u0625\u0633\u0631\u0627\u0626\u064A\u0644"
                },
                "heb": {
                    "official": "\u05DE\u05D3\u05D9\u05E0\u05EA \u05D9\u05E9\u05E8\u05D0\u05DC",
                    "common": "\u05D9\u05E9\u05E8\u05D0\u05DC"
                }
            }
        },
        "tld": [
            ".il"
        ],
        "cca2": "IL",
        "ccn3": "376",
        "cca3": "ISR",
        "cioc": "ISR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "ILS": {
                "name": "Israeli new shekel",
                "symbol": "\u20AA"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "72"
            ]
        },
        "capital": [
            "Jerusalem"
        ],
        "altSpellings": [
            "IL",
            "State of Israel",
            "Med\u012Bnat Yisr\u0101'el"
        ],
        "region": "Asia",
        "subregion": "Western Asia",
        "languages": {
            "ara": "Arabic",
            "heb": "Hebrew"
        },
        "translations": {
            "ara": {
                "official": "\u062F\u0648\u0644\u0629 \u0625\u0633\u0631\u0627\u0626\u064A\u0644",
                "common": "\u0625\u0633\u0631\u0627\u0626\u064A\u0644"
            },
            "bre": {
                "official": "Stad Israel",
                "common": "Israel"
            },
            "ces": {
                "official": "St\xe1t Izrael",
                "common": "Izrael"
            },
            "cym": {
                "official": "State of Israel",
                "common": "Israel"
            },
            "deu": {
                "official": "Staat Israel",
                "common": "Israel"
            },
            "est": {
                "official": "Iisraeli Riik",
                "common": "Iisrael"
            },
            "fin": {
                "official": "Israelin valtio",
                "common": "Israel"
            },
            "fra": {
                "official": "\xc9tat d'Isra\xebl",
                "common": "Isra\xebl"
            },
            "hrv": {
                "official": "Dr\u017Eava Izrael",
                "common": "Izrael"
            },
            "hun": {
                "official": "Izrael",
                "common": "Izrael"
            },
            "ita": {
                "official": "Stato di Israele",
                "common": "Israele"
            },
            "jpn": {
                "official": "\u30A4\u30B9\u30E9\u30A8\u30EB\u56FD",
                "common": "\u30A4\u30B9\u30E9\u30A8\u30EB"
            },
            "kor": {
                "official": "\uC774\uC2A4\uB77C\uC5D8\uAD6D",
                "common": "\uC774\uC2A4\uB77C\uC5D8"
            },
            "nld": {
                "official": "Staat Isra\xebl",
                "common": "Isra\xebl"
            },
            "per": {
                "official": "\u0641\u0644\u0633\u0637\u064A\u0646 \u0627\u0634\u063A\u0627\u0644\u06CC",
                "common": "\u0641\u0644\u0633\u0637\u064A\u0646 \u0627\u0634\u063A\u0627\u0644\u06CC"
            },
            "pol": {
                "official": "Pa\u0144stwo Izrael",
                "common": "Izrael"
            },
            "por": {
                "official": "Estado de Israel",
                "common": "Israel"
            },
            "rus": {
                "official": "\u0413\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u0418\u0437\u0440\u0430\u0438\u043B\u044C",
                "common": "\u0418\u0437\u0440\u0430\u0438\u043B\u044C"
            },
            "slk": {
                "official": "Izraelsk\xfd \u0161t\xe1t",
                "common": "Izrael"
            },
            "spa": {
                "official": "Estado de Israel",
                "common": "Israel"
            },
            "srp": {
                "official": "\u0414\u0440\u0436\u0430\u0432\u0430 \u0418\u0437\u0440\u0430\u0435\u043B",
                "common": "\u0418\u0437\u0440\u0430\u0435\u043B"
            },
            "swe": {
                "official": "Staten Israel",
                "common": "Israel"
            },
            "tur": {
                "official": "\u0130srail Devleti",
                "common": "\u0130srail"
            },
            "urd": {
                "official": "\u0631\u06CC\u0627\u0633\u062A\u0650 \u0627\u0633\u0631\u0627\u0626\u06CC\u0644",
                "common": "\u0627\u0633\u0631\u0627\u0626\u06CC\u0644"
            },
            "zho": {
                "official": "\u4EE5\u8272\u5217\u56FD",
                "common": "\u4EE5\u8272\u5217"
            }
        },
        "latlng": [
            31.47,
            35.13
        ],
        "landlocked": false,
        "borders": [
            "EGY",
            "JOR",
            "LBN",
            "PSE",
            "SYR"
        ],
        "area": 20770,
        "demonyms": {
            "eng": {
                "f": "Israeli",
                "m": "Israeli"
            },
            "fra": {
                "f": "Isra\xe9lienne",
                "m": "Isra\xe9lien"
            }
        },
        "flag": "\uD83C\uDDEE\uD83C\uDDF1",
        "maps": {
            "googleMaps": "https://goo.gl/maps/6UY1AH8XeafVwdC97",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1473946"
        },
        "population": 9216900,
        "gini": {
            "2016": 39
        },
        "fifa": "ISR",
        "car": {
            "signs": [
                "IL"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/il.png",
            "svg": "https://flagcdn.com/il.svg",
            "alt": "The flag of Israel has a white field with a blue hexagram \u2014 the Magen David \u2014 centered between two equal horizontal blue bands situated near the top and bottom edges of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/il.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/il.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                31.77,
                35.23
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Saint Martin",
            "official": "Saint Martin",
            "nativeName": {
                "fra": {
                    "official": "Saint-Martin",
                    "common": "Saint-Martin"
                }
            }
        },
        "tld": [
            ".fr",
            ".gp"
        ],
        "cca2": "MF",
        "ccn3": "663",
        "cca3": "MAF",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "90"
            ]
        },
        "capital": [
            "Marigot"
        ],
        "altSpellings": [
            "MF",
            "Collectivity of Saint Martin",
            "Collectivit\xe9 de Saint-Martin",
            "Saint Martin (French part)"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u0633\u0627\u0646\u062A \u0645\u0627\u0631\u062A\u0646",
                "common": "\u0633\u0627\u0646\u062A \u0645\u0627\u0631\u062A\u0646"
            },
            "bre": {
                "official": "Saint-Martin",
                "common": "Saint-Martin"
            },
            "ces": {
                "official": "Svat\xfd Martin",
                "common": "Svat\xfd Martin (Francie)"
            },
            "cym": {
                "official": "Saint Martin",
                "common": "Saint Martin"
            },
            "deu": {
                "official": "Saint-Martin",
                "common": "Saint-Martin"
            },
            "est": {
                "official": "Saint-Martini \xfchendus",
                "common": "Saint-Martin"
            },
            "fin": {
                "official": "Saint-Martin",
                "common": "Saint-Martin"
            },
            "fra": {
                "official": "Saint-Martin",
                "common": "Saint-Martin"
            },
            "hrv": {
                "official": "Saint Martin",
                "common": "Sveti Martin"
            },
            "hun": {
                "official": "Saint-Martin K\xf6z\xf6ss\xe9g",
                "common": "Saint-Martin"
            },
            "ita": {
                "official": "saint Martin",
                "common": "Saint Martin"
            },
            "jpn": {
                "official": "\u30B5\u30F3\u30DE\u30EB\u30BF\u30F3\u5CF6",
                "common": "\u30B5\u30F3\u30FB\u30DE\u30EB\u30BF\u30F3\uFF08\u30D5\u30E9\u30F3\u30B9\u9818\uFF09"
            },
            "kor": {
                "official": "\uC0DD\uB9C8\uB974\uD0F1",
                "common": "\uC0DD\uB9C8\uB974\uD0F1"
            },
            "nld": {
                "official": "Saint Martin",
                "common": "Saint-Martin"
            },
            "per": {
                "official": "\u0633\u0646 \u0645\u0627\u0631\u062A\u0646",
                "common": "\u0633\u0646 \u0645\u0627\u0631\u062A\u0646"
            },
            "pol": {
                "official": "Wsp\xf3lnota Saint-Martin",
                "common": "Saint-Martin"
            },
            "por": {
                "official": "saint Martin",
                "common": "S\xe3o Martinho"
            },
            "rus": {
                "official": "\u0421\u0435\u043D-\u041C\u0430\u0440\u0442\u0435\u043D",
                "common": "\u0421\u0435\u043D-\u041C\u0430\u0440\u0442\u0435\u043D"
            },
            "slk": {
                "official": "Saint-Martin",
                "common": "Saint-Martin"
            },
            "spa": {
                "official": "Saint Martin",
                "common": "Saint Martin"
            },
            "srp": {
                "official": "\u0421\u0432\u0435\u0442\u0438 \u041C\u0430\u0440\u0442\u0438\u043D",
                "common": "\u0421\u0432\u0435\u0442\u0438 \u041C\u0430\u0440\u0442\u0438\u043D"
            },
            "swe": {
                "official": "F\xf6rvaltningsomr\xe5det Saint-Martin",
                "common": "Saint-Martin"
            },
            "tur": {
                "official": "Saint Martin",
                "common": "Saint Martin"
            },
            "urd": {
                "official": "\u0633\u06CC\u0646\u0679 \u0645\u0627\u0631\u0679\u0646",
                "common": "\u0633\u06CC\u0646\u0679 \u0645\u0627\u0631\u0679\u0646"
            },
            "zho": {
                "official": "\u5723\u9A6C\u4E01",
                "common": "\u5723\u9A6C\u4E01"
            }
        },
        "latlng": [
            18.0708,
            63.0501
        ],
        "landlocked": false,
        "borders": [
            "SXM"
        ],
        "area": 53,
        "demonyms": {
            "eng": {
                "f": "Saint Martin Islander",
                "m": "Saint Martin Islander"
            },
            "fra": {
                "f": "Saint-Martinoise",
                "m": "Saint-Martinois"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDEB",
        "maps": {
            "googleMaps": "https://goo.gl/maps/P9ho9QuJ9EAR28JEA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/63064"
        },
        "population": 38659,
        "car": {
            "signs": [
                "F"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/mf.png",
            "svg": "https://flagcdn.com/mf.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                18.07,
                -63.08
            ]
        },
        "postalCode": {
            "format": "### ###"
        }
    },
    {
        "name": {
            "common": "Antigua and Barbuda",
            "official": "Antigua and Barbuda",
            "nativeName": {
                "eng": {
                    "official": "Antigua and Barbuda",
                    "common": "Antigua and Barbuda"
                }
            }
        },
        "tld": [
            ".ag"
        ],
        "cca2": "AG",
        "ccn3": "028",
        "cca3": "ATG",
        "cioc": "ANT",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "XCD": {
                "name": "Eastern Caribbean dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "268"
            ]
        },
        "capital": [
            "Saint John's"
        ],
        "altSpellings": [
            "AG"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u0623\u0646\u062A\u064A\u063A\u0648\u0627 \u0648\u0628\u0627\u0631\u0628\u0648\u062F\u0627",
                "common": "\u0623\u0646\u062A\u064A\u063A\u0648\u0627 \u0648\u0628\u0627\u0631\u0628\u0648\u062F\u0627"
            },
            "bre": {
                "official": "Antigua ha Barbuda",
                "common": "Antigua ha Barbuda"
            },
            "ces": {
                "official": "Antigua a Barbuda",
                "common": "Antigua a Barbuda"
            },
            "cym": {
                "official": "Antigwa a Barbiwda",
                "common": "Antigwa a Barbiwda"
            },
            "deu": {
                "official": "Antigua und Barbuda",
                "common": "Antigua und Barbuda"
            },
            "est": {
                "official": "Antigua ja Barbuda",
                "common": "Antigua ja Barbuda"
            },
            "fin": {
                "official": "Antigua ja Barbuda",
                "common": "Antigua ja Barbuda"
            },
            "fra": {
                "official": "Antigua-et-Barbuda",
                "common": "Antigua-et-Barbuda"
            },
            "hrv": {
                "official": "Antigva i Barbuda",
                "common": "Antigva i Barbuda"
            },
            "hun": {
                "official": "Antigua \xe9s Barbuda",
                "common": "Antigua \xe9s Barbuda"
            },
            "ita": {
                "official": "Antigua e Barbuda",
                "common": "Antigua e Barbuda"
            },
            "jpn": {
                "official": "\u30A2\u30F3\u30C1\u30B0\u30A2\u30D0\u30FC\u30D6\u30FC\u30C0",
                "common": "\u30A2\u30F3\u30C6\u30A3\u30B0\u30A2\u30FB\u30D0\u30FC\u30D6\u30FC\u30C0"
            },
            "kor": {
                "official": "\uC564\uD2F0\uAC00 \uBC14\uBD80\uB2E4",
                "common": "\uC564\uD2F0\uAC00 \uBC14\uBD80\uB2E4"
            },
            "nld": {
                "official": "Antigua en Barbuda",
                "common": "Antigua en Barbuda"
            },
            "per": {
                "official": "\u0622\u0646\u062A\u06CC\u06AF\u0648\u0627 \u0648 \u0628\u0627\u0631\u0628\u0648\u062F\u0627",
                "common": "\u0622\u0646\u062A\u06CC\u06AF\u0648\u0627 \u0648 \u0628\u0627\u0631\u0628\u0648\u062F\u0627"
            },
            "pol": {
                "official": "Antigua i Barbuda",
                "common": "Antigua i Barbuda"
            },
            "por": {
                "official": "Antigua e Barbuda",
                "common": "Ant\xedgua e Barbuda"
            },
            "rus": {
                "official": "\u0410\u043D\u0442\u0438\u0433\u0443\u0430 \u0438 \u0411\u0430\u0440\u0431\u0443\u0434\u0430",
                "common": "\u0410\u043D\u0442\u0438\u0433\u0443\u0430 \u0438 \u0411\u0430\u0440\u0431\u0443\u0434\u0430"
            },
            "slk": {
                "official": "Antigua a Barbuda",
                "common": "Antigua a Barbuda"
            },
            "spa": {
                "official": "Antigua y Barbuda",
                "common": "Antigua y Barbuda"
            },
            "srp": {
                "official": "\u0410\u043D\u0442\u0438\u0433\u0432\u0430 \u0438 \u0411\u0430\u0440\u0431\u0443\u0434\u0430",
                "common": "\u0410\u043D\u0442\u0438\u0433\u0432\u0430 \u0438 \u0411\u0430\u0440\u0431\u0443\u0434\u0430"
            },
            "swe": {
                "official": "Antigua och Barbuda",
                "common": "Antigua och Barbuda"
            },
            "tur": {
                "official": "Antigua ve Barbuda",
                "common": "Antigua ve Barbuda"
            },
            "urd": {
                "official": "\u0627\u06CC\u0646\u0679\u06CC\u06AF\u0648\u0627 \u0648 \u0628\u0627\u0631\u0628\u0648\u0688\u0627",
                "common": "\u0627\u06CC\u0646\u0679\u06CC\u06AF\u0648\u0627 \u0648 \u0628\u0627\u0631\u0628\u0648\u0688\u0627"
            },
            "zho": {
                "official": "\u5B89\u63D0\u74DC\u548C\u5DF4\u5E03\u8FBE",
                "common": "\u5B89\u63D0\u74DC\u548C\u5DF4\u5E03\u8FBE"
            }
        },
        "latlng": [
            17.05,
            -61.8
        ],
        "landlocked": false,
        "area": 442,
        "demonyms": {
            "eng": {
                "f": "Antiguan, Barbudan",
                "m": "Antiguan, Barbudan"
            },
            "fra": {
                "f": "Antiguaise et barbudienne",
                "m": "Antiguaise et barbudien"
            }
        },
        "flag": "\uD83C\uDDE6\uD83C\uDDEC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/fnye4wGJ1RzC9jpX9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/536900"
        },
        "population": 97928,
        "fifa": "ATG",
        "car": {
            "signs": [
                "AG"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ag.png",
            "svg": "https://flagcdn.com/ag.svg",
            "alt": "The flag of Antigua and Barbuda has a red field with an inverted isosceles triangle based on the top edge and spanning the height of the field. This triangle has three horizontal bands of black, light blue and white, with the light blue band half the height of the two other bands. The top half of a golden-yellow sun is situated in the lower two-third of the black band to depict a rising sun."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ag.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ag.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                17.12,
                -61.85
            ]
        }
    },
    {
        "name": {
            "common": "Cyprus",
            "official": "Republic of Cyprus",
            "nativeName": {
                "ell": {
                    "official": "\u0394\u03B7\u03BC\u03BF\u03BA\u03C1\u03B1\u03C4\u03AF\u03B1 \u03C4\u03B7\u03C2 \u039A\u03CD\u03C0\u03C1\u03BF\u03C2",
                    "common": "\u039A\u03CD\u03C0\u03C1\u03BF\u03C2"
                },
                "tur": {
                    "official": "K\u0131br\u0131s Cumhuriyeti",
                    "common": "K\u0131br\u0131s"
                }
            }
        },
        "tld": [
            ".cy"
        ],
        "cca2": "CY",
        "ccn3": "196",
        "cca3": "CYP",
        "cioc": "CYP",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "57"
            ]
        },
        "capital": [
            "Nicosia"
        ],
        "altSpellings": [
            "CY",
            "K\xfdpros",
            "K\u0131br\u0131s",
            "Republic of Cyprus",
            "\u039A\u03C5\u03C0\u03C1\u03B9\u03B1\u03BA\u03AE \u0394\u03B7\u03BC\u03BF\u03BA\u03C1\u03B1\u03C4\u03AF\u03B1",
            "K\u0131br\u0131s Cumhuriyeti"
        ],
        "region": "Europe",
        "subregion": "Southern Europe",
        "languages": {
            "ell": "Greek",
            "tur": "Turkish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0642\u0628\u0631\u0635",
                "common": "\u0642\u0628\u0631\u0635"
            },
            "bre": {
                "official": "Republik Kiprenez",
                "common": "Kiprenez"
            },
            "ces": {
                "official": "Kypersk\xe1 republika",
                "common": "Kypr"
            },
            "cym": {
                "official": "Gweriniaeth Cyprus",
                "common": "Cyprus"
            },
            "deu": {
                "official": "Republik Zypern",
                "common": "Zypern"
            },
            "est": {
                "official": "K\xfcprose Vabariik",
                "common": "K\xfcpros"
            },
            "fin": {
                "official": "Kyproksen tasavalta",
                "common": "Kypros"
            },
            "fra": {
                "official": "R\xe9publique de Chypre",
                "common": "Chypre"
            },
            "hrv": {
                "official": "Republika Cipar",
                "common": "Cipar"
            },
            "hun": {
                "official": "Ciprusi K\xf6zt\xe1rsas\xe1g",
                "common": "Ciprus"
            },
            "ita": {
                "official": "Repubblica di Cipro",
                "common": "Cipro"
            },
            "jpn": {
                "official": "\u30AD\u30D7\u30ED\u30B9\u5171\u548C\u56FD",
                "common": "\u30AD\u30D7\u30ED\u30B9"
            },
            "kor": {
                "official": "\uD0A4\uD504\uB85C\uC2A4 \uACF5\uD654\uAD6D",
                "common": "\uD0A4\uD504\uB85C\uC2A4"
            },
            "nld": {
                "official": "Republiek Cyprus",
                "common": "Cyprus"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0642\u0628\u0631\u0633",
                "common": "\u0642\u0650\u0628\u0631\u0650\u0633"
            },
            "pol": {
                "official": "Republika Cypryjska",
                "common": "Cypr"
            },
            "por": {
                "official": "Rep\xfablica de Chipre",
                "common": "Chipre"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0438\u043F\u0440",
                "common": "\u041A\u0438\u043F\u0440"
            },
            "slk": {
                "official": "Cypersk\xe1 republika",
                "common": "Cyprus"
            },
            "spa": {
                "official": "Rep\xfablica de Chipre",
                "common": "Chipre"
            },
            "srp": {
                "official": "\u041A\u0438\u043F\u0430\u0440\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u041A\u0438\u043F\u0430\u0440"
            },
            "swe": {
                "official": "Republiken Cypern",
                "common": "Cypern"
            },
            "tur": {
                "official": "K\u0131br\u0131s Cumhuriyeti",
                "common": "K\u0131br\u0131s"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0642\u0628\u0631\u0635",
                "common": "\u0642\u0628\u0631\u0635"
            },
            "zho": {
                "official": "\u585E\u6D66\u8DEF\u65AF\u5171\u548C\u56FD",
                "common": "\u585E\u6D66\u8DEF\u65AF"
            }
        },
        "latlng": [
            35,
            33
        ],
        "landlocked": false,
        "area": 9251,
        "demonyms": {
            "eng": {
                "f": "Cypriot",
                "m": "Cypriot"
            },
            "fra": {
                "f": "Chypriote",
                "m": "Chypriote"
            }
        },
        "flag": "\uD83C\uDDE8\uD83C\uDDFE",
        "maps": {
            "googleMaps": "https://goo.gl/maps/77hPBRdLid8yD5Bm7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/307787"
        },
        "population": 1207361,
        "gini": {
            "2018": 32.7
        },
        "fifa": "CYP",
        "car": {
            "signs": [
                "CY"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/cy.png",
            "svg": "https://flagcdn.com/cy.svg",
            "alt": "The flag of Cyprus has a white field, at the center of which is a copper-colored silhouette of the Island of Cyprus above two green olive branches crossed at the stem."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/cy.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/cy.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                35.17,
                33.37
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Sint Maarten",
            "official": "Sint Maarten",
            "nativeName": {
                "eng": {
                    "official": "Sint Maarten",
                    "common": "Sint Maarten"
                },
                "fra": {
                    "official": "Saint-Martin",
                    "common": "Saint-Martin"
                },
                "nld": {
                    "official": "Sint Maarten",
                    "common": "Sint Maarten"
                }
            }
        },
        "tld": [
            ".sx"
        ],
        "cca2": "SX",
        "ccn3": "534",
        "cca3": "SXM",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "ANG": {
                "name": "Netherlands Antillean guilder",
                "symbol": "\u0192"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "721"
            ]
        },
        "capital": [
            "Philipsburg"
        ],
        "altSpellings": [
            "SX",
            "Sint Maarten (Dutch part)"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English",
            "fra": "French",
            "nld": "Dutch"
        },
        "translations": {
            "ara": {
                "official": "\u0633\u064A\u0646\u062A \u0645\u0627\u0631\u062A\u0646",
                "common": "\u0633\u064A\u0646\u062A \u0645\u0627\u0631\u062A\u0646"
            },
            "bre": {
                "official": "Sint Maarten",
                "common": "Sint Maarten"
            },
            "ces": {
                "official": "Svat\xfd Martin",
                "common": "Svat\xfd Martin (Nizozemsko)"
            },
            "cym": {
                "official": "Sint Maarten",
                "common": "Sint Maarten"
            },
            "deu": {
                "official": "Sint Maarten",
                "common": "Sint Maarten"
            },
            "est": {
                "official": "Sint Maarten",
                "common": "Sint Maarten"
            },
            "fin": {
                "official": "Sint Maarten",
                "common": "Sint Maarten"
            },
            "fra": {
                "official": "Sint Maarten",
                "common": "Saint-Martin"
            },
            "hrv": {
                "official": "Sveti Martin",
                "common": "Sveti Martin"
            },
            "hun": {
                "official": "Sint Maarten",
                "common": "Sint Maarten"
            },
            "ita": {
                "official": "Sint Maarten",
                "common": "Sint Maarten"
            },
            "jpn": {
                "official": "\u30B7\u30F3\u30C8\u30DE\u30FC\u30EB\u30C6\u30F3\u5CF6",
                "common": "\u30B7\u30F3\u30C8\u30FB\u30DE\u30FC\u30EB\u30C6\u30F3"
            },
            "kor": {
                "official": "\uC2E0\uD2B8\uB9C8\uB974\uD134",
                "common": "\uC2E0\uD2B8\uB9C8\uB974\uD134"
            },
            "nld": {
                "official": "Sint Maarten",
                "common": "Sint Maarten"
            },
            "per": {
                "official": "\u0633\u0646 \u0645\u0627\u0631\u062A\u0646",
                "common": "\u0633\u0646 \u0645\u0627\u0631\u062A\u0646"
            },
            "pol": {
                "official": "Sint Maarten",
                "common": "Sint Maarten"
            },
            "por": {
                "official": "Sint Maarten",
                "common": "S\xe3o Martinho"
            },
            "rus": {
                "official": "\u0421\u0438\u043D\u0442-\u041C\u0430\u0430\u0440\u0442\u0435\u043D",
                "common": "\u0421\u0438\u043D\u0442-\u041C\u0430\u0440\u0442\u0435\u043D"
            },
            "slk": {
                "official": "Sint Maarten",
                "common": "Sint Maarten"
            },
            "spa": {
                "official": "Sint Maarten",
                "common": "Sint Maarten"
            },
            "srp": {
                "official": "\u0421\u0432\u0435\u0442\u0438 \u041C\u0430\u0440\u0442\u0438\u043D",
                "common": "\u0421\u0432\u0435\u0442\u0438 \u041C\u0430\u0440\u0442\u0438\u043D"
            },
            "swe": {
                "official": "Sint Maarten",
                "common": "Sint Maarten"
            },
            "tur": {
                "official": "Sint Maarten",
                "common": "Sint Maarten"
            },
            "urd": {
                "official": "\u0633\u0646\u0679 \u0645\u0627\u0631\u0679\u0646",
                "common": "\u0633\u0646\u0679 \u0645\u0627\u0631\u0679\u0646"
            },
            "zho": {
                "official": "\u5723\u9A6C\u4E01\u5C9B",
                "common": "\u5723\u9A6C\u4E01\u5C9B"
            }
        },
        "latlng": [
            18.033333,
            -63.05
        ],
        "landlocked": false,
        "borders": [
            "MAF"
        ],
        "area": 34,
        "demonyms": {
            "eng": {
                "f": "St. Maartener",
                "m": "St. Maartener"
            },
            "fra": {
                "f": "Saint-Martinoise",
                "m": "Saint-Martinois"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDFD",
        "maps": {
            "googleMaps": "https://goo.gl/maps/DjvcESy1a1oGEZuNA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1231790"
        },
        "population": 40812,
        "car": {
            "signs": [
                "SX"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/sx.png",
            "svg": "https://flagcdn.com/sx.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                18.02,
                -63.03
            ]
        }
    },
    {
        "name": {
            "common": "Monaco",
            "official": "Principality of Monaco",
            "nativeName": {
                "fra": {
                    "official": "Principaut\xe9 de Monaco",
                    "common": "Monaco"
                }
            }
        },
        "tld": [
            ".mc"
        ],
        "cca2": "MC",
        "ccn3": "492",
        "cca3": "MCO",
        "cioc": "MON",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "77"
            ]
        },
        "capital": [
            "Monaco"
        ],
        "altSpellings": [
            "MC",
            "Principality of Monaco",
            "Principaut\xe9 de Monaco"
        ],
        "region": "Europe",
        "subregion": "Western Europe",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u0625\u0645\u0627\u0631\u0629 \u0645\u0648\u0646\u0627\u0643\u0648",
                "common": "\u0645\u0648\u0646\u0627\u0643\u0648"
            },
            "bre": {
                "official": "Pri\xf1selezh Monako",
                "common": "Monako"
            },
            "ces": {
                "official": "Monack\xe9 kn\xed\u017Eectv\xed",
                "common": "Monako"
            },
            "cym": {
                "official": "Principality of Monaco",
                "common": "Monaco"
            },
            "deu": {
                "official": "F\xfcrstentum Monaco",
                "common": "Monaco"
            },
            "est": {
                "official": "Monaco V\xfcrstiriik",
                "common": "Monaco"
            },
            "fin": {
                "official": "Monacon ruhtinaskunta",
                "common": "Monaco"
            },
            "fra": {
                "official": "Principaut\xe9 de Monaco",
                "common": "Monaco"
            },
            "hrv": {
                "official": "Kne\u017Eevina Monako",
                "common": "Monako"
            },
            "hun": {
                "official": "Monac\xf3i Hercegs\xe9g",
                "common": "Monaco"
            },
            "ita": {
                "official": "Principato di Monaco",
                "common": "Principato di Monaco"
            },
            "jpn": {
                "official": "\u30E2\u30CA\u30B3\u516C\u56FD",
                "common": "\u30E2\u30CA\u30B3"
            },
            "kor": {
                "official": "\uBAA8\uB098\uCF54 \uACF5\uAD6D",
                "common": "\uBAA8\uB098\uCF54"
            },
            "nld": {
                "official": "Vorstendom Monaco",
                "common": "Monaco"
            },
            "per": {
                "official": "\u0634\u0627\u0647\u0632\u0627\u062F\u0647\u200C\u0646\u0634\u06CC\u0646 \u0645\u0648\u0646\u0627\u06A9\u0648",
                "common": "\u0645\u0648\u0646\u0627\u06A9\u0648"
            },
            "pol": {
                "official": "Ksi\u0119stwo Monako",
                "common": "Monako"
            },
            "por": {
                "official": "Principado do M\xf3naco",
                "common": "M\xf3naco"
            },
            "rus": {
                "official": "\u041A\u043D\u044F\u0436\u0435\u0441\u0442\u0432\u043E \u041C\u043E\u043D\u0430\u043A\u043E",
                "common": "\u041C\u043E\u043D\u0430\u043A\u043E"
            },
            "slk": {
                "official": "Monack\xe9 knie\u017Eatstvo",
                "common": "Monako"
            },
            "spa": {
                "official": "Principado de M\xf3naco",
                "common": "M\xf3naco"
            },
            "srp": {
                "official": "\u041A\u043D\u0435\u0436\u0435\u0432\u0438\u043D\u0430 \u041C\u043E\u043D\u0430\u043A\u043E",
                "common": "\u041C\u043E\u043D\u0430\u043A\u043E"
            },
            "swe": {
                "official": "Furstend\xf6met Monaco",
                "common": "Monaco"
            },
            "tur": {
                "official": "Monako Prensli\u011Fi",
                "common": "Monako"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0646\u0627\u06A9\u0648",
                "common": "\u0645\u0648\u0646\u0627\u06A9\u0648"
            },
            "zho": {
                "official": "\u6469\u7EB3\u54E5\u516C\u56FD",
                "common": "\u6469\u7EB3\u54E5"
            }
        },
        "latlng": [
            43.73333333,
            7.4
        ],
        "landlocked": false,
        "borders": [
            "FRA"
        ],
        "area": 2.02,
        "demonyms": {
            "eng": {
                "f": "Monegasque",
                "m": "Monegasque"
            },
            "fra": {
                "f": "Mon\xe9gasque",
                "m": "Mon\xe9gasque"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDE8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/DGpndDot28bYdXYn7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1124039"
        },
        "population": 39244,
        "car": {
            "signs": [
                "MC"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/mc.png",
            "svg": "https://flagcdn.com/mc.svg",
            "alt": "The flag of Monaco is composed of two equal horizontal bands of red and white."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/mc.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/mc.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                43.73,
                7.42
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Fiji",
            "official": "Republic of Fiji",
            "nativeName": {
                "eng": {
                    "official": "Republic of Fiji",
                    "common": "Fiji"
                },
                "fij": {
                    "official": "Matanitu Tugalala o Viti",
                    "common": "Viti"
                },
                "hif": {
                    "official": "\u0930\u093F\u092A\u092C\u094D\u0932\u093F\u0915 \u0911\u092B \u092B\u0940\u091C\u0940",
                    "common": "\u092B\u093F\u091C\u0940"
                }
            }
        },
        "tld": [
            ".fj"
        ],
        "cca2": "FJ",
        "ccn3": "242",
        "cca3": "FJI",
        "cioc": "FIJ",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "FJD": {
                "name": "Fijian dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "79"
            ]
        },
        "capital": [
            "Suva"
        ],
        "altSpellings": [
            "FJ",
            "Viti",
            "Republic of Fiji",
            "Matanitu ko Viti",
            "Fij\u012B Ga\u1E47ar\u0101jya"
        ],
        "region": "Oceania",
        "subregion": "Melanesia",
        "languages": {
            "eng": "English",
            "fij": "Fijian",
            "hif": "Fiji Hindi"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062C\u0632\u0631 \u0641\u064A\u062C\u064A",
                "common": "\u0641\u064A\u062C\u064A"
            },
            "bre": {
                "official": "Republik Fidji",
                "common": "Fidji"
            },
            "ces": {
                "official": "Republika Fid\u017Eijsk\xfdch ostrov\u016F",
                "common": "Fid\u017Ei"
            },
            "cym": {
                "official": "Republic of Fiji",
                "common": "Fiji"
            },
            "deu": {
                "official": "Republik Fidschi",
                "common": "Fidschi"
            },
            "est": {
                "official": "Fid\u017Ei Vabariik",
                "common": "Fid\u017Ei"
            },
            "fin": {
                "official": "Fid\u017Ein tasavalta",
                "common": "Fid\u017Ei"
            },
            "fra": {
                "official": "R\xe9publique des Fidji",
                "common": "Fidji"
            },
            "hrv": {
                "official": "Republika Fid\u017Ei",
                "common": "Fi\u0111i"
            },
            "hun": {
                "official": "Fidzsi-szigeteki K\xf6zt\xe1rsas\xe1g",
                "common": "Fidzsi-szigetek"
            },
            "ita": {
                "official": "Repubblica di Figi",
                "common": "Figi"
            },
            "jpn": {
                "official": "\u30D5\u30A3\u30B8\u30FC\u5171\u548C\u56FD",
                "common": "\u30D5\u30A3\u30B8\u30FC"
            },
            "kor": {
                "official": "\uD53C\uC9C0 \uACF5\uD654\uAD6D",
                "common": "\uD53C\uC9C0"
            },
            "nld": {
                "official": "Republiek Fiji",
                "common": "Fiji"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062C\u0632\u0627\u06CC\u0631 \u0641\u06CC\u062C\u06CC",
                "common": "\u0641\u06CC\u062C\u06CC"
            },
            "pol": {
                "official": "Republika Fid\u017Ci",
                "common": "Fid\u017Ci"
            },
            "por": {
                "official": "Rep\xfablica de Fiji",
                "common": "Fiji"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0424\u0438\u0434\u0436\u0438",
                "common": "\u0424\u0438\u0434\u0436\u0438"
            },
            "slk": {
                "official": "Fi\u01C6ijsk\xe1 republika",
                "common": "Fi\u01C6i"
            },
            "spa": {
                "official": "Rep\xfablica de Fiji",
                "common": "Fiyi"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0424\u0438\u045F\u0438",
                "common": "\u0424\u0438\u045F\u0438"
            },
            "swe": {
                "official": "Republiken Fiji",
                "common": "Fiji"
            },
            "tur": {
                "official": "Fiji Cumhuriyeti",
                "common": "Fiji"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0641\u062C\u06CC",
                "common": "\u0641\u062C\u06CC"
            },
            "zho": {
                "official": "\u6590\u6D4E\u5171\u548C\u56FD",
                "common": "\u6590\u6D4E"
            }
        },
        "latlng": [
            17.7134,
            178.065
        ],
        "landlocked": false,
        "area": 18272,
        "demonyms": {
            "eng": {
                "f": "Fijian",
                "m": "Fijian"
            },
            "fra": {
                "f": "Fidjienne",
                "m": "Fidjien"
            }
        },
        "flag": "\uD83C\uDDEB\uD83C\uDDEF",
        "maps": {
            "googleMaps": "https://goo.gl/maps/r9fhDqoLZdg1zmE99",
            "openStreetMaps": "https://www.openstreetmap.org/relation/571747"
        },
        "population": 896444,
        "gini": {
            "2013": 36.7
        },
        "fifa": "FIJ",
        "car": {
            "signs": [
                "FJI"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+12:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/fj.png",
            "svg": "https://flagcdn.com/fj.svg",
            "alt": "The flag of Fiji has a light blue field. It features the flag of the United Kingdom \u2014 the Union Jack \u2014 in the canton and the shield of the national coat of arms centered in the fly half."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/fj.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/fj.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -18.13,
                178.42
            ]
        }
    },
    {
        "name": {
            "common": "Ukraine",
            "official": "Ukraine",
            "nativeName": {
                "ukr": {
                    "official": "\u0423\u043A\u0440\u0430\u0457\u043D\u0430",
                    "common": "\u0423\u043A\u0440\u0430\u0457\u043D\u0430"
                }
            }
        },
        "tld": [
            ".ua",
            ".\u0443\u043A\u0440"
        ],
        "cca2": "UA",
        "ccn3": "804",
        "cca3": "UKR",
        "cioc": "UKR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "UAH": {
                "name": "Ukrainian hryvnia",
                "symbol": "\u20B4"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "80"
            ]
        },
        "capital": [
            "Kyiv"
        ],
        "altSpellings": [
            "UA",
            "Ukrayina"
        ],
        "region": "Europe",
        "subregion": "Eastern Europe",
        "languages": {
            "ukr": "Ukrainian"
        },
        "translations": {
            "ara": {
                "official": "\u0623\u0648\u0643\u0631\u0627\u0646\u064A\u0627",
                "common": "\u0623\u0648\u0643\u0631\u0627\u0646\u064A\u0627"
            },
            "bre": {
                "official": "Ukraina",
                "common": "Ukraina"
            },
            "ces": {
                "official": "Ukrajina",
                "common": "Ukrajina"
            },
            "cym": {
                "official": "Ukraine",
                "common": "Ukraine"
            },
            "deu": {
                "official": "Ukraine",
                "common": "Ukraine"
            },
            "est": {
                "official": "Ukraina",
                "common": "Ukraina"
            },
            "fin": {
                "official": "Ukraina",
                "common": "Ukraina"
            },
            "fra": {
                "official": "Ukraine",
                "common": "Ukraine"
            },
            "hrv": {
                "official": "Ukrajina",
                "common": "Ukrajina"
            },
            "hun": {
                "official": "Ukrajna",
                "common": "Ukrajna"
            },
            "ita": {
                "official": "Ucraina",
                "common": "Ucraina"
            },
            "jpn": {
                "official": "\u30A6\u30AF\u30E9\u30A4\u30CA",
                "common": "\u30A6\u30AF\u30E9\u30A4\u30CA"
            },
            "kor": {
                "official": "\uC6B0\uD06C\uB77C\uC774\uB098",
                "common": "\uC6B0\uD06C\uB77C\uC774\uB098"
            },
            "nld": {
                "official": "Oekra\xefne",
                "common": "Oekra\xefne"
            },
            "per": {
                "official": "\u0627\u0648\u06A9\u0631\u0627\u06CC\u0646",
                "common": "\u0627\u0648\u06A9\u0631\u0627\u06CC\u0646"
            },
            "pol": {
                "official": "Ukraina",
                "common": "Ukraina"
            },
            "por": {
                "official": "Ucr\xe2nia",
                "common": "Ucr\xe2nia"
            },
            "rus": {
                "official": "\u0423\u043A\u0440\u0430\u0438\u043D\u0430",
                "common": "\u0423\u043A\u0440\u0430\u0438\u043D\u0430"
            },
            "slk": {
                "official": "Ukrajina",
                "common": "Ukrajina"
            },
            "spa": {
                "official": "Ucrania",
                "common": "Ucrania"
            },
            "srp": {
                "official": "\u0423\u043A\u0440\u0430\u0458\u0438\u043D\u0430",
                "common": "\u0423\u043A\u0440\u0430\u0458\u0438\u043D\u0430"
            },
            "swe": {
                "official": "Ukraina",
                "common": "Ukraina"
            },
            "tur": {
                "official": "Ukrayna",
                "common": "Ukrayna"
            },
            "urd": {
                "official": "\u06CC\u0648\u06A9\u0631\u06CC\u0646",
                "common": "\u06CC\u0648\u06A9\u0631\u06CC\u0646"
            },
            "zho": {
                "official": "\u4E4C\u514B\u5170",
                "common": "\u4E4C\u514B\u5170"
            }
        },
        "latlng": [
            49,
            32
        ],
        "landlocked": false,
        "borders": [
            "BLR",
            "HUN",
            "MDA",
            "POL",
            "ROU",
            "RUS",
            "SVK"
        ],
        "area": 603500,
        "demonyms": {
            "eng": {
                "f": "Ukrainian",
                "m": "Ukrainian"
            },
            "fra": {
                "f": "Ukrainienne",
                "m": "Ukrainien"
            }
        },
        "flag": "\uD83C\uDDFA\uD83C\uDDE6",
        "maps": {
            "googleMaps": "https://goo.gl/maps/DvgJMiPJ7aozKFZv7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/60199"
        },
        "population": 44134693,
        "gini": {
            "2019": 26.6
        },
        "fifa": "UKR",
        "car": {
            "signs": [
                "UA"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ua.png",
            "svg": "https://flagcdn.com/ua.svg",
            "alt": "The flag of Ukraine is composed of two equal horizontal bands of blue and yellow."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ua.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ua.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                50.43,
                30.52
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Martinique",
            "official": "Martinique",
            "nativeName": {
                "fra": {
                    "official": "Martinique",
                    "common": "Martinique"
                }
            }
        },
        "tld": [
            ".mq"
        ],
        "cca2": "MQ",
        "ccn3": "474",
        "cca3": "MTQ",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "96"
            ]
        },
        "capital": [
            "Fort-de-France"
        ],
        "altSpellings": [
            "MQ"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0627\u0631\u062A\u064A\u0646\u064A\u0643",
                "common": "\u0645\u0627\u0631\u062A\u064A\u0646\u064A\u0643"
            },
            "bre": {
                "official": "Martinik",
                "common": "Martinik"
            },
            "ces": {
                "official": "Martinik",
                "common": "Martinik"
            },
            "cym": {
                "official": "Martinique",
                "common": "Martinique"
            },
            "deu": {
                "official": "Martinique",
                "common": "Martinique"
            },
            "est": {
                "official": "Martinique\u2019i departemang",
                "common": "Martinique"
            },
            "fin": {
                "official": "Martinique",
                "common": "Martinique"
            },
            "fra": {
                "official": "Martinique",
                "common": "Martinique"
            },
            "hrv": {
                "official": "Martinique",
                "common": "Martinique"
            },
            "hun": {
                "official": "Martinique",
                "common": "Martinique"
            },
            "ita": {
                "official": "Martinique",
                "common": "Martinica"
            },
            "jpn": {
                "official": "\u30DE\u30EB\u30C6\u30A3\u30CB\u30FC\u30AF\u5CF6",
                "common": "\u30DE\u30EB\u30C6\u30A3\u30CB\u30FC\u30AF"
            },
            "kor": {
                "official": "\uB9C8\uB974\uD2F0\uB2C8\uD06C",
                "common": "\uB9C8\uB974\uD2F0\uB2C8\uD06C"
            },
            "nld": {
                "official": "Martinique",
                "common": "Martinique"
            },
            "per": {
                "official": "\u0645\u0627\u0631\u062A\u06CC\u0646\u06CC\u06A9",
                "common": "\u0645\u0627\u0631\u062A\u06CC\u0646\u06CC\u06A9"
            },
            "pol": {
                "official": "Martynika",
                "common": "Martynika"
            },
            "por": {
                "official": "Martinique",
                "common": "Martinica"
            },
            "rus": {
                "official": "\u041C\u0430\u0440\u0442\u0438\u043D\u0438\u043A\u0430",
                "common": "\u041C\u0430\u0440\u0442\u0438\u043D\u0438\u043A\u0430"
            },
            "slk": {
                "official": "Martinique",
                "common": "Martinique"
            },
            "spa": {
                "official": "Martinica",
                "common": "Martinica"
            },
            "srp": {
                "official": "\u041C\u0430\u0440\u0442\u0438\u043D\u0438\u043A",
                "common": "\u041C\u0430\u0440\u0442\u0438\u043D\u0438\u043A"
            },
            "swe": {
                "official": "Martinique",
                "common": "Martinique"
            },
            "tur": {
                "official": "Martinik",
                "common": "Martinik"
            },
            "urd": {
                "official": "\u0645\u0627\u0631\u0679\u06CC\u0646\u06CC\u06A9",
                "common": "\u0645\u0627\u0631\u0679\u06CC\u0646\u06CC\u06A9"
            },
            "zho": {
                "official": "\u9A6C\u63D0\u5C3C\u514B",
                "common": "\u9A6C\u63D0\u5C3C\u514B"
            }
        },
        "latlng": [
            14.666667,
            -61
        ],
        "landlocked": false,
        "area": 1128,
        "demonyms": {
            "eng": {
                "f": "Martinican",
                "m": "Martinican"
            },
            "fra": {
                "f": "Martiniquaise",
                "m": "Martiniquais"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDF6",
        "maps": {
            "googleMaps": "https://goo.gl/maps/87ER7sDAFU7JjcvR6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2473088"
        },
        "population": 378243,
        "car": {
            "signs": [
                "F"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/mq.png",
            "svg": "https://flagcdn.com/mq.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/mq.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/mq.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                14.6,
                -61.08
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Hong Kong",
            "official": "Hong Kong Special Administrative Region of the People's Republic of China",
            "nativeName": {
                "eng": {
                    "official": "Hong Kong Special Administrative Region of the People's Republic of China",
                    "common": "Hong Kong"
                },
                "zho": {
                    "official": "\u4E2D\u534E\u4EBA\u6C11\u5171\u548C\u56FD\u9999\u6E2F\u7279\u522B\u884C\u653F\u533A",
                    "common": "\u9999\u6E2F"
                }
            }
        },
        "tld": [
            ".hk",
            ".\u9999\u6E2F"
        ],
        "cca2": "HK",
        "ccn3": "344",
        "cca3": "HKG",
        "cioc": "HKG",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "HKD": {
                "name": "Hong Kong dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+8",
            "suffixes": [
                "52"
            ]
        },
        "capital": [
            "City of Victoria"
        ],
        "altSpellings": [
            "HK"
        ],
        "region": "Asia",
        "subregion": "Eastern Asia",
        "languages": {
            "eng": "English",
            "zho": "Chinese"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0646\u0637\u0642\u0629 \u0647\u0648\u0646\u063A \u0643\u0648\u0646\u063A \u0627\u0644\u0627\u062F\u0627\u0631\u064A\u0629 \u0627\u0644\u062A\u0627\u0628\u0639\u0629 \u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0635\u064A\u0646 \u0627\u0644\u0634\u0639\u0628\u064A\u0629",
                "common": "\u0647\u0648\u0646\u063A \u0643\u0648\u0646\u063A"
            },
            "bre": {
                "official": "Rannvro velestradurel arbennik Hong Kong eus Republik pobl Sina",
                "common": "Hong Kong"
            },
            "ces": {
                "official": "Zvl\xe1\u0161tn\xed administrativn\xed oblast \u010C\xednsk\xe9 lidov\xe9 republiky Hongkong",
                "common": "Hongkong"
            },
            "cym": {
                "official": "Hong Kong Special Administrative Region of the People's Republic of China",
                "common": "Hong Kong"
            },
            "deu": {
                "official": "Sonderverwaltungszone Hongkong der Volksrepublik China",
                "common": "Hongkong"
            },
            "est": {
                "official": "Hongkongi erihalduspiirkond",
                "common": "Hongkong"
            },
            "fin": {
                "official": "Hong Kongin erityishallintoalue",
                "common": "Hongkong"
            },
            "fra": {
                "official": "R\xe9gion administrative sp\xe9ciale de Hong Kong de la R\xe9publique populaire de Chine",
                "common": "Hong Kong"
            },
            "hrv": {
                "official": "Hong Kong Posebnog upravnog podru\u010DjaNarodne Republike Kine",
                "common": "Hong Kong"
            },
            "hun": {
                "official": "Hongkong",
                "common": "Hongkong"
            },
            "ita": {
                "official": "Hong Kong Regione amministrativa speciale della Repubblica Popolare Cinese",
                "common": "Hong Kong"
            },
            "jpn": {
                "official": "\u4E2D\u83EF\u4EBA\u6C11\u5171\u548C\u56FD\u9999\u6E2F\u7279\u5225\u884C\u653F\u533A",
                "common": "\u9999\u6E2F"
            },
            "kor": {
                "official": "\uC911\uD654\uC778\uBBFC\uACF5\uD654\uAD6D \uD64D\uCF69 \uD2B9\uBCC4\uD589\uC815\uAD6C",
                "common": "\uD64D\uCF69"
            },
            "nld": {
                "official": "Hong Kong Speciale Administratieve Regio van de Volksrepubliek China",
                "common": "Hongkong"
            },
            "per": {
                "official": "\u0647\u064F\u0646\u06AF \u06A9\u064F\u0646\u06AF",
                "common": "\u0647\u064F\u0646\u06AF \u06A9\u064F\u0646\u06AF"
            },
            "pol": {
                "official": "Specjalny Region Administracyjny Chi\u0144skiej Republiki Ludowej Hongkong",
                "common": "Hongkong"
            },
            "por": {
                "official": "Hong Kong Regi\xe3o Administrativa Especial da Rep\xfablica Popular da China",
                "common": "Hong Kong"
            },
            "rus": {
                "official": "Hong Kong \u0421\u043F\u0435\u0446\u0438\u0430\u043B\u044C\u043D\u044B\u0439 \u0430\u0434\u043C\u0438\u043D\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043D\u044B\u0439 \u0440\u0430\u0439\u043E\u043D \u041A\u0438\u0442\u0430\u0439\u0441\u043A\u043E\u0439 \u041D\u0430\u0440\u043E\u0434\u043D\u043E\u0439 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0438 \u041A\u0438\u0442\u0430\u044F",
                "common": "\u0413\u043E\u043D\u043A\u043E\u043D\u0433"
            },
            "slk": {
                "official": "\u0160peci\xe1lna administrat\xedvna oblas\u0165\u010C\xednskej \u013Eudovej republiky Hongkong",
                "common": "Hongkong"
            },
            "spa": {
                "official": "Hong Kong Regi\xf3n Administrativa Especial de la Rep\xfablica Popular China",
                "common": "Hong Kong"
            },
            "srp": {
                "official": "\u0425\u043E\u043D\u0433\u043A\u043E\u043D\u0433 \u0441\u043F\u0435\u0446\u0438\u0458\u0430\u043B\u043D\u0430 \u0430\u0434\u043C\u0438\u043D\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043D\u0430 \u043E\u0431\u043B\u0430\u0441\u0442 \u041D\u0430\u0440\u043E\u0434\u043D\u0435 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0435 \u041A\u0438\u043D\u0435",
                "common": "\u0425\u043E\u043D\u0433\u043A\u043E\u043D\u0433"
            },
            "swe": {
                "official": "Hongkong",
                "common": "Hongkong"
            },
            "tur": {
                "official": "\xc7in Halk Cumhuriyeti Hong Kong \xd6zel \u0130dari B\xf6lgesi",
                "common": "Hong Kong"
            },
            "urd": {
                "official": "\u06C1\u0627\u0646\u06AF \u06A9\u0627\u0646\u06AF \u0639\u0648\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0686\u06CC\u0646 \u06A9\u0627 \u062E\u0635\u0648\u0635\u06CC \u0627\u0646\u062A\u0638\u0627\u0645\u06CC \u0639\u0644\u0627\u0642\u06C1",
                "common": "\u06C1\u0627\u0646\u06AF \u06A9\u0627\u0646\u06AF"
            }
        },
        "latlng": [
            22.267,
            114.188
        ],
        "landlocked": false,
        "borders": [
            "CHN"
        ],
        "area": 1104,
        "demonyms": {
            "eng": {
                "f": "Hong Konger",
                "m": "Hong Konger"
            },
            "fra": {
                "f": "Hongkongaise",
                "m": "Hongkongais"
            }
        },
        "flag": "\uD83C\uDDED\uD83C\uDDF0",
        "maps": {
            "googleMaps": "https://goo.gl/maps/1sEnNmT47ffrC8MU8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/913110"
        },
        "population": 7500700,
        "fifa": "HKG",
        "car": {
            "signs": [
                "HK"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+08:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/hk.png",
            "svg": "https://flagcdn.com/hk.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/hk.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/hk.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                22.267,
                114.188
            ]
        }
    },
    {
        "name": {
            "common": "Portugal",
            "official": "Portuguese Republic",
            "nativeName": {
                "por": {
                    "official": "Rep\xfablica portugu\xeas",
                    "common": "Portugal"
                }
            }
        },
        "tld": [
            ".pt"
        ],
        "cca2": "PT",
        "ccn3": "620",
        "cca3": "PRT",
        "cioc": "POR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "51"
            ]
        },
        "capital": [
            "Lisbon"
        ],
        "altSpellings": [
            "PT",
            "Portuguesa",
            "Portuguese Republic",
            "Rep\xfablica Portuguesa"
        ],
        "region": "Europe",
        "subregion": "Southern Europe",
        "languages": {
            "por": "Portuguese"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0628\u0631\u062A\u063A\u0627\u0644\u064A\u0629",
                "common": "\u0627\u0644\u0628\u0631\u062A\u063A\u0627\u0644"
            },
            "bre": {
                "official": "Republik Portugalat",
                "common": "Portugal"
            },
            "ces": {
                "official": "Portugalsk\xe1 republika",
                "common": "Portugalsko"
            },
            "cym": {
                "official": "Portuguese Republic",
                "common": "Portugal"
            },
            "deu": {
                "official": "Portugiesische Republik",
                "common": "Portugal"
            },
            "est": {
                "official": "Portugali Vabariik",
                "common": "Portugal"
            },
            "fin": {
                "official": "Portugalin tasavalta",
                "common": "Portugali"
            },
            "fra": {
                "official": "R\xe9publique portugaise",
                "common": "Portugal"
            },
            "hrv": {
                "official": "Portugalska Republika",
                "common": "Portugal"
            },
            "hun": {
                "official": "Portug\xe1l K\xf6zt\xe1rsas\xe1g",
                "common": "Portug\xe1lia"
            },
            "ita": {
                "official": "Repubblica portoghese",
                "common": "Portogallo"
            },
            "jpn": {
                "official": "\u30DD\u30EB\u30C8\u30AC\u30EB\u5171\u548C\u56FD",
                "common": "\u30DD\u30EB\u30C8\u30AC\u30EB"
            },
            "kor": {
                "official": "\uD3EC\uB974\uD22C\uAC08 \uACF5\uD654\uAD6D",
                "common": "\uD3EC\uB974\uD22C\uAC08"
            },
            "nld": {
                "official": "Portugese Republiek",
                "common": "Portugal"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u067E\u0631\u062A\u063A\u0627\u0644",
                "common": "\u067E\u0631\u062A\u063A\u0627\u0644"
            },
            "pol": {
                "official": "Republika Portugalska",
                "common": "Portugalia"
            },
            "por": {
                "official": "Rep\xfablica portugu\xeas",
                "common": "Portugal"
            },
            "rus": {
                "official": "\u041F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u044C\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u041F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u0438\u044F"
            },
            "slk": {
                "official": "Portugalsk\xe1 republika",
                "common": "Portugalsko"
            },
            "spa": {
                "official": "Rep\xfablica Portuguesa",
                "common": "Portugal"
            },
            "srp": {
                "official": "\u041F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u041F\u043E\u0440\u0442\u0443\u0433\u0430\u043B"
            },
            "swe": {
                "official": "Republiken Portugal",
                "common": "Portugal"
            },
            "tur": {
                "official": "Portekiz Cumhuriyeti",
                "common": "Portekiz"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u067E\u0631\u062A\u06AF\u0627\u0644",
                "common": "\u067E\u0631\u062A\u06AF\u0627\u0644"
            },
            "zho": {
                "official": "\u8461\u8404\u7259\u5171\u548C\u56FD",
                "common": "\u8461\u8404\u7259"
            }
        },
        "latlng": [
            39.5,
            -8
        ],
        "landlocked": false,
        "borders": [
            "ESP"
        ],
        "area": 92090,
        "demonyms": {
            "eng": {
                "f": "Portuguese",
                "m": "Portuguese"
            },
            "fra": {
                "f": "Portugaise",
                "m": "Portugais"
            }
        },
        "flag": "\uD83C\uDDF5\uD83C\uDDF9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/BaTBSyc4GWMmbAKB8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/295480"
        },
        "population": 10305564,
        "gini": {
            "2018": 33.5
        },
        "fifa": "POR",
        "car": {
            "signs": [
                "P"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-01:00",
            "UTC"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/pt.png",
            "svg": "https://flagcdn.com/pt.svg",
            "alt": "The flag of Portugal is composed of two vertical bands of green and red in the ratio of 2:3, with the coat of arms of Portugal centered over the two-color boundary."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/pt.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/pt.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                38.72,
                -9.13
            ]
        },
        "postalCode": {
            "format": "####-###",
            "regex": "^(\\d{7})$"
        }
    },
    {
        "name": {
            "common": "Bhutan",
            "official": "Kingdom of Bhutan",
            "nativeName": {
                "dzo": {
                    "official": "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F62\u0F92\u0FB1\u0F63\u0F0B\u0F41\u0F56\u0F0B",
                    "common": "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B"
                }
            }
        },
        "tld": [
            ".bt"
        ],
        "cca2": "BT",
        "ccn3": "064",
        "cca3": "BTN",
        "cioc": "BHU",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "BTN": {
                "name": "Bhutanese ngultrum",
                "symbol": "Nu."
            },
            "INR": {
                "name": "Indian rupee",
                "symbol": "\u20B9"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "75"
            ]
        },
        "capital": [
            "Thimphu"
        ],
        "altSpellings": [
            "BT",
            "Kingdom of Bhutan"
        ],
        "region": "Asia",
        "subregion": "Southern Asia",
        "languages": {
            "dzo": "Dzongkha"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0645\u0644\u0643\u0629 \u0628\u0648\u062A\u0627\u0646",
                "common": "\u0628\u0648\u062A\u0627\u0646"
            },
            "bre": {
                "official": "Rouantelezh Bhoutan",
                "common": "Bhoutan"
            },
            "ces": {
                "official": "Bh\xfat\xe1nsk\xe9 kr\xe1lovstv\xed",
                "common": "Bh\xfat\xe1n"
            },
            "cym": {
                "official": "Teyrnas Bhwtan",
                "common": "Bhwtan"
            },
            "deu": {
                "official": "K\xf6nigreich Bhutan",
                "common": "Bhutan"
            },
            "est": {
                "official": "Bhutani Kuningriik",
                "common": "Bhutan"
            },
            "fin": {
                "official": "Bhutanin kuningaskunta",
                "common": "Bhutan"
            },
            "fra": {
                "official": "Royaume du Bhoutan",
                "common": "Bhoutan"
            },
            "hrv": {
                "official": "Kraljevina Butan",
                "common": "Butan"
            },
            "hun": {
                "official": "Bhut\xe1ni Kir\xe1lys\xe1g",
                "common": "Bhut\xe1n"
            },
            "ita": {
                "official": "Regno del Bhutan",
                "common": "Bhutan"
            },
            "jpn": {
                "official": "\u30D6\u30FC\u30BF\u30F3\u738B\u56FD",
                "common": "\u30D6\u30FC\u30BF\u30F3"
            },
            "kor": {
                "official": "\uBD80\uD0C4 \uC655\uAD6D",
                "common": "\uBD80\uD0C4"
            },
            "nld": {
                "official": "Koninkrijk Bhutan",
                "common": "Bhutan"
            },
            "per": {
                "official": "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0628\u0648\u062A\u0627\u0646",
                "common": "\u0628\u0648\u062A\u0627\u0646"
            },
            "pol": {
                "official": "Bhutan",
                "common": "Bhutan"
            },
            "por": {
                "official": "Reino do But\xe3o",
                "common": "But\xe3o"
            },
            "rus": {
                "official": "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0411\u0443\u0442\u0430\u043D",
                "common": "\u0411\u0443\u0442\u0430\u043D"
            },
            "slk": {
                "official": "Bhut\xe1nske kr\xe2\u013Eovstvo",
                "common": "Bhut\xe1n"
            },
            "spa": {
                "official": "Reino de But\xe1n",
                "common": "But\xe1n"
            },
            "srp": {
                "official": "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0411\u0443\u0442\u0430\u043D",
                "common": "\u0411\u0443\u0442\u0430\u043D"
            },
            "swe": {
                "official": "Konungariket Bhutan",
                "common": "Bhutan"
            },
            "tur": {
                "official": "Butan Krall\u0131\u011F\u0131",
                "common": "Butan"
            },
            "urd": {
                "official": "\u0633\u0644\u0637\u0646\u062A \u0628\u06BE\u0648\u0679\u0627\u0646",
                "common": "\u0628\u06BE\u0648\u0679\u0627\u0646"
            },
            "zho": {
                "official": "\u4E0D\u4E39\u738B\u56FD",
                "common": "\u4E0D\u4E39"
            }
        },
        "latlng": [
            27.5,
            90.5
        ],
        "landlocked": true,
        "borders": [
            "CHN",
            "IND"
        ],
        "area": 38394,
        "demonyms": {
            "eng": {
                "f": "Bhutanese",
                "m": "Bhutanese"
            },
            "fra": {
                "f": "Bhoutanaise",
                "m": "Bhoutanais"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDF9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/VEfXXBftTFLUpNgp8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/184629"
        },
        "population": 771612,
        "gini": {
            "2017": 37.4
        },
        "fifa": "BHU",
        "car": {
            "signs": [
                "BHT"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+06:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/bt.png",
            "svg": "https://flagcdn.com/bt.svg",
            "alt": "The flag of Bhutan is divided diagonally, from the lower hoist-side corner to the upper fly-side corner, into an upper yellow and a lower orange triangle. A fly-side facing white dragon holding four jewels in its claws is situated along the boundary of the two triangles."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/bt.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/bt.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                27.47,
                89.63
            ]
        }
    },
    {
        "name": {
            "common": "Nepal",
            "official": "Federal Democratic Republic of Nepal",
            "nativeName": {
                "nep": {
                    "official": "\u0928\u0947\u092A\u093E\u0932 \u0938\u0902\u0918\u0940\u092F \u0932\u094B\u0915\u0924\u093E\u0928\u094D\u0924\u094D\u0930\u093F\u0915 \u0917\u0923\u0924\u0928\u094D\u0924\u094D\u0930",
                    "common": "\u0928\u0947\u092A\u093E\u0932"
                }
            }
        },
        "tld": [
            ".np"
        ],
        "cca2": "NP",
        "ccn3": "524",
        "cca3": "NPL",
        "cioc": "NEP",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "NPR": {
                "name": "Nepalese rupee",
                "symbol": "\u20A8"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "77"
            ]
        },
        "capital": [
            "Kathmandu"
        ],
        "altSpellings": [
            "NP",
            "Federal Democratic Republic of Nepal",
            "Lokt\u0101ntrik Ganatantra Nep\u0101l"
        ],
        "region": "Asia",
        "subregion": "Southern Asia",
        "languages": {
            "nep": "Nepali"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0646\u064A\u0628\u0627\u0644 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629 \u0627\u0644\u0627\u062A\u062D\u0627\u062F\u064A\u0629",
                "common": "\u0646\u064A\u0628\u0627\u0644"
            },
            "bre": {
                "official": "Republik Demokratel Kevreadel Nepal",
                "common": "Nepal"
            },
            "ces": {
                "official": "Federativn\xed demokratick\xe1 republika Nep\xe1l",
                "common": "Nep\xe1l"
            },
            "cym": {
                "official": "Federal Democratic Republic of Nepal",
                "common": "Nepal"
            },
            "deu": {
                "official": "Demokratische Bundesrepublik Nepal",
                "common": "Nepal"
            },
            "est": {
                "official": "Nepali Demokraatlik Liitvabariik",
                "common": "Nepal"
            },
            "fin": {
                "official": "Nepalin demokraattinen liittotasavalta",
                "common": "Nepal"
            },
            "fra": {
                "official": "R\xe9publique du N\xe9pal",
                "common": "N\xe9pal"
            },
            "hrv": {
                "official": "Savezna Demokratska Republika Nepal",
                "common": "Nepal"
            },
            "hun": {
                "official": "Nep\xe1li Sz\xf6vets\xe9gi Demokratikus K\xf6zt\xe1rsas\xe1g",
                "common": "Nep\xe1l"
            },
            "ita": {
                "official": "Repubblica federale democratica del Nepal",
                "common": "Nepal"
            },
            "jpn": {
                "official": "\u30CD\u30D1\u30FC\u30EB\u9023\u90A6\u6C11\u4E3B\u5171\u548C\u56FD",
                "common": "\u30CD\u30D1\u30FC\u30EB"
            },
            "kor": {
                "official": "\uB124\uD314 \uC5F0\uBC29 \uBBFC\uC8FC \uACF5\uD654\uAD6D",
                "common": "\uB124\uD314"
            },
            "nld": {
                "official": "Federale Democratische Republiek Nepal",
                "common": "Nepal"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0641\u062F\u0631\u0627\u0644 \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9 \u0646\u067E\u0627\u0644",
                "common": "\u0646\u067E\u0627\u0644"
            },
            "pol": {
                "official": "Federalna Demokratyczna Republika Nepalu",
                "common": "Nepal"
            },
            "por": {
                "official": "Rep\xfablica Democr\xe1tica Federal do Nepal",
                "common": "Nepal"
            },
            "rus": {
                "official": "\u0424\u0435\u0434\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0430\u044F \u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0435\u043F\u0430\u043B",
                "common": "\u041D\u0435\u043F\u0430\u043B"
            },
            "slk": {
                "official": "Nep\xe1lska federat\xedvna demokratick\xe1 republika",
                "common": "Nep\xe1l"
            },
            "spa": {
                "official": "Rep\xfablica Democr\xe1tica Federal de Nepal",
                "common": "Nepal"
            },
            "srp": {
                "official": "\u0421\u0430\u0432\u0435\u0437\u043D\u0430 \u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0435\u043F\u0430\u043B",
                "common": "\u041D\u0435\u043F\u0430\u043B"
            },
            "swe": {
                "official": "Demokratiska f\xf6rbundsrepubliken Nepal",
                "common": "Nepal"
            },
            "tur": {
                "official": "Nepal Federal Demokratik Cumhuriyeti",
                "common": "Nepal"
            },
            "urd": {
                "official": "\u0648\u0641\u0627\u0642\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0646\u06CC\u067E\u0627\u0644",
                "common": "\u0646\u06CC\u067E\u0627\u0644"
            },
            "zho": {
                "official": "\u5C3C\u6CCA\u5C14\u8054\u90A6\u6C11\u4E3B\u5171\u548C\u56FD",
                "common": "\u5C3C\u6CCA\u5C14"
            }
        },
        "latlng": [
            28,
            84
        ],
        "landlocked": true,
        "borders": [
            "CHN",
            "IND"
        ],
        "area": 147181,
        "demonyms": {
            "eng": {
                "f": "Nepalese",
                "m": "Nepalese"
            },
            "fra": {
                "f": "N\xe9palaise",
                "m": "N\xe9palais"
            }
        },
        "flag": "\uD83C\uDDF3\uD83C\uDDF5",
        "maps": {
            "googleMaps": "https://goo.gl/maps/UMj2zpbQp7B5c3yT7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/184633"
        },
        "population": 29136808,
        "gini": {
            "2010": 32.8
        },
        "fifa": "NEP",
        "car": {
            "signs": [
                "NEP"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+05:45"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/np.png",
            "svg": "https://flagcdn.com/np.svg",
            "alt": "The flag of Nepal is the world's only non-quadrilateral flag of a sovereign country. It takes the shape of two adjoining right-angled triangles and has a crimson red field with deep blue edges. Within the smaller upper triangle is an emblem of the upper half of a white sun resting on an upward facing white crescent. The lower triangle bears a white sun with twelve rays."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/np.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/np.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                27.72,
                85.32
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "France",
            "official": "French Republic",
            "nativeName": {
                "fra": {
                    "official": "R\xe9publique fran\xe7aise",
                    "common": "France"
                }
            }
        },
        "tld": [
            ".fr"
        ],
        "cca2": "FR",
        "ccn3": "250",
        "cca3": "FRA",
        "cioc": "FRA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "3"
            ]
        },
        "capital": [
            "Paris"
        ],
        "altSpellings": [
            "FR",
            "French Republic",
            "R\xe9publique fran\xe7aise"
        ],
        "region": "Europe",
        "subregion": "Western Europe",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0641\u0631\u0646\u0633\u064A\u0629",
                "common": "\u0641\u0631\u0646\u0633\u0627"
            },
            "bre": {
                "official": "Republik Fra\xf1s",
                "common": "Fra\xf1s"
            },
            "ces": {
                "official": "Francouzsk\xe1 republika",
                "common": "Francie"
            },
            "cym": {
                "official": "French Republic",
                "common": "France"
            },
            "deu": {
                "official": "Franz\xf6sische Republik",
                "common": "Frankreich"
            },
            "est": {
                "official": "Prantsuse Vabariik",
                "common": "Prantsusmaa"
            },
            "fin": {
                "official": "Ranskan tasavalta",
                "common": "Ranska"
            },
            "fra": {
                "official": "R\xe9publique fran\xe7aise",
                "common": "France"
            },
            "hrv": {
                "official": "Francuska Republika",
                "common": "Francuska"
            },
            "hun": {
                "official": "Francia K\xf6zt\xe1rsas\xe1g",
                "common": "Franciaorsz\xe1g"
            },
            "ita": {
                "official": "Repubblica francese",
                "common": "Francia"
            },
            "jpn": {
                "official": "\u30D5\u30E9\u30F3\u30B9\u5171\u548C\u56FD",
                "common": "\u30D5\u30E9\u30F3\u30B9"
            },
            "kor": {
                "official": "\uD504\uB791\uC2A4 \uACF5\uD654\uAD6D",
                "common": "\uD504\uB791\uC2A4"
            },
            "nld": {
                "official": "Franse Republiek",
                "common": "Frankrijk"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0641\u0631\u0627\u0646\u0633\u0647",
                "common": "\u0641\u0631\u0627\u0646\u0633\u0647"
            },
            "pol": {
                "official": "Republika Francuska",
                "common": "Francja"
            },
            "por": {
                "official": "Rep\xfablica Francesa",
                "common": "Fran\xe7a"
            },
            "rus": {
                "official": "\u0424\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0424\u0440\u0430\u043D\u0446\u0438\u044F"
            },
            "slk": {
                "official": "Franc\xfazska republika",
                "common": "Franc\xfazsko"
            },
            "spa": {
                "official": "Rep\xfablica franc\xe9s",
                "common": "Francia"
            },
            "srp": {
                "official": "\u0424\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0424\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0430"
            },
            "swe": {
                "official": "Republiken Frankrike",
                "common": "Frankrike"
            },
            "tur": {
                "official": "Fransa Cumhuriyeti",
                "common": "Fransa"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0641\u0631\u0627\u0646\u0633",
                "common": "\u0641\u0631\u0627\u0646\u0633"
            },
            "zho": {
                "official": "\u6CD5\u5170\u897F\u5171\u548C\u56FD",
                "common": "\u6CD5\u56FD"
            }
        },
        "latlng": [
            46,
            2
        ],
        "landlocked": false,
        "borders": [
            "AND",
            "BEL",
            "DEU",
            "ITA",
            "LUX",
            "MCO",
            "ESP",
            "CHE"
        ],
        "area": 551695,
        "demonyms": {
            "eng": {
                "f": "French",
                "m": "French"
            },
            "fra": {
                "f": "Fran\xe7aise",
                "m": "Fran\xe7ais"
            }
        },
        "flag": "\uD83C\uDDEB\uD83C\uDDF7",
        "maps": {
            "googleMaps": "https://goo.gl/maps/g7QxxSFsWyTPKuzd7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1403916"
        },
        "population": 67391582,
        "gini": {
            "2018": 32.4
        },
        "fifa": "FRA",
        "car": {
            "signs": [
                "F"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-10:00",
            "UTC-09:30",
            "UTC-09:00",
            "UTC-08:00",
            "UTC-04:00",
            "UTC-03:00",
            "UTC+01:00",
            "UTC+02:00",
            "UTC+03:00",
            "UTC+04:00",
            "UTC+05:00",
            "UTC+10:00",
            "UTC+11:00",
            "UTC+12:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/fr.png",
            "svg": "https://flagcdn.com/fr.svg",
            "alt": "The flag of France is composed of three equal vertical bands of blue, white and red."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/fr.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/fr.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                48.87,
                2.33
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Ireland",
            "official": "Republic of Ireland",
            "nativeName": {
                "eng": {
                    "official": "Republic of Ireland",
                    "common": "Ireland"
                },
                "gle": {
                    "official": "Poblacht na h\xc9ireann",
                    "common": "\xc9ire"
                }
            }
        },
        "tld": [
            ".ie"
        ],
        "cca2": "IE",
        "ccn3": "372",
        "cca3": "IRL",
        "cioc": "IRL",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "53"
            ]
        },
        "capital": [
            "Dublin"
        ],
        "altSpellings": [
            "IE",
            "\xc9ire",
            "Republic of Ireland",
            "Poblacht na h\xc9ireann"
        ],
        "region": "Europe",
        "subregion": "Northern Europe",
        "languages": {
            "eng": "English",
            "gle": "Irish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u064A\u0631\u0644\u0646\u062F\u0627",
                "common": "\u0623\u064A\u0631\u0644\u0646\u062F\u0627"
            },
            "bre": {
                "official": "Republik Iwerzhon",
                "common": "Iwerzhon"
            },
            "ces": {
                "official": "Irsko",
                "common": "Irsko"
            },
            "cym": {
                "official": "Republic of Ireland",
                "common": "Ireland"
            },
            "deu": {
                "official": "Republik Irland",
                "common": "Irland"
            },
            "est": {
                "official": "Iirimaa",
                "common": "Iirimaa"
            },
            "fin": {
                "official": "Irlannin tasavalta",
                "common": "Irlanti"
            },
            "fra": {
                "official": "R\xe9publique d'Irlande",
                "common": "Irlande"
            },
            "hrv": {
                "official": "Republika Irska",
                "common": "Irska"
            },
            "hun": {
                "official": "\xcdr K\xf6zt\xe1rsas\xe1g",
                "common": "\xcdrorsz\xe1g"
            },
            "ita": {
                "official": "Repubblica d'Irlanda",
                "common": "Irlanda"
            },
            "jpn": {
                "official": "\u30A2\u30A4\u30EB\u30E9\u30F3\u30C9\u5171\u548C\u56FD",
                "common": "\u30A2\u30A4\u30EB\u30E9\u30F3\u30C9"
            },
            "kor": {
                "official": "\uC544\uC77C\uB79C\uB4DC \uACF5\uD654\uAD6D",
                "common": "\uC544\uC77C\uB79C\uB4DC"
            },
            "nld": {
                "official": "Republic of Ireland",
                "common": "Ierland"
            },
            "per": {
                "official": "\u0627\u06CC\u0631\u0644\u0646\u062F",
                "common": "\u0627\u06CC\u0631\u0644\u0646\u062F"
            },
            "pol": {
                "official": "Republika Irlandii",
                "common": "Irlandia"
            },
            "por": {
                "official": "Rep\xfablica da Irlanda",
                "common": "Irlanda"
            },
            "rus": {
                "official": "\u0418\u0440\u043B\u0430\u043D\u0434\u0438\u044F",
                "common": "\u0418\u0440\u043B\u0430\u043D\u0434\u0438\u044F"
            },
            "slk": {
                "official": "\xcdrska republika",
                "common": "\xcdrsko"
            },
            "spa": {
                "official": "Rep\xfablica de Irlanda",
                "common": "Irlanda"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u0440\u0441\u043A\u0430",
                "common": "\u0418\u0440\u0441\u043A\u0430"
            },
            "swe": {
                "official": "Irland",
                "common": "Irland"
            },
            "tur": {
                "official": "\u0130rlanda Cumhuriyeti",
                "common": "\u0130rlanda"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062C\u0632\u06CC\u0631\u06C1 \u0622\u0626\u0631\u0644\u06CC\u0646\u0688",
                "common": "\u062C\u0632\u06CC\u0631\u06C1 \u0622\u0626\u0631\u0644\u06CC\u0646\u0688"
            },
            "zho": {
                "official": "\u7231\u5C14\u5170\u5171\u548C\u56FD",
                "common": "\u7231\u5C14\u5170"
            }
        },
        "latlng": [
            53,
            -8
        ],
        "landlocked": false,
        "borders": [
            "GBR"
        ],
        "area": 70273,
        "demonyms": {
            "eng": {
                "f": "Irish",
                "m": "Irish"
            },
            "fra": {
                "f": "Irlandaise",
                "m": "Irlandais"
            }
        },
        "flag": "\uD83C\uDDEE\uD83C\uDDEA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/hxd1BKxgpchStzQC6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/62273"
        },
        "population": 4994724,
        "gini": {
            "2017": 31.4
        },
        "fifa": "IRL",
        "car": {
            "signs": [
                "IRL"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ie.png",
            "svg": "https://flagcdn.com/ie.svg",
            "alt": "The flag of Ireland is composed of three equal vertical bands of green, white and orange."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ie.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ie.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                53.32,
                -6.23
            ]
        }
    },
    {
        "name": {
            "common": "United Arab Emirates",
            "official": "United Arab Emirates",
            "nativeName": {
                "ara": {
                    "official": "\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629",
                    "common": "\u062F\u0648\u0644\u0629 \u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629"
                }
            }
        },
        "tld": [
            ".ae",
            "\u0627\u0645\u0627\u0631\u0627\u062A."
        ],
        "cca2": "AE",
        "ccn3": "784",
        "cca3": "ARE",
        "cioc": "UAE",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "AED": {
                "name": "United Arab Emirates dirham",
                "symbol": "\u062F.\u0625"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "71"
            ]
        },
        "capital": [
            "Abu Dhabi"
        ],
        "altSpellings": [
            "AE",
            "UAE",
            "Emirates"
        ],
        "region": "Asia",
        "subregion": "Western Asia",
        "languages": {
            "ara": "Arabic"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629",
                "common": "\u062F\u0648\u0644\u0629 \u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629"
            },
            "bre": {
                "official": "Emirelezhio\xf9 Arab Unanet",
                "common": "Emirelezhio\xf9 Arab Unanet"
            },
            "ces": {
                "official": "Spojen\xe9 arabsk\xe9 emir\xe1ty",
                "common": "Arabsk\xe9 emir\xe1ty"
            },
            "cym": {
                "official": "United Arab Emirates",
                "common": "United Arab Emirates"
            },
            "deu": {
                "official": "Vereinigte Arabische Emirate",
                "common": "Vereinigte Arabische Emirate"
            },
            "est": {
                "official": "Araabia \xdchendemiraadid",
                "common": "Araabia \xdchendemiraadid"
            },
            "fin": {
                "official": "Yhdistyneet arabiemiirikunnat",
                "common": "Arabiemiraatit"
            },
            "fra": {
                "official": "\xc9mirats arabes unis",
                "common": "\xc9mirats arabes unis"
            },
            "hrv": {
                "official": "Ujedinjeni Arapski Emirati",
                "common": "Arapski Emirati"
            },
            "hun": {
                "official": "Egyes\xfclt Arab Em\xedrs\xe9gek",
                "common": "Egyes\xfclt Arab Em\xedrs\xe9gek"
            },
            "ita": {
                "official": "Emirati Arabi Uniti",
                "common": "Emirati Arabi Uniti"
            },
            "jpn": {
                "official": "\u30A2\u30E9\u30D6\u9996\u9577\u56FD\u9023\u90A6",
                "common": "\u30A2\u30E9\u30D6\u9996\u9577\u56FD\u9023\u90A6"
            },
            "kor": {
                "official": "\uC544\uB78D \uD1A0\uD6C4\uAD6D \uC5F0\uBC29",
                "common": "\uC544\uB78D\uC5D0\uBBF8\uB9AC\uD2B8"
            },
            "nld": {
                "official": "Verenigde Arabische Emiraten",
                "common": "Verenigde Arabische Emiraten"
            },
            "per": {
                "official": "\u0627\u0645\u0627\u0631\u0627\u062A \u0645\u062A\u062D\u062F\u0647 \u0639\u0631\u0628\u06CC",
                "common": "\u0627\u0645\u0627\u0631\u0627\u062A"
            },
            "pol": {
                "official": "Zjednoczone Emiraty Arabskie",
                "common": "Emiraty Arabskie"
            },
            "por": {
                "official": "Emirados \xc1rabes Unidos",
                "common": "Emirados \xc1rabes Unidos"
            },
            "rus": {
                "official": "\u041E\u0431\u044A\u0435\u0434\u0438\u043D\u0435\u043D\u043D\u044B\u0435 \u0410\u0440\u0430\u0431\u0441\u043A\u0438\u0435 \u042D\u043C\u0438\u0440\u0430\u0442\u044B",
                "common": "\u041E\u0431\u044A\u0435\u0434\u0438\u043D\u0451\u043D\u043D\u044B\u0435 \u0410\u0440\u0430\u0431\u0441\u043A\u0438\u0435 \u042D\u043C\u0438\u0440\u0430\u0442\u044B"
            },
            "slk": {
                "official": "Spojen\xe9 arabsk\xe9 emir\xe1ty",
                "common": "Arabsk\xe9 emir\xe1ty"
            },
            "spa": {
                "official": "Emiratos \xc1rabes Unidos",
                "common": "Emiratos \xc1rabes Unidos"
            },
            "srp": {
                "official": "\u0423\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u0438 \u0410\u0440\u0430\u043F\u0441\u043A\u0438 \u0415\u043C\u0438\u0440\u0430\u0442\u0438",
                "common": "\u0423\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u0438 \u0410\u0440\u0430\u043F\u0441\u043A\u0438 \u0415\u043C\u0438\u0440\u0430\u0442\u0438"
            },
            "swe": {
                "official": "F\xf6renade Arabemiraten",
                "common": "F\xf6renade Arabemiraten"
            },
            "tur": {
                "official": "Birle\u015Fik Arap Emirlikleri",
                "common": "Birle\u015Fik Arap Emirlikleri"
            },
            "urd": {
                "official": "\u0645\u062A\u062D\u062F\u06C1 \u0639\u0631\u0628 \u0627\u0645\u0627\u0631\u0627\u062A",
                "common": "\u0645\u062A\u062D\u062F\u06C1 \u0639\u0631\u0628 \u0627\u0645\u0627\u0631\u0627\u062A"
            },
            "zho": {
                "official": "\u963F\u62C9\u4F2F\u8054\u5408\u914B\u957F\u56FD",
                "common": "\u963F\u62C9\u4F2F\u8054\u5408\u914B\u957F\u56FD"
            }
        },
        "latlng": [
            24,
            54
        ],
        "landlocked": false,
        "borders": [
            "OMN",
            "SAU"
        ],
        "area": 83600,
        "demonyms": {
            "eng": {
                "f": "Emirati",
                "m": "Emirati"
            },
            "fra": {
                "f": "Emirienne",
                "m": "Emirien"
            }
        },
        "flag": "\uD83C\uDDE6\uD83C\uDDEA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/AZZTDA6GzVAnKMVd8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/307763"
        },
        "population": 9890400,
        "gini": {
            "2018": 26
        },
        "fifa": "UAE",
        "car": {
            "signs": [
                "UAE"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+04:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ae.png",
            "svg": "https://flagcdn.com/ae.svg",
            "alt": "The flag of United Arab Emirates features a red vertical band on its hoist side that takes up about one-fourth the width of the field and three equal horizontal bands of green, white and black adjoining the vertical band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ae.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ae.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                24.47,
                54.37
            ]
        }
    },
    {
        "name": {
            "common": "Guernsey",
            "official": "Bailiwick of Guernsey",
            "nativeName": {
                "eng": {
                    "official": "Bailiwick of Guernsey",
                    "common": "Guernsey"
                },
                "fra": {
                    "official": "Bailliage de Guernesey",
                    "common": "Guernesey"
                },
                "nfr": {
                    "official": "Dg\xe8rn\xe9siais",
                    "common": "Dg\xe8rn\xe9siais"
                }
            }
        },
        "tld": [
            ".gg"
        ],
        "cca2": "GG",
        "ccn3": "831",
        "cca3": "GGY",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "GBP": {
                "name": "British pound",
                "symbol": "\xa3"
            },
            "GGP": {
                "name": "Guernsey pound",
                "symbol": "\xa3"
            }
        },
        "idd": {
            "root": "+4",
            "suffixes": [
                "4"
            ]
        },
        "capital": [
            "St. Peter Port"
        ],
        "altSpellings": [
            "GG",
            "Bailiwick of Guernsey",
            "Bailliage de Guernesey"
        ],
        "region": "Europe",
        "subregion": "Northern Europe",
        "languages": {
            "eng": "English",
            "fra": "French",
            "nfr": "Guern\xe9siais"
        },
        "translations": {
            "ara": {
                "official": "\u063A\u064A\u0631\u0646\u0632\u064A",
                "common": "\u063A\u064A\u0631\u0646\u0632\u064A"
            },
            "bre": {
                "official": "Gwernenez",
                "common": "Gwernenez"
            },
            "ces": {
                "official": "Rycht\xe1\u0159stv\xed Guernsey",
                "common": "Guernsey"
            },
            "cym": {
                "official": "Bailiwick of Guernsey",
                "common": "Guernsey"
            },
            "deu": {
                "official": "Vogtei Guernsey",
                "common": "Guernsey"
            },
            "est": {
                "official": "Guernsey foogtkond",
                "common": "Guernsey"
            },
            "fin": {
                "official": "Guernsey",
                "common": "Guernsey"
            },
            "fra": {
                "official": "Bailliage de Guernesey",
                "common": "Guernesey"
            },
            "hrv": {
                "official": "Struka Guernsey",
                "common": "Guernsey"
            },
            "hun": {
                "official": "Guernsey",
                "common": "Guernsey"
            },
            "ita": {
                "official": "Baliato di Guernsey",
                "common": "Guernsey"
            },
            "jpn": {
                "official": "\u30AC\u30FC\u30F3\u30B8\u30FC\u306E\u5F97\u610F\u5206\u91CE",
                "common": "\u30AC\u30FC\u30F3\u30B8\u30FC"
            },
            "kor": {
                "official": "\uAC74\uC9C0 \uC12C",
                "common": "\uAC74\uC9C0 \uC12C"
            },
            "nld": {
                "official": "Baljuwschap Guernsey",
                "common": "Guernsey"
            },
            "per": {
                "official": "\u06AF\u0631\u0646\u0632\u06CC",
                "common": "\u06AF\u0631\u0646\u0632\u06CC"
            },
            "pol": {
                "official": "Baliwat Guernsey",
                "common": "Guernsey"
            },
            "por": {
                "official": "Bailiado de Guernsey",
                "common": "Guernsey"
            },
            "rus": {
                "official": "\u041A\u043E\u0440\u043E\u043D\u043D\u043E\u0435 \u0432\u043B\u0430\u0434\u0435\u043D\u0438\u0435 \u0413\u0435\u0440\u043D\u0441\u0438",
                "common": "\u0413\u0435\u0440\u043D\u0441\u0438"
            },
            "slk": {
                "official": "Guernsey",
                "common": "Guernsey"
            },
            "spa": {
                "official": "Bail\xeda de Guernsey",
                "common": "Guernsey"
            },
            "srp": {
                "official": "\u0411\u0435\u0458\u043B\u0438\u0432\u0438\u043A \u0413\u0435\u0440\u043D\u0437\u0438",
                "common": "\u0413\u0435\u0440\u043D\u0437\u0438"
            },
            "swe": {
                "official": "Guernsey",
                "common": "Guernsey"
            },
            "tur": {
                "official": "Guernsey Muhaf\u0131zl\u0131\u011F\u0131",
                "common": "Guernsey"
            },
            "urd": {
                "official": "\u06AF\u0631\u0646\u0632\u06CC \u0631\u0648\u062F\u0628\u0627\u0631",
                "common": "\u06AF\u0631\u0646\u0632\u06CC"
            },
            "zho": {
                "official": "\u6839\u897F\u5C9B",
                "common": "\u6839\u897F\u5C9B"
            }
        },
        "latlng": [
            49.46666666,
            -2.58333333
        ],
        "landlocked": false,
        "area": 78,
        "demonyms": {
            "eng": {
                "f": "Channel Islander",
                "m": "Channel Islander"
            },
            "fra": {
                "f": "Guernesiaise",
                "m": "Guernesiais"
            }
        },
        "flag": "\uD83C\uDDEC\uD83C\uDDEC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/6kXnQU5QvEZMD9VB7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/270009"
        },
        "population": 62999,
        "car": {
            "signs": [
                "GBG"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+00:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/gg.png",
            "svg": "https://flagcdn.com/gg.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/gg.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/gg.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                49.45,
                -2.54
            ]
        },
        "postalCode": {
            "format": "@# #@@|@## #@@|@@# #@@|@@## #@@|@#@ #@@|@@#@ #@@|GIR0AA",
            "regex": "^(([A-Z]\\d{2}[A-Z]{2})|([A-Z]\\d{3}[A-Z]{2})|([A-Z]{2}\\d{2}[A-Z]{2})|([A-Z]{2}\\d{3}[A-Z]{2})|([A-Z]\\d[A-Z]\\d[A-Z]{2})|([A-Z]{2}\\d[A-Z]\\d[A-Z]{2})|(GIR0AA))$"
        }
    },
    {
        "name": {
            "common": "Saint Lucia",
            "official": "Saint Lucia",
            "nativeName": {
                "eng": {
                    "official": "Saint Lucia",
                    "common": "Saint Lucia"
                }
            }
        },
        "tld": [
            ".lc"
        ],
        "cca2": "LC",
        "ccn3": "662",
        "cca3": "LCA",
        "cioc": "LCA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "XCD": {
                "name": "Eastern Caribbean dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "758"
            ]
        },
        "capital": [
            "Castries"
        ],
        "altSpellings": [
            "LC"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u0633\u0627\u0646\u062A \u0644\u0648\u0633\u064A\u0627",
                "common": "\u0633\u0627\u0646\u062A \u0644\u0648\u0633\u064A\u0627"
            },
            "bre": {
                "official": "Santez-Lusia",
                "common": "Santez-Lusia"
            },
            "ces": {
                "official": "Svat\xe1 Lucie",
                "common": "Svat\xe1 Lucie"
            },
            "cym": {
                "official": "Saint Lucia",
                "common": "Saint Lucia"
            },
            "deu": {
                "official": "St. Lucia",
                "common": "St. Lucia"
            },
            "est": {
                "official": "Saint Lucia",
                "common": "Saint Lucia"
            },
            "fin": {
                "official": "Saint Lucia",
                "common": "Saint Lucia"
            },
            "fra": {
                "official": "Sainte-Lucie",
                "common": "Sainte-Lucie"
            },
            "hrv": {
                "official": "Sveta Lucija",
                "common": "Sveta Lucija"
            },
            "hun": {
                "official": "Saint Lucia",
                "common": "Saint Lucia"
            },
            "ita": {
                "official": "Santa Lucia",
                "common": "Santa Lucia"
            },
            "jpn": {
                "official": "\u30BB\u30F3\u30C8\u30EB\u30B7\u30A2",
                "common": "\u30BB\u30F3\u30C8\u30EB\u30B7\u30A2"
            },
            "kor": {
                "official": "\uC138\uC778\uD2B8\uB8E8\uC2DC\uC544",
                "common": "\uC138\uC778\uD2B8\uB8E8\uC2DC\uC544"
            },
            "nld": {
                "official": "Saint Lucia",
                "common": "Saint Lucia"
            },
            "per": {
                "official": "\u0633\u0646\u062A \u0644\u0648\u0633\u06CC\u0627",
                "common": "\u0633\u0646\u062A \u0644\u0648\u0633\u06CC\u0627"
            },
            "pol": {
                "official": "Saint Lucia",
                "common": "Saint Lucia"
            },
            "por": {
                "official": "Santa L\xfacia",
                "common": "Santa L\xfacia"
            },
            "rus": {
                "official": "\u0421\u0435\u043D\u0442-\u041B\u044E\u0441\u0438\u044F",
                "common": "\u0421\u0435\u043D\u0442-\u041B\u044E\u0441\u0438\u044F"
            },
            "slk": {
                "official": "Sv\xe4t\xe1 Lucia",
                "common": "Sv\xe4t\xe1 Lucia"
            },
            "spa": {
                "official": "Santa Luc\xeda",
                "common": "Santa Luc\xeda"
            },
            "srp": {
                "official": "\u0421\u0432\u0435\u0442\u0430 \u041B\u0443\u0446\u0438\u0458\u0430",
                "common": "\u0421\u0432\u0435\u0442\u0430 \u041B\u0443\u0446\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Saint Lucia",
                "common": "Saint Lucia"
            },
            "tur": {
                "official": "Saint Lucia",
                "common": "Saint Lucia"
            },
            "urd": {
                "official": "\u0633\u06CC\u0646\u0679 \u0644\u0648\u0633\u06CC\u0627",
                "common": "\u0633\u06CC\u0646\u0679 \u0644\u0648\u0633\u06CC\u0627"
            },
            "zho": {
                "official": "\u5723\u5362\u897F\u4E9A",
                "common": "\u5723\u5362\u897F\u4E9A"
            }
        },
        "latlng": [
            13.88333333,
            -60.96666666
        ],
        "landlocked": false,
        "area": 616,
        "demonyms": {
            "eng": {
                "f": "Saint Lucian",
                "m": "Saint Lucian"
            },
            "fra": {
                "f": "Saint-Lucienne",
                "m": "Saint-Lucien"
            }
        },
        "flag": "\uD83C\uDDF1\uD83C\uDDE8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/4HhJ2jkPdSL9BPRcA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/550728"
        },
        "population": 183629,
        "gini": {
            "2016": 51.2
        },
        "fifa": "LCA",
        "car": {
            "signs": [
                "WL"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/lc.png",
            "svg": "https://flagcdn.com/lc.svg",
            "alt": "The flag of Saint Lucia has a light blue field, at the center of which are two triangles which share a common base \u2014 a small golden-yellow isosceles triangle superimposed on a large white-edged black isosceles triangle."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/lc.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/lc.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                14,
                -61
            ]
        }
    },
    {
        "name": {
            "common": "Dominican Republic",
            "official": "Dominican Republic",
            "nativeName": {
                "spa": {
                    "official": "Rep\xfablica Dominicana",
                    "common": "Rep\xfablica Dominicana"
                }
            }
        },
        "tld": [
            ".do"
        ],
        "cca2": "DO",
        "ccn3": "214",
        "cca3": "DOM",
        "cioc": "DOM",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "DOP": {
                "name": "Dominican peso",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "809",
                "829",
                "849"
            ]
        },
        "capital": [
            "Santo Domingo"
        ],
        "altSpellings": [
            "DO"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u062F\u0648\u0645\u064A\u0646\u064A\u0643\u0627\u0646",
                "common": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u062F\u0648\u0645\u064A\u0646\u064A\u0643\u0627\u0646"
            },
            "bre": {
                "official": "Republik Dominikan",
                "common": "Republik Dominikan"
            },
            "ces": {
                "official": "Dominik\xe1nsk\xe1 republika",
                "common": "Dominik\xe1nsk\xe1 republika"
            },
            "cym": {
                "official": "Gweriniaeth Dominica",
                "common": "Gweriniaeth Dominica"
            },
            "deu": {
                "official": "Dominikanische Republik",
                "common": "Dominikanische Republik"
            },
            "est": {
                "official": "Dominikaani Vabariik",
                "common": "Dominikaani Vabariik"
            },
            "fin": {
                "official": "Dominikaaninen tasavalta",
                "common": "Dominikaaninen tasavalta"
            },
            "fra": {
                "official": "R\xe9publique Dominicaine",
                "common": "R\xe9publique dominicaine"
            },
            "hrv": {
                "official": "Dominikanska Republika",
                "common": "Dominikanska Republika"
            },
            "hun": {
                "official": "Dominikai K\xf6zt\xe1rsas\xe1g",
                "common": "Dominikai K\xf6zt\xe1rsas\xe1g"
            },
            "ita": {
                "official": "Repubblica Dominicana",
                "common": "Repubblica Dominicana"
            },
            "jpn": {
                "official": "\u30C9\u30DF\u30CB\u30AB\u5171\u548C\u56FD",
                "common": "\u30C9\u30DF\u30CB\u30AB\u5171\u548C\u56FD"
            },
            "kor": {
                "official": "\uB3C4\uBBF8\uB2C8\uCE74 \uACF5\uD654\uAD6D",
                "common": "\uB3C4\uBBF8\uB2C8\uCE74 \uACF5\uD654\uAD6D"
            },
            "nld": {
                "official": "Dominicaanse Republiek",
                "common": "Dominicaanse Republiek"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062F\u0648\u0645\u06CC\u0646\u06CC\u06A9\u0646",
                "common": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062F\u0648\u0645\u06CC\u0646\u06CC\u06A9\u0646"
            },
            "pol": {
                "official": "Republika Dominika\u0144ska",
                "common": "Dominikana"
            },
            "por": {
                "official": "Rep\xfablica Dominicana",
                "common": "Rep\xfablica Dominicana"
            },
            "rus": {
                "official": "\u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430"
            },
            "slk": {
                "official": "Dominik\xe1nska republika",
                "common": "Dominik\xe1nska republika"
            },
            "spa": {
                "official": "Rep\xfablica Dominicana",
                "common": "Rep\xfablica Dominicana"
            },
            "srp": {
                "official": "\u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0430\u043D\u0430"
            },
            "swe": {
                "official": "Dominikanska republiken",
                "common": "Dominikanska republiken"
            },
            "tur": {
                "official": "Dominik Cumhuriyeti",
                "common": "Dominik Cumhuriyeti"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0688\u0648\u0645\u06CC\u0646\u06CC\u06A9\u0646",
                "common": "\u0688\u0648\u0645\u06CC\u0646\u06CC\u06A9\u0646"
            },
            "zho": {
                "official": "\u591A\u660E\u5C3C\u52A0\u5171\u548C\u56FD",
                "common": "\u591A\u660E\u5C3C\u52A0"
            }
        },
        "latlng": [
            19,
            -70.66666666
        ],
        "landlocked": false,
        "borders": [
            "HTI"
        ],
        "area": 48671,
        "demonyms": {
            "eng": {
                "f": "Dominican",
                "m": "Dominican"
            },
            "fra": {
                "f": "Dominicaine",
                "m": "Dominicain"
            }
        },
        "flag": "\uD83C\uDDE9\uD83C\uDDF4",
        "maps": {
            "googleMaps": "https://goo.gl/maps/soxooTHxEeiAbn3UA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/307828"
        },
        "population": 10847904,
        "gini": {
            "2019": 41.9
        },
        "fifa": "DOM",
        "car": {
            "signs": [
                "DOM"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/do.png",
            "svg": "https://flagcdn.com/do.svg",
            "alt": "The flag of the Dominican Republic is divided into four rectangles by a centered white cross that extends to the edges of the field and bears the national coat of arms in its center. The upper hoist-side and lower fly-side rectangles are blue and the lower hoist-side and upper fly-side rectangles are red."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/do.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/do.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                18.47,
                -69.9
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Serbia",
            "official": "Republic of Serbia",
            "nativeName": {
                "srp": {
                    "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0440\u0431\u0438\u0458\u0430",
                    "common": "\u0421\u0440\u0431\u0438\u0458\u0430"
                }
            }
        },
        "tld": [
            ".rs",
            ".\u0441\u0440\u0431"
        ],
        "cca2": "RS",
        "ccn3": "688",
        "cca3": "SRB",
        "cioc": "SRB",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "RSD": {
                "name": "Serbian dinar",
                "symbol": "\u0434\u0438\u043D."
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "81"
            ]
        },
        "capital": [
            "Belgrade"
        ],
        "altSpellings": [
            "RS",
            "Srbija",
            "Republic of Serbia",
            "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0440\u0431\u0438\u0458\u0430",
            "Republika Srbija"
        ],
        "region": "Europe",
        "subregion": "Southeast Europe",
        "languages": {
            "srp": "Serbian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0635\u064A\u0631\u0628\u064A\u0627",
                "common": "\u0635\u064A\u0631\u0628\u064A\u0627"
            },
            "bre": {
                "official": "Republik Serbia",
                "common": "Serbia"
            },
            "ces": {
                "official": "Srbsk\xe1 republika",
                "common": "Srbsko"
            },
            "cym": {
                "official": "Republic of Serbia",
                "common": "Serbia"
            },
            "deu": {
                "official": "Republik Serbien",
                "common": "Serbien"
            },
            "est": {
                "official": "Serbia Vabariik",
                "common": "Serbia"
            },
            "fin": {
                "official": "Serbian tasavalta",
                "common": "Serbia"
            },
            "fra": {
                "official": "R\xe9publique de Serbie",
                "common": "Serbie"
            },
            "hrv": {
                "official": "Republika Srbija",
                "common": "Srbija"
            },
            "hun": {
                "official": "Szerb K\xf6zt\xe1rsas\xe1g",
                "common": "Szerbia"
            },
            "ita": {
                "official": "Repubblica di Serbia",
                "common": "Serbia"
            },
            "jpn": {
                "official": "\u30BB\u30EB\u30D3\u30A2\u5171\u548C\u56FD",
                "common": "\u30BB\u30EB\u30D3\u30A2"
            },
            "kor": {
                "official": "\uC138\uB974\uBE44\uC544 \uACF5\uD654\uAD6D",
                "common": "\uC138\uB974\uBE44\uC544"
            },
            "nld": {
                "official": "Republiek Servi\xeb",
                "common": "Servi\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0635\u0631\u0628\u0633\u062A\u0627\u0646",
                "common": "\u0635\u0631\u0628\u0633\u062A\u0627\u0646"
            },
            "pol": {
                "official": "Republika Serbii",
                "common": "Serbia"
            },
            "por": {
                "official": "Rep\xfablica da S\xe9rvia",
                "common": "S\xe9rvia"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u0440\u0431\u0438\u044F",
                "common": "\u0421\u0435\u0440\u0431\u0438\u044F"
            },
            "slk": {
                "official": "Srbsk\xe1 republika",
                "common": "Srbsko"
            },
            "spa": {
                "official": "Rep\xfablica de Serbia",
                "common": "Serbia"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0440\u0431\u0438\u0458\u0430",
                "common": "\u0421\u0440\u0431\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Serbien",
                "common": "Serbien"
            },
            "tur": {
                "official": "S\u0131rbistan Cumhuriyeti",
                "common": "S\u0131rbistan"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0631\u0628\u06CC\u0627",
                "common": "\u0633\u0631\u0628\u06CC\u0627"
            },
            "zho": {
                "official": "\u585E\u5C14\u7EF4\u4E9A\u5171\u548C\u56FD",
                "common": "\u585E\u5C14\u7EF4\u4E9A"
            }
        },
        "latlng": [
            44,
            21
        ],
        "landlocked": true,
        "borders": [
            "BIH",
            "BGR",
            "HRV",
            "HUN",
            "UNK",
            "MKD",
            "MNE",
            "ROU"
        ],
        "area": 88361,
        "demonyms": {
            "eng": {
                "f": "Serbian",
                "m": "Serbian"
            },
            "fra": {
                "f": "Serbe",
                "m": "Serbe"
            }
        },
        "flag": "\uD83C\uDDF7\uD83C\uDDF8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/2Aqof7aV2Naq8YEK8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1741311"
        },
        "population": 6908224,
        "gini": {
            "2017": 36.2
        },
        "fifa": "SRB",
        "car": {
            "signs": [
                "SRB"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/rs.png",
            "svg": "https://flagcdn.com/rs.svg",
            "alt": "The flag of Serbia is composed of three equal horizontal bands of red, blue and white. The coat of arms of Serbia is superimposed at the center of the field slightly towards the hoist side."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/rs.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/rs.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                44.83,
                20.5
            ]
        },
        "postalCode": {
            "format": "######",
            "regex": "^(\\d{6})$"
        }
    },
    {
        "name": {
            "common": "Botswana",
            "official": "Republic of Botswana",
            "nativeName": {
                "eng": {
                    "official": "Republic of Botswana",
                    "common": "Botswana"
                },
                "tsn": {
                    "official": "Lefatshe la Botswana",
                    "common": "Botswana"
                }
            }
        },
        "tld": [
            ".bw"
        ],
        "cca2": "BW",
        "ccn3": "072",
        "cca3": "BWA",
        "cioc": "BOT",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "BWP": {
                "name": "Botswana pula",
                "symbol": "P"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "67"
            ]
        },
        "capital": [
            "Gaborone"
        ],
        "altSpellings": [
            "BW",
            "Republic of Botswana",
            "Lefatshe la Botswana"
        ],
        "region": "Africa",
        "subregion": "Southern Africa",
        "languages": {
            "eng": "English",
            "tsn": "Tswana"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u0648\u062A\u0633\u0648\u0627\u0646\u0627",
                "common": "\u0628\u0648\u062A\u0633\u0648\u0627\u0646\u0627"
            },
            "bre": {
                "official": "Republik Botswana",
                "common": "Botswana"
            },
            "ces": {
                "official": "Botswansk\xe1 republika",
                "common": "Botswana"
            },
            "cym": {
                "official": "Republic of Botswana",
                "common": "Botswana"
            },
            "deu": {
                "official": "Republik Botsuana",
                "common": "Botswana"
            },
            "est": {
                "official": "Botswana Vabariik",
                "common": "Botswana"
            },
            "fin": {
                "official": "Botswanan tasavalta",
                "common": "Botswana"
            },
            "fra": {
                "official": "R\xe9publique du Botswana",
                "common": "Botswana"
            },
            "hrv": {
                "official": "Republika Bocvana",
                "common": "Bocvana"
            },
            "hun": {
                "official": "Botswanai K\xf6zt\xe1rsas\xe1g",
                "common": "Botswana"
            },
            "ita": {
                "official": "Repubblica del Botswana",
                "common": "Botswana"
            },
            "jpn": {
                "official": "\u30DC\u30C4\u30EF\u30CA\u5171\u548C\u56FD",
                "common": "\u30DC\u30C4\u30EF\u30CA"
            },
            "kor": {
                "official": "\uBCF4\uCE20\uC640\uB098 \uACF5\uD654\uAD6D",
                "common": "\uBCF4\uCE20\uC640\uB098"
            },
            "nld": {
                "official": "Republiek Botswana",
                "common": "Botswana"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0628\u0648\u062A\u0633\u0648\u0627\u0646\u0627",
                "common": "\u0628\u0648\u062A\u0633\u0648\u0627\u0646\u0627"
            },
            "pol": {
                "official": "Republika Botswany",
                "common": "Botswana"
            },
            "por": {
                "official": "Rep\xfablica do Botswana",
                "common": "Botswana"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u043E\u0442\u0441\u0432\u0430\u043D\u0430",
                "common": "\u0411\u043E\u0442\u0441\u0432\u0430\u043D\u0430"
            },
            "slk": {
                "official": "Botswansk\xe1 republika",
                "common": "Botswana"
            },
            "spa": {
                "official": "Rep\xfablica de Botswana",
                "common": "Botswana"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u043E\u0446\u0432\u0430\u043D\u0430",
                "common": "\u0411\u043E\u0446\u0432\u0430\u043D\u0430"
            },
            "swe": {
                "official": "Republiken Botswana",
                "common": "Botswana"
            },
            "tur": {
                "official": "Botsvana Cumhuriyeti",
                "common": "Botsvana"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0628\u0648\u0679\u0633\u0648\u0627\u0646\u0627",
                "common": "\u0628\u0648\u0679\u0633\u0648\u0627\u0646\u0627"
            },
            "zho": {
                "official": "\u535A\u8328\u74E6\u7EB3\u5171\u548C\u56FD",
                "common": "\u535A\u8328\u74E6\u7EB3"
            }
        },
        "latlng": [
            -22,
            24
        ],
        "landlocked": true,
        "borders": [
            "NAM",
            "ZAF",
            "ZMB",
            "ZWE"
        ],
        "area": 582000,
        "demonyms": {
            "eng": {
                "f": "Motswana",
                "m": "Motswana"
            },
            "fra": {
                "f": "Botswanaise",
                "m": "Botswanais"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDFC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/E364KeLy6N4JwxwQ8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1889339"
        },
        "population": 2351625,
        "gini": {
            "2015": 53.3
        },
        "fifa": "BOT",
        "car": {
            "signs": [
                "BW"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/bw.png",
            "svg": "https://flagcdn.com/bw.svg",
            "alt": "The flag of Botswana has a light blue field with a white-edged black horizontal band across its center."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/bw.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/bw.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -24.63,
                25.9
            ]
        }
    },
    {
        "name": {
            "common": "Ivory Coast",
            "official": "Republic of C\xf4te d'Ivoire",
            "nativeName": {
                "fra": {
                    "official": "R\xe9publique de C\xf4te d'Ivoire",
                    "common": "C\xf4te d'Ivoire"
                }
            }
        },
        "tld": [
            ".ci"
        ],
        "cca2": "CI",
        "ccn3": "384",
        "cca3": "CIV",
        "cioc": "CIV",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "XOF": {
                "name": "West African CFA franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "25"
            ]
        },
        "capital": [
            "Yamoussoukro"
        ],
        "altSpellings": [
            "CI",
            "C\xf4te d'Ivoire",
            "Ivory Coast",
            "Republic of C\xf4te d'Ivoire",
            "R\xe9publique de C\xf4te d'Ivoire"
        ],
        "region": "Africa",
        "subregion": "Western Africa",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u0627\u062D\u0644 \u0627\u0644\u0639\u0627\u062C",
                "common": "\u0633\u0627\u062D\u0644 \u0627\u0644\u0639\u0627\u062C"
            },
            "bre": {
                "official": "Republik Aod an Olifant",
                "common": "Aod an Olifant"
            },
            "ces": {
                "official": "Republika Pob\u0159e\u017E\xed slonoviny",
                "common": "Pob\u0159e\u017E\xed slonoviny"
            },
            "cym": {
                "official": "Republic of C\xf4te d'Ivoire",
                "common": "Ivory Coast"
            },
            "deu": {
                "official": "Republik C\xf4te d'Ivoire",
                "common": "Elfenbeink\xfcste"
            },
            "est": {
                "official": "C\xf4te d\u2019Ivoire\u2019i Vabariik",
                "common": "Elevandiluurannik"
            },
            "fin": {
                "official": "Norsunluurannikon tasavalta",
                "common": "Norsunluurannikko"
            },
            "fra": {
                "official": "R\xe9publique de C\xf4te d' Ivoire",
                "common": "C\xf4te d'Ivoire"
            },
            "hrv": {
                "official": "Republika C\xf4te d'Ivoire",
                "common": "Obala Bjelokosti"
            },
            "hun": {
                "official": "Elef\xe1ntcsontparti K\xf6zt\xe1rsas\xe1g",
                "common": "Elef\xe1ntcsontpart"
            },
            "ita": {
                "official": "Repubblica della Costa d'Avorio",
                "common": "Costa d'Avorio"
            },
            "jpn": {
                "official": "\u30B3\u30FC\u30C8\u30B8\u30DC\u30EF\u30FC\u30EB\u5171\u548C\u56FD",
                "common": "\u30B3\u30FC\u30C8\u30B8\u30DC\u30EF\u30FC\u30EB"
            },
            "kor": {
                "official": "\uCF54\uD2B8\uB514\uBD80\uC544\uB974 \uACF5\uD654\uAD6D",
                "common": "\uCF54\uD2B8\uB514\uBD80\uC544\uB974"
            },
            "nld": {
                "official": "Republiek Ivoorkust",
                "common": "Ivoorkust"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u0627\u062D\u0644 \u0639\u0627\u062C",
                "common": "\u0633\u0627\u062D\u0644 \u0639\u0627\u062C"
            },
            "pol": {
                "official": "Republika Wybrze\u017Ba Ko\u015Bci S\u0142oniowej",
                "common": "Wybrze\u017Be Ko\u015Bci S\u0142oniowej"
            },
            "por": {
                "official": "Rep\xfablica da C\xf4te d'Ivoire",
                "common": "Costa do Marfim"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0442-\u0434'\u0418\u0432\u0443\u0430\u0440\u0435",
                "common": "\u041A\u043E\u0442-\u0434\u2019\u0418\u0432\u0443\u0430\u0440"
            },
            "slk": {
                "official": "Republika Pobre\u017Eie Slonoviny",
                "common": "Pobr\u017Eie Slonoviny"
            },
            "spa": {
                "official": "Rep\xfablica de C\xf4te d'Ivoire",
                "common": "Costa de Marfil"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041E\u0431\u0430\u043B\u0430 \u0421\u043B\u043E\u043D\u043E\u0432\u0430\u0447\u0435",
                "common": "\u041E\u0431\u0430\u043B\u0430 \u0421\u043B\u043E\u043D\u043E\u0432\u0430\u0447\u0435"
            },
            "swe": {
                "official": "Republiken Elfenbenskusten",
                "common": "Elfenbenskusten"
            },
            "tur": {
                "official": "Fildi\u015Fi Sahili",
                "common": "Fildi\u015Fi Sahili"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0648\u062A \u062F\u06CC\u0648\u0627\u063A",
                "common": "\u0622\u0626\u06CC\u0648\u0631\u06CC \u06A9\u0648\u0633\u0679"
            },
            "zho": {
                "official": "\u79D1\u7279\u8FEA\u74E6\u5171\u548C\u56FD",
                "common": "\u79D1\u7279\u8FEA\u74E6"
            }
        },
        "latlng": [
            8,
            -5
        ],
        "landlocked": false,
        "borders": [
            "BFA",
            "GHA",
            "GIN",
            "LBR",
            "MLI"
        ],
        "area": 322463,
        "demonyms": {
            "eng": {
                "f": "Ivorian",
                "m": "Ivorian"
            },
            "fra": {
                "f": "Ivoirienne",
                "m": "Ivoirien"
            }
        },
        "flag": "\uD83C\uDDE8\uD83C\uDDEE",
        "maps": {
            "googleMaps": "https://goo.gl/maps/wKsmN7f5qAeNtGjP6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192779"
        },
        "population": 26378275,
        "gini": {
            "2015": 41.5
        },
        "fifa": "CIV",
        "car": {
            "signs": [
                "CI"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ci.png",
            "svg": "https://flagcdn.com/ci.svg",
            "alt": "The flag of Ivory Coast is composed of three equal vertical bands of orange, white and green."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ci.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ci.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                6.82,
                -5.27
            ]
        }
    },
    {
        "name": {
            "common": "Ghana",
            "official": "Republic of Ghana",
            "nativeName": {
                "eng": {
                    "official": "Republic of Ghana",
                    "common": "Ghana"
                }
            }
        },
        "tld": [
            ".gh"
        ],
        "cca2": "GH",
        "ccn3": "288",
        "cca3": "GHA",
        "cioc": "GHA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "GHS": {
                "name": "Ghanaian cedi",
                "symbol": "\u20B5"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "33"
            ]
        },
        "capital": [
            "Accra"
        ],
        "altSpellings": [
            "GH"
        ],
        "region": "Africa",
        "subregion": "Western Africa",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u063A\u0627\u0646\u0627",
                "common": "\u063A\u0627\u0646\u0627"
            },
            "bre": {
                "official": "Republik Ghana",
                "common": "Ghana"
            },
            "ces": {
                "official": "Ghansk\xe1 republika",
                "common": "Ghana"
            },
            "cym": {
                "official": "Republic of Ghana",
                "common": "Ghana"
            },
            "deu": {
                "official": "Republik Ghana",
                "common": "Ghana"
            },
            "est": {
                "official": "Ghana Vabariik",
                "common": "Ghana"
            },
            "fin": {
                "official": "Ghanan tasavalta",
                "common": "Ghana"
            },
            "fra": {
                "official": "R\xe9publique du Ghana",
                "common": "Ghana"
            },
            "hrv": {
                "official": "Republika Gana",
                "common": "Gana"
            },
            "hun": {
                "official": "Gh\xe1nai K\xf6zt\xe1rsas\xe1g",
                "common": "Gh\xe1na"
            },
            "ita": {
                "official": "Repubblica del Ghana",
                "common": "Ghana"
            },
            "jpn": {
                "official": "\u30AC\u30FC\u30CA\u5171\u548C\u56FD",
                "common": "\u30AC\u30FC\u30CA"
            },
            "kor": {
                "official": "\uAC00\uB098 \uACF5\uD654\uAD6D",
                "common": "\uAC00\uB098"
            },
            "nld": {
                "official": "Republiek Ghana",
                "common": "Ghana"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u063A\u0646\u0627",
                "common": "\u063A\u0646\u0627"
            },
            "pol": {
                "official": "Republika Ghany",
                "common": "Ghana"
            },
            "por": {
                "official": "Rep\xfablica do Gana",
                "common": "Gana"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0430\u043D\u0430",
                "common": "\u0413\u0430\u043D\u0430"
            },
            "slk": {
                "official": "Ghansk\xe1 republika",
                "common": "Ghana"
            },
            "spa": {
                "official": "Rep\xfablica de Ghana",
                "common": "Ghana"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0430\u043D\u0430",
                "common": "\u0413\u0430\u043D\u0430"
            },
            "swe": {
                "official": "Republiken Ghana",
                "common": "Ghana"
            },
            "tur": {
                "official": "Gana Cumhuriyeti",
                "common": "Gana"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06AF\u06BE\u0627\u0646\u0627",
                "common": "\u06AF\u06BE\u0627\u0646\u0627"
            },
            "zho": {
                "official": "\u52A0\u7EB3\u5171\u548C\u56FD",
                "common": "\u52A0\u7EB3"
            }
        },
        "latlng": [
            8,
            -2
        ],
        "landlocked": false,
        "borders": [
            "BFA",
            "CIV",
            "TGO"
        ],
        "area": 238533,
        "demonyms": {
            "eng": {
                "f": "Ghanaian",
                "m": "Ghanaian"
            },
            "fra": {
                "f": "Ghan\xe9enne",
                "m": "Ghan\xe9en"
            }
        },
        "flag": "\uD83C\uDDEC\uD83C\uDDED",
        "maps": {
            "googleMaps": "https://goo.gl/maps/Avy5RSmdsXFBaiXq8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192781"
        },
        "population": 31072945,
        "gini": {
            "2016": 43.5
        },
        "fifa": "GHA",
        "car": {
            "signs": [
                "GH"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/gh.png",
            "svg": "https://flagcdn.com/gh.svg",
            "alt": "The flag of Ghana is composed of three equal horizontal bands of red, gold and green, with a five-pointed black star centered in the gold band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/gh.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/gh.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                5.55,
                -0.22
            ]
        }
    },
    {
        "name": {
            "common": "Comoros",
            "official": "Union of the Comoros",
            "nativeName": {
                "ara": {
                    "official": "\u0627\u0644\u0627\u062A\u062D\u0627\u062F \u0627\u0644\u0642\u0645\u0631\u064A",
                    "common": "\u0627\u0644\u0642\u0645\u0631\u200E"
                },
                "fra": {
                    "official": "Union des Comores",
                    "common": "Comores"
                },
                "zdj": {
                    "official": "Udzima wa Komori",
                    "common": "Komori"
                }
            }
        },
        "tld": [
            ".km"
        ],
        "cca2": "KM",
        "ccn3": "174",
        "cca3": "COM",
        "cioc": "COM",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "KMF": {
                "name": "Comorian franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "69"
            ]
        },
        "capital": [
            "Moroni"
        ],
        "altSpellings": [
            "KM",
            "Union of the Comoros",
            "Union des Comores",
            "Udzima wa Komori",
            "al-Itti\u1E25\u0101d al-Qumur\u012B"
        ],
        "region": "Africa",
        "subregion": "Eastern Africa",
        "languages": {
            "ara": "Arabic",
            "fra": "French",
            "zdj": "Comorian"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u0625\u062A\u062D\u0627\u062F \u0627\u0644\u0642\u0645\u0631\u064A",
                "common": "\u062C\u0632\u0631 \u0627\u0644\u0642\u0645\u0631"
            },
            "bre": {
                "official": "Unaniezh Komorez",
                "common": "Komorez"
            },
            "ces": {
                "official": "Komorsk\xfd svaz",
                "common": "Komory"
            },
            "cym": {
                "official": "Undeb y Comoros",
                "common": "Y Comoros"
            },
            "deu": {
                "official": "Union der Komoren",
                "common": "Komoren"
            },
            "est": {
                "official": "Komoori Liit",
                "common": "Komoorid"
            },
            "fin": {
                "official": "Komorien liitto",
                "common": "Komorit"
            },
            "fra": {
                "official": "Union des Comores",
                "common": "Comores"
            },
            "hrv": {
                "official": "Savez Komori",
                "common": "Komori"
            },
            "hun": {
                "official": "Comore-szigeteki Uni\xf3",
                "common": "Comore-szigetek"
            },
            "ita": {
                "official": "Unione delle Comore",
                "common": "Comore"
            },
            "jpn": {
                "official": "\u30B3\u30E2\u30ED\u9023\u5408",
                "common": "\u30B3\u30E2\u30ED"
            },
            "kor": {
                "official": "\uCF54\uBAA8\uB85C \uC5F0\uBC29",
                "common": "\uCF54\uBAA8\uB85C"
            },
            "nld": {
                "official": "Unie van de Comoren",
                "common": "Comoren"
            },
            "per": {
                "official": "\u0645\u062C\u0645\u0639\u200C\u0627\u0644\u062C\u0632\u0627\u06CC\u0631 \u0642\u0645\u0631",
                "common": "\u0627\u062A\u062D\u0627\u062F \u0642\u064F\u0645\u064F\u0631"
            },
            "pol": {
                "official": "Zwi\u0105zek Komor\xf3w",
                "common": "Komory"
            },
            "por": {
                "official": "Uni\xe3o das Comores",
                "common": "Comores"
            },
            "rus": {
                "official": "\u0421\u043E\u044E\u0437 \u041A\u043E\u043C\u043E\u0440\u0441\u043A\u0438\u0445 \u041E\u0441\u0442\u0440\u043E\u0432\u043E\u0432",
                "common": "\u041A\u043E\u043C\u043E\u0440\u044B"
            },
            "slk": {
                "official": "Komorsk\xe1 \xfania",
                "common": "Komory"
            },
            "spa": {
                "official": "Uni\xf3n de las Comoras",
                "common": "Comoras"
            },
            "srp": {
                "official": "\u0421\u0430\u0432\u0435\u0437 \u041A\u043E\u043C\u043E\u0440\u0430",
                "common": "\u041A\u043E\u043C\u043E\u0440\u0438"
            },
            "swe": {
                "official": "Unionen Komorerna",
                "common": "Komorerna"
            },
            "tur": {
                "official": "Komorlar Birli\u011Fi",
                "common": "Komorlar"
            },
            "urd": {
                "official": "\u0627\u062A\u062D\u0627\u062F \u0627\u0644\u0642\u0645\u0631\u06CC",
                "common": "\u0627\u0644\u0642\u0645\u0631\u06CC"
            },
            "zho": {
                "official": "\u79D1\u6469\u7F57\u8054\u76DF",
                "common": "\u79D1\u6469\u7F57"
            }
        },
        "latlng": [
            -12.16666666,
            44.25
        ],
        "landlocked": false,
        "area": 1862,
        "demonyms": {
            "eng": {
                "f": "Comoran",
                "m": "Comoran"
            },
            "fra": {
                "f": "Comorienne",
                "m": "Comorien"
            }
        },
        "flag": "\uD83C\uDDF0\uD83C\uDDF2",
        "maps": {
            "googleMaps": "https://goo.gl/maps/eas4GP28C1GyStnu6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/535790"
        },
        "population": 869595,
        "gini": {
            "2014": 45.3
        },
        "fifa": "COM",
        "car": {
            "signs": [
                "COM"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/km.png",
            "svg": "https://flagcdn.com/km.svg",
            "alt": "The flag of Comoros is composed of four equal horizontal bands of yellow, white, red and blue, with a green isosceles triangle superimposed on the hoist side of the field. This triangle has its base on the hoist end, spans about two-fifth the width of the field and bears a fly-side facing white crescent and four five-pointed white stars arranged in a vertical line along the opening of the crescent."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/km.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/km.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -11.7,
                43.23
            ]
        }
    },
    {
        "name": {
            "common": "Azerbaijan",
            "official": "Republic of Azerbaijan",
            "nativeName": {
                "aze": {
                    "official": "Az\u0259rbaycan Respublikas\u0131",
                    "common": "Az\u0259rbaycan"
                }
            }
        },
        "tld": [
            ".az"
        ],
        "cca2": "AZ",
        "ccn3": "031",
        "cca3": "AZE",
        "cioc": "AZE",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "AZN": {
                "name": "Azerbaijani manat",
                "symbol": "\u20BC"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "94"
            ]
        },
        "capital": [
            "Baku"
        ],
        "altSpellings": [
            "AZ",
            "Republic of Azerbaijan",
            "Az\u0259rbaycan Respublikas\u0131"
        ],
        "region": "Asia",
        "subregion": "Western Asia",
        "languages": {
            "aze": "Azerbaijani"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0630\u0631\u0628\u064A\u062C\u0627\u0646",
                "common": "\u0623\u0630\u0631\u0628\u064A\u062C\u0627\u0646"
            },
            "bre": {
                "official": "Republik Azerbaidjan",
                "common": "Azerbaidjan"
            },
            "ces": {
                "official": "\xc1zerb\xe1jd\u017E\xe1nsk\xe1 republika",
                "common": "\xc1zerb\xe1jd\u017E\xe1n"
            },
            "cym": {
                "official": "Gweriniaeth Aserbaijan",
                "common": "Aserbaijan"
            },
            "deu": {
                "official": "Republik Aserbaidschan",
                "common": "Aserbaidschan"
            },
            "est": {
                "official": "Aserbaid\u017Eaani Vabariik",
                "common": "Aserbaid\u017Eaan"
            },
            "fin": {
                "official": "Azerbaidzanin tasavalta",
                "common": "Azerbaidzan"
            },
            "fra": {
                "official": "R\xe9publique d'Azerba\xefdjan",
                "common": "Azerba\xefdjan"
            },
            "hrv": {
                "official": "Republika Azerbajd\u017Ean",
                "common": "Azerbajd\u017Ean"
            },
            "hun": {
                "official": "Azerbajdzs\xe1n",
                "common": "Azerbajdzs\xe1n"
            },
            "ita": {
                "official": "Repubblica dell'Azerbaigian",
                "common": "Azerbaijan"
            },
            "jpn": {
                "official": "\u30A2\u30BC\u30EB\u30D0\u30A4\u30B8\u30E3\u30F3\u5171\u548C\u56FD",
                "common": "\u30A2\u30BC\u30EB\u30D0\u30A4\u30B8\u30E3\u30F3"
            },
            "kor": {
                "official": "\uC544\uC81C\uB974\uBC14\uC774\uC794 \uACF5\uD654\uAD6D",
                "common": "\uC544\uC81C\uB974\uBC14\uC774\uC794"
            },
            "nld": {
                "official": "Republiek Azerbeidzjan",
                "common": "Azerbeidzjan"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0622\u0630\u0631\u0628\u0627\u06CC\u062C\u0627\u0646",
                "common": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0622\u0630\u0631\u0628\u0627\u06CC\u062C\u0627\u0646"
            },
            "pol": {
                "official": "Republika Azerbejd\u017Canu",
                "common": "Azerbejd\u017Can"
            },
            "por": {
                "official": "Rep\xfablica do Azerbaij\xe3o",
                "common": "Azerbeij\xe3o"
            },
            "rus": {
                "official": "\u0410\u0437\u0435\u0440\u0431\u0430\u0439\u0434\u0436\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0410\u0437\u0435\u0440\u0431\u0430\u0439\u0434\u0436\u0430\u043D"
            },
            "slk": {
                "official": "Azerbaj\u01C6ansk\xe1 republika",
                "common": "Azerbaj\u01C7an"
            },
            "spa": {
                "official": "Rep\xfablica de Azerbaiy\xe1n",
                "common": "Azerbaiy\xe1n"
            },
            "srp": {
                "official": "\u0410\u0437\u0435\u0440\u0431\u0435\u0458\u045F\u0430\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0410\u0437\u0435\u0440\u0431\u0435\u0458\u045F\u0430\u043D"
            },
            "swe": {
                "official": "Republiken Azerbajdzjan",
                "common": "Azerbajdzjan"
            },
            "tur": {
                "official": "Azerbaycan Cumhuriyeti",
                "common": "Azerbaycan"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0622\u0630\u0631\u0628\u0627\u0626\u06CC\u062C\u0627\u0646",
                "common": "\u0622\u0630\u0631\u0628\u0627\u0626\u06CC\u062C\u0627\u0646"
            },
            "zho": {
                "official": "\u963F\u585E\u62DC\u7586\u5171\u548C\u56FD",
                "common": "\u963F\u585E\u62DC\u7586"
            }
        },
        "latlng": [
            40.5,
            47.5
        ],
        "landlocked": true,
        "borders": [
            "ARM",
            "GEO",
            "IRN",
            "RUS",
            "TUR"
        ],
        "area": 86600,
        "demonyms": {
            "eng": {
                "f": "Azerbaijani",
                "m": "Azerbaijani"
            },
            "fra": {
                "f": "Azerba\xefdjanaise",
                "m": "Azerba\xefdjanais"
            }
        },
        "flag": "\uD83C\uDDE6\uD83C\uDDFF",
        "maps": {
            "googleMaps": "https://goo.gl/maps/az3Zz7ar2aoB9AUc6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/364110"
        },
        "population": 10110116,
        "gini": {
            "2005": 26.6
        },
        "fifa": "AZE",
        "car": {
            "signs": [
                "AZ"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+04:00"
        ],
        "continents": [
            "Europe",
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/az.png",
            "svg": "https://flagcdn.com/az.svg",
            "alt": "The flag of Azerbaijan features three equal horizontal bands of blue, red and green, with a white fly-side facing crescent and eight-pointed star centered in the red band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/az.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/az.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                40.38,
                49.87
            ]
        },
        "postalCode": {
            "format": "AZ ####",
            "regex": "^(?:AZ)*(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "United Kingdom",
            "official": "United Kingdom of Great Britain and Northern Ireland",
            "nativeName": {
                "eng": {
                    "official": "United Kingdom of Great Britain and Northern Ireland",
                    "common": "United Kingdom"
                }
            }
        },
        "tld": [
            ".uk"
        ],
        "cca2": "GB",
        "ccn3": "826",
        "cca3": "GBR",
        "cioc": "GBR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "GBP": {
                "name": "British pound",
                "symbol": "\xa3"
            }
        },
        "idd": {
            "root": "+4",
            "suffixes": [
                "4"
            ]
        },
        "capital": [
            "London"
        ],
        "altSpellings": [
            "GB",
            "UK",
            "Great Britain"
        ],
        "region": "Europe",
        "subregion": "Northern Europe",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629 \u0644\u0628\u0631\u064A\u0637\u0627\u0646\u064A\u0627 \u0627\u0644\u0639\u0638\u0645\u0649 \u0648\u0627\u064A\u0631\u0644\u0646\u062F\u0627 \u0627\u0644\u0634\u0645\u0627\u0644\u064A\u0629",
                "common": "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629"
            },
            "bre": {
                "official": "Rouantelezh-Unanet Breizh-Veur ha Norzhiwerzhon",
                "common": "Rouantelezh-Unanet"
            },
            "ces": {
                "official": "Spojen\xe9 kr\xe1lovstv\xed Velk\xe9 Brit\xe1nie a Severn\xedho Irska",
                "common": "Spojen\xe9 kr\xe1lovstv\xed"
            },
            "cym": {
                "official": "United Kingdom of Great Britain and Northern Ireland",
                "common": "United Kingdom"
            },
            "deu": {
                "official": "Vereinigtes K\xf6nigreich Gro\xdfbritannien und Nordirland",
                "common": "Vereinigtes K\xf6nigreich"
            },
            "est": {
                "official": "Suurbritannia ja P\xf5hja-Iiri \xdchendkuningriik",
                "common": "Suurbritannia"
            },
            "fin": {
                "official": "Ison-Britannian ja Pohjois-Irlannin yhdistynyt kuningaskunta",
                "common": "Yhdistynyt kuningaskunta"
            },
            "fra": {
                "official": "Royaume-Uni de Grande-Bretagne et d'Irlande du Nord",
                "common": "Royaume-Uni"
            },
            "hrv": {
                "official": "Ujedinjeno Kraljevstvo Velike Britanije i Sjeverne Irske",
                "common": "Ujedinjeno Kraljevstvo"
            },
            "hun": {
                "official": "Nagy-Britannia \xe9s \xc9szak-\xcdrorsz\xe1g Egyes\xfclt Kir\xe1lys\xe1ga",
                "common": "Egyes\xfclt Kir\xe1lys\xe1g"
            },
            "ita": {
                "official": "Regno Unito di Gran Bretagna e Irlanda del Nord",
                "common": "Regno Unito"
            },
            "jpn": {
                "official": "\u30B0\u30EC\u30FC\u30C8\xb7\u30D6\u30EA\u30C6\u30F3\u304A\u3088\u3073\u5317\u30A2\u30A4\u30EB\u30E9\u30F3\u30C9\u9023\u5408\u738B\u56FD",
                "common": "\u30A4\u30AE\u30EA\u30B9"
            },
            "kor": {
                "official": "\uADF8\uB808\uC774\uD2B8\uBE0C\uB9AC\uD2BC \uBD81\uC544\uC77C\uB79C\uB4DC \uC5F0\uD569 \uC655\uAD6D",
                "common": "\uC601\uAD6D"
            },
            "nld": {
                "official": "Verenigd Koninkrijk van Groot-Brittanni\xeb en Noord-Ierland",
                "common": "Verenigd Koninkrijk"
            },
            "per": {
                "official": "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0645\u062A\u062D\u062F \u0628\u0631\u06CC\u062A\u0627\u0646\u06CC\u0627\u06CC \u06A9\u0628\u06CC\u0631 \u0648 \u0627\u06CC\u0631\u0644\u0646\u062F \u0634\u0645\u0627\u0644\u06CC",
                "common": "\u0627\u0646\u06AF\u0644\u06CC\u0633"
            },
            "pol": {
                "official": "Zjednoczone Kr\xf3lestwo Wielkiej Brytanii i Irlandii P\xf3\u0142nocnej",
                "common": "Zjednoczone Kr\xf3lestwo"
            },
            "por": {
                "official": "Reino Unido da Gr\xe3-Bretanha e Irlanda do Norte",
                "common": "Reino Unido"
            },
            "rus": {
                "official": "\u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u043D\u043E\u0435 \u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0412\u0435\u043B\u0438\u043A\u043E\u0431\u0440\u0438\u0442\u0430\u043D\u0438\u0438 \u0438 \u0421\u0435\u0432\u0435\u0440\u043D\u043E\u0439 \u0418\u0440\u043B\u0430\u043D\u0434\u0438\u0438",
                "common": "\u0412\u0435\u043B\u0438\u043A\u043E\u0431\u0440\u0438\u0442\u0430\u043D\u0438\u044F"
            },
            "slk": {
                "official": "Spojen\xe9 kr\xe1\u013Eovstvo Ve\u013Ekej Brit\xe1nie a Severn\xe9ho\xccrska",
                "common": "Ve\u013Ek\xe1 Brit\xe1nia (Spojen\xe9 kr\xe1\u013Eovstvo)"
            },
            "spa": {
                "official": "Reino Unido de Gran Breta\xf1a e Irlanda del Norte",
                "common": "Reino Unido"
            },
            "srp": {
                "official": "\u0423\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u043E \u041A\u0440\u0430\u0459\u0435\u0432\u0441\u0442\u0432\u043E \u0412\u0435\u043B\u0438\u043A\u0435 \u0411\u0440\u0438\u0442\u0430\u043D\u0438\u0458\u0435 \u0438 \u0421\u0435\u0432\u0435\u0440\u043D\u0435 \u0418\u0440\u0441\u043A\u0435",
                "common": "\u0423\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u043E \u041A\u0440\u0430\u0459\u0435\u0432\u0441\u0442\u0432\u043E"
            },
            "swe": {
                "official": "F\xf6renade konungariket Storbritannien och Nordirland",
                "common": "Storbritannien"
            },
            "tur": {
                "official": "B\xfcy\xfck Britanya ve Kuzey \u0130rlanda Birle\u015Fik Krall\u0131\u011F\u0131",
                "common": "Birle\u015Fik Krall\u0131k"
            },
            "urd": {
                "official": "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0645\u062A\u062D\u062F\u06C1 \u0628\u0631\u0637\u0627\u0646\u06CC\u06C1 \u0639\u0638\u0645\u06CC \u0648 \u0634\u0645\u0627\u0644\u06CC \u0622\u0626\u0631\u0644\u06CC\u0646\u0688",
                "common": "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0645\u062A\u062D\u062F\u06C1"
            },
            "zho": {
                "official": "\u5927\u4E0D\u5217\u98A0\u53CA\u5317\u7231\u5C14\u5170\u8054\u5408\u738B\u56FD",
                "common": "\u82F1\u56FD"
            }
        },
        "latlng": [
            54,
            -2
        ],
        "landlocked": false,
        "borders": [
            "IRL"
        ],
        "area": 242900,
        "demonyms": {
            "eng": {
                "f": "British",
                "m": "British"
            },
            "fra": {
                "f": "Britannique",
                "m": "Britannique"
            }
        },
        "flag": "\uD83C\uDDEC\uD83C\uDDE7",
        "maps": {
            "googleMaps": "https://goo.gl/maps/FoDtc3UKMkFsXAjHA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/62149"
        },
        "population": 67215293,
        "gini": {
            "2017": 35.1
        },
        "car": {
            "signs": [
                "GB"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-08:00",
            "UTC-05:00",
            "UTC-04:00",
            "UTC-03:00",
            "UTC-02:00",
            "UTC",
            "UTC+01:00",
            "UTC+02:00",
            "UTC+06:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/gb.png",
            "svg": "https://flagcdn.com/gb.svg",
            "alt": "The flag of the United Kingdom \u2014 the Union Jack \u2014 has a blue field. It features the white-edged red cross of Saint George superimposed on the diagonal red cross of Saint Patrick which is superimposed on the diagonal white cross of Saint Andrew."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/gb.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/gb.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                51.5,
                -0.08
            ]
        },
        "postalCode": {
            "format": "@# #@@|@## #@@|@@# #@@|@@## #@@|@#@ #@@|@@#@ #@@|GIR0AA",
            "regex": "^(([A-Z]\\d{2}[A-Z]{2})|([A-Z]\\d{3}[A-Z]{2})|([A-Z]{2}\\d{2}[A-Z]{2})|([A-Z]{2}\\d{3}[A-Z]{2})|([A-Z]\\d[A-Z]\\d[A-Z]{2})|([A-Z]{2}\\d[A-Z]\\d[A-Z]{2})|(GIR0AA))$"
        }
    },
    {
        "name": {
            "common": "Central African Republic",
            "official": "Central African Republic",
            "nativeName": {
                "fra": {
                    "official": "R\xe9publique centrafricaine",
                    "common": "R\xe9publique centrafricaine"
                },
                "sag": {
                    "official": "K\xf6d\xf6r\xf6s\xease t\xee B\xeaafr\xeeka",
                    "common": "B\xeaafr\xeeka"
                }
            }
        },
        "tld": [
            ".cf"
        ],
        "cca2": "CF",
        "ccn3": "140",
        "cca3": "CAF",
        "cioc": "CAF",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "XAF": {
                "name": "Central African CFA franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "36"
            ]
        },
        "capital": [
            "Bangui"
        ],
        "altSpellings": [
            "CF",
            "Central African Republic",
            "R\xe9publique centrafricaine"
        ],
        "region": "Africa",
        "subregion": "Middle Africa",
        "languages": {
            "fra": "French",
            "sag": "Sango"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0641\u0631\u064A\u0642\u064A\u0627 \u0627\u0644\u0648\u0633\u0637\u0649",
                "common": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0641\u0631\u064A\u0642\u064A\u0627 \u0627\u0644\u0648\u0633\u0637\u0649"
            },
            "bre": {
                "official": "Republik Kreizafrikan",
                "common": "Republik Kreizafrikan"
            },
            "ces": {
                "official": "St\u0159edoafrick\xe1 republika",
                "common": "St\u0159edoafrick\xe1 republika"
            },
            "cym": {
                "official": "Gweriniaeth Canolbarth Affrica",
                "common": "Gweriniaeth Canolbarth Affrica"
            },
            "deu": {
                "official": "Zentralafrikanische Republik",
                "common": "Zentralafrikanische Republik"
            },
            "est": {
                "official": "Kesk-Aafrika Vabariik",
                "common": "Kesk-Aafrika Vabariik"
            },
            "fin": {
                "official": "Keski-Afrikan tasavalta",
                "common": "Keski-Afrikan tasavalta"
            },
            "fra": {
                "official": "R\xe9publique centrafricaine",
                "common": "R\xe9publique centrafricaine"
            },
            "hrv": {
                "official": "Centralna Afri\u010Dka Republika",
                "common": "Srednjoafri\u010Dka Republika"
            },
            "hun": {
                "official": "K\xf6z\xe9p-afrikai K\xf6zt\xe1rsas\xe1g",
                "common": "K\xf6z\xe9p-afrikai K\xf6zt\xe1rsas\xe1g"
            },
            "ita": {
                "official": "Repubblica Centrafricana",
                "common": "Repubblica Centrafricana"
            },
            "jpn": {
                "official": "\u4E2D\u592E\u30A2\u30D5\u30EA\u30AB\u5171\u548C\u56FD",
                "common": "\u4E2D\u592E\u30A2\u30D5\u30EA\u30AB\u5171\u548C\u56FD"
            },
            "kor": {
                "official": "\uC911\uC559\uC544\uD504\uB9AC\uCE74 \uACF5\uD654\uAD6D",
                "common": "\uC911\uC559\uC544\uD504\uB9AC\uCE74 \uACF5\uD654\uAD6D"
            },
            "nld": {
                "official": "Centraal-Afrikaanse Republiek",
                "common": "Centraal-Afrikaanse Republiek"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0622\u0641\u0631\u06CC\u0642\u0627\u06CC \u0645\u0631\u06A9\u0632\u06CC",
                "common": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0622\u0641\u0631\u06CC\u0642\u0627\u06CC \u0645\u0631\u06A9\u0632\u06CC"
            },
            "pol": {
                "official": "Republika \u015Arodkowoafryka\u0144ska",
                "common": "Republika \u015Arodkowoafryka\u0144ska"
            },
            "por": {
                "official": "Rep\xfablica Centro-Africano",
                "common": "Rep\xfablica Centro-Africana"
            },
            "rus": {
                "official": "\u0426\u0435\u043D\u0442\u0440\u0430\u043B\u044C\u043D\u043E-\u0410\u0444\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0426\u0435\u043D\u0442\u0440\u0430\u043B\u044C\u043D\u043E\u0430\u0444\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430"
            },
            "slk": {
                "official": "Stredoafrick\xe1 republika",
                "common": "Stredoafrick\xe1 republika"
            },
            "spa": {
                "official": "Rep\xfablica Centroafricana",
                "common": "Rep\xfablica Centroafricana"
            },
            "srp": {
                "official": "\u0426\u0435\u043D\u0442\u0440\u0430\u043B\u043D\u043E\u0430\u0444\u0440\u0438\u0447\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0426\u0435\u043D\u0442\u0440\u0430\u043B\u043D\u043E\u0430\u0444\u0440\u0438\u0447\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430"
            },
            "swe": {
                "official": "Centralafrikanska republiken",
                "common": "Centralafrikanska republiken"
            },
            "tur": {
                "official": "Orta Afrika Cumhuriyeti",
                "common": "Orta Afrika Cumhuriyeti"
            },
            "urd": {
                "official": "\u0648\u0633\u0637\u06CC \u0627\u0641\u0631\u06CC\u0642\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1",
                "common": "\u0648\u0633\u0637\u06CC \u0627\u0641\u0631\u06CC\u0642\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1"
            },
            "zho": {
                "official": "\u4E2D\u975E\u5171\u548C\u56FD",
                "common": "\u4E2D\u975E\u5171\u548C\u56FD"
            }
        },
        "latlng": [
            7,
            21
        ],
        "landlocked": true,
        "borders": [
            "CMR",
            "TCD",
            "COD",
            "COG",
            "SSD",
            "SDN"
        ],
        "area": 622984,
        "demonyms": {
            "eng": {
                "f": "Central African",
                "m": "Central African"
            },
            "fra": {
                "f": "Centrafricaine",
                "m": "Centrafricain"
            }
        },
        "flag": "\uD83C\uDDE8\uD83C\uDDEB",
        "maps": {
            "googleMaps": "https://goo.gl/maps/51V8dsi2rGYC9n3c9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192790"
        },
        "population": 4829764,
        "gini": {
            "2008": 56.2
        },
        "fifa": "CTA",
        "car": {
            "signs": [
                "RCA"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/cf.png",
            "svg": "https://flagcdn.com/cf.svg",
            "alt": "The flag of Central African Republic is composed of four equal horizontal bands of blue, white, green and yellow intersected at the center by a vertical red band of equal size as the horizontal bands. A yellow five-pointed star is situated on the hoist side of the blue band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/cf.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/cf.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                4.37,
                18.58
            ]
        }
    },
    {
        "name": {
            "common": "Palestine",
            "official": "State of Palestine",
            "nativeName": {
                "ara": {
                    "official": "\u062F\u0648\u0644\u0629 \u0641\u0644\u0633\u0637\u064A\u0646",
                    "common": "\u0641\u0644\u0633\u0637\u064A\u0646"
                }
            }
        },
        "tld": [
            ".ps",
            "\u0641\u0644\u0633\u0637\u064A\u0646."
        ],
        "cca2": "PS",
        "ccn3": "275",
        "cca3": "PSE",
        "cioc": "PLE",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "EGP": {
                "name": "Egyptian pound",
                "symbol": "E\xa3"
            },
            "ILS": {
                "name": "Israeli new shekel",
                "symbol": "\u20AA"
            },
            "JOD": {
                "name": "Jordanian dinar",
                "symbol": "JD"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "70"
            ]
        },
        "capital": [
            "Ramallah",
            "Jerusalem"
        ],
        "altSpellings": [
            "PS",
            "Palestine, State of",
            "State of Palestine",
            "Dawlat Filas\u1E6Din"
        ],
        "region": "Asia",
        "subregion": "Western Asia",
        "languages": {
            "ara": "Arabic"
        },
        "translations": {
            "ara": {
                "official": "\u062F\u0648\u0644\u0629 \u0641\u0644\u0633\u0637\u064A\u0646",
                "common": "\u0641\u0644\u0633\u0637\u064A\u0646"
            },
            "bre": {
                "official": "Stad Palestina",
                "common": "Palestina"
            },
            "ces": {
                "official": "St\xe1t Palestina",
                "common": "Palestina"
            },
            "cym": {
                "official": "State of Palestine",
                "common": "Palestine"
            },
            "deu": {
                "official": "Staat Pal\xe4stina",
                "common": "Pal\xe4stina"
            },
            "est": {
                "official": "Palestiina Riik",
                "common": "Palestiina"
            },
            "fin": {
                "official": "Palestiinan valtio",
                "common": "Palestiina"
            },
            "fra": {
                "official": "\xc9tat de Palestine",
                "common": "Palestine"
            },
            "hrv": {
                "official": "State of Palestine",
                "common": "Palestina"
            },
            "hun": {
                "official": "Palesztin Auton\xf3mia",
                "common": "Palesztina"
            },
            "ita": {
                "official": "Stato di Palestina",
                "common": "Palestina"
            },
            "jpn": {
                "official": "\u30D1\u30EC\u30B9\u30C1\u30CA\u81EA\u6CBB\u653F\u5E9C",
                "common": "\u30D1\u30EC\u30B9\u30C1\u30CA"
            },
            "kor": {
                "official": "\uD314\uB808\uC2A4\uD0C0\uC778\uAD6D",
                "common": "\uD314\uB808\uC2A4\uD0C0\uC778"
            },
            "nld": {
                "official": "Staat Palestina",
                "common": "Palestijnse gebieden"
            },
            "per": {
                "official": "\u062F\u0648\u0644\u062A \u0641\u0644\u0633\u0637\u06CC\u0646",
                "common": "\u0641\u0644\u0633\u0637\u06CC\u0646"
            },
            "pol": {
                "official": "Pa\u0144stwo Palestyna",
                "common": "Palestyna"
            },
            "por": {
                "official": "Estado da Palestina",
                "common": "Palestina"
            },
            "rus": {
                "official": "\u0413\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u041F\u0430\u043B\u0435\u0441\u0442\u0438\u043D\u0430",
                "common": "\u041F\u0430\u043B\u0435\u0441\u0442\u0438\u043D\u0430"
            },
            "slk": {
                "official": "Palest\xednsky \u0161t\xe1t",
                "common": "Palest\xedna"
            },
            "spa": {
                "official": "Estado de Palestina",
                "common": "Palestina"
            },
            "srp": {
                "official": "\u0414\u0440\u0436\u0430\u0432\u0430 \u041F\u0430\u043B\u0435\u0441\u0442\u0438\u043D\u0430",
                "common": "\u041F\u0430\u043B\u0435\u0441\u0442\u0438\u043D\u0430"
            },
            "swe": {
                "official": "Palestina",
                "common": "Palestina"
            },
            "tur": {
                "official": "Filistin Devleti",
                "common": "Filistin"
            },
            "urd": {
                "official": "\u0631\u06CC\u0627\u0633\u062A\u0650 \u0641\u0644\u0633\u0637\u06CC\u0646",
                "common": "\u0641\u0644\u0633\u0637\u06CC\u0646"
            },
            "zho": {
                "official": "\u5DF4\u52D2\u65AF\u5766\u56FD",
                "common": "\u5DF4\u52D2\u65AF\u5766"
            }
        },
        "latlng": [
            31.9,
            35.2
        ],
        "landlocked": false,
        "borders": [
            "ISR",
            "EGY",
            "JOR"
        ],
        "area": 6220,
        "demonyms": {
            "eng": {
                "f": "Palestinian",
                "m": "Palestinian"
            },
            "fra": {
                "f": "Palestinienne",
                "m": "Palestinien"
            }
        },
        "flag": "\uD83C\uDDF5\uD83C\uDDF8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/QvTbkRdmdWEoYAmt5",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1703814"
        },
        "population": 4803269,
        "gini": {
            "2016": 33.7
        },
        "fifa": "PLE",
        "car": {
            "signs": [
                "PS"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ps.png",
            "svg": "https://flagcdn.com/ps.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ps.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ps.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                31.9,
                35.2
            ]
        }
    },
    {
        "name": {
            "common": "Caribbean Netherlands",
            "official": "Bonaire, Sint Eustatius and Saba",
            "nativeName": {
                "nld": {
                    "official": "Bonaire, Sint Eustatius en Saba",
                    "common": "Caribisch Nederland"
                },
                "pap": {
                    "official": "Boneiru, Sint Eustatius y Saba",
                    "common": "Boneiru, Sint Eustatius y Saba"
                }
            }
        },
        "tld": [
            ".bq",
            ".nl"
        ],
        "cca2": "BQ",
        "ccn3": "535",
        "cca3": "BES",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "99"
            ]
        },
        "capital": [
            "Kralendijk"
        ],
        "altSpellings": [
            "BES islands"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English",
            "nld": "Dutch",
            "pap": "Papiamento"
        },
        "translations": {
            "ara": {
                "official": "\u0628\u0648\u0646\u064A\u0631 \u0648\u0633\u064A\u0646\u062A \u0623\u0648\u0633\u062A\u0627\u062A\u064A\u0648\u0633 \u0648\u0633\u0627\u0628\u0627",
                "common": "\u0627\u0644\u062C\u0632\u0631 \u0627\u0644\u0643\u0627\u0631\u064A\u0628\u064A\u0629 \u0627\u0644\u0647\u0648\u0644\u0646\u062F\u064A\u0629"
            },
            "bre": {
                "official": "Bonaire, Sint Eustatius ha Saba",
                "common": "Bonaire, Sint Eustatius ha Saba"
            },
            "ces": {
                "official": "Karibsk\xe9 Nizozemsko",
                "common": "Karibsk\xe9 Nizozemsko"
            },
            "cym": {
                "official": "Bonaire, Sint Eustatius and Saba",
                "common": "Caribbean Netherlands"
            },
            "deu": {
                "official": "Bonaire, Sint Eustatius und Saba",
                "common": "Karibische Niederlande"
            },
            "est": {
                "official": "Bonaire, Sint Eustatius ja Saba",
                "common": "Bonaire, Sint Eustatius ja Saba"
            },
            "fin": {
                "official": "Bonaire, Sint Eustatius ja Saba",
                "common": "Bonaire, Sint Eustatius ja Saba"
            },
            "fra": {
                "official": "Bonaire, Saint-Eustache et Saba",
                "common": "Pays-Bas carib\xe9ens"
            },
            "hrv": {
                "official": "Bonaire, Sint Eustatius i Saba",
                "common": "Bonaire, Sint Eustatius i Saba"
            },
            "hun": {
                "official": "Bonaire",
                "common": "Bonaire"
            },
            "ita": {
                "official": "Bonaire, Sint Eustatius e Saba",
                "common": "Paesi Bassi caraibici"
            },
            "jpn": {
                "official": "\u30DC\u30CD\u30FC\u30EB\u3001\u30B7\u30F3\u30C8\u30FB\u30E6\u30FC\u30B9\u30BF\u30C6\u30A3\u30A6\u30B9\u304A\u3088\u3073\u30B5\u30D0",
                "common": "\u30DC\u30CD\u30FC\u30EB\u3001\u30B7\u30F3\u30C8\u30FB\u30E6\u30FC\u30B9\u30BF\u30C6\u30A3\u30A6\u30B9\u304A\u3088\u3073\u30B5\u30D0"
            },
            "kor": {
                "official": "\uBCF4\uB124\uB974, \uC2E0\uD2B8\uC678\uC2A4\uD0C0\uD2F0\uC704\uC2A4, \uC0AC\uBC14",
                "common": "\uCE74\uB9AC\uBE0C \uB124\uB35C\uB780\uB4DC"
            },
            "nld": {
                "official": "Bonaire, Sint Eustatius en Saba",
                "common": "Caribisch Nederland"
            },
            "per": {
                "official": "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u0627\u0631\u0627\u0626\u06CC\u0628 \u0647\u0644\u0646\u062F",
                "common": "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u0627\u0631\u0627\u0626\u06CC\u0628 \u0647\u0644\u0646\u062F"
            },
            "pol": {
                "official": "Bonaire, Sint Eustatius i Saba",
                "common": "Antyle Holenderskie"
            },
            "por": {
                "official": "Bonaire, Saba e Santo Eust\xe1quio",
                "common": "Pa\xedses Baixos Caribenhos"
            },
            "rus": {
                "official": "\u0411\u043E\u043D\u044D\u0439\u0440, \u0421\u0438\u043D\u0442-\u042D\u0441\u0442\u0430\u0442\u0438\u0443\u0441 \u0438 \u0421\u0430\u0431\u0430",
                "common": "\u041A\u0430\u0440\u0438\u0431\u0441\u043A\u0438\u0435 \u041D\u0438\u0434\u0435\u0440\u043B\u0430\u043D\u0434\u044B"
            },
            "slk": {
                "official": "Bonaire, Sint Eustatius a Saba",
                "common": "Bonaire, Sint Eustatius a Saba"
            },
            "spa": {
                "official": "Bonaire, San Eustaquio y Saba",
                "common": "Caribe Neerland\xe9s"
            },
            "srp": {
                "official": "\u0411\u043E\u043D\u0435\u0440, \u0421\u0432\u0435\u0442\u0438 \u0415\u0443\u0441\u0442\u0430\u0445\u0438\u0458\u0435 \u0438 \u0421\u0430\u0431\u0430",
                "common": "\u041A\u0430\u0440\u0438\u043F\u0441\u043A\u0430 \u0425\u043E\u043B\u0430\u043D\u0434\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Bonaire, Sint Eustatius and Saba",
                "common": "Karibiska Nederl\xe4nderna"
            },
            "tur": {
                "official": "Karayip Hollandas\u0131",
                "common": "Karayip Hollandas\u0131"
            },
            "urd": {
                "official": "\u0628\u0648\u0646\u0627\u06CC\u0631\u060C \u0633\u06CC\u0646\u0679 \u0627\u06CC\u0648\u0633\u0679\u0627\u0626\u06CC\u0633 \u0627\u0648\u0631 \u0633\u0627\u0628\u0627",
                "common": "\u06A9\u06CC\u0631\u06CC\u0628\u06CC\u0646 \u0646\u06CC\u062F\u0631\u0644\u06CC\u0646\u0688\u0632"
            },
            "zho": {
                "official": "\u8377\u862D\u52A0\u52D2\u6BD4\u5340",
                "common": "\u8377\u862D\u52A0\u52D2\u6BD4\u5340"
            }
        },
        "latlng": [
            12.18,
            -68.25
        ],
        "landlocked": false,
        "area": 328,
        "demonyms": {
            "eng": {
                "f": "Dutch",
                "m": "Dutch"
            },
            "fra": {
                "f": "N\xe9erlandaise",
                "m": "N\xe9erlandais"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDF6",
        "maps": {
            "googleMaps": "https://goo.gl/maps/4XVes1P6uEDTz77WA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1216720"
        },
        "population": 25987,
        "car": {
            "signs": [
                ""
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/bq.png",
            "svg": "https://flagcdn.com/bq.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/bq.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/bq.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                12.14,
                -68.27
            ]
        }
    },
    {
        "name": {
            "common": "Taiwan",
            "official": "Republic of China (Taiwan)",
            "nativeName": {
                "zho": {
                    "official": "\u4E2D\u83EF\u6C11\u570B",
                    "common": "\u53F0\u7063"
                }
            }
        },
        "tld": [
            ".tw",
            ".\u53F0\u7063",
            ".\u53F0\u6E7E"
        ],
        "cca2": "TW",
        "ccn3": "158",
        "cca3": "TWN",
        "cioc": "TPE",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "TWD": {
                "name": "New Taiwan dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+8",
            "suffixes": [
                "86"
            ]
        },
        "capital": [
            "Taipei"
        ],
        "altSpellings": [
            "TW",
            "T\xe1iw\u0101n",
            "Republic of China",
            "\u4E2D\u83EF\u6C11\u570B",
            "Zh\u014Dnghu\xe1 M\xedngu\xf3",
            "Chinese Taipei"
        ],
        "region": "Asia",
        "subregion": "Eastern Asia",
        "languages": {
            "zho": "Chinese"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0635\u064A\u0646 (\u062A\u0627\u064A\u0648\u0627\u0646)",
                "common": "\u062A\u0627\u064A\u0648\u0627\u0646"
            },
            "bre": {
                "official": "Republik Sina (Taiwan)",
                "common": "Taiwan"
            },
            "ces": {
                "official": "\u010C\xednsk\xe1 republika",
                "common": "Tchaj-wan"
            },
            "cym": {
                "official": "Republic of China (Taiwan)",
                "common": "Taiwan"
            },
            "deu": {
                "official": "Republik China (Taiwan)",
                "common": "Taiwan"
            },
            "est": {
                "official": "Taiwani",
                "common": "Taiwan"
            },
            "fin": {
                "official": "Kiinan tasavalta",
                "common": "Taiwan"
            },
            "fra": {
                "official": "R\xe9publique de Chine (Ta\xefwan)",
                "common": "Ta\xefwan"
            },
            "hrv": {
                "official": "Republika Kina",
                "common": "Tajvan"
            },
            "hun": {
                "official": "K\xednai K\xf6zt\xe1rsas\xe1g",
                "common": "Tajvan"
            },
            "ita": {
                "official": "Repubblica cinese (Taiwan)",
                "common": "Taiwan"
            },
            "jpn": {
                "official": "\u4E2D\u83EF\u6C11\u56FD",
                "common": "\u53F0\u6E7E"
            },
            "kor": {
                "official": "\uC911\uD654\uBBFC\uAD6D",
                "common": "\uB300\uB9CC"
            },
            "nld": {
                "official": "Republiek China (Taiwan)",
                "common": "Taiwan"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0686\u06CC\u0646",
                "common": "\u062A\u0627\u06CC\u0648\u0627\u0646"
            },
            "pol": {
                "official": "Republika Chi\u0144ska (Tajwan)",
                "common": "Tajwan"
            },
            "por": {
                "official": "Rep\xfablica da China",
                "common": "Ilha Formosa"
            },
            "rus": {
                "official": "\u041A\u0438\u0442\u0430\u0439\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0422\u0430\u0439\u0432\u0430\u043D\u044C"
            },
            "slk": {
                "official": "\u010C\xednska republika",
                "common": "Taiwan"
            },
            "spa": {
                "official": "Rep\xfablica de China en Taiw\xe1n",
                "common": "Taiw\xe1n"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0438\u043D\u0430",
                "common": "\u0422\u0430\u0458\u0432\u0430\u043D"
            },
            "swe": {
                "official": "Republiken Kina",
                "common": "Taiwan"
            },
            "tur": {
                "official": "\xc7in Cumhuriyeti (Tayvan)",
                "common": "Tayvan"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0686\u06CC\u0646 (\u062A\u0627\u0626\u06CC\u0648\u0627\u0646)",
                "common": "\u062A\u0627\u0626\u06CC\u0648\u0627\u0646"
            }
        },
        "latlng": [
            23.5,
            121
        ],
        "landlocked": false,
        "area": 36193,
        "demonyms": {
            "eng": {
                "f": "Taiwanese",
                "m": "Taiwanese"
            },
            "fra": {
                "f": "Ta\xefwanaise",
                "m": "Ta\xefwanais"
            }
        },
        "flag": "\uD83C\uDDF9\uD83C\uDDFC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/HgMKFQjNadF3Wa6B6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/449220"
        },
        "population": 23503349,
        "fifa": "TPE",
        "car": {
            "signs": [
                "RC"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+08:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/tw.png",
            "svg": "https://flagcdn.com/tw.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/tw.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/tw.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                25.03,
                121.52
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Pitcairn Islands",
            "official": "Pitcairn Group of Islands",
            "nativeName": {
                "eng": {
                    "official": "Pitcairn Group of Islands",
                    "common": "Pitcairn Islands"
                }
            }
        },
        "tld": [
            ".pn"
        ],
        "cca2": "PN",
        "ccn3": "612",
        "cca3": "PCN",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "NZD": {
                "name": "New Zealand dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "4"
            ]
        },
        "capital": [
            "Adamstown"
        ],
        "altSpellings": [
            "PN",
            "Pitcairn",
            "Pitcairn Henderson Ducie and Oeno Islands"
        ],
        "region": "Oceania",
        "subregion": "Polynesia",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0632\u0631 \u0628\u064A\u062A\u0643\u064A\u0631\u0646",
                "common": "\u062C\u0632\u0631 \u0628\u064A\u062A\u0643\u064A\u0631\u0646"
            },
            "bre": {
                "official": "Inizi Pitcairn, Henderson, Ducie hag Oeno",
                "common": "Inizi Pitcairn"
            },
            "ces": {
                "official": "Pitcairnovy ostrovy",
                "common": "Pitcairnovy ostrovy"
            },
            "cym": {
                "official": "Pitcairn Group of Islands",
                "common": "Pitcairn Islands"
            },
            "deu": {
                "official": "Pitcairninseln",
                "common": "Pitcairninseln"
            },
            "est": {
                "official": "Pitcairni, Hendersoni, Ducie ja Oeno saar",
                "common": "Pitcairn"
            },
            "fin": {
                "official": "Pitcairn",
                "common": "Pitcairn"
            },
            "fra": {
                "official": "Groupe d'\xeeles Pitcairn",
                "common": "\xceles Pitcairn"
            },
            "hrv": {
                "official": "Pitcairn skupine otoka",
                "common": "Pitcairnovo oto\u010Dje"
            },
            "hun": {
                "official": "Pitcairn-szigetek",
                "common": "Pitcairn-szigetek"
            },
            "ita": {
                "official": "Pitcairn gruppo di isole",
                "common": "Isole Pitcairn"
            },
            "jpn": {
                "official": "\u5CF6\u306E\u30D4\u30C8\u30B1\u30A2\u30F3\u30B0\u30EB\u30FC\u30D7",
                "common": "\u30D4\u30C8\u30B1\u30A2\u30F3"
            },
            "kor": {
                "official": "\uD54F\uCF00\uC5B8 \uC81C\uB3C4",
                "common": "\uD54F\uCF00\uC5B8 \uC81C\uB3C4"
            },
            "nld": {
                "official": "Pitcairn groep eilanden",
                "common": "Pitcairneilanden"
            },
            "per": {
                "official": "\u062C\u0632\u0627\u06CC\u0631 \u067E\u06CC\u062A\u200C\u06A9\u0631\u0646",
                "common": "\u062C\u0632\u0627\u06CC\u0631 \u067E\u06CC\u062A\u200C\u06A9\u0631\u0646"
            },
            "pol": {
                "official": "Wyspy Pitcairn, Henderson, Ducie i Oeno",
                "common": "Pitcairn"
            },
            "por": {
                "official": "Pitcairn grupo de ilhas",
                "common": "Ilhas Pitcairn"
            },
            "rus": {
                "official": "\u041F\u0438\u0442\u043A\u044D\u0440\u043D \u0433\u0440\u0443\u043F\u043F\u0430 \u043E\u0441\u0442\u0440\u043E\u0432\u043E\u0432",
                "common": "\u041E\u0441\u0442\u0440\u043E\u0432\u0430 \u041F\u0438\u0442\u043A\u044D\u0440\u043D"
            },
            "slk": {
                "official": "Pitcairnove ostrovy",
                "common": "Pitcairnove ostrovy"
            },
            "spa": {
                "official": "Grupo de Islas Pitcairn",
                "common": "Islas Pitcairn"
            },
            "srp": {
                "official": "\u041E\u0441\u0442\u0440\u0432\u0430 \u041F\u0438\u0442\u043A\u0435\u0440\u043D, \u0425\u0435\u043D\u0434\u0435\u0440\u0441\u043E\u043D, \u0414\u0443\u0446\u0438 \u0438 \u041E\u0438\u043D",
                "common": "\u041E\u0441\u0442\u0440\u0432\u0430 \u041F\u0438\u0442\u043A\u0435\u0440\u043D"
            },
            "swe": {
                "official": "Pitcairn\xf6arna",
                "common": "Pitcairn\xf6arna"
            },
            "tur": {
                "official": "Pitcairn, Henderson, Ducie ve Oeno Adalar\u0131",
                "common": "Pitcairn Adalar\u0131"
            },
            "urd": {
                "official": "\u067E\u0679\u06A9\u06CC\u0631\u0646 \u062C\u0632\u0627\u0626\u0631",
                "common": "\u062C\u0632\u0627\u0626\u0631 \u067E\u0679\u06A9\u06CC\u0631\u0646"
            },
            "zho": {
                "official": "\u76AE\u7279\u51EF\u6069\u7FA4\u5C9B",
                "common": "\u76AE\u7279\u51EF\u6069\u7FA4\u5C9B"
            }
        },
        "latlng": [
            -25.06666666,
            -130.1
        ],
        "landlocked": false,
        "area": 47,
        "demonyms": {
            "eng": {
                "f": "Pitcairn Islander",
                "m": "Pitcairn Islander"
            },
            "fra": {
                "f": "Pitcairnaise",
                "m": "Pitcairnais"
            }
        },
        "flag": "\uD83C\uDDF5\uD83C\uDDF3",
        "maps": {
            "googleMaps": "https://goo.gl/maps/XGJMnMAigXjXcxSa7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2185375"
        },
        "population": 56,
        "car": {
            "signs": [
                "GB"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-08:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/pn.png",
            "svg": "https://flagcdn.com/pn.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -25.07,
                -130.08
            ]
        }
    },
    {
        "name": {
            "common": "San Marino",
            "official": "Republic of San Marino",
            "nativeName": {
                "ita": {
                    "official": "Repubblica di San Marino",
                    "common": "San Marino"
                }
            }
        },
        "tld": [
            ".sm"
        ],
        "cca2": "SM",
        "ccn3": "674",
        "cca3": "SMR",
        "cioc": "SMR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "78"
            ]
        },
        "capital": [
            "City of San Marino"
        ],
        "altSpellings": [
            "SM",
            "Republic of San Marino",
            "Repubblica di San Marino"
        ],
        "region": "Europe",
        "subregion": "Southern Europe",
        "languages": {
            "ita": "Italian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u0627\u0646 \u0645\u0627\u0631\u064A\u0646\u0648",
                "common": "\u0633\u0627\u0646 \u0645\u0627\u0631\u064A\u0646\u0648"
            },
            "bre": {
                "official": "Republik San Marino",
                "common": "San Marino"
            },
            "ces": {
                "official": "Republika San Marino",
                "common": "San Marino"
            },
            "cym": {
                "official": "Republic of San Marino",
                "common": "San Marino"
            },
            "deu": {
                "official": "Republik San Marino",
                "common": "San Marino"
            },
            "est": {
                "official": "San Marino Vabariik",
                "common": "San Marino"
            },
            "fin": {
                "official": "San Marinon seesteinen tasavalta",
                "common": "San Marino"
            },
            "fra": {
                "official": "R\xe9publique de Saint-Marin",
                "common": "Saint-Marin"
            },
            "hrv": {
                "official": "Ve\u0107ina Serene Republika San Marino",
                "common": "San Marino"
            },
            "hun": {
                "official": "San Marino K\xf6zt\xe1rsas\xe1g",
                "common": "San Marino"
            },
            "ita": {
                "official": "Serenissima Repubblica di San Marino",
                "common": "San Marino"
            },
            "jpn": {
                "official": "\u30B5\u30F3\u30DE\u30EA\u30CE\u306E\u307B\u3068\u3093\u3069\u30BB\u30EA\u30FC\u30CC\u5171\u548C\u56FD",
                "common": "\u30B5\u30F3\u30DE\u30EA\u30CE"
            },
            "kor": {
                "official": "\uC0B0\uB9C8\uB9AC\uB178 \uACF5\uD654\uAD6D",
                "common": "\uC0B0\uB9C8\uB9AC\uB178"
            },
            "nld": {
                "official": "Meest Serene Republiek San Marino",
                "common": "San Marino"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u0627\u0646 \u0645\u0627\u0631\u06CC\u0646\u0648",
                "common": "\u0633\u0627\u0646 \u0645\u0627\u0631\u06CC\u0646\u0648"
            },
            "pol": {
                "official": "Republika San Marino",
                "common": "San Marino"
            },
            "por": {
                "official": "Seren\xedssima Rep\xfablica de San Marino",
                "common": "San Marino"
            },
            "rus": {
                "official": "\u0411\u043E\u043B\u044C\u0448\u0438\u043D\u0441\u0442\u0432\u043E Serene \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0430\u043D-\u041C\u0430\u0440\u0438\u043D\u043E",
                "common": "\u0421\u0430\u043D-\u041C\u0430\u0440\u0438\u043D\u043E"
            },
            "slk": {
                "official": "Sanmar\xednska republika",
                "common": "San Mar\xedno"
            },
            "spa": {
                "official": "Seren\xedsima Rep\xfablica de San Marino",
                "common": "San Marino"
            },
            "srp": {
                "official": "\u041D\u0430\u0458\u0443\u0437\u0432\u0438\u0448\u0435\u043D\u0438\u0458\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0430\u043D \u041C\u0430\u0440\u0438\u043D\u043E",
                "common": "\u0421\u0430\u043D \u041C\u0430\u0440\u0438\u043D\u043E"
            },
            "swe": {
                "official": "Republiken San Marino",
                "common": "San Marino"
            },
            "tur": {
                "official": "San Marino Cumhuriyeti",
                "common": "San Marino"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0627\u0646 \u0645\u0627\u0631\u06CC\u0646\u0648",
                "common": "\u0633\u0627\u0646 \u0645\u0627\u0631\u06CC\u0646\u0648"
            },
            "zho": {
                "official": "\u5723\u9A6C\u529B\u8BFA\u5171\u548C\u56FD",
                "common": "\u5723\u9A6C\u529B\u8BFA"
            }
        },
        "latlng": [
            43.76666666,
            12.41666666
        ],
        "landlocked": true,
        "borders": [
            "ITA"
        ],
        "area": 61,
        "demonyms": {
            "eng": {
                "f": "Sammarinese",
                "m": "Sammarinese"
            },
            "fra": {
                "f": "Saint-Marinaise",
                "m": "Saint-Marinais"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDF2",
        "maps": {
            "googleMaps": "https://goo.gl/maps/rxCVJjm8dVY93RPY8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/54624"
        },
        "population": 33938,
        "fifa": "SMR",
        "car": {
            "signs": [
                "RSM"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/sm.png",
            "svg": "https://flagcdn.com/sm.svg",
            "alt": "The flag of San Marino is composed of two equal horizontal bands of white and light blue, with the national coat of arms superimposed in the center."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/sm.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/sm.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                43.94,
                12.45
            ]
        },
        "postalCode": {
            "format": "4789#",
            "regex": "^(4789\\d)$"
        }
    },
    {
        "name": {
            "common": "Svalbard and Jan Mayen",
            "official": "Svalbard og Jan Mayen",
            "nativeName": {
                "nor": {
                    "official": "Svalbard og Jan Mayen",
                    "common": "Svalbard og Jan Mayen"
                }
            }
        },
        "tld": [
            ".sj"
        ],
        "cca2": "SJ",
        "ccn3": "744",
        "cca3": "SJM",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "NOK": {
                "name": "krone",
                "symbol": "kr"
            }
        },
        "idd": {
            "root": "+4",
            "suffixes": [
                "779"
            ]
        },
        "capital": [
            "Longyearbyen"
        ],
        "altSpellings": [
            "SJ",
            "Svalbard and Jan Mayen Islands"
        ],
        "region": "Europe",
        "subregion": "Northern Europe",
        "languages": {
            "nor": "Norwegian"
        },
        "translations": {
            "ara": {
                "official": "\u0633\u0641\u0627\u0644\u0628\u0627\u0631\u062F \u0648\u064A\u0627\u0646 \u0645\u0627\u064A\u0646",
                "common": "\u0633\u0641\u0627\u0644\u0628\u0627\u0631\u062F \u0648\u064A\u0627\u0646 \u0645\u0627\u064A\u0646"
            },
            "bre": {
                "official": "Svalbard ha Jan Mayen",
                "common": "Svalbard ha Jan Mayen"
            },
            "ces": {
                "official": "\u0160picberky a Jan Mayen",
                "common": "\u0160picberky a Jan Mayen"
            },
            "cym": {
                "official": "Svalbard og Jan Mayen",
                "common": "Svalbard and Jan Mayen"
            },
            "deu": {
                "official": "Spitzbergen und Jan Mayen",
                "common": "Spitzbergen und Jan Mayen"
            },
            "est": {
                "official": "Svalbard",
                "common": "Svalbard"
            },
            "fin": {
                "official": "Huippuvuoret",
                "common": "Huippuvuoret"
            },
            "fra": {
                "official": "Jan Mayen Svalbard",
                "common": "Svalbard et Jan Mayen"
            },
            "hrv": {
                "official": "Svalbard og Jan Mayen",
                "common": "Svalbard i Jan Mayen"
            },
            "hun": {
                "official": "Svalbard \xe9s Jan Mayen",
                "common": "Svalbard \xe9s Jan Mayen"
            },
            "ita": {
                "official": "Svalbard og Jan Mayen",
                "common": "Svalbard e Jan Mayen"
            },
            "jpn": {
                "official": "\u30B9\u30D0\u30FC\u30EB\u30D0\u30EB\u8AF8\u5CF6OG\u30E4\u30F3\u30DE\u30A4\u30A8\u30F3",
                "common": "\u30B9\u30F4\u30A1\u30FC\u30EB\u30D0\u30EB\u8AF8\u5CF6\u304A\u3088\u3073\u30E4\u30F3\u30DE\u30A4\u30A8\u30F3\u5CF6"
            },
            "kor": {
                "official": "\uC2A4\uBC1C\uBC14\uB974 \uC580\uB9C8\uC60C \uC81C\uB3C4",
                "common": "\uC2A4\uBC1C\uBC14\uB974 \uC580\uB9C8\uC60C \uC81C\uB3C4"
            },
            "nld": {
                "official": "Svalbard og Jan Mayen",
                "common": "Svalbard en Jan Mayen"
            },
            "per": {
                "official": "\u0633\u0648\u0627\u0644\u0628\u0627\u0631\u062F \u0648 \u06CC\u0627\u0646 \u0645\u0627\u06CC\u0646",
                "common": "\u0633\u0648\u0627\u0644\u0628\u0627\u0631\u062F \u0648 \u06CC\u0627\u0646 \u0645\u0627\u06CC\u0646"
            },
            "pol": {
                "official": "Svalbard i Jan Mayen",
                "common": "Svalbard i Jan Mayen"
            },
            "por": {
                "official": "Svalbard og Jan Mayen",
                "common": "Ilhas Svalbard e Jan Mayen"
            },
            "rus": {
                "official": "\u0421\u0432\u0430\u043B\u044C\u0431\u0430\u0440\u0434\u0430 \u043E\u0433 \u042F\u043D-\u041C\u0430\u0439\u0435\u043D",
                "common": "\u0428\u043F\u0438\u0446\u0431\u0435\u0440\u0433\u0435\u043D \u0438 \u042F\u043D-\u041C\u0430\u0439\u0435\u043D"
            },
            "slk": {
                "official": "Svalbard a Jan Mayen",
                "common": "Svalbard a Jan Mayen"
            },
            "spa": {
                "official": "Svalbard og Jan Mayen",
                "common": "Islas Svalbard y Jan Mayen"
            },
            "srp": {
                "official": "\u0421\u0432\u0430\u043B\u0431\u0430\u0440\u0434 \u0438 \u0408\u0430\u043D \u041C\u0430\u0458\u0435\u043D",
                "common": "\u0421\u0432\u0430\u043B\u0431\u0430\u0440\u0434 \u0438 \u0408\u0430\u043D \u041C\u0430\u0458\u0435\u043D"
            },
            "swe": {
                "official": "Svalbard och Jan Mayen",
                "common": "Svalbard och Jan Mayen"
            },
            "tur": {
                "official": "Svalbard ve Jan Mayen",
                "common": "Svalbard ve Jan Mayen"
            },
            "urd": {
                "official": "\u0633\u0648\u0627\u0644\u0628\u0627\u0631\u0688 \u0627\u0648\u0631 \u062C\u0627\u0646 \u0645\u06CC\u0626\u0646",
                "common": "\u0633\u0648\u0627\u0644\u0628\u0627\u0631\u0688 \u0627\u0648\u0631 \u062C\u0627\u0646 \u0645\u06CC\u0626\u0646"
            },
            "zho": {
                "official": "\u65AF\u74E6\u5C14\u5DF4\u7279",
                "common": "\u65AF\u74E6\u5C14\u5DF4\u7279"
            }
        },
        "latlng": [
            78,
            20
        ],
        "landlocked": false,
        "area": 61399,
        "demonyms": {
            "eng": {
                "f": "Norwegian",
                "m": "Norwegian"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDEF",
        "maps": {
            "googleMaps": "https://goo.gl/maps/L2wyyn3cQ16PzQ5J8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1337397"
        },
        "population": 2562,
        "car": {
            "signs": [
                "N"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/sj.png",
            "svg": "https://flagcdn.com/sj.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                78.22,
                15.63
            ]
        }
    },
    {
        "name": {
            "common": "Djibouti",
            "official": "Republic of Djibouti",
            "nativeName": {
                "ara": {
                    "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062C\u064A\u0628\u0648\u062A\u064A",
                    "common": "\u062C\u064A\u0628\u0648\u062A\u064A\u200E"
                },
                "fra": {
                    "official": "R\xe9publique de Djibouti",
                    "common": "Djibouti"
                }
            }
        },
        "tld": [
            ".dj"
        ],
        "cca2": "DJ",
        "ccn3": "262",
        "cca3": "DJI",
        "cioc": "DJI",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "DJF": {
                "name": "Djiboutian franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "53"
            ]
        },
        "capital": [
            "Djibouti"
        ],
        "altSpellings": [
            "DJ",
            "Jabuuti",
            "Gabuuti",
            "Republic of Djibouti",
            "R\xe9publique de Djibouti",
            "Gabuutih Ummuuno",
            "Jamhuuriyadda Jabuuti"
        ],
        "region": "Africa",
        "subregion": "Eastern Africa",
        "languages": {
            "ara": "Arabic",
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062C\u064A\u0628\u0648\u062A\u064A",
                "common": "\u062C\u064A\u0628\u0648\u062A\u064A"
            },
            "bre": {
                "official": "Republik Djibouti",
                "common": "Djibouti"
            },
            "ces": {
                "official": "D\u017Eibutsk\xe1 republika",
                "common": "D\u017Eibutsko"
            },
            "cym": {
                "official": "Gweriniaeth Jibwti",
                "common": "Jibwti"
            },
            "deu": {
                "official": "Republik Dschibuti",
                "common": "Dschibuti"
            },
            "est": {
                "official": "Djibouti Vabariik",
                "common": "Djibouti"
            },
            "fin": {
                "official": "Dijiboutin tasavalta",
                "common": "Dijibouti"
            },
            "fra": {
                "official": "R\xe9publique de Djibouti",
                "common": "Djibouti"
            },
            "hrv": {
                "official": "Republika D\u017Eibuti",
                "common": "D\u017Eibuti"
            },
            "hun": {
                "official": "Dzsibuti K\xf6zt\xe1rsas\xe1g",
                "common": "Dzsibuti"
            },
            "ita": {
                "official": "Repubblica di Gibuti",
                "common": "Gibuti"
            },
            "jpn": {
                "official": "\u30B8\u30D6\u30C1\u5171\u548C\u56FD",
                "common": "\u30B8\u30D6\u30C1"
            },
            "kor": {
                "official": "\uC9C0\uBD80\uD2F0 \uACF5\uD654\uAD6D",
                "common": "\uC9C0\uBD80\uD2F0"
            },
            "nld": {
                "official": "Republiek Djibouti",
                "common": "Djibouti"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062C\u06CC\u0628\u0648\u062A\u06CC",
                "common": "\u062C\u06CC\u0628\u0648\u062A\u06CC"
            },
            "pol": {
                "official": "Republika D\u017Cibuti",
                "common": "D\u017Cibuti"
            },
            "por": {
                "official": "Rep\xfablica do Djibouti",
                "common": "Djibouti"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0414\u0436\u0438\u0431\u0443\u0442\u0438",
                "common": "\u0414\u0436\u0438\u0431\u0443\u0442\u0438"
            },
            "slk": {
                "official": "\u01C5ibutsk\xe1 republika",
                "common": "\u01C5ibutsko"
            },
            "spa": {
                "official": "Rep\xfablica de Djibouti",
                "common": "Djibouti"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u040F\u0438\u0431\u0443\u0442\u0438",
                "common": "\u040F\u0438\u0431\u0443\u0442\u0438"
            },
            "swe": {
                "official": "Republiken Djibouti",
                "common": "Djibouti"
            },
            "tur": {
                "official": "Cibuti Cumhuriyeti",
                "common": "Cibuti"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062C\u0628\u0648\u062A\u06CC",
                "common": "\u062C\u0628\u0648\u062A\u06CC"
            },
            "zho": {
                "official": "\u5409\u5E03\u63D0\u5171\u548C\u56FD",
                "common": "\u5409\u5E03\u63D0"
            }
        },
        "latlng": [
            11.5,
            43
        ],
        "landlocked": false,
        "borders": [
            "ERI",
            "ETH",
            "SOM"
        ],
        "area": 23200,
        "demonyms": {
            "eng": {
                "f": "Djibouti",
                "m": "Djibouti"
            },
            "fra": {
                "f": "Djiboutienne",
                "m": "Djiboutien"
            }
        },
        "flag": "\uD83C\uDDE9\uD83C\uDDEF",
        "maps": {
            "googleMaps": "https://goo.gl/maps/V1HWfzN3bS1kwf4C6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192801"
        },
        "population": 988002,
        "gini": {
            "2017": 41.6
        },
        "fifa": "DJI",
        "car": {
            "signs": [
                "DJI"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/dj.png",
            "svg": "https://flagcdn.com/dj.svg",
            "alt": "The flag of Djibouti is composed of two equal horizontal bands of light blue and light green, with a white isosceles triangle superimposed on the hoist side of the field. The triangle has its base on the hoist end, spans about two-fifth the width of the field and bears a red five-pointed star at its center."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/dj.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/dj.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                11.58,
                43.15
            ]
        }
    },
    {
        "name": {
            "common": "Wallis and Futuna",
            "official": "Territory of the Wallis and Futuna Islands",
            "nativeName": {
                "fra": {
                    "official": "Territoire des \xeeles Wallis et Futuna",
                    "common": "Wallis et Futuna"
                }
            }
        },
        "tld": [
            ".wf"
        ],
        "cca2": "WF",
        "ccn3": "876",
        "cca3": "WLF",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "XPF": {
                "name": "CFP franc",
                "symbol": "\u20A3"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "81"
            ]
        },
        "capital": [
            "Mata-Utu"
        ],
        "altSpellings": [
            "WF",
            "Territory of the Wallis and Futuna Islands",
            "Territoire des \xeeles Wallis et Futuna"
        ],
        "region": "Oceania",
        "subregion": "Polynesia",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u0625\u0642\u0644\u064A\u0645 \u062C\u0632\u0631 \u0648\u0627\u0644\u064A\u0633 \u0648\u0641\u0648\u062A\u0648\u0646\u0627",
                "common": "\u0648\u0627\u0644\u064A\u0633 \u0648\u0641\u0648\u062A\u0648\u0646\u0627"
            },
            "bre": {
                "official": "Tiriad Inizi Wallis ha Futuna",
                "common": "Wallis ha Futuna"
            },
            "ces": {
                "official": "Teritorium ostrov\u016F Wallis a Futuna",
                "common": "Wallis a Futuna"
            },
            "cym": {
                "official": "Territory of the Wallis and Futuna Islands",
                "common": "Wallis and Futuna"
            },
            "deu": {
                "official": "Gebiet der Wallis und Futuna",
                "common": "Wallis und Futuna"
            },
            "est": {
                "official": "Wallise ja Futuna ala",
                "common": "Wallis ja Futuna"
            },
            "fin": {
                "official": "Wallisin ja Futunan yhteis\xf6",
                "common": "Wallis ja Futuna"
            },
            "fra": {
                "official": "Territoire des \xeeles Wallis et Futuna",
                "common": "Wallis-et-Futuna"
            },
            "hrv": {
                "official": "Teritoriju Wallis i Futuna",
                "common": "Wallis i Fortuna"
            },
            "hun": {
                "official": "Wallis \xe9s Futuna",
                "common": "Wallis \xe9s Futuna"
            },
            "ita": {
                "official": "Territorio delle Isole Wallis e Futuna",
                "common": "Wallis e Futuna"
            },
            "jpn": {
                "official": "\u30A6\u30A9\u30EA\u30B9\xb7\u30D5\u30C4\u30CA\u8AF8\u5CF6\u306E\u9818\u571F",
                "common": "\u30A6\u30A9\u30EA\u30B9\u30FB\u30D5\u30C4\u30CA"
            },
            "kor": {
                "official": "\uC648\uB9AC\uC2A4 \uD4CC\uD280\uB098",
                "common": "\uC648\uB9AC\uC2A4 \uD4CC\uD280\uB098"
            },
            "nld": {
                "official": "Grondgebied van de Wallis en Futuna",
                "common": "Wallis en Futuna"
            },
            "per": {
                "official": "\u062C\u0632\u0627\u06CC\u0631 \u0648\u0627\u0644\u06CC\u0633 \u0648 \u0641\u0648\u062A\u0648\u0646\u0627",
                "common": "\u0648\u0627\u0644\u06CC\u0633 \u0648 \u0641\u0648\u062A\u0648\u0646\u0627"
            },
            "pol": {
                "official": "Terytorium Wysp Wallis i Futuna",
                "common": "Wallis i Futuna"
            },
            "por": {
                "official": "Territ\xf3rio das Ilhas Wallis e Futuna",
                "common": "Wallis e Futuna"
            },
            "rus": {
                "official": "\u0422\u0435\u0440\u0440\u0438\u0442\u043E\u0440\u0438\u044F \u0423\u043E\u043B\u043B\u0438\u0441 \u0438 \u0424\u0443\u0442\u0443\u043D\u0430 \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                "common": "\u0423\u043E\u043B\u043B\u0438\u0441 \u0438 \u0424\u0443\u0442\u0443\u043D\u0430"
            },
            "slk": {
                "official": "Terit\xf3rium ostrovov Wallis a Futuna",
                "common": "Wallis a Futuna"
            },
            "spa": {
                "official": "Territorio de las Islas Wallis y Futuna",
                "common": "Wallis y Futuna"
            },
            "srp": {
                "official": "\u0422\u0435\u0440\u0438\u0442\u043E\u0440\u0438\u0458\u0430 \u0434\u0440\u0436\u0430\u0432\u0435 \u0412\u0430\u043B\u0438\u0441 \u0438 \u0424\u0443\u0442\u0443\u043D\u0430",
                "common": "\u0412\u0430\u043B\u0438\u0441 \u0438 \u0424\u0443\u0442\u0443\u043D\u0430"
            },
            "swe": {
                "official": "Territoriet Wallis- och Futuna\xf6arna",
                "common": "Wallis- och Futuna\xf6arna"
            },
            "tur": {
                "official": "Wallis ve Futuna Adalar\u0131 B\xf6lgesi",
                "common": "Wallis ve Futuna Adalar\u0131 B\xf6lgesi"
            },
            "urd": {
                "official": "\u0633\u0631 \u0632\u0645\u06CC\u0646\u0650 \u0648\u0627\u0644\u0633 \u0648 \u0641\u062A\u0648\u0646\u06C1 \u062C\u0632\u0627\u0626\u0631",
                "common": "\u0648\u0627\u0644\u0633 \u0648 \u0641\u062A\u0648\u0646\u06C1"
            },
            "zho": {
                "official": "\u74E6\u5229\u65AF\u548C\u5BCC\u56FE\u7EB3\u7FA4\u5C9B",
                "common": "\u74E6\u5229\u65AF\u548C\u5BCC\u56FE\u7EB3\u7FA4\u5C9B"
            }
        },
        "latlng": [
            -13.3,
            -176.2
        ],
        "landlocked": false,
        "area": 142,
        "demonyms": {
            "eng": {
                "f": "Wallis and Futuna Islander",
                "m": "Wallis and Futuna Islander"
            }
        },
        "flag": "\uD83C\uDDFC\uD83C\uDDEB",
        "maps": {
            "googleMaps": "https://goo.gl/maps/CzVqK74QYtbHv65r5",
            "openStreetMaps": "https://www.openstreetmap.org/relation/3412448"
        },
        "population": 11750,
        "car": {
            "signs": [
                "F"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+12:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/wf.png",
            "svg": "https://flagcdn.com/wf.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -13.95,
                -171.93
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(986\\d{2})$"
        }
    },
    {
        "name": {
            "common": "Denmark",
            "official": "Kingdom of Denmark",
            "nativeName": {
                "dan": {
                    "official": "Kongeriget Danmark",
                    "common": "Danmark"
                }
            }
        },
        "tld": [
            ".dk"
        ],
        "cca2": "DK",
        "ccn3": "208",
        "cca3": "DNK",
        "cioc": "DEN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "DKK": {
                "name": "Danish krone",
                "symbol": "kr"
            }
        },
        "idd": {
            "root": "+4",
            "suffixes": [
                "5"
            ]
        },
        "capital": [
            "Copenhagen"
        ],
        "altSpellings": [
            "DK",
            "Danmark",
            "Kingdom of Denmark",
            "Kongeriget Danmark"
        ],
        "region": "Europe",
        "subregion": "Northern Europe",
        "languages": {
            "dan": "Danish"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u062F\u0646\u0645\u0627\u0631\u0643",
                "common": "\u0627\u0644\u062F\u0646\u0645\u0627\u0631\u0643"
            },
            "bre": {
                "official": "Rouantelezh Danmark",
                "common": "Danmark"
            },
            "ces": {
                "official": "D\xe1nsk\xe9 kr\xe1lovstv\xed",
                "common": "D\xe1nsko"
            },
            "cym": {
                "official": "Teyrnas Denmarc",
                "common": "Denmarc"
            },
            "deu": {
                "official": "K\xf6nigreich D\xe4nemark",
                "common": "D\xe4nemark"
            },
            "est": {
                "official": "Taani Kuningriik",
                "common": "Taani"
            },
            "fin": {
                "official": "Tanskan kuningaskunta",
                "common": "Tanska"
            },
            "fra": {
                "official": "Royaume du Danemark",
                "common": "Danemark"
            },
            "hrv": {
                "official": "Kraljevina Danska",
                "common": "Danska"
            },
            "hun": {
                "official": "D\xe1n Kir\xe1lys\xe1g",
                "common": "D\xe1nia"
            },
            "ita": {
                "official": "Regno di Danimarca",
                "common": "Danimarca"
            },
            "jpn": {
                "official": "\u30C7\u30F3\u30DE\u30FC\u30AF\u738B\u56FD",
                "common": "\u30C7\u30F3\u30DE\u30FC\u30AF"
            },
            "kor": {
                "official": "\uB374\uB9C8\uD06C \uC655\uAD6D",
                "common": "\uB374\uB9C8\uD06C"
            },
            "nld": {
                "official": "Koninkrijk Denemarken",
                "common": "Denemarken"
            },
            "per": {
                "official": "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u062F\u0627\u0646\u0645\u0627\u0631\u06A9",
                "common": "\u062F\u0627\u0646\u0645\u0627\u0631\u06A9"
            },
            "pol": {
                "official": "Kr\xf3lestwo Danii",
                "common": "Dania"
            },
            "por": {
                "official": "Reino da Dinamarca",
                "common": "Dinamarca"
            },
            "rus": {
                "official": "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0414\u0430\u043D\u0438\u044F",
                "common": "\u0414\u0430\u043D\u0438\u044F"
            },
            "slk": {
                "official": "D\xe1nske kr\xe1\u013Eovstvo",
                "common": "D\xe1nsko"
            },
            "spa": {
                "official": "Reino de Dinamarca",
                "common": "Dinamarca"
            },
            "srp": {
                "official": "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0414\u0430\u043D\u0441\u043A\u0430",
                "common": "\u0414\u0430\u043D\u0441\u043A\u0430"
            },
            "swe": {
                "official": "Konungariket Danmark",
                "common": "Danmark"
            },
            "tur": {
                "official": "Danimarka Krall\u0131\u011F\u0131",
                "common": "Danimarka"
            },
            "urd": {
                "official": "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0688\u0646\u0645\u0627\u0631\u06A9",
                "common": "\u0688\u0646\u0645\u0627\u0631\u06A9"
            },
            "zho": {
                "official": "\u4E39\u9EA6\u738B\u56FD",
                "common": "\u4E39\u9EA6"
            }
        },
        "latlng": [
            56,
            10
        ],
        "landlocked": false,
        "borders": [
            "DEU"
        ],
        "area": 43094,
        "demonyms": {
            "eng": {
                "f": "Danish",
                "m": "Danish"
            },
            "fra": {
                "f": "Danoise",
                "m": "Danois"
            }
        },
        "flag": "\uD83C\uDDE9\uD83C\uDDF0",
        "maps": {
            "googleMaps": "https://goo.gl/maps/UddGPN7hAyrtpFiT6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/50046"
        },
        "population": 5831404,
        "gini": {
            "2018": 28.2
        },
        "fifa": "DEN",
        "car": {
            "signs": [
                "DK"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-04:00",
            "UTC-03:00",
            "UTC-01:00",
            "UTC",
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/dk.png",
            "svg": "https://flagcdn.com/dk.svg",
            "alt": "The flag of Denmark has a red field with a large white cross that extend to the edges of the field. The vertical part of this cross is offset towards the hoist side."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/dk.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/dk.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                55.67,
                12.58
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Papua New Guinea",
            "official": "Independent State of Papua New Guinea",
            "nativeName": {
                "eng": {
                    "official": "Independent State of Papua New Guinea",
                    "common": "Papua New Guinea"
                },
                "hmo": {
                    "official": "Independen Stet bilong Papua Niugini",
                    "common": "Papua Niu Gini"
                },
                "tpi": {
                    "official": "Independen Stet bilong Papua Niugini",
                    "common": "Papua Niugini"
                }
            }
        },
        "tld": [
            ".pg"
        ],
        "cca2": "PG",
        "ccn3": "598",
        "cca3": "PNG",
        "cioc": "PNG",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "PGK": {
                "name": "Papua New Guinean kina",
                "symbol": "K"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "75"
            ]
        },
        "capital": [
            "Port Moresby"
        ],
        "altSpellings": [
            "PG",
            "Independent State of Papua New Guinea",
            "Independen Stet bilong Papua Niugini"
        ],
        "region": "Oceania",
        "subregion": "Melanesia",
        "languages": {
            "eng": "English",
            "hmo": "Hiri Motu",
            "tpi": "Tok Pisin"
        },
        "translations": {
            "ara": {
                "official": "\u062F\u0648\u0644\u0629 \u0628\u0627\u0628\u0648\u0627 \u063A\u064A\u0646\u064A\u0627 \u0627\u0644\u062C\u062F\u064A\u062F\u0629",
                "common": "\u0628\u0627\u0628\u0648\u0627 \u063A\u064A\u0646\u064A\u0627 \u0627\u0644\u062C\u062F\u064A\u062F\u0629"
            },
            "bre": {
                "official": "Stad dizalc'h Papoua-Ginea Nevez",
                "common": "Papoua-Ginea Nevez"
            },
            "ces": {
                "official": "Nez\xe1visl\xfd st\xe1t Papua Nov\xe1 Guinea",
                "common": "Papua-Nov\xe1 Guinea"
            },
            "cym": {
                "official": "Independent State of Papua New Guinea",
                "common": "Papua New Guinea"
            },
            "deu": {
                "official": "Unabh\xe4ngiger Staat Papua-Neuguinea",
                "common": "Papua-Neuguinea"
            },
            "est": {
                "official": "Paapua Uus-Guinea Iseseisvusriik",
                "common": "Paapua Uus-Guinea"
            },
            "fin": {
                "official": "Papua-Uuden-Guinean Itsen\xe4inen valtio",
                "common": "Papua-Uusi-Guinea"
            },
            "fra": {
                "official": "\xc9tat ind\xe9pendant de Papouasie-Nouvelle-Guin\xe9e",
                "common": "Papouasie-Nouvelle-Guin\xe9e"
            },
            "hrv": {
                "official": "Nezavisna Dr\u017Eava Papui Novoj Gvineji",
                "common": "Papua Nova Gvineja"
            },
            "hun": {
                "official": "P\xe1pua \xdaj-Guinea F\xfcggetlen \xc1llam",
                "common": "P\xe1pua \xdaj-Guinea"
            },
            "ita": {
                "official": "Stato indipendente di Papua Nuova Guinea",
                "common": "Papua Nuova Guinea"
            },
            "jpn": {
                "official": "\u30D1\u30D7\u30A2\u30CB\u30E5\u30FC\u30AE\u30CB\u30A2\u72EC\u7ACB\u56FD",
                "common": "\u30D1\u30D7\u30A2\u30CB\u30E5\u30FC\u30AE\u30CB\u30A2"
            },
            "kor": {
                "official": "\uD30C\uD478\uC544\uB274\uAE30\uB2C8 \uB3C5\uB9BD\uAD6D",
                "common": "\uD30C\uD478\uC544\uB274\uAE30\uB2C8"
            },
            "nld": {
                "official": "Onafhankelijke Staat Papoea -Nieuw-Guinea",
                "common": "Papoea-Nieuw-Guinea"
            },
            "per": {
                "official": "\u0645\u0645\u0644\u06A9\u062A \u0645\u0633\u062A\u0642\u0644 \u067E\u0627\u067E\u0648\u0622 \u06AF\u06CC\u0646\u0647\u0654 \u0646\u0648",
                "common": "\u067E\u0627\u067E\u0648\u0622 \u06AF\u06CC\u0646\u0647 \u0646\u0648"
            },
            "pol": {
                "official": "Niezale\u017Cne Pa\u0144stwo Papui-Nowej Gwinei",
                "common": "Papua-Nowa Gwinea"
            },
            "por": {
                "official": "Estado Independente da Papua Nova Guin\xe9",
                "common": "Papua Nova Guin\xe9"
            },
            "rus": {
                "official": "\u041D\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043C\u043E\u0435 \u0413\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u041F\u0430\u043F\u0443\u0430-\u041D\u043E\u0432\u043E\u0439 \u0413\u0432\u0438\u043D\u0435\u0438",
                "common": "\u041F\u0430\u043F\u0443\u0430 \u2014 \u041D\u043E\u0432\u0430\u044F \u0413\u0432\u0438\u043D\u0435\u044F"
            },
            "slk": {
                "official": "Nez\xe1visl\xfd \u0161t\xe1t Papua-Nov\xe1 Guinea",
                "common": "Papua-Nov\xe1 Guinea"
            },
            "spa": {
                "official": "Estado Independiente de Pap\xfaa Nueva Guinea",
                "common": "Pap\xfaa Nueva Guinea"
            },
            "srp": {
                "official": "\u041D\u0435\u0437\u0430\u0432\u0438\u0441\u043D\u0430 \u0414\u0440\u0436\u0430\u0432\u0430 \u041F\u0430\u043F\u0443\u0430 \u041D\u043E\u0432\u0430 \u0413\u0432\u0438\u043D\u0435\u0458\u0430",
                "common": "\u041F\u0430\u043F\u0443\u0430 \u041D\u043E\u0432\u0430 \u0413\u0432\u0438\u043D\u0435\u0458\u0430"
            },
            "swe": {
                "official": "Den oberoende staten Papua Nya Guinea",
                "common": "Papua Nya Guinea"
            },
            "tur": {
                "official": "Papua Yeni Gine Ba\u011F\u0131ms\u0131z Devleti",
                "common": "Papua Yeni Gine"
            },
            "urd": {
                "official": "\u0622\u0632\u0627\u062F \u0631\u06CC\u0627\u0633\u062A\u0650 \u067E\u0627\u067E\u0648\u0627 \u0646\u06CC\u0648 \u06AF\u0646\u06CC",
                "common": "\u067E\u0627\u067E\u0648\u0627 \u0646\u06CC\u0648 \u06AF\u0646\u06CC"
            },
            "zho": {
                "official": "\u5DF4\u5E03\u4E9A\u65B0\u51E0\u5185\u4E9A",
                "common": "\u5DF4\u5E03\u4E9A\u65B0\u51E0\u5185\u4E9A"
            }
        },
        "latlng": [
            -6,
            147
        ],
        "landlocked": false,
        "borders": [
            "IDN"
        ],
        "area": 462840,
        "demonyms": {
            "eng": {
                "f": "Papua New Guinean",
                "m": "Papua New Guinean"
            },
            "fra": {
                "f": "Papouasienne",
                "m": "Papouasien"
            }
        },
        "flag": "\uD83C\uDDF5\uD83C\uDDEC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/ChGmzZBjZ3vnBwR2A",
            "openStreetMaps": "https://goo.gl/maps/ChGmzZBjZ3vnBwR2A"
        },
        "population": 8947027,
        "gini": {
            "2009": 41.9
        },
        "fifa": "PNG",
        "car": {
            "signs": [
                "PNG"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+10:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/pg.png",
            "svg": "https://flagcdn.com/pg.svg",
            "alt": "The flag of Papua New Guinea is divided diagonally, from the upper hoist-side corner to the lower fly-side corner, into a lower black and an upper red triangle. On the hoist side of the lower black triangle is a representation of the Southern Cross constellation made up of one small and four larger five-pointed white stars. A golden Raggiana bird-of-paradise is situated on the fly side of the upper red triangle."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/pg.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/pg.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -9.45,
                147.18
            ]
        },
        "postalCode": {
            "format": "###",
            "regex": "^(\\d{3})$"
        }
    },
    {
        "name": {
            "common": "Madagascar",
            "official": "Republic of Madagascar",
            "nativeName": {
                "fra": {
                    "official": "R\xe9publique de Madagascar",
                    "common": "Madagascar"
                },
                "mlg": {
                    "official": "Repoblikan'i Madagasikara",
                    "common": "Madagasikara"
                }
            }
        },
        "tld": [
            ".mg"
        ],
        "cca2": "MG",
        "ccn3": "450",
        "cca3": "MDG",
        "cioc": "MAD",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "MGA": {
                "name": "Malagasy ariary",
                "symbol": "Ar"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "61"
            ]
        },
        "capital": [
            "Antananarivo"
        ],
        "altSpellings": [
            "MG",
            "Republic of Madagascar",
            "Repoblikan'i Madagasikara",
            "R\xe9publique de Madagascar"
        ],
        "region": "Africa",
        "subregion": "Eastern Africa",
        "languages": {
            "fra": "French",
            "mlg": "Malagasy"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u062F\u063A\u0634\u0642\u0631",
                "common": "\u0645\u062F\u063A\u0634\u0642\u0631"
            },
            "bre": {
                "official": "Republik Madagaskar",
                "common": "Madagaskar"
            },
            "ces": {
                "official": "Madagaskarsk\xe1 republika",
                "common": "Madagaskar"
            },
            "cym": {
                "official": "Republic of Madagascar",
                "common": "Madagascar"
            },
            "deu": {
                "official": "Republik Madagaskar",
                "common": "Madagaskar"
            },
            "est": {
                "official": "Madagaskari Vabariik",
                "common": "Madagaskar"
            },
            "fin": {
                "official": "Madagaskarin tasavalta",
                "common": "Madagaskar"
            },
            "fra": {
                "official": "R\xe9publique de Madagascar",
                "common": "Madagascar"
            },
            "hrv": {
                "official": "Republika Madagaskar",
                "common": "Madagaskar"
            },
            "hun": {
                "official": "Madagaszk\xe1ri K\xf6zt\xe1rsas\xe1g",
                "common": "Madagaszk\xe1r"
            },
            "ita": {
                "official": "Repubblica del Madagascar",
                "common": "Madagascar"
            },
            "jpn": {
                "official": "\u30DE\u30C0\u30AC\u30B9\u30AB\u30EB\u5171\u548C\u56FD",
                "common": "\u30DE\u30C0\u30AC\u30B9\u30AB\u30EB"
            },
            "kor": {
                "official": "\uB9C8\uB2E4\uAC00\uC2A4\uCE74\uB974 \uACF5\uD654\uAD6D",
                "common": "\uB9C8\uB2E4\uAC00\uC2A4\uCE74\uB974"
            },
            "nld": {
                "official": "Republiek Madagaskar",
                "common": "Madagaskar"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u0627\u062F\u0627\u06AF\u0627\u0633\u06A9\u0627\u0631",
                "common": "\u0645\u0627\u062F\u0627\u06AF\u0627\u0633\u06A9\u0627\u0631"
            },
            "pol": {
                "official": "Republika Madagaskaru",
                "common": "Madagaskar"
            },
            "por": {
                "official": "Rep\xfablica de Madag\xe1scar",
                "common": "Madag\xe1scar"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u0434\u0430\u0433\u0430\u0441\u043A\u0430\u0440",
                "common": "\u041C\u0430\u0434\u0430\u0433\u0430\u0441\u043A\u0430\u0440"
            },
            "slk": {
                "official": "Madagaskarsk\xe1 republika",
                "common": "Madagaskar"
            },
            "spa": {
                "official": "Rep\xfablica de Madagascar",
                "common": "Madagascar"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u0434\u0430\u0433\u0430\u0441\u043A\u0430\u0440",
                "common": "\u041C\u0430\u0434\u0430\u0433\u0430\u0441\u043A\u0430\u0440"
            },
            "swe": {
                "official": "Republiken Madagaskar",
                "common": "Madagaskar"
            },
            "tur": {
                "official": "Madagaskar Cumhuriyeti",
                "common": "Madagaskar"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0688\u063A\u0627\u0633\u06A9\u0631",
                "common": "\u0645\u0688\u063A\u0627\u0633\u06A9\u0631"
            },
            "zho": {
                "official": "\u9A6C\u8FBE\u52A0\u65AF\u52A0\u5171\u548C\u56FD",
                "common": "\u9A6C\u8FBE\u52A0\u65AF\u52A0"
            }
        },
        "latlng": [
            -20,
            47
        ],
        "landlocked": false,
        "area": 587041,
        "demonyms": {
            "eng": {
                "f": "Malagasy",
                "m": "Malagasy"
            },
            "fra": {
                "f": "Malgache",
                "m": "Malgache"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDEC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/AHQh2ABBaFW6Ngj26",
            "openStreetMaps": "https://www.openstreetmap.org/relation/447325"
        },
        "population": 27691019,
        "gini": {
            "2012": 42.6
        },
        "fifa": "MAD",
        "car": {
            "signs": [
                "RM"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/mg.png",
            "svg": "https://flagcdn.com/mg.svg",
            "alt": "The flag of Madagascar features a white vertical band on the hoist side that takes up about one-third the width of the field, and two equal horizontal bands of red and green adjoining the vertical band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/mg.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/mg.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -18.92,
                47.52
            ]
        },
        "postalCode": {
            "format": "###",
            "regex": "^(\\d{3})$"
        }
    },
    {
        "name": {
            "common": "Bouvet Island",
            "official": "Bouvet Island",
            "nativeName": {
                "nor": {
                    "official": "Bouvet\xf8ya",
                    "common": "Bouvet\xf8ya"
                }
            }
        },
        "tld": [
            ".bv"
        ],
        "cca2": "BV",
        "ccn3": "074",
        "cca3": "BVT",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "idd": {
            "root": "+4",
            "suffixes": [
                "7"
            ]
        },
        "altSpellings": [
            "BV",
            "Bouvet\xf8ya",
            "Bouvet-\xf8ya"
        ],
        "region": "Antarctic",
        "languages": {
            "nor": "Norwegian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0632\u0631 \u0628\u0648\u0641\u064A\u0647",
                "common": "\u062C\u0632\u0631 \u0628\u0648\u0641\u064A\u0647"
            },
            "bre": {
                "official": "Enez Bouvet",
                "common": "Enez Bouvet"
            },
            "ces": {
                "official": "Bouvet\u016Fv ostrov",
                "common": "Bouvet\u016Fv ostrov"
            },
            "cym": {
                "official": "Bouvet Island",
                "common": "Bouvet Island"
            },
            "deu": {
                "official": "Bouvetinsel",
                "common": "Bouvetinsel"
            },
            "est": {
                "official": "Bouvet\u2019 saar",
                "common": "Bouvet\u2019 saar"
            },
            "fin": {
                "official": "Bouvet'nsaari",
                "common": "Bouvet'nsaari"
            },
            "fra": {
                "official": "\xcele Bouvet",
                "common": "\xcele Bouvet"
            },
            "hrv": {
                "official": "Bouvet Island",
                "common": "Otok Bouvet"
            },
            "hun": {
                "official": "Bouvet-sziget",
                "common": "Bouvet-sziget"
            },
            "ita": {
                "official": "Isola Bouvet",
                "common": "Isola Bouvet"
            },
            "jpn": {
                "official": "\u30D6\u30FC\u30F4\u30A7\u5CF6",
                "common": "\u30D6\u30FC\u30D9\u5CF6"
            },
            "kor": {
                "official": "\uBD80\uBCA0 \uC12C",
                "common": "\uBD80\uBCA0 \uC12C"
            },
            "nld": {
                "official": "Bouvet Island",
                "common": "Bouveteiland"
            },
            "per": {
                "official": "\u062C\u0632\u06CC\u0631\u0647\u0654 \u0628\u0648\u0648\u0647",
                "common": "\u062C\u0632\u06CC\u0631\u0647\u0654 \u0628\u0648\u0648\u0647"
            },
            "pol": {
                "official": "Wyspa Bouveta",
                "common": "Wyspa Bouveta"
            },
            "por": {
                "official": "Ilha Bouvet",
                "common": "Ilha Bouvet"
            },
            "rus": {
                "official": "\u041E\u0441\u0442\u0440\u043E\u0432 \u0411\u0443\u0432\u0435",
                "common": "\u041E\u0441\u0442\u0440\u043E\u0432 \u0411\u0443\u0432\u0435"
            },
            "slk": {
                "official": "Bouvetov ostrov",
                "common": "Bouvetov ostrov"
            },
            "spa": {
                "official": "Isla Bouvet",
                "common": "Isla Bouvet"
            },
            "srp": {
                "official": "\u0411\u0443\u0432\u0435",
                "common": "\u0411\u0443\u0432\u0435"
            },
            "swe": {
                "official": "Bouvet\xf6n",
                "common": "Bouvet\xf6n"
            },
            "tur": {
                "official": "Bouvet Adas\u0131",
                "common": "Bouvet Adas\u0131"
            },
            "urd": {
                "official": "\u062C\u0632\u06CC\u0631\u06C1 \u0628\u0648\u0648\u06C1",
                "common": "\u062C\u0632\u06CC\u0631\u06C1 \u0628\u0648\u0648\u06C1"
            },
            "zho": {
                "official": "\u5E03\u7EF4\u5C9B",
                "common": "\u5E03\u7EF4\u5C9B"
            }
        },
        "latlng": [
            54.4208,
            3.3464
        ],
        "landlocked": false,
        "area": 49,
        "flag": "\uD83C\uDDE7\uD83C\uDDFB",
        "maps": {
            "googleMaps": "https://goo.gl/maps/7WRQAEKZb4uK36yi9",
            "openStreetMaps": "https://www.openstreetmap.org/way/174996681"
        },
        "population": 0,
        "car": {
            "signs": [
                ""
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Antarctica"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/bv.png",
            "svg": "https://flagcdn.com/bv.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {}
    },
    {
        "name": {
            "common": "Hungary",
            "official": "Hungary",
            "nativeName": {
                "hun": {
                    "official": "Magyarorsz\xe1g",
                    "common": "Magyarorsz\xe1g"
                }
            }
        },
        "tld": [
            ".hu"
        ],
        "cca2": "HU",
        "ccn3": "348",
        "cca3": "HUN",
        "cioc": "HUN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "HUF": {
                "name": "Hungarian forint",
                "symbol": "Ft"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "6"
            ]
        },
        "capital": [
            "Budapest"
        ],
        "altSpellings": [
            "HU"
        ],
        "region": "Europe",
        "subregion": "Central Europe",
        "languages": {
            "hun": "Hungarian"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0645\u062C\u0631\u064A\u0629",
                "common": "\u0627\u0644\u0645\u062C\u0631"
            },
            "bre": {
                "official": "Hungaria",
                "common": "Hungaria"
            },
            "ces": {
                "official": "Ma\u010Farsko",
                "common": "Ma\u010Farsko"
            },
            "cym": {
                "official": "Hungary",
                "common": "Hungary"
            },
            "deu": {
                "official": "Ungarn",
                "common": "Ungarn"
            },
            "est": {
                "official": "Ungari",
                "common": "Ungari"
            },
            "fin": {
                "official": "Unkari",
                "common": "Unkari"
            },
            "fra": {
                "official": "Hongrie",
                "common": "Hongrie"
            },
            "hrv": {
                "official": "Mad\u017Earska",
                "common": "Ma\u0111arska"
            },
            "hun": {
                "official": "Magyarorsz\xe1g",
                "common": "Magyarorsz\xe1g"
            },
            "ita": {
                "official": "Ungheria",
                "common": "Ungheria"
            },
            "jpn": {
                "official": "\u30CF\u30F3\u30AC\u30EA\u30FC",
                "common": "\u30CF\u30F3\u30AC\u30EA\u30FC"
            },
            "kor": {
                "official": "\uD5DD\uAC00\uB9AC",
                "common": "\uD5DD\uAC00\uB9AC"
            },
            "nld": {
                "official": "Hongarije",
                "common": "Hongarije"
            },
            "per": {
                "official": "\u0645\u062C\u0627\u0631\u0633\u062A\u0627\u0646",
                "common": "\u0645\u062C\u0627\u0631\u0633\u062A\u0627\u0646"
            },
            "pol": {
                "official": "W\u0119gry",
                "common": "W\u0119gry"
            },
            "por": {
                "official": "Hungria",
                "common": "Hungria"
            },
            "rus": {
                "official": "\u0412\u0435\u043D\u0433\u0440\u0438\u044F",
                "common": "\u0412\u0435\u043D\u0433\u0440\u0438\u044F"
            },
            "slk": {
                "official": "Ma\u010Farsko",
                "common": "Ma\u010Farsko"
            },
            "spa": {
                "official": "Hungr\xeda",
                "common": "Hungr\xeda"
            },
            "srp": {
                "official": "\u041C\u0430\u0452\u0430\u0440\u0441\u043A\u0430",
                "common": "\u041C\u0430\u0452\u0430\u0440\u0441\u043A\u0430"
            },
            "swe": {
                "official": "Ungern",
                "common": "Ungern"
            },
            "tur": {
                "official": "Macaristan",
                "common": "Macaristan"
            },
            "urd": {
                "official": "\u0645\u062C\u0627\u0631\u0633\u062A\u0627\u0646",
                "common": "\u0645\u062C\u0627\u0631\u0633\u062A\u0627\u0646"
            },
            "zho": {
                "official": "\u5308\u7259\u5229",
                "common": "\u5308\u7259\u5229"
            }
        },
        "latlng": [
            47,
            20
        ],
        "landlocked": true,
        "borders": [
            "AUT",
            "HRV",
            "ROU",
            "SRB",
            "SVK",
            "SVN",
            "UKR"
        ],
        "area": 93028,
        "demonyms": {
            "eng": {
                "f": "Hungarian",
                "m": "Hungarian"
            },
            "fra": {
                "f": "Hongroise",
                "m": "Hongrois"
            }
        },
        "flag": "\uD83C\uDDED\uD83C\uDDFA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/9gfPupm5bffixiFJ6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/21335"
        },
        "population": 9749763,
        "gini": {
            "2018": 29.6
        },
        "fifa": "HUN",
        "car": {
            "signs": [
                "H"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/hu.png",
            "svg": "https://flagcdn.com/hu.svg",
            "alt": "The flag of Hungary is composed of three equal horizontal bands of red, white and green."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/hu.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/hu.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                47.5,
                19.08
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Tokelau",
            "official": "Tokelau",
            "nativeName": {
                "eng": {
                    "official": "Tokelau",
                    "common": "Tokelau"
                },
                "smo": {
                    "official": "Tokelau",
                    "common": "Tokelau"
                },
                "tkl": {
                    "official": "Tokelau",
                    "common": "Tokelau"
                }
            }
        },
        "tld": [
            ".tk"
        ],
        "cca2": "TK",
        "ccn3": "772",
        "cca3": "TKL",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "NZD": {
                "name": "New Zealand dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "90"
            ]
        },
        "capital": [
            "Fakaofo"
        ],
        "altSpellings": [
            "TK"
        ],
        "region": "Oceania",
        "subregion": "Polynesia",
        "languages": {
            "eng": "English",
            "smo": "Samoan",
            "tkl": "Tokelauan"
        },
        "translations": {
            "ara": {
                "official": "\u062A\u0648\u0643\u064A\u0644\u0627\u0648",
                "common": "\u062A\u0648\u0643\u064A\u0644\u0627\u0648"
            },
            "bre": {
                "official": "Tokelau",
                "common": "Tokelau"
            },
            "ces": {
                "official": "Tokelau",
                "common": "Tokelau"
            },
            "cym": {
                "official": "Tokelau",
                "common": "Tokelau"
            },
            "deu": {
                "official": "Tokelau",
                "common": "Tokelau"
            },
            "est": {
                "official": "Tokelau",
                "common": "Tokelau"
            },
            "fin": {
                "official": "Tokelau",
                "common": "Tokelau"
            },
            "fra": {
                "official": "\xceles Tokelau",
                "common": "Tokelau"
            },
            "hrv": {
                "official": "Tokelau",
                "common": "Tokelau"
            },
            "hun": {
                "official": "Tokelau-szigetek",
                "common": "Tokelau-szigetek"
            },
            "ita": {
                "official": "Tokelau",
                "common": "Isole Tokelau"
            },
            "jpn": {
                "official": "\u30C8\u30B1\u30E9\u30A6\u8AF8\u5CF6",
                "common": "\u30C8\u30B1\u30E9\u30A6"
            },
            "kor": {
                "official": "\uD1A0\uCF08\uB77C\uC6B0",
                "common": "\uD1A0\uCF08\uB77C\uC6B0"
            },
            "nld": {
                "official": "Tokelau",
                "common": "Tokelau"
            },
            "per": {
                "official": "\u062A\u0648\u06A9\u0644\u0627\u0626\u0648",
                "common": "\u062A\u0648\u06A9\u0644\u0627\u0626\u0648"
            },
            "pol": {
                "official": "Tokelau",
                "common": "Tokelau"
            },
            "por": {
                "official": "Tokelau",
                "common": "Tokelau"
            },
            "rus": {
                "official": "\u0422\u043E\u043A\u0435\u043B\u0430\u0443",
                "common": "\u0422\u043E\u043A\u0435\u043B\u0430\u0443"
            },
            "slk": {
                "official": "Tokelausk\xe9 ostrovy",
                "common": "Tokelau"
            },
            "spa": {
                "official": "Tokelau",
                "common": "Islas Tokelau"
            },
            "srp": {
                "official": "\u0422\u043E\u043A\u0435\u043B\u0430\u0443",
                "common": "\u0422\u043E\u043A\u0435\u043B\u0430\u0443"
            },
            "swe": {
                "official": "Tokelau\xf6arna",
                "common": "Tokelau\xf6arna"
            },
            "tur": {
                "official": "Tokelau",
                "common": "Tokelau"
            },
            "urd": {
                "official": "\u0679\u0648\u06A9\u06CC\u0644\u0627\u0624",
                "common": "\u0679\u0648\u06A9\u06CC\u0644\u0627\u0624"
            },
            "zho": {
                "official": "\u6258\u514B\u52B3",
                "common": "\u6258\u514B\u52B3"
            }
        },
        "latlng": [
            -9,
            -172
        ],
        "landlocked": false,
        "area": 12,
        "demonyms": {
            "eng": {
                "f": "Tokelauan",
                "m": "Tokelauan"
            }
        },
        "flag": "\uD83C\uDDF9\uD83C\uDDF0",
        "maps": {
            "googleMaps": "https://goo.gl/maps/Ap5qN8qien6pT9UN6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2186600"
        },
        "population": 1411,
        "car": {
            "signs": [
                ""
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+13:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/tk.png",
            "svg": "https://flagcdn.com/tk.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -9.38,
                -171.22
            ]
        }
    },
    {
        "name": {
            "common": "Trinidad and Tobago",
            "official": "Republic of Trinidad and Tobago",
            "nativeName": {
                "eng": {
                    "official": "Republic of Trinidad and Tobago",
                    "common": "Trinidad and Tobago"
                }
            }
        },
        "tld": [
            ".tt"
        ],
        "cca2": "TT",
        "ccn3": "780",
        "cca3": "TTO",
        "cioc": "TTO",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "TTD": {
                "name": "Trinidad and Tobago dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "868"
            ]
        },
        "capital": [
            "Port of Spain"
        ],
        "altSpellings": [
            "TT",
            "Republic of Trinidad and Tobago"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062A\u0631\u064A\u0646\u064A\u062F\u0627\u062F \u0648\u062A\u0648\u0628\u0627\u063A\u0648",
                "common": "\u062A\u0631\u064A\u0646\u064A\u062F\u0627\u062F \u0648\u062A\u0648\u0628\u0627\u063A\u0648"
            },
            "bre": {
                "official": "Republik Trinidad ha Tobago",
                "common": "Trinidad ha Tobago"
            },
            "ces": {
                "official": "Republika Trinidad a Tobago",
                "common": "Trinidad a Tobago"
            },
            "cym": {
                "official": "Republic of Trinidad and Tobago",
                "common": "Trinidad and Tobago"
            },
            "deu": {
                "official": "Republik Trinidad und Tobago",
                "common": "Trinidad und Tobago"
            },
            "est": {
                "official": "Trinidadi ja Tobago Vabariik",
                "common": "Trinidad ja Tobago"
            },
            "fin": {
                "official": "Trinidadin ja Tobagon tasavalta",
                "common": "Trinidad ja Tobago"
            },
            "fra": {
                "official": "R\xe9publique de Trinit\xe9-et-Tobago",
                "common": "Trinit\xe9-et-Tobago"
            },
            "hrv": {
                "official": "Republika Trinidad i Tobago",
                "common": "Trinidad i Tobago"
            },
            "hun": {
                "official": "Trinidad \xe9s Tobago K\xf6zt\xe1rsas\xe1g",
                "common": "Trinidad \xe9s Tobago"
            },
            "ita": {
                "official": "Repubblica di Trinidad e Tobago",
                "common": "Trinidad e Tobago"
            },
            "jpn": {
                "official": "\u30C8\u30EA\u30CB\u30C0\u30FC\u30C9\xb7\u30C8\u30D0\u30B4\u5171\u548C\u56FD",
                "common": "\u30C8\u30EA\u30CB\u30C0\u30FC\u30C9\u30FB\u30C8\u30D0\u30B4"
            },
            "kor": {
                "official": "\uD2B8\uB9AC\uB2C8\uB2E4\uB4DC \uD1A0\uBC14\uACE0 \uACF5\uD654\uAD6D",
                "common": "\uD2B8\uB9AC\uB2C8\uB2E4\uB4DC \uD1A0\uBC14\uACE0"
            },
            "nld": {
                "official": "Republiek Trinidad en Tobago",
                "common": "Trinidad en Tobago"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062A\u0631\u06CC\u0646\u06CC\u062F\u0627\u062F \u0648 \u062A\u0648\u0628\u0627\u06AF\u0648",
                "common": "\u062A\u0631\u06CC\u0646\u06CC\u062F\u0627\u062F \u0648 \u062A\u0648\u0628\u0627\u06AF\u0648"
            },
            "pol": {
                "official": "Trynidad i Tobago",
                "common": "Trynidad i Tobago"
            },
            "por": {
                "official": "Rep\xfablica de Trinidad e Tobago",
                "common": "Trinidade e Tobago"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u0440\u0438\u043D\u0438\u0434\u0430\u0434 \u0438 \u0422\u043E\u0431\u0430\u0433\u043E",
                "common": "\u0422\u0440\u0438\u043D\u0438\u0434\u0430\u0434 \u0438 \u0422\u043E\u0431\u0430\u0433\u043E"
            },
            "slk": {
                "official": "Republika Trinidad a Tobaga",
                "common": "Trinidad a Tobago"
            },
            "spa": {
                "official": "Rep\xfablica de Trinidad y Tobago",
                "common": "Trinidad y Tobago"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u0440\u0438\u043D\u0438\u0434\u0430\u0434 \u0438 \u0422\u043E\u0431\u0430\u0433\u043E",
                "common": "\u0422\u0440\u0438\u043D\u0438\u0434\u0430\u0434 \u0438 \u0422\u043E\u0431\u0430\u0433\u043E"
            },
            "swe": {
                "official": "Republiken Trinidad och Tobago",
                "common": "Trinidad och Tobago"
            },
            "tur": {
                "official": "Trinidad ve Tobago",
                "common": "Trinidad ve Tobago"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0679\u0631\u06CC\u0646\u06CC\u0688\u0627\u0688 \u0648 \u0679\u0648\u0628\u0627\u06AF\u0648",
                "common": "\u0679\u0631\u06CC\u0646\u06CC\u0688\u0627\u0688 \u0648 \u0679\u0648\u0628\u0627\u06AF\u0648"
            },
            "zho": {
                "official": "\u7279\u7ACB\u5C3C\u8FBE\u548C\u591A\u5DF4\u54E5\u5171\u548C\u56FD",
                "common": "\u7279\u7ACB\u5C3C\u8FBE\u548C\u591A\u5DF4\u54E5"
            }
        },
        "latlng": [
            10.6918,
            -61.2225
        ],
        "landlocked": false,
        "area": 5130,
        "demonyms": {
            "eng": {
                "f": "Trinidadian",
                "m": "Trinidadian"
            },
            "fra": {
                "f": "Trinidadienne",
                "m": "Trinidadien"
            }
        },
        "flag": "\uD83C\uDDF9\uD83C\uDDF9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/NrRfDEWoG8FGZqWY7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/555717"
        },
        "population": 1399491,
        "gini": {
            "1992": 40.3
        },
        "fifa": "TRI",
        "car": {
            "signs": [
                "TT"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/tt.png",
            "svg": "https://flagcdn.com/tt.svg",
            "alt": "The flag of Trinidad and Tobago has a red field with a white-edged black diagonal band that extends from the upper hoist-side corner to the lower fly-side corner of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/tt.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/tt.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                10.65,
                -61.52
            ]
        }
    },
    {
        "name": {
            "common": "Gambia",
            "official": "Republic of the Gambia",
            "nativeName": {
                "eng": {
                    "official": "Republic of the Gambia",
                    "common": "Gambia"
                }
            }
        },
        "tld": [
            ".gm"
        ],
        "cca2": "GM",
        "ccn3": "270",
        "cca3": "GMB",
        "cioc": "GAM",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "GMD": {
                "name": "dalasi",
                "symbol": "D"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "20"
            ]
        },
        "capital": [
            "Banjul"
        ],
        "altSpellings": [
            "GM",
            "Republic of the Gambia"
        ],
        "region": "Africa",
        "subregion": "Western Africa",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u063A\u0627\u0645\u0628\u064A\u0627",
                "common": "\u063A\u0627\u0645\u0628\u064A\u0627"
            },
            "bre": {
                "official": "Republik islamek ar Gambia",
                "common": "Gambia"
            },
            "ces": {
                "official": "Gambijsk\xe1 republika",
                "common": "Gambie"
            },
            "cym": {
                "official": "Republic of the Gambia",
                "common": "Gambia"
            },
            "deu": {
                "official": "Republik Gambia",
                "common": "Gambia"
            },
            "est": {
                "official": "Gambia Vabariik",
                "common": "Gambia"
            },
            "fin": {
                "official": "Gambian tasavalta",
                "common": "Gambia"
            },
            "fra": {
                "official": "R\xe9publique de Gambie",
                "common": "Gambie"
            },
            "hrv": {
                "official": "Republika Gambija",
                "common": "Gambija"
            },
            "hun": {
                "official": "Gambiai K\xf6zt\xe1rsas\xe1g",
                "common": "Gambia"
            },
            "ita": {
                "official": "Repubblica del Gambia",
                "common": "Gambia"
            },
            "jpn": {
                "official": "\u30AC\u30F3\u30D3\u30A2\u5171\u548C\u56FD",
                "common": "\u30AC\u30F3\u30D3\u30A2"
            },
            "kor": {
                "official": "\uAC10\uBE44\uC544 \uACF5\uD654\uAD6D",
                "common": "\uAC10\uBE44\uC544"
            },
            "nld": {
                "official": "Republiek Gambia",
                "common": "Gambia"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u06AF\u0627\u0645\u0628\u06CC\u0627",
                "common": "\u06AF\u0627\u0645\u0628\u06CC\u0627"
            },
            "pol": {
                "official": "Republika Gambii",
                "common": "Gambia"
            },
            "por": {
                "official": "Rep\xfablica da G\xe2mbia",
                "common": "G\xe2mbia"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0430\u043C\u0431\u0438\u044F",
                "common": "\u0413\u0430\u043C\u0431\u0438\u044F"
            },
            "slk": {
                "official": "Gambijsk\xe1 republika",
                "common": "Gambia"
            },
            "spa": {
                "official": "Rep\xfablica de Gambia",
                "common": "Gambia"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0430\u043C\u0431\u0438\u0458\u0430",
                "common": "\u0413\u0430\u043C\u0431\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Gambia",
                "common": "Gambia"
            },
            "tur": {
                "official": "Gambiya Cumhuriyeti",
                "common": "Gambiya"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06AF\u06CC\u0645\u0628\u06CC\u0627",
                "common": "\u06AF\u06CC\u0645\u0628\u06CC\u0627"
            },
            "zho": {
                "official": "\u5188\u6BD4\u4E9A\u5171\u548C\u56FD",
                "common": "\u5188\u6BD4\u4E9A"
            }
        },
        "latlng": [
            13.46666666,
            -16.56666666
        ],
        "landlocked": false,
        "borders": [
            "SEN"
        ],
        "area": 10689,
        "demonyms": {
            "eng": {
                "f": "Gambian",
                "m": "Gambian"
            },
            "fra": {
                "f": "Gambienne",
                "m": "Gambien"
            }
        },
        "flag": "\uD83C\uDDEC\uD83C\uDDF2",
        "maps": {
            "googleMaps": "https://goo.gl/maps/bbGBCxxtfD2A9Z4m6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192774"
        },
        "population": 2416664,
        "gini": {
            "2015": 35.9
        },
        "fifa": "GAM",
        "car": {
            "signs": [
                "WAG"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+00:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/gm.png",
            "svg": "https://flagcdn.com/gm.svg",
            "alt": "The flag of Gambia is composed of three equal horizontal bands of red, blue with white top and bottom edges, and green."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/gm.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/gm.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                13.45,
                -16.57
            ]
        }
    },
    {
        "name": {
            "common": "Luxembourg",
            "official": "Grand Duchy of Luxembourg",
            "nativeName": {
                "deu": {
                    "official": "Gro\xdfherzogtum Luxemburg",
                    "common": "Luxemburg"
                },
                "fra": {
                    "official": "Grand-Duch\xe9 de Luxembourg",
                    "common": "Luxembourg"
                },
                "ltz": {
                    "official": "Groussherzogtum L\xebtzebuerg",
                    "common": "L\xebtzebuerg"
                }
            }
        },
        "tld": [
            ".lu"
        ],
        "cca2": "LU",
        "ccn3": "442",
        "cca3": "LUX",
        "cioc": "LUX",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "52"
            ]
        },
        "capital": [
            "Luxembourg"
        ],
        "altSpellings": [
            "LU",
            "Grand Duchy of Luxembourg",
            "Grand-Duch\xe9 de Luxembourg",
            "Gro\xdfherzogtum Luxemburg",
            "Groussherzogtum L\xebtzebuerg"
        ],
        "region": "Europe",
        "subregion": "Western Europe",
        "languages": {
            "deu": "German",
            "fra": "French",
            "ltz": "Luxembourgish"
        },
        "translations": {
            "ara": {
                "official": "\u062F\u0648\u0642\u064A\u0629 \u0644\u0648\u0643\u0633\u0645\u0628\u0648\u0631\u063A",
                "common": "\u0644\u0648\u0643\u0633\u0645\u0628\u0648\u0631\u063A"
            },
            "bre": {
                "official": "Dugelezh Veur Luksembourg",
                "common": "Luksembourg"
            },
            "ces": {
                "official": "Lucembursk\xe9 velkov\xe9vodstv\xed",
                "common": "Lucembursko"
            },
            "cym": {
                "official": "Grand Duchy of Luxembourg",
                "common": "Luxembourg"
            },
            "deu": {
                "official": "Gro\xdfherzogtum Luxemburg,",
                "common": "Luxemburg"
            },
            "est": {
                "official": "Luksemburgi Suurhertsogiriik",
                "common": "Luksemburg"
            },
            "fin": {
                "official": "Luxemburgin suurherttuakunta",
                "common": "Luxemburg"
            },
            "fra": {
                "official": "Grand-Duch\xe9 de Luxembourg",
                "common": "Luxembourg"
            },
            "hrv": {
                "official": "Veliko Vojvodstvo Luksemburg",
                "common": "Luksemburg"
            },
            "hun": {
                "official": "Luxemburgi Nagyhercegs\xe9g",
                "common": "Luxemburg"
            },
            "ita": {
                "official": "Granducato di Lussemburgo",
                "common": "Lussemburgo"
            },
            "jpn": {
                "official": "\u30EB\u30AF\u30BB\u30F3\u30D6\u30EB\u30AF\u5927\u516C\u56FD",
                "common": "\u30EB\u30AF\u30BB\u30F3\u30D6\u30EB\u30AF"
            },
            "kor": {
                "official": "\uB8E9\uC148\uBD80\uB974\uD06C \uB300\uACF5\uAD6D",
                "common": "\uB8E9\uC148\uBD80\uB974\uD06C"
            },
            "nld": {
                "official": "Groothertogdom Luxemburg",
                "common": "Luxemburg"
            },
            "per": {
                "official": "\u062F\u0648\u06A9\u200C\u0646\u0634\u06CC\u0646 \u0644\u0648\u06A9\u0632\u0627\u0645\u0628\u0648\u0631\u06AF",
                "common": "\u0644\u0648\u06A9\u0632\u0627\u0645\u0628\u0648\u0631\u06AF"
            },
            "pol": {
                "official": "Wielkie Ksi\u0119stwo Luksemburga",
                "common": "Luksemburg"
            },
            "por": {
                "official": "Gr\xe3o-Ducado do Luxemburgo",
                "common": "Luxemburgo"
            },
            "rus": {
                "official": "\u0412\u0435\u043B\u0438\u043A\u043E\u0435 \u0413\u0435\u0440\u0446\u043E\u0433\u0441\u0442\u0432\u043E \u041B\u044E\u043A\u0441\u0435\u043C\u0431\u0443\u0440\u0433",
                "common": "\u041B\u044E\u043A\u0441\u0435\u043C\u0431\u0443\u0440\u0433"
            },
            "slk": {
                "official": "Luxembursk\xe9 ve\u013Ekovojvodstvo",
                "common": "Luxembursko"
            },
            "spa": {
                "official": "Gran Ducado de Luxemburgo",
                "common": "Luxemburgo"
            },
            "srp": {
                "official": "\u0412\u0435\u043B\u0438\u043A\u043E \u0412\u043E\u0458\u0432\u043E\u0434\u0441\u0442\u0432\u043E \u041B\u0443\u043A\u0441\u0435\u043C\u0431\u0443\u0440\u0433",
                "common": "\u041B\u0443\u043A\u0441\u0435\u043C\u0431\u0443\u0440\u0433"
            },
            "swe": {
                "official": "Storhertigd\xf6met Luxemburg",
                "common": "Luxemburg"
            },
            "tur": {
                "official": "L\xfcksemburg B\xfcy\xfck D\xfckal\u0131\u011F\u0131",
                "common": "L\xfcksemburg"
            },
            "urd": {
                "official": "\u062F\u0648\u0642\u06CC\u06C1 \u06A9\u0628\u06CC\u0631\u0644\u06A9\u0633\u0645\u0628\u0631\u06AF",
                "common": "\u0644\u06A9\u0633\u0645\u0628\u0631\u06AF"
            },
            "zho": {
                "official": "\u5362\u68EE\u5821\u5927\u516C\u56FD",
                "common": "\u5362\u68EE\u5821"
            }
        },
        "latlng": [
            49.75,
            6.16666666
        ],
        "landlocked": true,
        "borders": [
            "BEL",
            "FRA",
            "DEU"
        ],
        "area": 2586,
        "demonyms": {
            "eng": {
                "f": "Luxembourger",
                "m": "Luxembourger"
            },
            "fra": {
                "f": "Luxembourgeoise",
                "m": "Luxembourgeois"
            }
        },
        "flag": "\uD83C\uDDF1\uD83C\uDDFA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/L6b2AgndgHprt2Ko9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2171347#map=10/49.8167/6.1335"
        },
        "population": 632275,
        "gini": {
            "2018": 35.4
        },
        "fifa": "LUX",
        "car": {
            "signs": [
                "L"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/lu.png",
            "svg": "https://flagcdn.com/lu.svg",
            "alt": "The flag of Luxembourg is composed of three equal horizontal bands of red, white and light blue."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/lu.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/lu.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                49.6,
                6.12
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Cocos (Keeling) Islands",
            "official": "Territory of the Cocos (Keeling) Islands",
            "nativeName": {
                "eng": {
                    "official": "Territory of the Cocos (Keeling) Islands",
                    "common": "Cocos (Keeling) Islands"
                }
            }
        },
        "tld": [
            ".cc"
        ],
        "cca2": "CC",
        "ccn3": "166",
        "cca3": "CCK",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "AUD": {
                "name": "Australian dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "1"
            ]
        },
        "capital": [
            "West Island"
        ],
        "altSpellings": [
            "CC",
            "Keeling Islands",
            "Cocos Islands"
        ],
        "region": "Oceania",
        "subregion": "Australia and New Zealand",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u0625\u0642\u0644\u064A\u0645 \u062C\u0632\u0631 \u0643\u0648\u0643\u0648\u0633",
                "common": "\u062C\u0632\u0631 \u0643\u0648\u0643\u0648\u0633"
            },
            "bre": {
                "official": "Tiriad Inizi Cocos (Keeling)",
                "common": "Inizi Cocos (Keeling)"
            },
            "ces": {
                "official": "Kokosov\xe9 ostrovy",
                "common": "Kokosov\xe9 ostrovy"
            },
            "cym": {
                "official": "Tiriogaeth yr Ynysoedd Cocos (Keeling)",
                "common": "Ynysoedd Cocos"
            },
            "deu": {
                "official": "Gebiet der Kokos- (Keeling-) Inseln",
                "common": "Kokosinseln"
            },
            "est": {
                "official": "Kookossaarte ala",
                "common": "Kookossaared"
            },
            "fin": {
                "official": "Kookossaaret",
                "common": "Kookossaaret"
            },
            "fra": {
                "official": "Territoire des \xeeles Cocos (Keeling)",
                "common": "\xceles Cocos"
            },
            "hrv": {
                "official": "Teritoriju Kokosovi (Keeling) Islands",
                "common": "Kokosovi Otoci"
            },
            "hun": {
                "official": "K\xf3kusz-szigetek",
                "common": "K\xf3kusz-szigetek"
            },
            "ita": {
                "official": "Territorio della (Keeling) Isole Cocos",
                "common": "Isole Cocos e Keeling"
            },
            "jpn": {
                "official": "\u30B3\u30B3\u30B9\u8AF8\u5CF6\u306E\u9818\u571F",
                "common": "\u30B3\u30B3\u30B9\uFF08\u30AD\u30FC\u30EA\u30F3\u30B0\uFF09\u8AF8\u5CF6"
            },
            "kor": {
                "official": "\uCF54\uCF54\uC2A4 \uC81C\uB3C4",
                "common": "\uCF54\uCF54\uC2A4 \uC81C\uB3C4"
            },
            "nld": {
                "official": "Grondgebied van de Eilanden Cocos (Keeling )",
                "common": "Cocoseilanden"
            },
            "per": {
                "official": "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u0648\u06A9\u0648\u0633",
                "common": "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u0648\u06A9\u0648\u0633"
            },
            "pol": {
                "official": "Wyspy Kokosowe",
                "common": "Wyspy Kokosowe"
            },
            "por": {
                "official": "Territ\xf3rio dos Cocos (Keeling)",
                "common": "Ilhas Cocos (Keeling)"
            },
            "rus": {
                "official": "\u0422\u0435\u0440\u0440\u0438\u0442\u043E\u0440\u0438\u044F \u041A\u043E\u043A\u043E\u0441\u043E\u0432\u044B\u0435 (\u041A\u0438\u043B\u0438\u043D\u0433) \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                "common": "\u041A\u043E\u043A\u043E\u0441\u043E\u0432\u044B\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            "slk": {
                "official": "Kokosov\xe9 ostrovy",
                "common": "Kokosov\xe9 ostrovy"
            },
            "spa": {
                "official": "Territorio de los (Keeling) Islas Cocos",
                "common": "Islas Cocos o Islas Keeling"
            },
            "srp": {
                "official": "\u041A\u043E\u043A\u043E\u0441\u043E\u0432\u0430 (\u041A\u0438\u043B\u0438\u043D\u0433) \u041E\u0441\u0442\u0440\u0432\u0430",
                "common": "\u041A\u043E\u043A\u043E\u0441\u043E\u0432\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            "swe": {
                "official": "Kokos\xf6arna",
                "common": "Kokos\xf6arna"
            },
            "tur": {
                "official": "Cocos (Keeling) Adalar\u0131",
                "common": "Cocos (Keeling) Adalar\u0131"
            },
            "urd": {
                "official": "\u062C\u0632\u0627\u0626\u0631 (\u06A9\u06CC\u0644\u0646\u06AF) \u06A9\u0648\u06A9\u0648\u0633",
                "common": "\u062C\u0632\u0627\u0626\u0631 \u06A9\u0648\u06A9\u0648\u0633"
            },
            "zho": {
                "official": "\u79D1\u79D1\u65AF",
                "common": "\u79D1\u79D1\u65AF"
            }
        },
        "latlng": [
            12.1642,
            96.871
        ],
        "landlocked": false,
        "area": 14,
        "demonyms": {
            "eng": {
                "f": "Cocos Islander",
                "m": "Cocos Islander"
            }
        },
        "flag": "\uD83C\uDDE8\uD83C\uDDE8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/3eCdKVpVfMcZyKcK6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/82636"
        },
        "population": 544,
        "car": {
            "signs": [
                "AUS"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+06:30"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/cc.png",
            "svg": "https://flagcdn.com/cc.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -12.17,
                96.83
            ]
        }
    },
    {
        "name": {
            "common": "Republic of the Congo",
            "official": "Republic of the Congo",
            "nativeName": {
                "fra": {
                    "official": "R\xe9publique du Congo",
                    "common": "R\xe9publique du Congo"
                },
                "kon": {
                    "official": "Repubilika ya Kongo",
                    "common": "Repubilika ya Kongo"
                },
                "lin": {
                    "official": "Republ\xedki ya Kong\xf3",
                    "common": "Republ\xedki ya Kong\xf3"
                }
            }
        },
        "tld": [
            ".cg"
        ],
        "cca2": "CG",
        "ccn3": "178",
        "cca3": "COG",
        "cioc": "CGO",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "XAF": {
                "name": "Central African CFA franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "42"
            ]
        },
        "capital": [
            "Brazzaville"
        ],
        "altSpellings": [
            "CG",
            "Congo",
            "Congo-Brazzaville"
        ],
        "region": "Africa",
        "subregion": "Middle Africa",
        "languages": {
            "fra": "French",
            "kon": "Kikongo",
            "lin": "Lingala"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0643\u0648\u0646\u063A\u0648",
                "common": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0643\u0648\u0646\u0641\u0648"
            },
            "bre": {
                "official": "Republik Kongo",
                "common": "Kongo-Brazzaville"
            },
            "ces": {
                "official": "Kon\u017Esk\xe1 republika",
                "common": "Kongo"
            },
            "cym": {
                "official": "Gweriniaeth y Congo",
                "common": "Gweriniaeth y Congo"
            },
            "deu": {
                "official": "Republik Kongo",
                "common": "Kongo"
            },
            "est": {
                "official": "Kongo Vabariik",
                "common": "Kongo Vabariik"
            },
            "fin": {
                "official": "Kongon tasavalta",
                "common": "Kongo-Brazzaville"
            },
            "fra": {
                "official": "R\xe9publique du Congo",
                "common": "Congo"
            },
            "hrv": {
                "official": "Republika Kongo",
                "common": "Kongo"
            },
            "hun": {
                "official": "Kong\xf3i K\xf6zt\xe1rsas\xe1g",
                "common": "Kong\xf3i K\xf6zt\xe1rsas\xe1g"
            },
            "ita": {
                "official": "Repubblica del Congo",
                "common": "Congo"
            },
            "jpn": {
                "official": "\u30B3\u30F3\u30B4\u5171\u548C\u56FD",
                "common": "\u30B3\u30F3\u30B4\u5171\u548C\u56FD"
            },
            "kor": {
                "official": "\uCF69\uACE0",
                "common": "\uCF69\uACE0"
            },
            "nld": {
                "official": "Republiek Congo",
                "common": "Congo"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0628\u0631\u0627\u0632\u0627\u0648\u06CC\u0644 \u06A9\u064F\u0646\u06AF\u0648",
                "common": "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u064F\u0646\u06AF\u0648"
            },
            "pol": {
                "official": "Republika Konga",
                "common": "Kongo"
            },
            "por": {
                "official": "Rep\xfablica do Congo",
                "common": "Congo"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u043D\u0433\u043E",
                "common": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u043D\u0433\u043E"
            },
            "slk": {
                "official": "Kon\u017Esk\xe1 republika",
                "common": "Kongo"
            },
            "spa": {
                "official": "Rep\xfablica del Congo",
                "common": "Congo"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u043D\u0433\u043E",
                "common": "\u041A\u043E\u043D\u0433\u043E"
            },
            "swe": {
                "official": "Republiken Kongo",
                "common": "Kongo-Brazzaville"
            },
            "tur": {
                "official": "Kongo Cumhuriyeti",
                "common": "Kongo Cumhuriyeti"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0627\u0646\u06AF\u0648",
                "common": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0627\u0646\u06AF\u0648"
            },
            "zho": {
                "official": "\u521A\u679C\u5171\u548C\u56FD",
                "common": "\u521A\u679C"
            }
        },
        "latlng": [
            -1,
            15
        ],
        "landlocked": false,
        "borders": [
            "AGO",
            "CMR",
            "CAF",
            "COD",
            "GAB"
        ],
        "area": 342000,
        "demonyms": {
            "eng": {
                "f": "Congolese",
                "m": "Congolese"
            },
            "fra": {
                "f": "Congolaise",
                "m": "Congolais"
            }
        },
        "flag": "\uD83C\uDDE8\uD83C\uDDEC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/Phf5dDDKdfCtuBTb6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192794"
        },
        "population": 5657000,
        "gini": {
            "2011": 48.9
        },
        "fifa": "CGO",
        "car": {
            "signs": [
                "RCB"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/cg.png",
            "svg": "https://flagcdn.com/cg.svg",
            "alt": "The flag of the Republic of the Congo features a yellow diagonal band that extends from the lower hoist-side corner to the upper fly-side corner of the field. Above and beneath this band are a green and red triangle respectively."
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -4.25,
                15.28
            ]
        }
    },
    {
        "name": {
            "common": "Argentina",
            "official": "Argentine Republic",
            "nativeName": {
                "grn": {
                    "official": "Argentine Republic",
                    "common": "Argentina"
                },
                "spa": {
                    "official": "Rep\xfablica Argentina",
                    "common": "Argentina"
                }
            }
        },
        "tld": [
            ".ar"
        ],
        "cca2": "AR",
        "ccn3": "032",
        "cca3": "ARG",
        "cioc": "ARG",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "ARS": {
                "name": "Argentine peso",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "4"
            ]
        },
        "capital": [
            "Buenos Aires"
        ],
        "altSpellings": [
            "AR",
            "Argentine Republic",
            "Rep\xfablica Argentina"
        ],
        "region": "Americas",
        "subregion": "South America",
        "languages": {
            "grn": "Guaran\xed",
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0623\u0631\u062C\u0646\u062A\u064A\u0646",
                "common": "\u0627\u0644\u0623\u0631\u062C\u0646\u062A\u064A\u0646"
            },
            "bre": {
                "official": "Republik Arc'hantina",
                "common": "Arc'hantina"
            },
            "ces": {
                "official": "Argentinsk\xe1 republika",
                "common": "Argentina"
            },
            "cym": {
                "official": "Gweriniaeth yr Ariannin",
                "common": "Ariannin"
            },
            "deu": {
                "official": "Argentinische Republik",
                "common": "Argentinien"
            },
            "est": {
                "official": "Argentina Vabariik",
                "common": "Argentina"
            },
            "fin": {
                "official": "Argentiinan tasavalta",
                "common": "Argentiina"
            },
            "fra": {
                "official": "R\xe9publique argentine",
                "common": "Argentine"
            },
            "hrv": {
                "official": "Argentinski Republika",
                "common": "Argentina"
            },
            "hun": {
                "official": "Argentin K\xf6zt\xe1rsas\xe1g",
                "common": "Argent\xedna"
            },
            "ita": {
                "official": "Repubblica Argentina",
                "common": "Argentina"
            },
            "jpn": {
                "official": "\u30A2\u30EB\u30BC\u30F3\u30C1\u30F3\u5171\u548C\u56FD",
                "common": "\u30A2\u30EB\u30BC\u30F3\u30C1\u30F3"
            },
            "kor": {
                "official": "\uC544\uB974\uD5E8\uD2F0\uB098 \uACF5\uD654\uAD6D",
                "common": "\uC544\uB974\uD5E8\uD2F0\uB098"
            },
            "nld": {
                "official": "Argentijnse Republiek",
                "common": "Argentini\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0622\u0631\u0698\u0627\u0646\u062A\u06CC\u0646",
                "common": "\u0622\u0631\u0698\u0627\u0646\u062A\u06CC\u0646"
            },
            "pol": {
                "official": "Republika Argenty\u0144ska",
                "common": "Argentyna"
            },
            "por": {
                "official": "Rep\xfablica Argentina",
                "common": "Argentina"
            },
            "rus": {
                "official": "\u0410\u0440\u0433\u0435\u043D\u0442\u0438\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0410\u0440\u0433\u0435\u043D\u0442\u0438\u043D\u0430"
            },
            "slk": {
                "official": "Argent\xednska republika",
                "common": "Argent\xedna"
            },
            "spa": {
                "official": "Rep\xfablica Argentina",
                "common": "Argentina"
            },
            "srp": {
                "official": "\u0410\u0440\u0433\u0435\u043D\u0442\u0438\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0410\u0440\u0433\u0435\u043D\u0442\u0438\u043D\u0430"
            },
            "swe": {
                "official": "Republiken Argentina",
                "common": "Argentina"
            },
            "tur": {
                "official": "Arjantin Cumhuriyeti",
                "common": "Arjantin"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0631\u062C\u0646\u0679\u0627\u0626\u0646",
                "common": "\u0627\u0631\u062C\u0646\u0679\u0627\u0626\u0646"
            },
            "zho": {
                "official": "\u963F\u6839\u5EF7\u5171\u548C\u56FD",
                "common": "\u963F\u6839\u5EF7"
            }
        },
        "latlng": [
            -34,
            -64
        ],
        "landlocked": false,
        "borders": [
            "BOL",
            "BRA",
            "CHL",
            "PRY",
            "URY"
        ],
        "area": 2780400,
        "demonyms": {
            "eng": {
                "f": "Argentine",
                "m": "Argentine"
            },
            "fra": {
                "f": "Argentine",
                "m": "Argentin"
            }
        },
        "flag": "\uD83C\uDDE6\uD83C\uDDF7",
        "maps": {
            "googleMaps": "https://goo.gl/maps/Z9DXNxhf2o93kvyc6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/286393"
        },
        "population": 45376763,
        "gini": {
            "2019": 42.9
        },
        "fifa": "ARG",
        "car": {
            "signs": [
                "RA"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-03:00"
        ],
        "continents": [
            "South America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ar.png",
            "svg": "https://flagcdn.com/ar.svg",
            "alt": "The flag of Argentina features three equal horizontal bands of light blue, white and light blue. A brown-edged golden sun is centered in the white band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ar.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ar.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -34.58,
                -58.67
            ]
        },
        "postalCode": {
            "format": "@####@@@",
            "regex": "^([A-Z]\\d{4}[A-Z]{3})$"
        }
    },
    {
        "name": {
            "common": "DR Congo",
            "official": "Democratic Republic of the Congo",
            "nativeName": {
                "fra": {
                    "official": "R\xe9publique d\xe9mocratique du Congo",
                    "common": "RD Congo"
                },
                "kon": {
                    "official": "Repubilika ya Kongo Demokratiki",
                    "common": "Repubilika ya Kongo Demokratiki"
                },
                "lin": {
                    "official": "Republiki ya Kong\xf3 Demokratiki",
                    "common": "Republiki ya Kong\xf3 Demokratiki"
                },
                "lua": {
                    "official": "Ditunga dia Kongu wa Mungalaata",
                    "common": "Ditunga dia Kongu wa Mungalaata"
                },
                "swa": {
                    "official": "Jamhuri ya Kidemokrasia ya Kongo",
                    "common": "Jamhuri ya Kidemokrasia ya Kongo"
                }
            }
        },
        "tld": [
            ".cd"
        ],
        "cca2": "CD",
        "ccn3": "180",
        "cca3": "COD",
        "cioc": "COD",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "CDF": {
                "name": "Congolese franc",
                "symbol": "FC"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "43"
            ]
        },
        "capital": [
            "Kinshasa"
        ],
        "altSpellings": [
            "CD",
            "DR Congo",
            "Congo-Kinshasa",
            "Congo, the Democratic Republic of the",
            "DRC"
        ],
        "region": "Africa",
        "subregion": "Middle Africa",
        "languages": {
            "fra": "French",
            "kon": "Kikongo",
            "lin": "Lingala",
            "lua": "Tshiluba",
            "swa": "Swahili"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0643\u0648\u0646\u063A\u0648 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629",
                "common": "\u0627\u0644\u0643\u0648\u0646\u063A\u0648"
            },
            "bre": {
                "official": "Republik Demokratel Kongo",
                "common": "Kongo-Kinshasa"
            },
            "ces": {
                "official": "Demokratick\xe1 republika Kongo",
                "common": "DR Kongo"
            },
            "cym": {
                "official": "Gweriniaeth Ddemocrataidd Congo",
                "common": "Gweriniaeth Ddemocrataidd Congo"
            },
            "deu": {
                "official": "Demokratische Republik Kongo",
                "common": "Kongo (Dem. Rep.)"
            },
            "est": {
                "official": "Kongo Demokraatlik Vabariik",
                "common": "Kongo DV"
            },
            "fin": {
                "official": "Kongon demokraattinen tasavalta",
                "common": "Kongon demokraattinen tasavalta"
            },
            "fra": {
                "official": "R\xe9publique d\xe9mocratique du Congo",
                "common": "Congo (R\xe9p. d\xe9m.)"
            },
            "hrv": {
                "official": "Demokratska Republika Kongo",
                "common": "Kongo, Demokratska Republika"
            },
            "hun": {
                "official": "Kong\xf3i Demokratikus K\xf6zt\xe1rsas\xe1g",
                "common": "Kong\xf3i Demokratikus K\xf6zt\xe1rsas\xe1g"
            },
            "ita": {
                "official": "Repubblica Democratica del Congo",
                "common": "Congo (Rep. Dem.)"
            },
            "jpn": {
                "official": "\u30B3\u30F3\u30B4\u6C11\u4E3B\u5171\u548C\u56FD",
                "common": "\u30B3\u30F3\u30B4\u6C11\u4E3B\u5171\u548C\u56FD"
            },
            "kor": {
                "official": "\uCF69\uACE0 \uBBFC\uC8FC \uACF5\uD654\uAD6D",
                "common": "\uCF69\uACE0 \uBBFC\uC8FC \uACF5\uD654\uAD6D"
            },
            "nld": {
                "official": "Democratische Republiek Congo",
                "common": "Congo (DRC)"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9 \u06A9\u0646\u06AF\u0648",
                "common": "\u06A9\u0646\u06AF\u0648 \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9"
            },
            "pol": {
                "official": "Demokratyczna Republika Konga",
                "common": "Demokratyczna Republika Konga"
            },
            "por": {
                "official": "Rep\xfablica Democr\xe1tica do Congo",
                "common": "Rep\xfablica Democr\xe1tica do Congo"
            },
            "rus": {
                "official": "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u043D\u0433\u043E",
                "common": "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u043D\u0433\u043E"
            },
            "slk": {
                "official": "Kon\u017Esk\xe1 demokratick\xe1 republika",
                "common": "Kongo"
            },
            "spa": {
                "official": "Rep\xfablica Democr\xe1tica del Congo",
                "common": "Congo (Rep. Dem.)"
            },
            "srp": {
                "official": "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u043D\u0433\u043E",
                "common": "\u0414\u0420 \u041A\u043E\u043D\u0433\u043E"
            },
            "swe": {
                "official": "Demokratiska republiken Kongo",
                "common": "Kongo-Kinshasa"
            },
            "tur": {
                "official": "Kongo Demokratik Cumhuriyeti",
                "common": "Kongo Demokratik Cumhuriyeti"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0627\u0646\u06AF\u0648",
                "common": "\u06A9\u0627\u0646\u06AF\u0648"
            },
            "zho": {
                "official": "\u521A\u679C\u6C11\u4E3B\u5171\u548C\u56FD",
                "common": "\u6C11\u4E3B\u521A\u679C"
            }
        },
        "latlng": [
            0,
            25
        ],
        "landlocked": false,
        "borders": [
            "AGO",
            "BDI",
            "CAF",
            "COG",
            "RWA",
            "SSD",
            "TZA",
            "UGA",
            "ZMB"
        ],
        "area": 2344858,
        "demonyms": {
            "eng": {
                "f": "Congolese",
                "m": "Congolese"
            },
            "fra": {
                "f": "Congolaise",
                "m": "Congolais"
            }
        },
        "flag": "\uD83C\uDDE8\uD83C\uDDE9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/KfhNVn6VqdZXWu8n9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192795"
        },
        "population": 108407721,
        "gini": {
            "2012": 42.1
        },
        "fifa": "COD",
        "car": {
            "signs": [
                "CGO"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00",
            "UTC+02:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/cd.png",
            "svg": "https://flagcdn.com/cd.svg",
            "alt": "The flag of the Democratic Republic of the Congo has a sky-blue field with a yellow-edged red diagonal band that extends from the lower hoist-side corner to the upper fly-side corner of the field. A large five-pointed yellow star is situated above the diagonal band on the upper hoist side of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/cd.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/cd.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -4.32,
                15.3
            ]
        }
    },
    {
        "name": {
            "common": "Greenland",
            "official": "Greenland",
            "nativeName": {
                "kal": {
                    "official": "Kalaallit Nunaat",
                    "common": "Kalaallit Nunaat"
                }
            }
        },
        "tld": [
            ".gl"
        ],
        "cca2": "GL",
        "ccn3": "304",
        "cca3": "GRL",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "DKK": {
                "name": "krone",
                "symbol": "kr."
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "99"
            ]
        },
        "capital": [
            "Nuuk"
        ],
        "altSpellings": [
            "GL",
            "Gr\xf8nland"
        ],
        "region": "Americas",
        "subregion": "North America",
        "languages": {
            "kal": "Greenlandic"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0631\u064A\u0646\u0644\u0627\u0646\u062F",
                "common": "\u062C\u0631\u064A\u0646\u0644\u0627\u0646\u062F"
            },
            "bre": {
                "official": "Greunland",
                "common": "Greunland"
            },
            "ces": {
                "official": "Gr\xf3nsko",
                "common": "Gr\xf3nsko"
            },
            "cym": {
                "official": "Greenland",
                "common": "Greenland"
            },
            "deu": {
                "official": "Gr\xf6nland",
                "common": "Gr\xf6nland"
            },
            "est": {
                "official": "Gr\xf6\xf6nimaa",
                "common": "Gr\xf6\xf6nimaa"
            },
            "fin": {
                "official": "Gro\xf6nlanti",
                "common": "Gro\xf6nlanti"
            },
            "fra": {
                "official": "Groenland",
                "common": "Groenland"
            },
            "hrv": {
                "official": "Grenland",
                "common": "Grenland"
            },
            "hun": {
                "official": "Gr\xf6nland",
                "common": "Gr\xf6nland"
            },
            "ita": {
                "official": "Groenlandia",
                "common": "Groenlandia"
            },
            "jpn": {
                "official": "\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9",
                "common": "\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9"
            },
            "kor": {
                "official": "\uADF8\uB9B0\uB780\uB4DC",
                "common": "\uADF8\uB9B0\uB780\uB4DC"
            },
            "nld": {
                "official": "Groenland",
                "common": "Groenland"
            },
            "per": {
                "official": "\u06AF\u0631\u0648\u0626\u0646\u0644\u0646\u062F",
                "common": "\u06AF\u0631\u06CC\u0646\u0644\u0646\u062F"
            },
            "pol": {
                "official": "Grenlandia",
                "common": "Grenlandia"
            },
            "por": {
                "official": "Groenl\xe2ndia",
                "common": "Gronel\xe2ndia"
            },
            "rus": {
                "official": "\u0413\u0440\u0435\u043D\u043B\u0430\u043D\u0434\u0438\u044F",
                "common": "\u0413\u0440\u0435\u043D\u043B\u0430\u043D\u0434\u0438\u044F"
            },
            "slk": {
                "official": "Gr\xf3nsko",
                "common": "Gr\xf3nsko"
            },
            "spa": {
                "official": "Groenlandia",
                "common": "Groenlandia"
            },
            "srp": {
                "official": "\u0413\u0440\u0435\u043D\u043B\u0430\u043D\u0434",
                "common": "\u0413\u0440\u0435\u043D\u043B\u0430\u043D\u0434"
            },
            "swe": {
                "official": "Gr\xf6nland",
                "common": "Gr\xf6nland"
            },
            "tur": {
                "official": "Gr\xf6nland",
                "common": "Gr\xf6nland"
            },
            "urd": {
                "official": "\u06AF\u0631\u06CC\u0646 \u0644\u06CC\u0646\u0688",
                "common": "\u06AF\u0631\u06CC\u0646 \u0644\u06CC\u0646\u0688"
            },
            "zho": {
                "official": "\u683C\u9675\u5170",
                "common": "\u683C\u9675\u5170"
            }
        },
        "latlng": [
            72,
            -40
        ],
        "landlocked": false,
        "area": 2166086,
        "demonyms": {
            "eng": {
                "f": "Greenlandic",
                "m": "Greenlandic"
            },
            "fra": {
                "f": "Groenlandaise",
                "m": "Groenlandais"
            }
        },
        "flag": "\uD83C\uDDEC\uD83C\uDDF1",
        "maps": {
            "googleMaps": "https://goo.gl/maps/j3289UPEQXt1ceSy8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2184073"
        },
        "population": 56367,
        "car": {
            "signs": [
                "DK"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-04:00",
            "UTC-03:00",
            "UTC-01:00",
            "UTC+00:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/gl.png",
            "svg": "https://flagcdn.com/gl.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/gl.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/gl.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                64.18,
                -51.75
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Jordan",
            "official": "Hashemite Kingdom of Jordan",
            "nativeName": {
                "ara": {
                    "official": "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0623\u0631\u062F\u0646\u064A\u0629 \u0627\u0644\u0647\u0627\u0634\u0645\u064A\u0629",
                    "common": "\u0627\u0644\u0623\u0631\u062F\u0646"
                }
            }
        },
        "tld": [
            ".jo",
            "\u0627\u0644\u0627\u0631\u062F\u0646."
        ],
        "cca2": "JO",
        "ccn3": "400",
        "cca3": "JOR",
        "cioc": "JOR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "JOD": {
                "name": "Jordanian dinar",
                "symbol": "\u062F.\u0627"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "62"
            ]
        },
        "capital": [
            "Amman"
        ],
        "altSpellings": [
            "JO",
            "Hashemite Kingdom of Jordan",
            "al-Mamlakah al-Urdun\u012Byah al-H\u0101shim\u012Byah"
        ],
        "region": "Asia",
        "subregion": "Western Asia",
        "languages": {
            "ara": "Arabic"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0623\u0631\u062F\u0646\u064A\u0629 \u0627\u0644\u0647\u0627\u0634\u0645\u064A\u0629",
                "common": "\u0627\u0644\u0623\u0631\u062F\u0646"
            },
            "bre": {
                "official": "Rouantelezh hachemit Jordania",
                "common": "Jordania"
            },
            "ces": {
                "official": "Jord\xe1nsk\xe9 h\xe1\u0161imovsk\xe9 kr\xe1lovstv\xed",
                "common": "Jord\xe1nsko"
            },
            "cym": {
                "official": "Hashemite Kingdom of Jordan",
                "common": "Jordan"
            },
            "deu": {
                "official": "Haschemitisches K\xf6nigreich Jordanien",
                "common": "Jordanien"
            },
            "est": {
                "official": "Jordaania Ha\u0161imiidi Kuningriik",
                "common": "Jordaania"
            },
            "fin": {
                "official": "Jordanian ha\u0161emiittinen kunigaskunta",
                "common": "Jordania"
            },
            "fra": {
                "official": "Royaume hach\xe9mite de Jordanie",
                "common": "Jordanie"
            },
            "hrv": {
                "official": "Ha\u0161emitske Kraljevine Jordan",
                "common": "Jordan"
            },
            "hun": {
                "official": "Jord\xe1nia",
                "common": "Jord\xe1nia"
            },
            "ita": {
                "official": "Regno hascemita di Giordania",
                "common": "Giordania"
            },
            "jpn": {
                "official": "\u30E8\u30EB\u30C0\u30F3\xb7\u30CF\u30B7\u30DF\u30C6\u738B\u56FD",
                "common": "\u30E8\u30EB\u30C0\u30F3"
            },
            "kor": {
                "official": "\uC694\uB974\uB2E8 \uD558\uC2EC \uC655\uAD6D",
                "common": "\uC694\uB974\uB2E8"
            },
            "nld": {
                "official": "Hasjemitisch Koninkrijk Jordani\xeb",
                "common": "Jordani\xeb"
            },
            "per": {
                "official": "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0627\u064F\u0631\u062F\u064F\u0646 \u0647\u0627\u0634\u0645\u06CC",
                "common": "\u0627\u0631\u062F\u0646"
            },
            "pol": {
                "official": "Jorda\u0144skie Kr\xf3lestwo Haszymidzkie",
                "common": "Jordania"
            },
            "por": {
                "official": "Reino Hachemita da Jord\xe2nia",
                "common": "Jord\xe2nia"
            },
            "rus": {
                "official": "\u0418\u043E\u0440\u0434\u0430\u043D\u0441\u043A\u043E\u0433\u043E \u0425\u0430\u0448\u0438\u043C\u0438\u0442\u0441\u043A\u043E\u0433\u043E \u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u0430",
                "common": "\u0418\u043E\u0440\u0434\u0430\u043D\u0438\u044F"
            },
            "slk": {
                "official": "Jord\xe1nske h\xe1\u0161imovsk\xe9 kr\xe1\u013Eovstvo",
                "common": "Jord\xe1nsko"
            },
            "spa": {
                "official": "Reino Hachemita de Jordania",
                "common": "Jordania"
            },
            "srp": {
                "official": "\u0425\u0430\u0448\u0435\u043C\u0438\u0442\u0441\u043A\u0430 \u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0408\u043E\u0440\u0434\u0430\u043D",
                "common": "\u0408\u043E\u0440\u0434\u0430\u043D"
            },
            "swe": {
                "official": "Hashimitiska kungad\xf6met Jordanien",
                "common": "Jordanien"
            },
            "tur": {
                "official": "\xdcrd\xfcn H\xe2\u015Fimi Krall\u0131\u011F\u0131",
                "common": "\xdcrd\xfcn"
            },
            "urd": {
                "official": "\u06BE\u0627\u0634\u0645\u06CC \u0645\u0645\u0644\u06A9\u062A\u0650 \u0627\u0631\u062F\u0646",
                "common": "\u0627\u0631\u062F\u0646"
            },
            "zho": {
                "official": "\u7EA6\u65E6\u54C8\u5E0C\u59C6\u738B\u56FD",
                "common": "\u7EA6\u65E6"
            }
        },
        "latlng": [
            31,
            36
        ],
        "landlocked": false,
        "borders": [
            "IRQ",
            "ISR",
            "PSE",
            "SAU",
            "SYR"
        ],
        "area": 89342,
        "demonyms": {
            "eng": {
                "f": "Jordanian",
                "m": "Jordanian"
            },
            "fra": {
                "f": "Jordanienne",
                "m": "Jordanien"
            }
        },
        "flag": "\uD83C\uDDEF\uD83C\uDDF4",
        "maps": {
            "googleMaps": "https://goo.gl/maps/ko1dzSDKg8Gsi9A98",
            "openStreetMaps": "https://www.openstreetmap.org/relation/184818"
        },
        "population": 10203140,
        "gini": {
            "2010": 33.7
        },
        "fifa": "JOR",
        "car": {
            "signs": [
                "HKJ"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/jo.png",
            "svg": "https://flagcdn.com/jo.svg",
            "alt": "The flag of Jordan is composed of three equal horizontal bands of black, white and green, with a red isosceles triangle superimposed on the hoist side of the field. This triangle has its base on the hoist end, spans about half the width of the field and bears a small seven-pointed white star at its center."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/jo.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/jo.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                31.95,
                35.93
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Belgium",
            "official": "Kingdom of Belgium",
            "nativeName": {
                "deu": {
                    "official": "K\xf6nigreich Belgien",
                    "common": "Belgien"
                },
                "fra": {
                    "official": "Royaume de Belgique",
                    "common": "Belgique"
                },
                "nld": {
                    "official": "Koninkrijk Belgi\xeb",
                    "common": "Belgi\xeb"
                }
            }
        },
        "tld": [
            ".be"
        ],
        "cca2": "BE",
        "ccn3": "056",
        "cca3": "BEL",
        "cioc": "BEL",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "2"
            ]
        },
        "capital": [
            "Brussels"
        ],
        "altSpellings": [
            "BE",
            "Belgi\xeb",
            "Belgie",
            "Belgien",
            "Belgique",
            "Kingdom of Belgium",
            "Koninkrijk Belgi\xeb",
            "Royaume de Belgique",
            "K\xf6nigreich Belgien"
        ],
        "region": "Europe",
        "subregion": "Western Europe",
        "languages": {
            "deu": "German",
            "fra": "French",
            "nld": "Dutch"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0645\u0644\u0643\u0629 \u0628\u0644\u062C\u064A\u0643\u0627",
                "common": "\u0628\u0644\u062C\u064A\u0643\u0627"
            },
            "bre": {
                "official": "Rouantelezh Belgia",
                "common": "Belgia"
            },
            "ces": {
                "official": "Belgick\xe9 kr\xe1lovstv\xed",
                "common": "Belgie"
            },
            "cym": {
                "official": "Teyrnas Gwlad Belg",
                "common": "Gwlad Belg"
            },
            "deu": {
                "official": "K\xf6nigreich Belgien",
                "common": "Belgien"
            },
            "est": {
                "official": "Belgia Kuningriik",
                "common": "Belgia"
            },
            "fin": {
                "official": "Belgian kuningaskunta",
                "common": "Belgia"
            },
            "fra": {
                "official": "Royaume de Belgique",
                "common": "Belgique"
            },
            "hrv": {
                "official": "Kraljevina Belgija",
                "common": "Belgija"
            },
            "hun": {
                "official": "Belga Kir\xe1lys\xe1g",
                "common": "Belgium"
            },
            "ita": {
                "official": "Regno del Belgio",
                "common": "Belgio"
            },
            "jpn": {
                "official": "\u30D9\u30EB\u30AE\u30FC\u738B\u56FD",
                "common": "\u30D9\u30EB\u30AE\u30FC"
            },
            "kor": {
                "official": "\uBCA8\uAE30\uC5D0 \uC655\uAD6D",
                "common": "\uBCA8\uAE30\uC5D0"
            },
            "nld": {
                "official": "Koninkrijk Belgi\xeb",
                "common": "Belgi\xeb"
            },
            "per": {
                "official": "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0628\u0644\u0698\u06CC\u06A9",
                "common": "\u0628\u0644\u0698\u06CC\u06A9"
            },
            "pol": {
                "official": "Kr\xf3lestwo Belgii",
                "common": "Belgia"
            },
            "por": {
                "official": "Reino da B\xe9lgica",
                "common": "B\xe9lgica"
            },
            "rus": {
                "official": "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0411\u0435\u043B\u044C\u0433\u0438\u044F",
                "common": "\u0411\u0435\u043B\u044C\u0433\u0438\u044F"
            },
            "slk": {
                "official": "Belgick\xe9 kr\xe1\u013Eovstvo",
                "common": "Belgicko"
            },
            "spa": {
                "official": "Reino de B\xe9lgica",
                "common": "B\xe9lgica"
            },
            "srp": {
                "official": "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0411\u0435\u043B\u0433\u0438\u0458\u0430",
                "common": "\u0411\u0435\u043B\u0433\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Konungariket Belgien",
                "common": "Belgien"
            },
            "tur": {
                "official": "Bel\xe7ika Krall\u0131\u011F\u0131",
                "common": "Bel\u011Fika"
            },
            "urd": {
                "official": "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0628\u0644\u062C\u0626\u06CC\u0645",
                "common": "\u0628\u0644\u062C\u0626\u06CC\u0645"
            },
            "zho": {
                "official": "\u6BD4\u5229\u65F6\u738B\u56FD",
                "common": "\u6BD4\u5229\u65F6"
            }
        },
        "latlng": [
            50.83333333,
            4
        ],
        "landlocked": false,
        "borders": [
            "FRA",
            "DEU",
            "LUX",
            "NLD"
        ],
        "area": 30528,
        "demonyms": {
            "eng": {
                "f": "Belgian",
                "m": "Belgian"
            },
            "fra": {
                "f": "Belge",
                "m": "Belge"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDEA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/UQQzat85TCtPRXAL8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/52411"
        },
        "population": 11555997,
        "gini": {
            "2018": 27.2
        },
        "fifa": "BEL",
        "car": {
            "signs": [
                "B"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/be.png",
            "svg": "https://flagcdn.com/be.svg",
            "alt": "The flag of Belgium is composed of three equal vertical bands of black, yellow and red."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/be.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/be.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                50.83,
                4.33
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Switzerland",
            "official": "Swiss Confederation",
            "nativeName": {
                "fra": {
                    "official": "Conf\xe9d\xe9ration suisse",
                    "common": "Suisse"
                },
                "gsw": {
                    "official": "Schweizerische Eidgenossenschaft",
                    "common": "Schweiz"
                },
                "ita": {
                    "official": "Confederazione Svizzera",
                    "common": "Svizzera"
                },
                "roh": {
                    "official": "Confederaziun svizra",
                    "common": "Svizra"
                }
            }
        },
        "tld": [
            ".ch"
        ],
        "cca2": "CH",
        "ccn3": "756",
        "cca3": "CHE",
        "cioc": "SUI",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "CHF": {
                "name": "Swiss franc",
                "symbol": "Fr."
            }
        },
        "idd": {
            "root": "+4",
            "suffixes": [
                "1"
            ]
        },
        "capital": [
            "Bern"
        ],
        "altSpellings": [
            "CH",
            "Swiss Confederation",
            "Schweiz",
            "Suisse",
            "Svizzera",
            "Svizra"
        ],
        "region": "Europe",
        "subregion": "Western Europe",
        "languages": {
            "fra": "French",
            "gsw": "Swiss German",
            "ita": "Italian",
            "roh": "Romansh"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u0627\u062A\u062D\u0627\u062F \u0627\u0644\u0633\u0648\u064A\u0633\u0631\u064A",
                "common": "\u0633\u0648\u064A\u0633\u0631\u0627"
            },
            "bre": {
                "official": "Kengevredad Suis",
                "common": "Suis"
            },
            "ces": {
                "official": "\u0160v\xfdcarsk\xe1 konfederace",
                "common": "\u0160v\xfdcarsko"
            },
            "cym": {
                "official": "Swiss Confederation",
                "common": "Switzerland"
            },
            "deu": {
                "official": "Schweizerische Eidgenossenschaft",
                "common": "Schweiz"
            },
            "est": {
                "official": "\u0160veitsi Konf\xf6deratsioon",
                "common": "\u0160veits"
            },
            "fin": {
                "official": "Sveitsin valaliitto",
                "common": "Sveitsi"
            },
            "fra": {
                "official": "Conf\xe9d\xe9ration suisse",
                "common": "Suisse"
            },
            "hrv": {
                "official": "\u0161vicarska Konfederacija",
                "common": "\u0160vicarska"
            },
            "hun": {
                "official": "Sv\xe1jc",
                "common": "Sv\xe1jc"
            },
            "ita": {
                "official": "Confederazione svizzera",
                "common": "Svizzera"
            },
            "jpn": {
                "official": "\u30B9\u30A4\u30B9\u9023\u90A6",
                "common": "\u30B9\u30A4\u30B9"
            },
            "kor": {
                "official": "\uC2A4\uC704\uC2A4 \uC5F0\uBC29",
                "common": "\uC2A4\uC704\uC2A4"
            },
            "nld": {
                "official": "Zwitserse Confederatie",
                "common": "Zwitserland"
            },
            "per": {
                "official": "\u06A9\u0646\u0641\u062F\u0631\u0627\u0633\u06CC\u0648\u0646 \u0633\u0648\u0626\u06CC\u0633",
                "common": "\u0633\u0648\u0626\u06CC\u0633"
            },
            "pol": {
                "official": "Konfederacja Szwajcarska",
                "common": "Szwajcaria"
            },
            "por": {
                "official": "Confedera\xe7\xe3o Su\xed\xe7a",
                "common": "Su\xed\xe7a"
            },
            "rus": {
                "official": "\u0428\u0432\u0435\u0439\u0446\u0430\u0440\u0441\u043A\u0430\u044F \u041A\u043E\u043D\u0444\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044F",
                "common": "\u0428\u0432\u0435\u0439\u0446\u0430\u0440\u0438\u044F"
            },
            "slk": {
                "official": "\u0160vaj\u010Diarska konfeder\xe1cia",
                "common": "\u0160vaj\u010Diarsko"
            },
            "spa": {
                "official": "Confederaci\xf3n Suiza",
                "common": "Suiza"
            },
            "srp": {
                "official": "\u0428\u0432\u0430\u0458\u0446\u0430\u0440\u0441\u043A\u0430 \u041A\u043E\u043D\u0444\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u0458\u0430",
                "common": "\u0428\u0432\u0430\u0458\u0446\u0430\u0440\u0441\u043A\u0430"
            },
            "swe": {
                "official": "Schweiziska edsf\xf6rbundet",
                "common": "Schweiz"
            },
            "tur": {
                "official": "\u0130svi\xe7re Konfederasyonu",
                "common": "\u0130svi\xe7re"
            },
            "urd": {
                "official": "\u0633\u0648\u0626\u06CC\u0633  \u0645\u062A\u062D\u062F\u06C1",
                "common": "\u0633\u0648\u06CC\u0679\u0630\u0631\u0644\u06CC\u0646\u0688"
            },
            "zho": {
                "official": "\u745E\u58EB\u8054\u90A6",
                "common": "\u745E\u58EB"
            }
        },
        "latlng": [
            47,
            8
        ],
        "landlocked": true,
        "borders": [
            "AUT",
            "FRA",
            "ITA",
            "LIE",
            "DEU"
        ],
        "area": 41284,
        "demonyms": {
            "eng": {
                "f": "Swiss",
                "m": "Swiss"
            },
            "fra": {
                "f": "Suisse",
                "m": "Suisse"
            }
        },
        "flag": "\uD83C\uDDE8\uD83C\uDDED",
        "maps": {
            "googleMaps": "https://goo.gl/maps/uVuZcXaxSx5jLyEC9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/51701"
        },
        "population": 8654622,
        "gini": {
            "2018": 33.1
        },
        "fifa": "SUI",
        "car": {
            "signs": [
                "CH"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ch.png",
            "svg": "https://flagcdn.com/ch.svg",
            "alt": "The flag of Switzerland is square shaped. It features a white Swiss cross centered on a red field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ch.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ch.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                46.92,
                7.47
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Indonesia",
            "official": "Republic of Indonesia",
            "nativeName": {
                "ind": {
                    "official": "Republik Indonesia",
                    "common": "Indonesia"
                }
            }
        },
        "tld": [
            ".id"
        ],
        "cca2": "ID",
        "ccn3": "360",
        "cca3": "IDN",
        "cioc": "INA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "IDR": {
                "name": "Indonesian rupiah",
                "symbol": "Rp"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "2"
            ]
        },
        "capital": [
            "Jakarta"
        ],
        "altSpellings": [
            "ID",
            "Republic of Indonesia",
            "Republik Indonesia"
        ],
        "region": "Asia",
        "subregion": "South-Eastern Asia",
        "languages": {
            "ind": "Indonesian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0625\u0646\u062F\u0648\u0646\u064A\u0633\u064A\u0627",
                "common": "\u0625\u0646\u062F\u0648\u0646\u064A\u0633\u064A\u0627"
            },
            "bre": {
                "official": "Republik Indonezia",
                "common": "Indonezia"
            },
            "ces": {
                "official": "Indon\xe9sk\xe1 republika",
                "common": "Indon\xe9sie"
            },
            "cym": {
                "official": "Republic of Indonesia",
                "common": "Indonesia"
            },
            "deu": {
                "official": "Republik Indonesien",
                "common": "Indonesien"
            },
            "est": {
                "official": "Indoneesia Vabariik",
                "common": "Indoneesia"
            },
            "fin": {
                "official": "Indonesian tasavalta",
                "common": "Indonesia"
            },
            "fra": {
                "official": "R\xe9publique d'Indon\xe9sie",
                "common": "Indon\xe9sie"
            },
            "hrv": {
                "official": "Republika Indonezija",
                "common": "Indonezija"
            },
            "hun": {
                "official": "Indon\xe9z K\xf6zt\xe1rsas\xe1g",
                "common": "Indon\xe9zia"
            },
            "ita": {
                "official": "Repubblica di Indonesia",
                "common": "Indonesia"
            },
            "jpn": {
                "official": "\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2\u5171\u548C\u56FD",
                "common": "\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2"
            },
            "kor": {
                "official": "\uC778\uB3C4\uB124\uC2DC\uC544 \uACF5\uD654\uAD6D",
                "common": "\uC778\uB3C4\uB124\uC2DC\uC544"
            },
            "nld": {
                "official": "Republiek Indonesi\xeb",
                "common": "Indonesi\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0646\u062F\u0648\u0646\u0632\u06CC",
                "common": "\u0627\u0646\u062F\u0648\u0646\u0632\u06CC"
            },
            "pol": {
                "official": "Republika Indonezji",
                "common": "Indonezja"
            },
            "por": {
                "official": "Rep\xfablica da Indon\xe9sia",
                "common": "Indon\xe9sia"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u043D\u0434\u043E\u043D\u0435\u0437\u0438\u044F",
                "common": "\u0418\u043D\u0434\u043E\u043D\u0435\u0437\u0438\u044F"
            },
            "slk": {
                "official": "Indon\xe9zska republika",
                "common": "Indon\xe9zia"
            },
            "spa": {
                "official": "Rep\xfablica de Indonesia",
                "common": "Indonesia"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u043D\u0434\u043E\u043D\u0435\u0437\u0438\u0458\u0430",
                "common": "\u0418\u043D\u0434\u043E\u043D\u0435\u0437\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Indonesien",
                "common": "Indonesien"
            },
            "tur": {
                "official": "Endonezya Cumhuriyeti",
                "common": "Endonezya"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0646\u0688\u0648\u0646\u06CC\u0634\u06CC\u0627",
                "common": "\u0627\u0646\u0688\u0648\u0646\u06CC\u0634\u06CC\u0627"
            },
            "zho": {
                "official": "\u5370\u5EA6\u5C3C\u897F\u4E9A\u5171\u548C\u56FD",
                "common": "\u5370\u5EA6\u5C3C\u897F\u4E9A"
            }
        },
        "latlng": [
            -5,
            120
        ],
        "landlocked": false,
        "borders": [
            "TLS",
            "MYS",
            "PNG"
        ],
        "area": 1904569,
        "demonyms": {
            "eng": {
                "f": "Indonesian",
                "m": "Indonesian"
            },
            "fra": {
                "f": "Indon\xe9sienne",
                "m": "Indon\xe9sien"
            }
        },
        "flag": "\uD83C\uDDEE\uD83C\uDDE9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/9gfPupm5bffixiFJ6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/21335"
        },
        "population": 273523621,
        "gini": {
            "2019": 38.2
        },
        "fifa": "IDN",
        "car": {
            "signs": [
                "RI"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+07:00",
            "UTC+08:00",
            "UTC+09:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/id.png",
            "svg": "https://flagcdn.com/id.svg",
            "alt": "The flag of Indonesia is composed of two equal horizontal bands of red and white."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/id.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/id.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -6.17,
                106.82
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Lebanon",
            "official": "Lebanese Republic",
            "nativeName": {
                "ara": {
                    "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0644\u0628\u0646\u0627\u0646\u064A\u0629",
                    "common": "\u0644\u0628\u0646\u0627\u0646"
                },
                "fra": {
                    "official": "R\xe9publique libanaise",
                    "common": "Liban"
                }
            }
        },
        "tld": [
            ".lb"
        ],
        "cca2": "LB",
        "ccn3": "422",
        "cca3": "LBN",
        "cioc": "LBN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "LBP": {
                "name": "Lebanese pound",
                "symbol": "\u0644.\u0644"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "61"
            ]
        },
        "capital": [
            "Beirut"
        ],
        "altSpellings": [
            "LB",
            "Lebanese Republic",
            "Al-Jumh\u016Br\u012Byah Al-Libn\u0101n\u012Byah"
        ],
        "region": "Asia",
        "subregion": "Western Asia",
        "languages": {
            "ara": "Arabic",
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0644\u0628\u0646\u0627\u0646\u064A\u0629",
                "common": "\u0644\u0628\u0646\u0627\u0646"
            },
            "bre": {
                "official": "Republik Liban",
                "common": "Liban"
            },
            "ces": {
                "official": "Libanonsk\xe1 republika",
                "common": "Libanon"
            },
            "cym": {
                "official": "Lebanese Republic",
                "common": "Lebanon"
            },
            "deu": {
                "official": "Libanesische Republik",
                "common": "Libanon"
            },
            "est": {
                "official": "Liibanoni Vabariik",
                "common": "Liibanon"
            },
            "fin": {
                "official": "Libanonin tasavalta",
                "common": "Libanon"
            },
            "fra": {
                "official": "R\xe9publique libanaise",
                "common": "Liban"
            },
            "hrv": {
                "official": "Libanonska Republika",
                "common": "Libanon"
            },
            "hun": {
                "official": "Libanoni K\xf6zt\xe1rsas\xe1g",
                "common": "Libanon"
            },
            "ita": {
                "official": "Repubblica libanese",
                "common": "Libano"
            },
            "jpn": {
                "official": "\u30EC\u30D0\u30CE\u30F3\u5171\u548C\u56FD",
                "common": "\u30EC\u30D0\u30CE\u30F3"
            },
            "kor": {
                "official": "\uB808\uBC14\uB17C \uACF5\uD654\uAD6D",
                "common": "\uB808\uBC14\uB17C"
            },
            "nld": {
                "official": "Libanese Republiek",
                "common": "Libanon"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0644\u0628\u0646\u0627\u0646",
                "common": "\u0644\u0628\u0646\u0627\u0646"
            },
            "pol": {
                "official": "Republika Liba\u0144ska",
                "common": "Liban"
            },
            "por": {
                "official": "Rep\xfablica Libanesa",
                "common": "L\xedbano"
            },
            "rus": {
                "official": "\u041B\u0438\u0432\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u041B\u0438\u0432\u0430\u043D"
            },
            "slk": {
                "official": "Libanonsk\xe1 republika",
                "common": "Libanon"
            },
            "spa": {
                "official": "Rep\xfablica Libanesa",
                "common": "L\xedbano"
            },
            "srp": {
                "official": "\u041B\u0438\u0431\u0430\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u041B\u0438\u0431\u0430\u043D"
            },
            "swe": {
                "official": "Republiken Libanon",
                "common": "Libanon"
            },
            "tur": {
                "official": "L\xfcbnan Cumhuriyeti",
                "common": "L\xfcbnan"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0644\u0628\u0646\u0627\u0646",
                "common": "\u0644\u0628\u0646\u0627\u0646"
            },
            "zho": {
                "official": "\u9ECE\u5DF4\u5AE9\u5171\u548C\u56FD",
                "common": "\u9ECE\u5DF4\u5AE9"
            }
        },
        "latlng": [
            33.83333333,
            35.83333333
        ],
        "landlocked": false,
        "borders": [
            "ISR",
            "SYR"
        ],
        "area": 10452,
        "demonyms": {
            "eng": {
                "f": "Lebanese",
                "m": "Lebanese"
            },
            "fra": {
                "f": "Libanaise",
                "m": "Libanais"
            }
        },
        "flag": "\uD83C\uDDF1\uD83C\uDDE7",
        "maps": {
            "googleMaps": "https://goo.gl/maps/Sz5VCU8UFBqMyTdc9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/184843"
        },
        "population": 6825442,
        "gini": {
            "2011": 31.8
        },
        "fifa": "LBN",
        "car": {
            "signs": [
                "RL"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/lb.png",
            "svg": "https://flagcdn.com/lb.svg",
            "alt": "The flag of Lebanon is composed of three horizontal bands of red, white and red. The white band is twice the height of the red bands and bears a green Lebanese Cedar tree at its center."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/lb.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/lb.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                33.87,
                35.5
            ]
        },
        "postalCode": {
            "format": "#### ####|####",
            "regex": "^(\\d{4}(\\d{4})?)$"
        }
    },
    {
        "name": {
            "common": "Malaysia",
            "official": "Malaysia",
            "nativeName": {
                "eng": {
                    "official": "Malaysia",
                    "common": "Malaysia"
                },
                "msa": {
                    "official": "\u0645\u0644\u064A\u0633\u064A\u0627",
                    "common": "\u0645\u0644\u064A\u0633\u064A\u0627"
                }
            }
        },
        "tld": [
            ".my"
        ],
        "cca2": "MY",
        "ccn3": "458",
        "cca3": "MYS",
        "cioc": "MAS",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "MYR": {
                "name": "Malaysian ringgit",
                "symbol": "RM"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "0"
            ]
        },
        "capital": [
            "Kuala Lumpur"
        ],
        "altSpellings": [
            "MY"
        ],
        "region": "Asia",
        "subregion": "South-Eastern Asia",
        "languages": {
            "eng": "English",
            "msa": "Malay"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0627\u0644\u064A\u0632\u064A\u0627",
                "common": "\u0645\u0627\u0644\u064A\u0632\u064A\u0627"
            },
            "bre": {
                "official": "Malaysia",
                "common": "Malaysia"
            },
            "ces": {
                "official": "Malajsie",
                "common": "Malajsie"
            },
            "cym": {
                "official": "Malaysia",
                "common": "Malaysia"
            },
            "deu": {
                "official": "Malaysia",
                "common": "Malaysia"
            },
            "est": {
                "official": "Malaisia",
                "common": "Malaisia"
            },
            "fin": {
                "official": "Malesia",
                "common": "Malesia"
            },
            "fra": {
                "official": "F\xe9d\xe9ration de Malaisie",
                "common": "Malaisie"
            },
            "hrv": {
                "official": "Malezija",
                "common": "Malezija"
            },
            "hun": {
                "official": "Malajzia",
                "common": "Malajzia"
            },
            "ita": {
                "official": "Malaysia",
                "common": "Malesia"
            },
            "jpn": {
                "official": "\u30DE\u30EC\u30FC\u30B7\u30A2",
                "common": "\u30DE\u30EC\u30FC\u30B7\u30A2"
            },
            "kor": {
                "official": "\uB9D0\uB808\uC774\uC2DC\uC544",
                "common": "\uB9D0\uB808\uC774\uC2DC\uC544"
            },
            "nld": {
                "official": "Maleisi\xeb",
                "common": "Maleisi\xeb"
            },
            "per": {
                "official": "\u0641\u062F\u0631\u0627\u0633\u06CC\u0648\u0646 \u0645\u0627\u0644\u0632\u06CC",
                "common": "\u0645\u0627\u0644\u0632\u06CC"
            },
            "pol": {
                "official": "Malezja",
                "common": "Malezja"
            },
            "por": {
                "official": "Mal\xe1sia",
                "common": "Mal\xe1sia"
            },
            "rus": {
                "official": "\u041C\u0430\u043B\u0430\u0439\u0437\u0438\u044F",
                "common": "\u041C\u0430\u043B\u0430\u0439\u0437\u0438\u044F"
            },
            "slk": {
                "official": "Malajzia",
                "common": "Malajzia"
            },
            "spa": {
                "official": "Malasia",
                "common": "Malasia"
            },
            "srp": {
                "official": "\u041C\u0430\u043B\u0435\u0437\u0438\u0458\u0430",
                "common": "\u041C\u0430\u043B\u0435\u0437\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Malaysia",
                "common": "Malaysia"
            },
            "tur": {
                "official": "Malezya",
                "common": "Malezya"
            },
            "urd": {
                "official": "\u0645\u0644\u0627\u0626\u06CC\u0634\u06CC\u0627",
                "common": "\u0645\u0644\u0627\u0626\u06CC\u0634\u06CC\u0627"
            },
            "zho": {
                "official": "\u9A6C\u6765\u897F\u4E9A",
                "common": "\u9A6C\u6765\u897F\u4E9A"
            }
        },
        "latlng": [
            2.5,
            112.5
        ],
        "landlocked": false,
        "borders": [
            "BRN",
            "IDN",
            "THA"
        ],
        "area": 330803,
        "demonyms": {
            "eng": {
                "f": "Malaysian",
                "m": "Malaysian"
            },
            "fra": {
                "f": "Malaisienne",
                "m": "Malaisien"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDFE",
        "maps": {
            "googleMaps": "https://goo.gl/maps/qrY1PNeUXGyXDcPy6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2108121"
        },
        "population": 32365998,
        "gini": {
            "2015": 41.1
        },
        "fifa": "MAS",
        "car": {
            "signs": [
                "MAL"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+08:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/my.png",
            "svg": "https://flagcdn.com/my.svg",
            "alt": "The flag of Malaysia is composed of fourteen equal horizontal bands of red alternating with white. A blue rectangle, bearing a fly-side facing yellow crescent and a fourteen-pointed yellow star placed just outside the crescent opening, is superimposed in the canton."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/my.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/my.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                3.17,
                101.7
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Cayman Islands",
            "official": "Cayman Islands",
            "nativeName": {
                "eng": {
                    "official": "Cayman Islands",
                    "common": "Cayman Islands"
                }
            }
        },
        "tld": [
            ".ky"
        ],
        "cca2": "KY",
        "ccn3": "136",
        "cca3": "CYM",
        "cioc": "CAY",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "KYD": {
                "name": "Cayman Islands dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "345"
            ]
        },
        "capital": [
            "George Town"
        ],
        "altSpellings": [
            "KY"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0632\u0631 \u0643\u0627\u064A\u0645\u0627\u0646",
                "common": "\u062C\u0632\u0631 \u0643\u0627\u064A\u0645\u0627\u0646"
            },
            "bre": {
                "official": "Inizi Cayman",
                "common": "Inizi Cayman"
            },
            "ces": {
                "official": "Kajmansk\xe9 ostrovy",
                "common": "Kajmansk\xe9 ostrovy"
            },
            "cym": {
                "official": "Ynysoedd Cayman",
                "common": "Ynysoedd Cayman"
            },
            "deu": {
                "official": "Cayman-Inseln",
                "common": "Kaimaninseln"
            },
            "est": {
                "official": "Kaimanisaared",
                "common": "Kaimanisaared"
            },
            "fin": {
                "official": "Caymansaaret",
                "common": "Caymansaaret"
            },
            "fra": {
                "official": "\xceles Ca\xefmans",
                "common": "\xceles Ca\xefmans"
            },
            "hrv": {
                "official": "Kajmanski otoci",
                "common": "Kajmanski otoci"
            },
            "hun": {
                "official": "Kajm\xe1n-szigetek",
                "common": "Kajm\xe1n-szigetek"
            },
            "ita": {
                "official": "Isole Cayman",
                "common": "Isole Cayman"
            },
            "jpn": {
                "official": "\u30B1\u30A4\u30DE\u30F3\u8AF8\u5CF6",
                "common": "\u30B1\u30A4\u30DE\u30F3\u8AF8\u5CF6"
            },
            "kor": {
                "official": "\uCF00\uC774\uB9E8 \uC81C\uB3C4",
                "common": "\uCF00\uC774\uB9E8 \uC81C\uB3C4"
            },
            "nld": {
                "official": "Caymaneilanden",
                "common": "Caymaneilanden"
            },
            "per": {
                "official": "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u06CC\u0645\u0646",
                "common": "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u06CC\u0645\u0646"
            },
            "pol": {
                "official": "Kajmany",
                "common": "Kajmany"
            },
            "por": {
                "official": "Ilhas Cayman",
                "common": "Ilhas Caim\xe3o"
            },
            "rus": {
                "official": "\u041A\u0430\u0439\u043C\u0430\u043D\u043E\u0432\u044B \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                "common": "\u041A\u0430\u0439\u043C\u0430\u043D\u043E\u0432\u044B \u043E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            "slk": {
                "official": "Kajmanie ostrovy",
                "common": "Kajmanie ostrovy"
            },
            "spa": {
                "official": "Islas Caim\xe1n",
                "common": "Islas Caim\xe1n"
            },
            "srp": {
                "official": "\u041A\u0430\u0458\u043C\u0430\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                "common": "\u041A\u0430\u0458\u043C\u0430\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            "swe": {
                "official": "Cayman\xf6arna",
                "common": "Cayman\xf6arna"
            },
            "tur": {
                "official": "Cayman Adalar\u0131",
                "common": "Cayman Adalar\u0131"
            },
            "urd": {
                "official": "\u062C\u0632\u0627\u0626\u0631 \u06A9\u06CC\u0645\u06CC\u0646",
                "common": "\u062C\u0632\u0627\u0626\u0631 \u06A9\u06CC\u0645\u06CC\u0646"
            },
            "zho": {
                "official": "\u5F00\u66FC\u7FA4\u5C9B",
                "common": "\u5F00\u66FC\u7FA4\u5C9B"
            }
        },
        "latlng": [
            19.3133,
            -81.2546
        ],
        "landlocked": false,
        "area": 264,
        "demonyms": {
            "eng": {
                "f": "Caymanian",
                "m": "Caymanian"
            },
            "fra": {
                "f": "Ca\xefmanienne",
                "m": "Ca\xefmanien"
            }
        },
        "flag": "\uD83C\uDDF0\uD83C\uDDFE",
        "maps": {
            "googleMaps": "https://goo.gl/maps/P3ZVXX3LH63t91hL8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/7269765"
        },
        "population": 65720,
        "fifa": "CAY",
        "car": {
            "signs": [
                "GB"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-05:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ky.png",
            "svg": "https://flagcdn.com/ky.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ky.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ky.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                19.3,
                -81.38
            ]
        }
    },
    {
        "name": {
            "common": "Slovakia",
            "official": "Slovak Republic",
            "nativeName": {
                "slk": {
                    "official": "Slovensk\xe1 republika",
                    "common": "Slovensko"
                }
            }
        },
        "tld": [
            ".sk"
        ],
        "cca2": "SK",
        "ccn3": "703",
        "cca3": "SVK",
        "cioc": "SVK",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+4",
            "suffixes": [
                "21"
            ]
        },
        "capital": [
            "Bratislava"
        ],
        "altSpellings": [
            "SK",
            "Slovak Republic",
            "Slovensk\xe1 republika"
        ],
        "region": "Europe",
        "subregion": "Central Europe",
        "languages": {
            "slk": "Slovak"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u0644\u0648\u0641\u0627\u0643\u064A\u0627",
                "common": "\u0633\u0644\u0648\u0641\u0627\u0643\u064A\u0627"
            },
            "bre": {
                "official": "Republik Slovak",
                "common": "Slovakia"
            },
            "ces": {
                "official": "Slovensk\xe1 republika",
                "common": "Slovensko"
            },
            "cym": {
                "official": "Slovak Republic",
                "common": "Slovakia"
            },
            "deu": {
                "official": "Slowakische Republik",
                "common": "Slowakei"
            },
            "est": {
                "official": "Slovaki Vabariik",
                "common": "Slovakkia"
            },
            "fin": {
                "official": "Slovakian tasavalta",
                "common": "Slovakia"
            },
            "fra": {
                "official": "R\xe9publique slovaque",
                "common": "Slovaquie"
            },
            "hrv": {
                "official": "slova\u010Dka",
                "common": "Slova\u010Dka"
            },
            "hun": {
                "official": "Szlov\xe1k K\xf6zt\xe1rsas\xe1g",
                "common": "Szlov\xe1kia"
            },
            "ita": {
                "official": "Repubblica slovacca",
                "common": "Slovacchia"
            },
            "jpn": {
                "official": "\u30B9\u30ED\u30D0\u30AD\u30A2\u5171\u548C\u56FD",
                "common": "\u30B9\u30ED\u30D0\u30AD\u30A2"
            },
            "kor": {
                "official": "\uC2AC\uB85C\uBC14\uD0A4\uC544 \uACF5\uD654\uAD6D",
                "common": "\uC2AC\uB85C\uBC14\uD0A4\uC544"
            },
            "nld": {
                "official": "Slowaakse Republiek",
                "common": "Slowakije"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0648\u0627\u06A9\u06CC",
                "common": "\u0627\u0650\u0633\u0644\u064F\u0648\u0627\u06A9\u06CC"
            },
            "pol": {
                "official": "Republika S\u0142owacka",
                "common": "S\u0142owacja"
            },
            "por": {
                "official": "Rep\xfablica Eslovaca",
                "common": "Eslov\xe1quia"
            },
            "rus": {
                "official": "\u0421\u043B\u043E\u0432\u0430\u0446\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0421\u043B\u043E\u0432\u0430\u043A\u0438\u044F"
            },
            "slk": {
                "official": "Slovensk\xe1 republika",
                "common": "Slovensko"
            },
            "spa": {
                "official": "Rep\xfablica Eslovaca",
                "common": "Rep\xfablica Eslovaca"
            },
            "srp": {
                "official": "\u0421\u043B\u043E\u0432\u0430\u0447\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0421\u043B\u043E\u0432\u0430\u0447\u043A\u0430"
            },
            "swe": {
                "official": "Republiken Slovakien",
                "common": "Slovakien"
            },
            "tur": {
                "official": "Slovak Cumhuriyeti",
                "common": "Slovakya"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0644\u0648\u0648\u0627\u06A9\u06CC\u06C1",
                "common": "\u0633\u0644\u0648\u0648\u0627\u06A9\u06CC\u06C1"
            },
            "zho": {
                "official": "\u65AF\u6D1B\u4F10\u514B\u5171\u548C\u56FD",
                "common": "\u65AF\u6D1B\u4F10\u514B"
            }
        },
        "latlng": [
            48.66666666,
            19.5
        ],
        "landlocked": true,
        "borders": [
            "AUT",
            "CZE",
            "HUN",
            "POL",
            "UKR"
        ],
        "area": 49037,
        "demonyms": {
            "eng": {
                "f": "Slovak",
                "m": "Slovak"
            },
            "fra": {
                "f": "Slovaque",
                "m": "Slovaque"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDF0",
        "maps": {
            "googleMaps": "https://goo.gl/maps/uNSH2wW4bLoZVYJj7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/14296"
        },
        "population": 5458827,
        "gini": {
            "2018": 25
        },
        "fifa": "SVK",
        "car": {
            "signs": [
                "SK"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/sk.png",
            "svg": "https://flagcdn.com/sk.svg",
            "alt": "The flag of Slovakia is composed of three equal horizontal bands of white, blue and red. The coat of arms of Slovakia is superimposed at the center of the field slightly towards the hoist side."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/sk.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/sk.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                48.15,
                17.12
            ]
        },
        "postalCode": {
            "format": "###  ##",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Armenia",
            "official": "Republic of Armenia",
            "nativeName": {
                "hye": {
                    "official": "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576\u056B \u0540\u0561\u0576\u0580\u0561\u057A\u0565\u057F\u0578\u0582\u0569\u0575\u0578\u0582\u0576",
                    "common": "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576"
                }
            }
        },
        "tld": [
            ".am"
        ],
        "cca2": "AM",
        "ccn3": "051",
        "cca3": "ARM",
        "cioc": "ARM",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "AMD": {
                "name": "Armenian dram",
                "symbol": "\u058F"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "74"
            ]
        },
        "capital": [
            "Yerevan"
        ],
        "altSpellings": [
            "AM",
            "Hayastan",
            "Republic of Armenia",
            "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576\u056B \u0540\u0561\u0576\u0580\u0561\u057A\u0565\u057F\u0578\u0582\u0569\u0575\u0578\u0582\u0576"
        ],
        "region": "Asia",
        "subregion": "Western Asia",
        "languages": {
            "hye": "Armenian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0631\u0645\u064A\u0646\u064A\u0627",
                "common": "\u0623\u0631\u0645\u064A\u0646\u064A\u0627"
            },
            "bre": {
                "official": "Republik Armenia",
                "common": "Armenia"
            },
            "ces": {
                "official": "Arm\xe9nsk\xe1 republika",
                "common": "Arm\xe9nie"
            },
            "cym": {
                "official": "Gweriniaeth Armenia",
                "common": "Armenia"
            },
            "deu": {
                "official": "Republik Armenien",
                "common": "Armenien"
            },
            "est": {
                "official": "Armeenia Vabariik",
                "common": "Armeenia"
            },
            "fin": {
                "official": "Armenian tasavalta",
                "common": "Armenia"
            },
            "fra": {
                "official": "R\xe9publique d'Arm\xe9nie",
                "common": "Arm\xe9nie"
            },
            "hrv": {
                "official": "Republika Armenija",
                "common": "Armenija"
            },
            "hun": {
                "official": "\xd6rm\xe9nyorsz\xe1g",
                "common": "\xd6rm\xe9nyorsz\xe1g"
            },
            "ita": {
                "official": "Repubblica di Armenia",
                "common": "Armenia"
            },
            "jpn": {
                "official": "\u30A2\u30EB\u30E1\u30CB\u30A2\u5171\u548C\u56FD",
                "common": "\u30A2\u30EB\u30E1\u30CB\u30A2"
            },
            "kor": {
                "official": "\uC544\uB974\uBA54\uB2C8\uC544 \uACF5\uD654\uAD6D",
                "common": "\uC544\uB974\uBA54\uB2C8\uC544"
            },
            "nld": {
                "official": "Republiek Armeni\xeb",
                "common": "Armeni\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646",
                "common": "\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646"
            },
            "pol": {
                "official": "Republika Armenii",
                "common": "Armenia"
            },
            "por": {
                "official": "Rep\xfablica da Arm\xe9nia",
                "common": "Arm\xe9nia"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u0440\u043C\u0435\u043D\u0438\u044F",
                "common": "\u0410\u0440\u043C\u0435\u043D\u0438\u044F"
            },
            "slk": {
                "official": "Arm\xe9nska republika",
                "common": "Arm\xe9nsko"
            },
            "spa": {
                "official": "Rep\xfablica de Armenia",
                "common": "Armenia"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0408\u0435\u0440\u043C\u0435\u043D\u0438\u0458\u0430",
                "common": "\u0408\u0435\u0440\u043C\u0435\u043D\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Armenien",
                "common": "Armenien"
            },
            "tur": {
                "official": "Ermenistan Cumhuriyeti",
                "common": "Ermenistan"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0622\u0631\u0645\u06CC\u0646\u06CC\u0627",
                "common": "\u0622\u0631\u0645\u06CC\u0646\u06CC\u0627"
            },
            "zho": {
                "official": "\u4E9A\u7F8E\u5C3C\u4E9A\u5171\u548C\u56FD",
                "common": "\u4E9A\u7F8E\u5C3C\u4E9A"
            }
        },
        "latlng": [
            40,
            45
        ],
        "landlocked": true,
        "borders": [
            "AZE",
            "GEO",
            "IRN",
            "TUR"
        ],
        "area": 29743,
        "demonyms": {
            "eng": {
                "f": "Armenian",
                "m": "Armenian"
            },
            "fra": {
                "f": "Arm\xe9nienne",
                "m": "Arm\xe9nien"
            }
        },
        "flag": "\uD83C\uDDE6\uD83C\uDDF2",
        "maps": {
            "googleMaps": "https://goo.gl/maps/azWUtK9bUQYEyccbA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/364066"
        },
        "population": 2963234,
        "gini": {
            "2019": 29.9
        },
        "fifa": "ARM",
        "car": {
            "signs": [
                "AM"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+04:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/am.png",
            "svg": "https://flagcdn.com/am.svg",
            "alt": "The flag of Armenia is composed of three equal horizontal bands of red, blue and orange."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/am.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/am.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                40.17,
                44.5
            ]
        },
        "postalCode": {
            "format": "######",
            "regex": "^(\\d{6})$"
        }
    },
    {
        "name": {
            "common": "Christmas Island",
            "official": "Territory of Christmas Island",
            "nativeName": {
                "eng": {
                    "official": "Territory of Christmas Island",
                    "common": "Christmas Island"
                }
            }
        },
        "tld": [
            ".cx"
        ],
        "cca2": "CX",
        "ccn3": "162",
        "cca3": "CXR",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "AUD": {
                "name": "Australian dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "1"
            ]
        },
        "capital": [
            "Flying Fish Cove"
        ],
        "altSpellings": [
            "CX",
            "Territory of Christmas Island"
        ],
        "region": "Oceania",
        "subregion": "Australia and New Zealand",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0632\u064A\u0631\u0629 \u0643\u0631\u064A\u0633\u0645\u0627\u0633",
                "common": "\u062C\u0632\u064A\u0631\u0629 \u0643\u0631\u064A\u0633\u0645\u0627\u0633"
            },
            "bre": {
                "official": "Tiriad Enez Christmas",
                "common": "Enez Christmas"
            },
            "ces": {
                "official": "Teritorium V\xe1no\u010Dn\xedho ostrova",
                "common": "V\xe1no\u010Dn\xed ostrov"
            },
            "cym": {
                "official": "Tiriogaeth yr Ynys y Nadolig",
                "common": "Ynys y Nadolig"
            },
            "deu": {
                "official": "Gebiet der Weihnachtsinsel",
                "common": "Weihnachtsinsel"
            },
            "est": {
                "official": "J\xf5ulusaare ala",
                "common": "J\xf5ulusaar"
            },
            "fin": {
                "official": "Joulusaaren alue",
                "common": "Joulusaari"
            },
            "fra": {
                "official": "Territoire de l'\xeele Christmas",
                "common": "\xcele Christmas"
            },
            "hrv": {
                "official": "Teritorij Bo\u017Ei\u0107ni otok",
                "common": "Bo\u017Ei\u0107ni otok"
            },
            "hun": {
                "official": "Kar\xe1csony-sziget",
                "common": "Kar\xe1csony-sziget"
            },
            "ita": {
                "official": "Territorio di Christmas Island",
                "common": "Isola di Natale"
            },
            "jpn": {
                "official": "\u30AF\u30EA\u30B9\u30DE\u30B9\u5CF6\u306E\u9818\u571F",
                "common": "\u30AF\u30EA\u30B9\u30DE\u30B9\u5CF6"
            },
            "kor": {
                "official": "\uD06C\uB9AC\uC2A4\uB9C8\uC2A4 \uC12C",
                "common": "\uD06C\uB9AC\uC2A4\uB9C8\uC2A4 \uC12C"
            },
            "nld": {
                "official": "Grondgebied van Christmas Island",
                "common": "Christmaseiland"
            },
            "per": {
                "official": "\u062C\u0632\u06CC\u0631\u0647\u0654 \u06A9\u0631\u06CC\u0633\u0645\u0633",
                "common": "\u062C\u0632\u06CC\u0631\u0647\u0654 \u06A9\u0631\u06CC\u0633\u0645\u0633"
            },
            "pol": {
                "official": "Wyspa Bo\u017Cego Narodzenia",
                "common": "Wyspa Bo\u017Cego Narodzenia"
            },
            "por": {
                "official": "Territ\xf3rio da Ilha Christmas",
                "common": "Ilha do Natal"
            },
            "rus": {
                "official": "\u0422\u0435\u0440\u0440\u0438\u0442\u043E\u0440\u0438\u044F \u043E\u0441\u0442\u0440\u043E\u0432\u0430 \u0420\u043E\u0436\u0434\u0435\u0441\u0442\u0432\u0430",
                "common": "\u041E\u0441\u0442\u0440\u043E\u0432 \u0420\u043E\u0436\u0434\u0435\u0441\u0442\u0432\u0430"
            },
            "slk": {
                "official": "Terit\xf3rium Viano\u010Dn\xe9ho ostrova",
                "common": "Viano\u010Dn\xfa ostrov"
            },
            "spa": {
                "official": "Territorio de la Isla de Navidad",
                "common": "Isla de Navidad"
            },
            "srp": {
                "official": "\u0411\u043E\u0436\u0438\u045B\u043D\u043E \u041E\u0441\u0442\u0440\u0432\u043E",
                "common": "\u0411\u043E\u0436\u0438\u045B\u043D\u043E \u041E\u0441\u0442\u0440\u0432\u043E"
            },
            "swe": {
                "official": "Jul\xf6n",
                "common": "Jul\xf6n"
            },
            "tur": {
                "official": "Christmas Adas\u0131",
                "common": "Christmas Adas\u0131"
            },
            "urd": {
                "official": "\u0631\u06CC\u0627\u0633\u062A\u0650 \u062C\u0632\u06CC\u0631\u06C1 \u06A9\u0631\u0633\u0645\u0633",
                "common": "\u062C\u0632\u06CC\u0631\u06C1 \u06A9\u0631\u0633\u0645\u0633"
            },
            "zho": {
                "official": "\u5723\u8BDE\u5C9B",
                "common": "\u5723\u8BDE\u5C9B"
            }
        },
        "latlng": [
            -10.5,
            105.66666666
        ],
        "landlocked": false,
        "area": 135,
        "demonyms": {
            "eng": {
                "f": "Christmas Islander",
                "m": "Christmas Islander"
            }
        },
        "flag": "\uD83C\uDDE8\uD83C\uDDFD",
        "maps": {
            "googleMaps": "https://goo.gl/maps/ZC17hHsQZpShN5wk9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/6365444"
        },
        "population": 2072,
        "car": {
            "signs": [
                "AUS"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+07:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/cx.png",
            "svg": "https://flagcdn.com/cx.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/cx.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/cx.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -10.42,
                105.68
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Mongolia",
            "official": "Mongolia",
            "nativeName": {
                "mon": {
                    "official": "\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441",
                    "common": "\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441"
                }
            }
        },
        "tld": [
            ".mn"
        ],
        "cca2": "MN",
        "ccn3": "496",
        "cca3": "MNG",
        "cioc": "MGL",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "MNT": {
                "name": "Mongolian t\xf6gr\xf6g",
                "symbol": "\u20AE"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "76"
            ]
        },
        "capital": [
            "Ulan Bator"
        ],
        "altSpellings": [
            "MN"
        ],
        "region": "Asia",
        "subregion": "Eastern Asia",
        "languages": {
            "mon": "Mongolian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u0646\u063A\u0648\u0644\u064A\u0627",
                "common": "\u0645\u0646\u063A\u0648\u0644\u064A\u0627"
            },
            "bre": {
                "official": "Mongolia",
                "common": "Mongolia"
            },
            "ces": {
                "official": "St\xe1t Mongolsko",
                "common": "Mongolsko"
            },
            "cym": {
                "official": "Mongolia",
                "common": "Mongolia"
            },
            "deu": {
                "official": "Mongolei",
                "common": "Mongolei"
            },
            "est": {
                "official": "Mongoolia",
                "common": "Mongoolia"
            },
            "fin": {
                "official": "Mongolian tasavalta",
                "common": "Mongolia"
            },
            "fra": {
                "official": "Mongolie",
                "common": "Mongolie"
            },
            "hrv": {
                "official": "Mongolija",
                "common": "Mongolija"
            },
            "hun": {
                "official": "Mong\xf3lia",
                "common": "Mong\xf3lia"
            },
            "ita": {
                "official": "Mongolia",
                "common": "Mongolia"
            },
            "jpn": {
                "official": "\u30E2\u30F3\u30B4\u30EB",
                "common": "\u30E2\u30F3\u30B4\u30EB"
            },
            "kor": {
                "official": "\uBABD\uACE8",
                "common": "\uBABD\uACE8\uAD6D"
            },
            "nld": {
                "official": "Mongoli\xeb",
                "common": "Mongoli\xeb"
            },
            "per": {
                "official": "\u0645\u063A\u0648\u0644\u0633\u062A\u0627\u0646",
                "common": "\u0645\u063A\u0648\u0644\u0633\u062A\u0627\u0646"
            },
            "pol": {
                "official": "Mongolia",
                "common": "Mongolia"
            },
            "por": {
                "official": "Mong\xf3lia",
                "common": "Mong\xf3lia"
            },
            "rus": {
                "official": "\u041C\u043E\u043D\u0433\u043E\u043B\u0438\u044F",
                "common": "\u041C\u043E\u043D\u0433\u043E\u043B\u0438\u044F"
            },
            "slk": {
                "official": "Mongolsko",
                "common": "Mongolsko"
            },
            "spa": {
                "official": "Mongolia",
                "common": "Mongolia"
            },
            "srp": {
                "official": "\u041C\u043E\u043D\u0433\u043E\u043B\u0438\u0458\u0430",
                "common": "\u041C\u043E\u043D\u0433\u043E\u043B\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Mongoliet",
                "common": "Mongoliet"
            },
            "tur": {
                "official": "Mo\u011Folistan",
                "common": "Mo\u011Folistan"
            },
            "urd": {
                "official": "\u0645\u0646\u06AF\u0648\u0644\u06CC\u0627",
                "common": "\u0645\u0646\u06AF\u0648\u0644\u06CC\u0627"
            },
            "zho": {
                "official": "\u8499\u53E4",
                "common": "\u8499\u53E4"
            }
        },
        "latlng": [
            46,
            105
        ],
        "landlocked": true,
        "borders": [
            "CHN",
            "RUS"
        ],
        "area": 1564110,
        "demonyms": {
            "eng": {
                "f": "Mongolian",
                "m": "Mongolian"
            },
            "fra": {
                "f": "Mongole",
                "m": "Mongol"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDF3",
        "maps": {
            "googleMaps": "https://goo.gl/maps/A1X7bMCKThBDNjzH6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/161033"
        },
        "population": 3278292,
        "gini": {
            "2018": 32.7
        },
        "fifa": "MNG",
        "car": {
            "signs": [
                "MGL"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+07:00",
            "UTC+08:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/mn.png",
            "svg": "https://flagcdn.com/mn.svg",
            "alt": "The flag of Mongolia is composed of three equal vertical bands of red, blue and red, with the national emblem \u2014 the Soyombo \u2014 in gold centered in the hoist-side red band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/mn.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/mn.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                47.92,
                106.91
            ]
        },
        "postalCode": {
            "format": "######",
            "regex": "^(\\d{6})$"
        }
    },
    {
        "name": {
            "common": "Saint Pierre and Miquelon",
            "official": "Saint Pierre and Miquelon",
            "nativeName": {
                "fra": {
                    "official": "Collectivit\xe9 territoriale de Saint-Pierre-et-Miquelon",
                    "common": "Saint-Pierre-et-Miquelon"
                }
            }
        },
        "tld": [
            ".pm"
        ],
        "cca2": "PM",
        "ccn3": "666",
        "cca3": "SPM",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "08"
            ]
        },
        "capital": [
            "Saint-Pierre"
        ],
        "altSpellings": [
            "PM",
            "Collectivit\xe9 territoriale de Saint-Pierre-et-Miquelon"
        ],
        "region": "Americas",
        "subregion": "North America",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u0633\u0627\u0646 \u0628\u064A\u064A\u0631 \u0648\u0645\u064A\u0643\u0644\u0648\u0646",
                "common": "\u0633\u0627\u0646 \u0628\u064A\u064A\u0631 \u0648\u0645\u064A\u0643\u0644\u0648\u0646"
            },
            "bre": {
                "official": "Sant-P\xear-ha-Mikelon",
                "common": "Sant-P\xear-ha-Mikelon"
            },
            "ces": {
                "official": "Saint-Pierre a Miquelon",
                "common": "Saint-Pierre a Miquelon"
            },
            "cym": {
                "official": "Saint Pierre and Miquelon",
                "common": "Saint Pierre and Miquelon"
            },
            "deu": {
                "official": "St. Pierre und Miquelon",
                "common": "St. Pierre und Miquelon"
            },
            "est": {
                "official": "Saint-Pierre\u2019i ja Miqueloni territoriaal\xfchendus",
                "common": "Saint-Pierre ja Miquelon"
            },
            "fin": {
                "official": "Saint-Pierre ja Miquelon",
                "common": "Saint-Pierre ja Miquelon"
            },
            "fra": {
                "official": "Saint-Pierre-et-Miquelon",
                "common": "Saint-Pierre-et-Miquelon"
            },
            "hrv": {
                "official": "Saint Pierre i Miquelon",
                "common": "Sveti Petar i Mikelon"
            },
            "hun": {
                "official": "Saint-Pierre \xe9s Miquelon",
                "common": "Saint-Pierre \xe9s Miquelon"
            },
            "ita": {
                "official": "Saint Pierre e Miquelon",
                "common": "Saint-Pierre e Miquelon"
            },
            "jpn": {
                "official": "\u30B5\u30F3\u30D4\u30A8\u30FC\u30EB\u5CF6\xb7\u30DF\u30AF\u30ED\u30F3\u5CF6",
                "common": "\u30B5\u30F3\u30D4\u30A8\u30FC\u30EB\u5CF6\u30FB\u30DF\u30AF\u30ED\u30F3\u5CF6"
            },
            "kor": {
                "official": "\uC0DD\uD53C\uC5D0\uB974 \uBBF8\uD074\uB871",
                "common": "\uC0DD\uD53C\uC5D0\uB974 \uBBF8\uD074\uB871"
            },
            "nld": {
                "official": "Saint-Pierre en Miquelon",
                "common": "Saint Pierre en Miquelon"
            },
            "per": {
                "official": "\u0633\u0646-\u067E\u06CC\u0631-\u0627-\u0645\u06CC\u06A9\u0644\u0648\u0646",
                "common": "\u0633\u0646-\u067E\u06CC\u0650\u0631 \u0648 \u0645\u06CC\u06A9\u0644\u064F\u0646"
            },
            "pol": {
                "official": "Saint-Pierre i Miquelon",
                "common": "Saint-Pierre i Miquelon"
            },
            "por": {
                "official": "Saint Pierre e Miquelon",
                "common": "Saint-Pierre e Miquelon"
            },
            "rus": {
                "official": "\u0421\u0435\u043D-\u041F\u044C\u0435\u0440 \u0438 \u041C\u0438\u043A\u0435\u043B\u043E\u043D",
                "common": "\u0421\u0435\u043D-\u041F\u044C\u0435\u0440 \u0438 \u041C\u0438\u043A\u0435\u043B\u043E\u043D"
            },
            "slk": {
                "official": "Ostrovy Saint Pierre a Miquelon",
                "common": "Saint Pierre a Miquelon"
            },
            "spa": {
                "official": "San Pedro y Miquel\xf3n",
                "common": "San Pedro y Miquel\xf3n"
            },
            "srp": {
                "official": "\u0421\u0435\u043D \u041F\u0458\u0435\u0440 \u0438 \u041C\u0438\u043A\u0435\u043B\u043E\u043D",
                "common": "\u0421\u0435\u043D \u041F\u0458\u0435\u0440 \u0438 \u041C\u0438\u043A\u0435\u043B\u043E\u043D"
            },
            "swe": {
                "official": "Saint-Pierre och Miquelon",
                "common": "Saint-Pierre och Miquelon"
            },
            "tur": {
                "official": "Saint Pierre ve Miquelon",
                "common": "Saint Pierre ve Miquelon"
            },
            "urd": {
                "official": "\u0633\u06CC\u0646\u0679 \u067E\u06CC\u0626\u0631 \u0648 \u0645\u06CC\u06A9\u06CC\u0644\u0648\u0646",
                "common": "\u0633\u06CC\u0646\u0679 \u067E\u06CC\u0626\u0631 \u0648 \u0645\u06CC\u06A9\u06CC\u0644\u0648\u0646"
            },
            "zho": {
                "official": "\u5723\u76AE\u57C3\u5C14\u548C\u5BC6\u514B\u9686",
                "common": "\u5723\u76AE\u57C3\u5C14\u548C\u5BC6\u514B\u9686"
            }
        },
        "latlng": [
            46.83333333,
            -56.33333333
        ],
        "landlocked": false,
        "area": 242,
        "demonyms": {
            "eng": {
                "f": "Saint-Pierrais, Miquelonnais",
                "m": "Saint-Pierrais, Miquelonnais"
            },
            "fra": {
                "f": "Saint-Pierraise, Miquelonaise",
                "m": "Saint-Pierrais, Miquelonais"
            }
        },
        "flag": "\uD83C\uDDF5\uD83C\uDDF2",
        "maps": {
            "googleMaps": "https://goo.gl/maps/bUM8Yc8pA8ghyhmt6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/3406826"
        },
        "population": 6069,
        "car": {
            "signs": [
                "F"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-03:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/pm.png",
            "svg": "https://flagcdn.com/pm.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                46.77,
                -56.18
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(97500)$"
        }
    },
    {
        "name": {
            "common": "Japan",
            "official": "Japan",
            "nativeName": {
                "jpn": {
                    "official": "\u65E5\u672C",
                    "common": "\u65E5\u672C"
                }
            }
        },
        "tld": [
            ".jp",
            ".\u307F\u3093\u306A"
        ],
        "cca2": "JP",
        "ccn3": "392",
        "cca3": "JPN",
        "cioc": "JPN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "JPY": {
                "name": "Japanese yen",
                "symbol": "\xa5"
            }
        },
        "idd": {
            "root": "+8",
            "suffixes": [
                "1"
            ]
        },
        "capital": [
            "Tokyo"
        ],
        "altSpellings": [
            "JP",
            "Nippon",
            "Nihon"
        ],
        "region": "Asia",
        "subregion": "Eastern Asia",
        "languages": {
            "jpn": "Japanese"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u064A\u0627\u0628\u0627\u0646",
                "common": "\u0627\u0644\u064A\u0627\u0628\u0627\u0646"
            },
            "bre": {
                "official": "Japan",
                "common": "Japan"
            },
            "ces": {
                "official": "Japonsko",
                "common": "Japonsko"
            },
            "cym": {
                "official": "Japan",
                "common": "Japan"
            },
            "deu": {
                "official": "Japan",
                "common": "Japan"
            },
            "est": {
                "official": "Jaapan",
                "common": "Jaapan"
            },
            "fin": {
                "official": "Japani",
                "common": "Japani"
            },
            "fra": {
                "official": "Japon",
                "common": "Japon"
            },
            "hrv": {
                "official": "Japan",
                "common": "Japan"
            },
            "hun": {
                "official": "Jap\xe1n",
                "common": "Jap\xe1n"
            },
            "ita": {
                "official": "Giappone",
                "common": "Giappone"
            },
            "jpn": {
                "official": "\u65E5\u672C",
                "common": "\u65E5\u672C"
            },
            "kor": {
                "official": "\uC77C\uBCF8\uAD6D",
                "common": "\uC77C\uBCF8"
            },
            "nld": {
                "official": "Japan",
                "common": "Japan"
            },
            "per": {
                "official": "\u0698\u0627\u067E\u0646",
                "common": "\u0698\u0627\u067E\u0646"
            },
            "pol": {
                "official": "Japonia",
                "common": "Japonia"
            },
            "por": {
                "official": "Jap\xe3o",
                "common": "Jap\xe3o"
            },
            "rus": {
                "official": "\u042F\u043F\u043E\u043D\u0438\u044F",
                "common": "\u042F\u043F\u043E\u043D\u0438\u044F"
            },
            "slk": {
                "official": "Japonsko",
                "common": "Japonsko"
            },
            "spa": {
                "official": "Jap\xf3n",
                "common": "Jap\xf3n"
            },
            "srp": {
                "official": "\u0408\u0430\u043F\u0430\u043D",
                "common": "\u0408\u0430\u043F\u0430\u043D"
            },
            "swe": {
                "official": "Japan",
                "common": "Japan"
            },
            "tur": {
                "official": "Japonya",
                "common": "Japonya"
            },
            "urd": {
                "official": "\u062C\u0627\u067E\u0627\u0646",
                "common": "\u062C\u0627\u067E\u0627\u0646"
            },
            "zho": {
                "official": "\u65E5\u672C\u56FD",
                "common": "\u65E5\u672C"
            }
        },
        "latlng": [
            36,
            138
        ],
        "landlocked": false,
        "area": 377930,
        "demonyms": {
            "eng": {
                "f": "Japanese",
                "m": "Japanese"
            },
            "fra": {
                "f": "Japonaise",
                "m": "Japonais"
            }
        },
        "flag": "\uD83C\uDDEF\uD83C\uDDF5",
        "maps": {
            "googleMaps": "https://goo.gl/maps/NGTLSCSrA8bMrvnX9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/382313"
        },
        "population": 125836021,
        "gini": {
            "2013": 32.9
        },
        "fifa": "JPN",
        "car": {
            "signs": [
                "J"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+09:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/jp.png",
            "svg": "https://flagcdn.com/jp.svg",
            "alt": "The flag of Japan features a crimson-red circle at the center of a white field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/jp.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/jp.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                35.68,
                139.75
            ]
        },
        "postalCode": {
            "format": "###-####",
            "regex": "^(\\d{7})$"
        }
    },
    {
        "name": {
            "common": "South Africa",
            "official": "Republic of South Africa",
            "nativeName": {
                "afr": {
                    "official": "Republiek van Suid-Afrika",
                    "common": "South Africa"
                },
                "eng": {
                    "official": "Republic of South Africa",
                    "common": "South Africa"
                },
                "nbl": {
                    "official": "IRiphabliki yeSewula Afrika",
                    "common": "Sewula Afrika"
                },
                "nso": {
                    "official": "Rephaboliki ya Afrika-Borwa ",
                    "common": "Afrika-Borwa"
                },
                "sot": {
                    "official": "Rephaboliki ya Afrika Borwa",
                    "common": "Afrika Borwa"
                },
                "ssw": {
                    "official": "IRiphabhulikhi yeNingizimu Afrika",
                    "common": "Ningizimu Afrika"
                },
                "tsn": {
                    "official": "Rephaboliki ya Aforika Borwa",
                    "common": "Aforika Borwa"
                },
                "tso": {
                    "official": "Riphabliki ra Afrika Dzonga",
                    "common": "Afrika Dzonga"
                },
                "ven": {
                    "official": "Riphabu\u1E3Diki ya Afurika Tshipembe",
                    "common": "Afurika Tshipembe"
                },
                "xho": {
                    "official": "IRiphabliki yaseMzantsi Afrika",
                    "common": "Mzantsi Afrika"
                },
                "zul": {
                    "official": "IRiphabliki yaseNingizimu Afrika",
                    "common": "Ningizimu Afrika"
                }
            }
        },
        "tld": [
            ".za"
        ],
        "cca2": "ZA",
        "ccn3": "710",
        "cca3": "ZAF",
        "cioc": "RSA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "ZAR": {
                "name": "South African rand",
                "symbol": "R"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "7"
            ]
        },
        "capital": [
            "Pretoria",
            "Bloemfontein",
            "Cape Town"
        ],
        "altSpellings": [
            "ZA",
            "RSA",
            "Suid-Afrika",
            "Republic of South Africa"
        ],
        "region": "Africa",
        "subregion": "Southern Africa",
        "languages": {
            "afr": "Afrikaans",
            "eng": "English",
            "nbl": "Southern Ndebele",
            "nso": "Northern Sotho",
            "sot": "Southern Sotho",
            "ssw": "Swazi",
            "tsn": "Tswana",
            "tso": "Tsonga",
            "ven": "Venda",
            "xho": "Xhosa",
            "zul": "Zulu"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062C\u0646\u0648\u0628 \u0623\u0641\u0631\u064A\u0642\u064A\u0627",
                "common": "\u062C\u0646\u0648\u0628 \u0623\u0641\u0631\u064A\u0642\u064A\u0627"
            },
            "bre": {
                "official": "Republik Suafrika",
                "common": "Suafrika"
            },
            "ces": {
                "official": "Jihoafrick\xe1 republika",
                "common": "Jihoafrick\xe1 republika"
            },
            "cym": {
                "official": "Republic of South Africa",
                "common": "South Africa"
            },
            "deu": {
                "official": "Republik S\xfcdafrika",
                "common": "S\xfcdafrika"
            },
            "est": {
                "official": "L\xf5una-Aafrika Vabariik",
                "common": "L\xf5una-Aafrika Vabariik"
            },
            "fin": {
                "official": "Etel\xe4-Afrikan tasavalta",
                "common": "Etel\xe4-Afrikka"
            },
            "fra": {
                "official": "R\xe9publique d'Afrique du Sud",
                "common": "Afrique du Sud"
            },
            "hrv": {
                "official": "Ju\u017Enoafri\u010Dka Republika",
                "common": "Ju\u017Ena Afrika"
            },
            "hun": {
                "official": "D\xe9l-afrikai K\xf6zt\xe1rsas\xe1g",
                "common": "D\xe9l-afrikai K\xf6zt\xe1rsas\xe1g"
            },
            "ita": {
                "official": "Repubblica del Sud Africa",
                "common": "Sud Africa"
            },
            "jpn": {
                "official": "\u5357\u30A2\u30D5\u30EA\u30AB\u5171\u548C\u56FD",
                "common": "\u5357\u30A2\u30D5\u30EA\u30AB"
            },
            "kor": {
                "official": "\uB0A8\uC544\uD504\uB9AC\uCE74 \uACF5\uD654\uAD6D",
                "common": "\uB0A8\uC544\uD504\uB9AC\uCE74"
            },
            "nld": {
                "official": "Republiek Zuid-Afrika",
                "common": "Zuid-Afrika"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0622\u0641\u0631\u06CC\u0642\u0627\u06CC \u062C\u0646\u0648\u0628\u06CC",
                "common": "\u0622\u0641\u0631\u06CC\u0642\u0627\u06CC \u062C\u0646\u0648\u0628\u06CC"
            },
            "pol": {
                "official": "Republika Po\u0142udniowej Afryki",
                "common": "Po\u0142udniowa Afryka"
            },
            "por": {
                "official": "Rep\xfablica da \xc1frica do Sul",
                "common": "\xc1frica do Sul"
            },
            "rus": {
                "official": "\u042E\u0436\u043D\u043E-\u0410\u0444\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u042E\u0436\u043D\u0430\u044F \u0410\u0444\u0440\u0438\u043A\u0430"
            },
            "slk": {
                "official": "Juhoafrick\xe1 republika",
                "common": "Ju\u017En\xe1 Afrika"
            },
            "spa": {
                "official": "Rep\xfablica de Sud\xe1frica",
                "common": "Sud\xe1frica"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0408\u0443\u0436\u043D\u0430 \u0410\u0444\u0440\u0438\u043A\u0430",
                "common": "\u0408\u0443\u0436\u043D\u043E\u0430\u0444\u0440\u0438\u0447\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430"
            },
            "swe": {
                "official": "Republiken Sydafrika",
                "common": "Sydafrika"
            },
            "tur": {
                "official": "G\xfcney Afrika Cumhuriyeti",
                "common": "G\xfcney Afrika"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062C\u0646\u0648\u0628\u06CC \u0627\u0641\u0631\u06CC\u0642\u0627",
                "common": "\u062C\u0646\u0648\u0628\u06CC \u0627\u0641\u0631\u06CC\u0642\u0627"
            },
            "zho": {
                "official": "\u5357\u975E\u5171\u548C\u56FD",
                "common": "\u5357\u975E"
            }
        },
        "latlng": [
            -29,
            24
        ],
        "landlocked": false,
        "borders": [
            "BWA",
            "LSO",
            "MOZ",
            "NAM",
            "SWZ",
            "ZWE"
        ],
        "area": 1221037,
        "demonyms": {
            "eng": {
                "f": "South African",
                "m": "South African"
            },
            "fra": {
                "f": "Sud-africaine",
                "m": "Sud-africain"
            }
        },
        "flag": "\uD83C\uDDFF\uD83C\uDDE6",
        "maps": {
            "googleMaps": "https://goo.gl/maps/CLCZ1R8Uz1KpYhRv6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/87565"
        },
        "population": 59308690,
        "gini": {
            "2014": 63
        },
        "fifa": "RSA",
        "car": {
            "signs": [
                "ZA"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/za.png",
            "svg": "https://flagcdn.com/za.svg",
            "alt": "The flag of South Africa is composed of two equal horizontal bands of red and blue, with a yellow-edged black isosceles triangle superimposed on the hoist side of the field. This triangle has its base centered on the hoist end, spans about two-fifth the width and two-third the height of the field, and is enclosed on its sides by the arms of a white-edged green horizontally oriented Y-shaped band which extends along the boundary of the red and blue bands to the fly end of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/za.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/za.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -25.7,
                28.22
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Philippines",
            "official": "Republic of the Philippines",
            "nativeName": {
                "eng": {
                    "official": "Republic of the Philippines",
                    "common": "Philippines"
                },
                "fil": {
                    "official": "Republic of the Philippines",
                    "common": "Pilipinas"
                }
            }
        },
        "tld": [
            ".ph"
        ],
        "cca2": "PH",
        "ccn3": "608",
        "cca3": "PHL",
        "cioc": "PHI",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "PHP": {
                "name": "Philippine peso",
                "symbol": "\u20B1"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "3"
            ]
        },
        "capital": [
            "Manila"
        ],
        "altSpellings": [
            "PH",
            "Republic of the Philippines",
            "Rep\xfablika ng Pilipinas"
        ],
        "region": "Asia",
        "subregion": "South-Eastern Asia",
        "languages": {
            "eng": "English",
            "fil": "Filipino"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0641\u0644\u0628\u064A\u0646",
                "common": "\u0627\u0644\u0641\u0644\u0628\u064A\u0646"
            },
            "bre": {
                "official": "Republik Filipinez",
                "common": "Filipinez"
            },
            "ces": {
                "official": "Filip\xednsk\xe1 republika",
                "common": "Filip\xedny"
            },
            "cym": {
                "official": "Republic of the Philippines",
                "common": "Philippines"
            },
            "deu": {
                "official": "Republik der Philippinen",
                "common": "Philippinen"
            },
            "est": {
                "official": "Filipiini Vabariik",
                "common": "Filipiinid"
            },
            "fin": {
                "official": "Filippiinien tasavalta",
                "common": "Filippiinit"
            },
            "fra": {
                "official": "R\xe9publique des Philippines",
                "common": "Philippines"
            },
            "hrv": {
                "official": "Republika Filipini",
                "common": "Filipini"
            },
            "hun": {
                "official": "F\xfcl\xf6p-szigeteki K\xf6zt\xe1rsas\xe1g",
                "common": "F\xfcl\xf6p-szigetek"
            },
            "ita": {
                "official": "Repubblica delle Filippine",
                "common": "Filippine"
            },
            "jpn": {
                "official": "\u30D5\u30A3\u30EA\u30D4\u30F3\u5171\u548C\u56FD",
                "common": "\u30D5\u30A3\u30EA\u30D4\u30F3"
            },
            "kor": {
                "official": "\uD544\uB9AC\uD540 \uACF5\uD654\uAD6D",
                "common": "\uD544\uB9AC\uD540"
            },
            "nld": {
                "official": "Republiek der Filipijnen",
                "common": "Filipijnen"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0641\u06CC\u0644\u06CC\u067E\u06CC\u0646",
                "common": "\u0641\u06CC\u0644\u06CC\u067E\u06CC\u0646"
            },
            "pol": {
                "official": "Republika Filipin",
                "common": "Filipiny"
            },
            "por": {
                "official": "Rep\xfablica das Filipinas",
                "common": "Filipinas"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0424\u0438\u043B\u0438\u043F\u043F\u0438\u043D\u044B",
                "common": "\u0424\u0438\u043B\u0438\u043F\u043F\u0438\u043D\u044B"
            },
            "slk": {
                "official": "Filip\xednska republika",
                "common": "Filip\xedny"
            },
            "spa": {
                "official": "Rep\xfablica de las Filipinas",
                "common": "Filipinas"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0424\u0438\u043B\u0438\u043F\u0438\u043D\u0438",
                "common": "\u0424\u0438\u043B\u0438\u043F\u0438\u043D\u0438"
            },
            "swe": {
                "official": "Republiken Filippinerna",
                "common": "Filippinerna"
            },
            "tur": {
                "official": "Filipinler Cumhuriyeti",
                "common": "Filipinler"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0641\u0644\u067E\u0627\u0626\u0646",
                "common": "\u0641\u0644\u067E\u0627\u0626\u0646"
            },
            "zho": {
                "official": "\u83F2\u5F8B\u5BBE\u5171\u548C\u56FD",
                "common": "\u83F2\u5F8B\u5BBE"
            }
        },
        "latlng": [
            13,
            122
        ],
        "landlocked": false,
        "area": 342353,
        "demonyms": {
            "eng": {
                "f": "Filipino",
                "m": "Filipino"
            },
            "fra": {
                "f": "Philippine",
                "m": "Philippin"
            }
        },
        "flag": "\uD83C\uDDF5\uD83C\uDDED",
        "maps": {
            "googleMaps": "https://goo.gl/maps/k8T2fb5VMUfsWFX6A",
            "openStreetMaps": "https://www.openstreetmap.org/relation/443174"
        },
        "population": 109581085,
        "gini": {
            "2018": 42.3
        },
        "fifa": "PHI",
        "car": {
            "signs": [
                "RP"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+08:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ph.png",
            "svg": "https://flagcdn.com/ph.svg",
            "alt": "The flag of Philippines is composed of two equal horizontal bands of blue and red, with a white equilateral triangle superimposed on the hoist side of the field. This triangle has its base on the hoist end, spans about two-fifth the width of the field and bears a central golden-yellow sun with eight rays and a five-pointed golden-yellow star at each vertex."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ph.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ph.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                14.6,
                120.97
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Micronesia",
            "official": "Federated States of Micronesia",
            "nativeName": {
                "eng": {
                    "official": "Federated States of Micronesia",
                    "common": "Micronesia"
                }
            }
        },
        "tld": [
            ".fm"
        ],
        "cca2": "FM",
        "ccn3": "583",
        "cca3": "FSM",
        "cioc": "FSM",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "91"
            ]
        },
        "capital": [
            "Palikir"
        ],
        "altSpellings": [
            "FM",
            "Federated States of Micronesia",
            "Micronesia, Federated States of"
        ],
        "region": "Oceania",
        "subregion": "Micronesia",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u0648\u0644\u0627\u064A\u0627\u062A \u0645\u064A\u0643\u0631\u0648\u0646\u064A\u0633\u064A\u0627 \u0627\u0644\u0645\u062A\u062D\u062F\u0629",
                "common": "\u0645\u064A\u0643\u0631\u0648\u0646\u064A\u0633\u064A\u0627"
            },
            "bre": {
                "official": "Stado\xf9 Kevreet Mikronezia",
                "common": "Mikronezia"
            },
            "ces": {
                "official": "Federativn\xed st\xe1ty Mikron\xe9sie",
                "common": "Mikron\xe9sie"
            },
            "cym": {
                "official": "Federated States of Micronesia",
                "common": "Micronesia"
            },
            "deu": {
                "official": "F\xf6derierte Staaten von Mikronesien",
                "common": "Mikronesien"
            },
            "est": {
                "official": "Mikroneesia Liiduriigid",
                "common": "Mikroneesia"
            },
            "fin": {
                "official": "Mikronesian liittovaltio",
                "common": "Mikronesia"
            },
            "fra": {
                "official": "\xc9tats f\xe9d\xe9r\xe9s de Micron\xe9sie",
                "common": "Micron\xe9sie"
            },
            "hrv": {
                "official": "Savezne Dr\u017Eave Mikronezije",
                "common": "Mikronezija"
            },
            "hun": {
                "official": "Mikron\xe9ziai Sz\xf6vets\xe9gi \xc1llamok",
                "common": "Mikron\xe9ziai Sz\xf6vets\xe9gi \xc1llamok"
            },
            "ita": {
                "official": "Stati federati di Micronesia",
                "common": "Micronesia"
            },
            "jpn": {
                "official": "\u30DF\u30AF\u30ED\u30CD\u30B7\u30A2\u9023\u90A6",
                "common": "\u30DF\u30AF\u30ED\u30CD\u30B7\u30A2\u9023\u90A6"
            },
            "kor": {
                "official": "\uBBF8\uD06C\uB85C\uB124\uC2DC\uC544 \uC5F0\uBC29",
                "common": "\uBBF8\uD06C\uB85C\uB124\uC2DC\uC544"
            },
            "nld": {
                "official": "Federale Staten van Micronesia",
                "common": "Micronesi\xeb"
            },
            "per": {
                "official": "\u0627\u06CC\u0627\u0644\u0627\u062A \u0641\u062F\u0631\u0627\u0644 \u0645\u06CC\u06A9\u0631\u0648\u0646\u0632\u06CC",
                "common": "\u0645\u06CC\u06A9\u0631\u0648\u0646\u0632\u06CC"
            },
            "pol": {
                "official": "Sfederowane Stany Mikronezji",
                "common": "Mikronezja"
            },
            "por": {
                "official": "Estados Federados da Micron\xe9sia",
                "common": "Micron\xe9sia"
            },
            "rus": {
                "official": "\u0424\u0435\u0434\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u044B\u0435 \u0428\u0442\u0430\u0442\u044B \u041C\u0438\u043A\u0440\u043E\u043D\u0435\u0437\u0438\u0438",
                "common": "\u0424\u0435\u0434\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u044B\u0435 \u0428\u0442\u0430\u0442\u044B \u041C\u0438\u043A\u0440\u043E\u043D\u0435\u0437\u0438\u0438"
            },
            "slk": {
                "official": "Mikron\xe9zske federat\xedvne \u0161t\xe1ty",
                "common": "Mikron\xe9zia"
            },
            "spa": {
                "official": "Estados Federados de Micronesia",
                "common": "Micronesia"
            },
            "srp": {
                "official": "\u0421\u0430\u0432\u0435\u0437 \u0414\u0440\u0436\u0430\u0432\u0430 \u041C\u0438\u043A\u0440\u043E\u043D\u0435\u0437\u0438\u0458\u0435",
                "common": "\u041C\u0438\u043A\u0440\u043E\u043D\u0435\u0437\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Mikronesiska federationen",
                "common": "Mikronesiska federationen"
            },
            "tur": {
                "official": "Mikronezya Federal Devletleri",
                "common": "Mikronezya"
            },
            "urd": {
                "official": "\u0631\u06CC\u0627\u0633\u062A\u06C1\u0627\u0626\u06D2 \u0648\u0641\u0627\u0642\u06CC\u06C1 \u0645\u0627\u0626\u06A9\u0631\u0648\u0646\u06CC\u0634\u06CC\u0627",
                "common": "\u0645\u0627\u0626\u06A9\u0631\u0648\u0646\u06CC\u0634\u06CC\u0627"
            },
            "zho": {
                "official": "\u5BC6\u514B\u7F57\u5C3C\u897F\u4E9A\u8054\u90A6",
                "common": "\u5BC6\u514B\u7F57\u5C3C\u897F\u4E9A"
            }
        },
        "latlng": [
            6.91666666,
            158.25
        ],
        "landlocked": false,
        "area": 702,
        "demonyms": {
            "eng": {
                "f": "Micronesian",
                "m": "Micronesian"
            },
            "fra": {
                "f": "Micron\xe9sienne",
                "m": "Micron\xe9sien"
            }
        },
        "flag": "\uD83C\uDDEB\uD83C\uDDF2",
        "maps": {
            "googleMaps": "https://goo.gl/maps/LLcnofC5LxZsJXTo8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/571802"
        },
        "population": 115021,
        "gini": {
            "2013": 40.1
        },
        "car": {
            "signs": [
                "FSM"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+10:00",
            "UTC+11:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/fm.png",
            "svg": "https://flagcdn.com/fm.svg",
            "alt": "The flag of Micronesia has a light blue field, at the center of which are four five-pointed white stars arranged in the shape of a diamond."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/fm.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/fm.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                6.92,
                158.15
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Germany",
            "official": "Federal Republic of Germany",
            "nativeName": {
                "deu": {
                    "official": "Bundesrepublik Deutschland",
                    "common": "Deutschland"
                }
            }
        },
        "tld": [
            ".de"
        ],
        "cca2": "DE",
        "ccn3": "276",
        "cca3": "DEU",
        "cioc": "GER",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+4",
            "suffixes": [
                "9"
            ]
        },
        "capital": [
            "Berlin"
        ],
        "altSpellings": [
            "DE",
            "Federal Republic of Germany",
            "Bundesrepublik Deutschland"
        ],
        "region": "Europe",
        "subregion": "Western Europe",
        "languages": {
            "deu": "German"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0644\u0645\u0627\u0646\u064A\u0627 \u0627\u0644\u0627\u062A\u062D\u0627\u062F\u064A\u0629",
                "common": "\u0623\u0644\u0645\u0627\u0646\u064A\u0627"
            },
            "bre": {
                "official": "Republik Kevreadel Alamagn",
                "common": "Alamagn"
            },
            "ces": {
                "official": "Spolkov\xe1 republika N\u011Bmecko",
                "common": "N\u011Bmecko"
            },
            "cym": {
                "official": "Federal Republic of Germany",
                "common": "Germany"
            },
            "deu": {
                "official": "Bundesrepublik Deutschland",
                "common": "Deutschland"
            },
            "est": {
                "official": "Saksamaa Liitvabariik",
                "common": "Saksamaa"
            },
            "fin": {
                "official": "Saksan liittotasavalta",
                "common": "Saksa"
            },
            "fra": {
                "official": "R\xe9publique f\xe9d\xe9rale d'Allemagne",
                "common": "Allemagne"
            },
            "hrv": {
                "official": "Njema\u010Dka Federativna Republika",
                "common": "Njema\u010Dka"
            },
            "hun": {
                "official": "N\xe9met Sz\xf6vets\xe9gi K\xf6zt\xe1rsas\xe1g",
                "common": "N\xe9metorsz\xe1g"
            },
            "ita": {
                "official": "Repubblica federale di Germania",
                "common": "Germania"
            },
            "jpn": {
                "official": "\u30C9\u30A4\u30C4\u9023\u90A6\u5171\u548C\u56FD",
                "common": "\u30C9\u30A4\u30C4"
            },
            "kor": {
                "official": "\uB3C5\uC77C \uC5F0\uBC29 \uACF5\uD654\uAD6D",
                "common": "\uB3C5\uC77C"
            },
            "nld": {
                "official": "Bondsrepubliek Duitsland",
                "common": "Duitsland"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0641\u062F\u0631\u0627\u0644 \u0622\u0644\u0645\u0627\u0646",
                "common": "\u0622\u0644\u0645\u0627\u0646"
            },
            "pol": {
                "official": "Republika Federalna Niemiec",
                "common": "Niemcy"
            },
            "por": {
                "official": "Rep\xfablica Federal da Alemanha",
                "common": "Alemanha"
            },
            "rus": {
                "official": "\u0424\u0435\u0434\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0435\u0440\u043C\u0430\u043D\u0438\u044F",
                "common": "\u0413\u0435\u0440\u043C\u0430\u043D\u0438\u044F"
            },
            "slk": {
                "official": "Nemeck\xe1 spolkov\xe1 republika",
                "common": "Nemecko"
            },
            "spa": {
                "official": "Rep\xfablica Federal de Alemania",
                "common": "Alemania"
            },
            "srp": {
                "official": "\u0421\u0430\u0432\u0435\u0437\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0435\u043C\u0430\u0447\u043A\u0430",
                "common": "\u041D\u0435\u043C\u0430\u0447\u043A\u0430"
            },
            "swe": {
                "official": "F\xf6rbundsrepubliken Tyskland",
                "common": "Tyskland"
            },
            "tur": {
                "official": "Almanya Federal Cumhuriyeti",
                "common": "Almanya"
            },
            "urd": {
                "official": "\u0648\u0641\u0627\u0642\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062C\u0631\u0645\u0646\u06CC",
                "common": "\u062C\u0631\u0645\u0646\u06CC"
            },
            "zho": {
                "official": "\u5FB7\u610F\u5FD7\u8054\u90A6\u5171\u548C\u56FD",
                "common": "\u5FB7\u56FD"
            }
        },
        "latlng": [
            51,
            9
        ],
        "landlocked": false,
        "borders": [
            "AUT",
            "BEL",
            "CZE",
            "DNK",
            "FRA",
            "LUX",
            "NLD",
            "POL",
            "CHE"
        ],
        "area": 357114,
        "demonyms": {
            "eng": {
                "f": "German",
                "m": "German"
            },
            "fra": {
                "f": "Allemande",
                "m": "Allemand"
            }
        },
        "flag": "\uD83C\uDDE9\uD83C\uDDEA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/mD9FBMq1nvXUBrkv6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/51477"
        },
        "population": 83240525,
        "gini": {
            "2016": 31.9
        },
        "fifa": "GER",
        "car": {
            "signs": [
                "DY"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/de.png",
            "svg": "https://flagcdn.com/de.svg",
            "alt": "The flag of Germany is composed of three equal horizontal bands of black, red and gold."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/de.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/de.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                52.52,
                13.4
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Latvia",
            "official": "Republic of Latvia",
            "nativeName": {
                "lav": {
                    "official": "Latvijas Republikas",
                    "common": "Latvija"
                }
            }
        },
        "tld": [
            ".lv"
        ],
        "cca2": "LV",
        "ccn3": "428",
        "cca3": "LVA",
        "cioc": "LAT",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "71"
            ]
        },
        "capital": [
            "Riga"
        ],
        "altSpellings": [
            "LV",
            "Republic of Latvia",
            "Latvijas Republika"
        ],
        "region": "Europe",
        "subregion": "Northern Europe",
        "languages": {
            "lav": "Latvian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0644\u0627\u062A\u0641\u064A\u0627",
                "common": "\u0644\u0627\u062A\u0641\u064A\u0627"
            },
            "bre": {
                "official": "Republik Latvia",
                "common": "Latvia"
            },
            "ces": {
                "official": "Loty\u0161sk\xe1 republika",
                "common": "Loty\u0161sko"
            },
            "cym": {
                "official": "Republic of Latvia",
                "common": "Latvia"
            },
            "deu": {
                "official": "Republik Lettland",
                "common": "Lettland"
            },
            "est": {
                "official": "L\xe4ti Vabariik",
                "common": "L\xe4ti"
            },
            "fin": {
                "official": "Latvian tasavalta",
                "common": "Latvia"
            },
            "fra": {
                "official": "R\xe9publique de Lettonie",
                "common": "Lettonie"
            },
            "hrv": {
                "official": "Republika Latvija",
                "common": "Latvija"
            },
            "hun": {
                "official": "Lett K\xf6zt\xe1rsas\xe1g",
                "common": "Lettorsz\xe1g"
            },
            "ita": {
                "official": "Repubblica di Lettonia",
                "common": "Lettonia"
            },
            "jpn": {
                "official": "\u30E9\u30C8\u30D3\u30A2\u5171\u548C\u56FD",
                "common": "\u30E9\u30C8\u30D3\u30A2"
            },
            "kor": {
                "official": "\uB77C\uD2B8\uBE44\uC544 \uACF5\uD654\uAD6D",
                "common": "\uB77C\uD2B8\uBE44\uC544"
            },
            "nld": {
                "official": "Republiek Letland",
                "common": "Letland"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0644\u062A\u0648\u0646\u06CC",
                "common": "\u0644\u062A\u0648\u0646\u06CC"
            },
            "pol": {
                "official": "Republika \u0141otewska",
                "common": "\u0141otwa"
            },
            "por": {
                "official": "Rep\xfablica da Let\xf3nia",
                "common": "Let\xf3nia"
            },
            "rus": {
                "official": "\u041B\u0430\u0442\u0432\u0438\u0439\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u041B\u0430\u0442\u0432\u0438\u044F"
            },
            "slk": {
                "official": "Loty\u0161sk\xe1 republika",
                "common": "Loty\u0161sko"
            },
            "spa": {
                "official": "Rep\xfablica de Letonia",
                "common": "Letonia"
            },
            "srp": {
                "official": "\u041B\u0435\u0442\u043E\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u041B\u0435\u0442\u043E\u043D\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Lettland",
                "common": "Lettland"
            },
            "tur": {
                "official": "Letonya Cumhuriyeti",
                "common": "Letonya"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0644\u0679\u0648\u06CC\u0627",
                "common": "\u0644\u0679\u0648\u06CC\u0627"
            },
            "zho": {
                "official": "\u62C9\u8131\u7EF4\u4E9A\u5171\u548C\u56FD",
                "common": "\u62C9\u8131\u7EF4\u4E9A"
            }
        },
        "latlng": [
            57,
            25
        ],
        "landlocked": false,
        "borders": [
            "BLR",
            "EST",
            "LTU",
            "RUS"
        ],
        "area": 64559,
        "demonyms": {
            "eng": {
                "f": "Latvian",
                "m": "Latvian"
            },
            "fra": {
                "f": "Lettone",
                "m": "Letton"
            }
        },
        "flag": "\uD83C\uDDF1\uD83C\uDDFB",
        "maps": {
            "googleMaps": "https://goo.gl/maps/iQpUkH7ghq31ZtXe9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/72594"
        },
        "population": 1901548,
        "gini": {
            "2018": 35.1
        },
        "fifa": "LVA",
        "car": {
            "signs": [
                "LV"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/lv.png",
            "svg": "https://flagcdn.com/lv.svg",
            "alt": "The flag of Latvia has a carmine-red field with a thin white horizontal band across the middle of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/lv.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/lv.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                56.95,
                24.1
            ]
        },
        "postalCode": {
            "format": "LV-####",
            "regex": "^(?:LV)*(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Jamaica",
            "official": "Jamaica",
            "nativeName": {
                "eng": {
                    "official": "Jamaica",
                    "common": "Jamaica"
                },
                "jam": {
                    "official": "Jamaica",
                    "common": "Jamaica"
                }
            }
        },
        "tld": [
            ".jm"
        ],
        "cca2": "JM",
        "ccn3": "388",
        "cca3": "JAM",
        "cioc": "JAM",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "JMD": {
                "name": "Jamaican dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "876"
            ]
        },
        "capital": [
            "Kingston"
        ],
        "altSpellings": [
            "JM"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English",
            "jam": "Jamaican Patois"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0627\u0645\u0627\u064A\u0643\u0627",
                "common": "\u062C\u0627\u0645\u0627\u064A\u0643\u0627"
            },
            "bre": {
                "official": "Jamaika",
                "common": "Jamaika"
            },
            "ces": {
                "official": "Jamajka",
                "common": "Jamajka"
            },
            "cym": {
                "official": "Jamaica",
                "common": "Jamaica"
            },
            "deu": {
                "official": "Jamaika",
                "common": "Jamaika"
            },
            "est": {
                "official": "Jamaica",
                "common": "Jamaica"
            },
            "fin": {
                "official": "Jamaika",
                "common": "Jamaika"
            },
            "fra": {
                "official": "Jama\xefque",
                "common": "Jama\xefque"
            },
            "hrv": {
                "official": "Jamajka",
                "common": "Jamajka"
            },
            "hun": {
                "official": "Jamaica",
                "common": "Jamaica"
            },
            "ita": {
                "official": "Giamaica",
                "common": "Giamaica"
            },
            "jpn": {
                "official": "\u30B8\u30E3\u30DE\u30A4\u30AB",
                "common": "\u30B8\u30E3\u30DE\u30A4\u30AB"
            },
            "kor": {
                "official": "\uC790\uBA54\uC774\uCE74",
                "common": "\uC790\uBA54\uC774\uCE74"
            },
            "nld": {
                "official": "Jamaica",
                "common": "Jamaica"
            },
            "per": {
                "official": "\u062C\u0627\u0645\u0627\u0626\u06CC\u06A9\u0627",
                "common": "\u062C\u0627\u0645\u0627\u0626\u06CC\u06A9\u0627"
            },
            "pol": {
                "official": "Jamajka",
                "common": "Jamajka"
            },
            "por": {
                "official": "Jamaica",
                "common": "Jamaica"
            },
            "rus": {
                "official": "\u042F\u043C\u0430\u0439\u043A\u0430",
                "common": "\u042F\u043C\u0430\u0439\u043A\u0430"
            },
            "slk": {
                "official": "Jamajka",
                "common": "Jamajka"
            },
            "spa": {
                "official": "Jamaica",
                "common": "Jamaica"
            },
            "srp": {
                "official": "\u0408\u0430\u043C\u0430\u0458\u043A\u0430",
                "common": "\u0408\u0430\u043C\u0430\u0458\u043A\u0430"
            },
            "swe": {
                "official": "Jamaica",
                "common": "Jamaica"
            },
            "tur": {
                "official": "Jamaika",
                "common": "Jamaika"
            },
            "urd": {
                "official": "\u062C\u0645\u06CC\u06A9\u0627",
                "common": "\u062C\u0645\u06CC\u06A9\u0627"
            },
            "zho": {
                "official": "\u7259\u4E70\u52A0",
                "common": "\u7259\u4E70\u52A0"
            }
        },
        "latlng": [
            18.25,
            -77.5
        ],
        "landlocked": false,
        "area": 10991,
        "demonyms": {
            "eng": {
                "f": "Jamaican",
                "m": "Jamaican"
            },
            "fra": {
                "f": "Jama\xefcaine",
                "m": "Jama\xefcain"
            }
        },
        "flag": "\uD83C\uDDEF\uD83C\uDDF2",
        "maps": {
            "googleMaps": "https://goo.gl/maps/Z8mQ6jxnRQKFwJy9A",
            "openStreetMaps": "https://www.openstreetmap.org/relation/555017"
        },
        "population": 2961161,
        "gini": {
            "2004": 45.5
        },
        "fifa": "JAM",
        "car": {
            "signs": [
                "JA"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-05:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/jm.png",
            "svg": "https://flagcdn.com/jm.svg",
            "alt": "The flag of Jamaica is divided by a gold diagonal cross into four alternating triangular areas of green at the top and bottom, and black on the hoist and fly sides"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/jm.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/jm.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                17.99702,
                -76.79358
            ]
        }
    },
    {
        "name": {
            "common": "Macau",
            "official": "Macao Special Administrative Region of the People's Republic of China",
            "nativeName": {
                "por": {
                    "official": "Regi\xe3o Administrativa Especial de Macau da Rep\xfablica Popular da China",
                    "common": "Macau"
                },
                "zho": {
                    "official": "\u4E2D\u534E\u4EBA\u6C11\u5171\u548C\u56FD\u6FB3\u95E8\u7279\u522B\u884C\u653F\u533A",
                    "common": "\u6FB3\u95E8"
                }
            }
        },
        "tld": [
            ".mo"
        ],
        "cca2": "MO",
        "ccn3": "446",
        "cca3": "MAC",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "MOP": {
                "name": "Macanese pataca",
                "symbol": "P"
            }
        },
        "idd": {
            "root": "+8",
            "suffixes": [
                "53"
            ]
        },
        "altSpellings": [
            "MO",
            "\u6FB3\u95E8",
            "Macao",
            "Macao Special Administrative Region of the People's Republic of China",
            "\u4E2D\u83EF\u4EBA\u6C11\u5171\u548C\u570B\u6FB3\u9580\u7279\u5225\u884C\u653F\u5340",
            "Regi\xe3o Administrativa Especial de Macau da Rep\xfablica Popular da China"
        ],
        "region": "Asia",
        "subregion": "Eastern Asia",
        "languages": {
            "por": "Portuguese",
            "zho": "Chinese"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0646\u0637\u0642\u0629 \u0645\u0627\u0643\u0627\u0648 \u0627\u0644\u0625\u062F\u0627\u0631\u064A\u0629 \u0627\u0644\u062A\u0627\u0628\u0639\u0629 \u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0635\u064A\u0646 \u0627\u0644\u0634\u0639\u0628\u064A\u0629",
                "common": "\u0645\u0627\u0643\u0627\u0648"
            },
            "bre": {
                "official": "Rannvro velestradurel arbennik Makao eus Republik pobl Sina",
                "common": "Makao"
            },
            "ces": {
                "official": "Zvl\xe1\u0161tn\xed spr\xe1vn\xed oblast \u010C\xednsk\xe9 lidov\xe9 republiky Macao",
                "common": "Macao"
            },
            "cym": {
                "official": "Macao Special Administrative Region of the People's Republic of China",
                "common": "Macau"
            },
            "deu": {
                "official": "Sonderverwaltungsregion Macau der Volksrepublik China",
                "common": "Macao"
            },
            "est": {
                "official": "Macau erihalduspiirkond",
                "common": "Macau"
            },
            "fin": {
                "official": "Macaon Kiinan kansantasavallan erityishallintoalue",
                "common": "Macao"
            },
            "fra": {
                "official": "R\xe9gion administrative sp\xe9ciale de Macao de la R\xe9publique populaire de Chine",
                "common": "Macao"
            },
            "hrv": {
                "official": "Makao Posebnog upravnog podru\u010DjaNarodne Republike Kine",
                "common": "Makao"
            },
            "hun": {
                "official": "Maka\xf3",
                "common": "Maka\xf3"
            },
            "ita": {
                "official": "Macao Regione amministrativa speciale della Repubblica Popolare Cinese",
                "common": "Macao"
            },
            "jpn": {
                "official": "\u4E2D\u83EF\u4EBA\u6C11\u5171\u548C\u56FD\u30DE\u30AB\u30AA\u7279\u5225\u884C\u653F\u533A",
                "common": "\u30DE\u30AB\u30AA"
            },
            "kor": {
                "official": "\uC911\uD654\uC778\uBBFC\uACF5\uD654\uAD6D \uB9C8\uCE74\uC624 \uD2B9\uBCC4\uD589\uC815\uAD6C",
                "common": "\uB9C8\uCE74\uC624"
            },
            "nld": {
                "official": "Speciale Administratieve Regio Macau van de Volksrepubliek China",
                "common": "Macao"
            },
            "per": {
                "official": "\u0645\u0627\u06A9\u0627\u0626\u0648",
                "common": "\u0645\u0627\u06A9\u0627\u0626\u0648"
            },
            "pol": {
                "official": "Specjalny Region Administracyjny Chi\u0144skiej Republiki Ludowej Makau",
                "common": "Makau"
            },
            "por": {
                "official": "Macau Regi\xe3o Administrativa Especial da Rep\xfablica Popular da China",
                "common": "Macau"
            },
            "rus": {
                "official": "\u0421\u043F\u0435\u0446\u0438\u0430\u043B\u044C\u043D\u044B\u0439 \u0430\u0434\u043C\u0438\u043D\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043D\u044B\u0439 \u0440\u0430\u0439\u043E\u043D \u041C\u0430\u043A\u0430\u043E \u041A\u0438\u0442\u0430\u0439\u0441\u043A\u043E\u0439 \u041D\u0430\u0440\u043E\u0434\u043D\u043E\u0439 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0438 \u041A\u0438\u0442\u0430\u0439",
                "common": "\u041C\u0430\u043A\u0430\u043E"
            },
            "slk": {
                "official": "Macao, \u0160peci\xe0lna administrat\xedvna oblas\u0166",
                "common": "Macao"
            },
            "spa": {
                "official": "Macao, Regi\xf3n Administrativa Especial de la Rep\xfablica Popular China",
                "common": "Macao"
            },
            "srp": {
                "official": "\u041C\u0430\u043A\u0430\u043E \u0441\u043F\u0435\u0446\u0438\u0458\u0430\u043B\u043D\u0430 \u0430\u0434\u043C\u0438\u043D\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043D\u0430 \u043E\u0431\u043B\u0430\u0441\u0442 \u041D\u0430\u0440\u043E\u0434\u043D\u0435 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0435 \u041A\u0438\u043D\u0435",
                "common": "\u041C\u0430\u043A\u0430\u043E"
            },
            "swe": {
                "official": "Macao",
                "common": "Macao"
            },
            "tur": {
                "official": "\xc7in Halk Cumhuriyeti Makao \xd6zel \u0130dari B\xf6lgesi",
                "common": "Makao"
            },
            "urd": {
                "official": "\u0645\u06A9\u0627\u0624 \u0639\u0648\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0686\u06CC\u0646 \u06A9\u0627 \u062E\u0635\u0648\u0635\u06CC \u0627\u0646\u062A\u0638\u0627\u0645\u06CC \u0639\u0644\u0627\u0642\u06C1",
                "common": "\u0645\u06A9\u0627\u0624"
            }
        },
        "latlng": [
            22.16666666,
            113.55
        ],
        "landlocked": false,
        "borders": [
            "CHN"
        ],
        "area": 30,
        "demonyms": {
            "eng": {
                "f": "Macanese",
                "m": "Macanese"
            },
            "fra": {
                "f": "Macanaise",
                "m": "Macanais"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDF4",
        "maps": {
            "googleMaps": "https://goo.gl/maps/whymRdk3dZFfAAs4A",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1867188"
        },
        "population": 649342,
        "fifa": "MAC",
        "car": {
            "signs": [
                "MO"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+08:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/mo.png",
            "svg": "https://flagcdn.com/mo.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/mo.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/mo.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {}
    },
    {
        "name": {
            "common": "Nauru",
            "official": "Republic of Nauru",
            "nativeName": {
                "eng": {
                    "official": "Republic of Nauru",
                    "common": "Nauru"
                },
                "nau": {
                    "official": "Republic of Nauru",
                    "common": "Nauru"
                }
            }
        },
        "tld": [
            ".nr"
        ],
        "cca2": "NR",
        "ccn3": "520",
        "cca3": "NRU",
        "cioc": "NRU",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "AUD": {
                "name": "Australian dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "74"
            ]
        },
        "capital": [
            "Yaren"
        ],
        "altSpellings": [
            "NR",
            "Naoero",
            "Pleasant Island",
            "Republic of Nauru",
            "Ripublik Naoero"
        ],
        "region": "Oceania",
        "subregion": "Micronesia",
        "languages": {
            "eng": "English",
            "nau": "Nauru"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0646\u0627\u0648\u0631\u0648",
                "common": "\u0646\u0627\u0648\u0631\u0648"
            },
            "bre": {
                "official": "Republik Nauru",
                "common": "Nauru"
            },
            "ces": {
                "official": "Republika Nauru",
                "common": "Nauru"
            },
            "cym": {
                "official": "Republic of Nauru",
                "common": "Nauru"
            },
            "deu": {
                "official": "Republik Nauru",
                "common": "Nauru"
            },
            "est": {
                "official": "Nauru Vabariik",
                "common": "Nauru"
            },
            "fin": {
                "official": "Naurun tasavalta",
                "common": "Nauru"
            },
            "fra": {
                "official": "R\xe9publique de Nauru",
                "common": "Nauru"
            },
            "hrv": {
                "official": "Republika Nauru",
                "common": "Nauru"
            },
            "hun": {
                "official": "Naurui K\xf6zt\xe1rsas\xe1g",
                "common": "Nauru"
            },
            "ita": {
                "official": "Repubblica di Nauru",
                "common": "Nauru"
            },
            "jpn": {
                "official": "\u30CA\u30A6\u30EB\u5171\u548C\u56FD",
                "common": "\u30CA\u30A6\u30EB"
            },
            "kor": {
                "official": "\uB098\uC6B0\uB8E8 \uACF5\uD654\uAD6D",
                "common": "\uB098\uC6B0\uB8E8"
            },
            "nld": {
                "official": "Republiek Nauru",
                "common": "Nauru"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0646\u0627\u0626\u0648\u0631\u0648",
                "common": "\u0646\u0627\u0626\u0648\u0631\u0648"
            },
            "pol": {
                "official": "Republika Nauru",
                "common": "Nauru"
            },
            "por": {
                "official": "Rep\xfablica de Nauru",
                "common": "Nauru"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0430\u0443\u0440\u0443",
                "common": "\u041D\u0430\u0443\u0440\u0443"
            },
            "slk": {
                "official": "Naursk\xe1 republika",
                "common": "Nauru"
            },
            "spa": {
                "official": "Rep\xfablica de Nauru",
                "common": "Nauru"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0430\u0443\u0440\u0443",
                "common": "\u041D\u0430\u0443\u0440\u0443"
            },
            "swe": {
                "official": "Republiken Nauru",
                "common": "Nauru"
            },
            "tur": {
                "official": "Nauru Cumhuriyeti",
                "common": "Nauru"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0646\u0627\u0648\u0631\u0648",
                "common": "\u0646\u0627\u0648\u0631\u0648"
            },
            "zho": {
                "official": "\u7459\u9C81\u5171\u548C\u56FD",
                "common": "\u7459\u9C81"
            }
        },
        "latlng": [
            -0.53333333,
            166.91666666
        ],
        "landlocked": false,
        "area": 21,
        "demonyms": {
            "eng": {
                "f": "Nauruan",
                "m": "Nauruan"
            },
            "fra": {
                "f": "Nauruane",
                "m": "Nauruan"
            }
        },
        "flag": "\uD83C\uDDF3\uD83C\uDDF7",
        "maps": {
            "googleMaps": "https://goo.gl/maps/kyAGw6XEJgjSMsTK7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/571804"
        },
        "population": 10834,
        "gini": {
            "2012": 34.8
        },
        "car": {
            "signs": [
                "NAU"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+12:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/nr.png",
            "svg": "https://flagcdn.com/nr.svg",
            "alt": "The flag of Nauru has a dark blue field with a thin yellow horizontal band across the center and a large white twelve-pointed star beneath the horizontal band on the hoist side of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/nr.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/nr.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -0.55,
                166.92
            ]
        }
    },
    {
        "name": {
            "common": "Faroe Islands",
            "official": "Faroe Islands",
            "nativeName": {
                "dan": {
                    "official": "F\xe6r\xf8erne",
                    "common": "F\xe6r\xf8erne"
                },
                "fao": {
                    "official": "F\xf8royar",
                    "common": "F\xf8royar"
                }
            }
        },
        "tld": [
            ".fo"
        ],
        "cca2": "FO",
        "ccn3": "234",
        "cca3": "FRO",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "DKK": {
                "name": "Danish krone",
                "symbol": "kr"
            },
            "FOK": {
                "name": "Faroese kr\xf3na",
                "symbol": "kr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "98"
            ]
        },
        "capital": [
            "T\xf3rshavn"
        ],
        "altSpellings": [
            "FO",
            "F\xf8royar",
            "F\xe6r\xf8erne"
        ],
        "region": "Europe",
        "subregion": "Northern Europe",
        "languages": {
            "dan": "Danish",
            "fao": "Faroese"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0632\u0631 \u0641\u0627\u0631\u0648",
                "common": "\u062C\u0632\u0631 \u0641\u0627\u0631\u0648"
            },
            "bre": {
                "official": "Inizi Faero",
                "common": "Inizi Faero"
            },
            "ces": {
                "official": "Faersk\xe9 ostrovy",
                "common": "Faersk\xe9 ostrovy"
            },
            "cym": {
                "official": "Faroe Islands",
                "common": "Faroe Islands"
            },
            "deu": {
                "official": "F\xe4r\xf6er",
                "common": "F\xe4r\xf6er-Inseln"
            },
            "est": {
                "official": "F\xe4\xe4ri saared",
                "common": "F\xe4\xe4ri saared"
            },
            "fin": {
                "official": "F\xe4rsaaret",
                "common": "F\xe4rsaaret"
            },
            "fra": {
                "official": "\xceles F\xe9ro\xe9",
                "common": "\xceles F\xe9ro\xe9"
            },
            "hrv": {
                "official": "Farski Otoci",
                "common": "Farski Otoci"
            },
            "hun": {
                "official": "Fer\xf6er",
                "common": "Fer\xf6er"
            },
            "ita": {
                "official": "Isole Faroe",
                "common": "Isole Far Oer"
            },
            "jpn": {
                "official": "\u30D5\u30A7\u30ED\u30FC\u8AF8\u5CF6",
                "common": "\u30D5\u30A7\u30ED\u30FC\u8AF8\u5CF6"
            },
            "kor": {
                "official": "\uD398\uB85C \uC81C\uB3C4",
                "common": "\uD398\uB85C \uC81C\uB3C4"
            },
            "nld": {
                "official": "Faer\xf6er",
                "common": "Faer\xf6er"
            },
            "per": {
                "official": "\u062C\u0632\u0627\u06CC\u0631 \u0641\u0627\u0631\u0648\u0626\u0647",
                "common": "\u062C\u0632\u0627\u06CC\u0631 \u0641\u0627\u0631\u0648\u0626\u0647"
            },
            "pol": {
                "official": "Wyspy Owcze",
                "common": "Wyspy Owcze"
            },
            "por": {
                "official": "Ilhas Faroe",
                "common": "Ilhas Faro\xe9"
            },
            "rus": {
                "official": "\u0424\u0430\u0440\u0435\u0440\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                "common": "\u0424\u0430\u0440\u0435\u0440\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            "slk": {
                "official": "Faersk\xe9 ostrovy",
                "common": "Faersk\xe9 ostrovy"
            },
            "spa": {
                "official": "Islas Feroe",
                "common": "Islas Faroe"
            },
            "srp": {
                "official": "\u0424\u0430\u0440\u0441\u043A\u0430 \u043E\u0441\u0442\u0440\u0432\u0430",
                "common": "\u0424\u0430\u0440\u0441\u043A\u0430 \u043E\u0441\u0442\u0440\u0432\u0430"
            },
            "swe": {
                "official": "F\xe4r\xf6arna",
                "common": "F\xe4r\xf6arna"
            },
            "tur": {
                "official": "Faroe Adalar\u0131",
                "common": "Faroe Adalar\u0131"
            },
            "urd": {
                "official": "\u062C\u0632\u0627\u0626\u0631 \u0641\u0627\u0631\u0648",
                "common": "\u062C\u0632\u0627\u0626\u0631 \u0641\u0627\u0631\u0648"
            },
            "zho": {
                "official": "\u6CD5\u7F57\u7FA4\u5C9B",
                "common": "\u6CD5\u7F57\u7FA4\u5C9B"
            }
        },
        "latlng": [
            62,
            -7
        ],
        "landlocked": false,
        "area": 1393,
        "demonyms": {
            "eng": {
                "f": "Faroese",
                "m": "Faroese"
            },
            "fra": {
                "f": "F\xe9ro\xefenne",
                "m": "F\xe9ro\xefen"
            }
        },
        "flag": "\uD83C\uDDEB\uD83C\uDDF4",
        "maps": {
            "googleMaps": "https://goo.gl/maps/6sTru4SmHdEVcNkM6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/52939"
        },
        "population": 48865,
        "fifa": "FRO",
        "car": {
            "signs": [
                "FO"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+00:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/fo.png",
            "svg": "https://flagcdn.com/fo.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/fo.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/fo.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                62.01,
                -6.77
            ]
        },
        "postalCode": {
            "format": "FO-###",
            "regex": "^(?:FO)*(\\d{3})$"
        }
    },
    {
        "name": {
            "common": "Guyana",
            "official": "Co-operative Republic of Guyana",
            "nativeName": {
                "eng": {
                    "official": "Co-operative Republic of Guyana",
                    "common": "Guyana"
                }
            }
        },
        "tld": [
            ".gy"
        ],
        "cca2": "GY",
        "ccn3": "328",
        "cca3": "GUY",
        "cioc": "GUY",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "GYD": {
                "name": "Guyanese dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "92"
            ]
        },
        "capital": [
            "Georgetown"
        ],
        "altSpellings": [
            "GY",
            "Co-operative Republic of Guyana"
        ],
        "region": "Americas",
        "subregion": "South America",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u063A\u064A\u0627\u0646\u0627 \u0627\u0644\u062A\u0639\u0627\u0648\u0646\u064A\u0629",
                "common": "\u063A\u064A\u0627\u0646\u0627"
            },
            "bre": {
                "official": "Republik Kevelourel Gwiana",
                "common": "Guyana"
            },
            "ces": {
                "official": "Kooperativn\xed republika Guyana",
                "common": "Guyana"
            },
            "cym": {
                "official": "Co-operative Republic of Guyana",
                "common": "Guyana"
            },
            "deu": {
                "official": "Kooperative Republik Guyana",
                "common": "Guyana"
            },
            "est": {
                "official": "Guyana Vabariik",
                "common": "Guyana"
            },
            "fin": {
                "official": "Guayanan osuustoiminnallinen tasavalta",
                "common": "Guayana"
            },
            "fra": {
                "official": "R\xe9publique coop\xe9rative de Guyana",
                "common": "Guyana"
            },
            "hrv": {
                "official": "Zadruga Republika Gvajana",
                "common": "Gvajana"
            },
            "hun": {
                "official": "Guyanai Sz\xf6vetkezeti K\xf6zt\xe1rsas\xe1g",
                "common": "Guyana"
            },
            "ita": {
                "official": "Co -operative Republic of Guyana",
                "common": "Guyana"
            },
            "jpn": {
                "official": "\u30AC\u30A4\u30A2\u30CA\u306E\u5354\u540C\u5171\u548C\u56FD",
                "common": "\u30AC\u30A4\u30A2\u30CA"
            },
            "kor": {
                "official": "\uAC00\uC774\uC544\uB098 \uD611\uB3D9 \uACF5\uD654\uAD6D",
                "common": "\uAC00\uC774\uC544\uB098"
            },
            "nld": {
                "official": "Co\xf6peratieve Republiek Guyana",
                "common": "Guyana"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062A\u0639\u0627\u0648\u0646\u06CC \u06AF\u0648\u06CC\u0627\u0646",
                "common": "\u06AF\u0648\u06CC\u0627\u0646"
            },
            "pol": {
                "official": "Kooperacyjna Republika Gujany",
                "common": "Gujana"
            },
            "por": {
                "official": "Co -operative Rep\xfablica da Guiana",
                "common": "Guiana"
            },
            "rus": {
                "official": "\u041A\u043E\u043E\u043F\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0430\u0439\u0430\u043D\u0430",
                "common": "\u0413\u0430\u0439\u0430\u043D\u0430"
            },
            "slk": {
                "official": "Guyansk\xe1 kooperat\xedvna republika",
                "common": "Guyana"
            },
            "spa": {
                "official": "Rep\xfablica Cooperativa de Guyana",
                "common": "Guyana"
            },
            "srp": {
                "official": "\u041A\u043E\u043E\u043F\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0432\u0430\u0458\u0430\u043D\u0430",
                "common": "\u0413\u0432\u0430\u0458\u0430\u043D\u0430"
            },
            "swe": {
                "official": "Kooperativa republiken Guyana",
                "common": "Guyana"
            },
            "tur": {
                "official": "Guyana Kooperatif Cumhuriyeti",
                "common": "Guyana"
            },
            "urd": {
                "official": "\u062A\u0639\u0627\u0648\u0646\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06AF\u06CC\u0627\u0646\u0627",
                "common": "\u06AF\u06CC\u0627\u0646\u0627"
            },
            "zho": {
                "official": "\u572D\u4E9A\u90A3\u5171\u548C\u56FD",
                "common": "\u572D\u4E9A\u90A3"
            }
        },
        "latlng": [
            5,
            -59
        ],
        "landlocked": false,
        "borders": [
            "BRA",
            "SUR",
            "VEN"
        ],
        "area": 214969,
        "demonyms": {
            "eng": {
                "f": "Guyanese",
                "m": "Guyanese"
            },
            "fra": {
                "f": "Guyanienne",
                "m": "Guyanien"
            }
        },
        "flag": "\uD83C\uDDEC\uD83C\uDDFE",
        "maps": {
            "googleMaps": "https://goo.gl/maps/DFsme2xEeugUAsCx5",
            "openStreetMaps": "https://www.openstreetmap.org/relation/287083"
        },
        "population": 786559,
        "gini": {
            "1998": 45.1
        },
        "fifa": "GUY",
        "car": {
            "signs": [
                "GUY"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "South America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/gy.png",
            "svg": "https://flagcdn.com/gy.svg",
            "alt": "The flag of Guyana has a green field with two isosceles triangles which share a common base on the hoist end. The smaller black-edged red triangle spanning half the width of the field is superimposed on the larger white-edged yellow triangle which spans the full width of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/gy.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/gy.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                6.8,
                -58.15
            ]
        }
    },
    {
        "name": {
            "common": "Burkina Faso",
            "official": "Burkina Faso",
            "nativeName": {
                "fra": {
                    "official": "R\xe9publique du Burkina",
                    "common": "Burkina Faso"
                }
            }
        },
        "tld": [
            ".bf"
        ],
        "cca2": "BF",
        "ccn3": "854",
        "cca3": "BFA",
        "cioc": "BUR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "XOF": {
                "name": "West African CFA franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "26"
            ]
        },
        "capital": [
            "Ouagadougou"
        ],
        "altSpellings": [
            "BF"
        ],
        "region": "Africa",
        "subregion": "Western Africa",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u0628\u0648\u0631\u0643\u064A\u0646\u0627 \u0641\u0627\u0633\u0648",
                "common": "\u0628\u0648\u0631\u0643\u064A\u0646\u0627 \u0641\u0627\u0633\u0648"
            },
            "bre": {
                "official": "Burkina Faso",
                "common": "Burkina Faso"
            },
            "ces": {
                "official": "Burkina Faso",
                "common": "Burkina Faso"
            },
            "cym": {
                "official": "Bwrcina Ffaso",
                "common": "Bwrcina Ffaso"
            },
            "deu": {
                "official": "Burkina Faso",
                "common": "Burkina Faso"
            },
            "est": {
                "official": "Burkina Faso",
                "common": "Burkina Faso"
            },
            "fin": {
                "official": "Burkina Faso",
                "common": "Burkina Faso"
            },
            "fra": {
                "official": "R\xe9publique du Burkina",
                "common": "Burkina Faso"
            },
            "hrv": {
                "official": "Burkina Faso",
                "common": "Burkina Faso"
            },
            "hun": {
                "official": "Burkina Faso",
                "common": "Burkina"
            },
            "ita": {
                "official": "Burkina Faso",
                "common": "Burkina Faso"
            },
            "jpn": {
                "official": "\u30D6\u30EB\u30AD\u30CA\u30D5\u30A1\u30BD",
                "common": "\u30D6\u30EB\u30AD\u30CA\u30D5\u30A1\u30BD"
            },
            "kor": {
                "official": "\uBD80\uB974\uD0A4\uB098\uD30C\uC18C",
                "common": "\uBD80\uB974\uD0A4\uB098\uD30C\uC18C"
            },
            "nld": {
                "official": "Burkina Faso",
                "common": "Burkina Faso"
            },
            "per": {
                "official": "\u0628\u0648\u0631\u06A9\u06CC\u0646\u0627\u0641\u0627\u0633\u0648",
                "common": "\u0628\u0648\u0631\u06A9\u06CC\u0646\u0627\u0641\u0627\u0633\u0648"
            },
            "pol": {
                "official": "Burkina Faso",
                "common": "Burkina Faso"
            },
            "por": {
                "official": "Burkina Faso",
                "common": "Burkina Faso"
            },
            "rus": {
                "official": "\u0411\u0443\u0440\u043A\u0438\u043D\u0430 -\u0424\u0430\u0441\u043E",
                "common": "\u0411\u0443\u0440\u043A\u0438\u043D\u0430-\u0424\u0430\u0441\u043E"
            },
            "slk": {
                "official": "Burkina Faso",
                "common": "Burkina Faso"
            },
            "spa": {
                "official": "Burkina Faso",
                "common": "Burkina Faso"
            },
            "srp": {
                "official": "\u0411\u0443\u0440\u043A\u0438\u043D\u0430 \u0424\u0430\u0441\u043E",
                "common": "\u0411\u0443\u0440\u043A\u0438\u043D\u0430 \u0424\u0430\u0441\u043E"
            },
            "swe": {
                "official": "Burkina Faso",
                "common": "Burkina Faso"
            },
            "tur": {
                "official": "Burkina Faso",
                "common": "Burkina Faso"
            },
            "urd": {
                "official": "\u0628\u0631\u06A9\u06CC\u0646\u0627 \u0641\u0627\u0633\u0648",
                "common": "\u0628\u0631\u06A9\u06CC\u0646\u0627 \u0641\u0627\u0633\u0648"
            },
            "zho": {
                "official": "\u5E03\u57FA\u7EB3\u6CD5\u7D22",
                "common": "\u5E03\u57FA\u7EB3\u6CD5\u7D22"
            }
        },
        "latlng": [
            13,
            -2
        ],
        "landlocked": true,
        "borders": [
            "BEN",
            "CIV",
            "GHA",
            "MLI",
            "NER",
            "TGO"
        ],
        "area": 272967,
        "demonyms": {
            "eng": {
                "f": "Burkinabe",
                "m": "Burkinabe"
            },
            "fra": {
                "f": "Burkinab\xe9e",
                "m": "Burkinab\xe9"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDEB",
        "maps": {
            "googleMaps": "https://goo.gl/maps/rKRmpcMbFher2ozb7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192783"
        },
        "population": 20903278,
        "gini": {
            "2014": 35.3
        },
        "fifa": "BFA",
        "car": {
            "signs": [
                "BF"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/bf.png",
            "svg": "https://flagcdn.com/bf.svg",
            "alt": "The flag of Burkina Faso features two equal horizontal bands of red and green, with a yellow five-pointed star in the center."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/bf.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/bf.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                12.37,
                -1.52
            ]
        }
    },
    {
        "name": {
            "common": "Sudan",
            "official": "Republic of the Sudan",
            "nativeName": {
                "ara": {
                    "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0633\u0648\u062F\u0627\u0646",
                    "common": "\u0627\u0644\u0633\u0648\u062F\u0627\u0646"
                },
                "eng": {
                    "official": "Republic of the Sudan",
                    "common": "Sudan"
                }
            }
        },
        "tld": [
            ".sd"
        ],
        "cca2": "SD",
        "ccn3": "729",
        "cca3": "SDN",
        "cioc": "SUD",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "SDG": {
                "name": "Sudanese pound"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "49"
            ]
        },
        "capital": [
            "Khartoum"
        ],
        "altSpellings": [
            "SD",
            "Republic of the Sudan",
            "Jumh\u016Br\u012Byat as-S\u016Bd\u0101n"
        ],
        "region": "Africa",
        "subregion": "Northern Africa",
        "languages": {
            "ara": "Arabic",
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0633\u0648\u062F\u0627\u0646",
                "common": "\u0627\u0644\u0633\u0648\u062F\u0627\u0646"
            },
            "bre": {
                "official": "Republik Soudan",
                "common": "Soudan"
            },
            "ces": {
                "official": "S\xfad\xe1nsk\xe1 republika",
                "common": "S\xfad\xe1n"
            },
            "cym": {
                "official": "Republic of the Sudan",
                "common": "Sudan"
            },
            "deu": {
                "official": "Republik Sudan",
                "common": "Sudan"
            },
            "est": {
                "official": "Sudaani Vabariik",
                "common": "Sudaan"
            },
            "fin": {
                "official": "Sudanin tasavalta",
                "common": "Sudan"
            },
            "fra": {
                "official": "R\xe9publique du Soudan",
                "common": "Soudan"
            },
            "hrv": {
                "official": "Republika Sudan",
                "common": "Sudan"
            },
            "hun": {
                "official": "Szud\xe1ni K\xf6zt\xe1rsas\xe1g",
                "common": "Szud\xe1n"
            },
            "ita": {
                "official": "Repubblica del Sudan",
                "common": "Sudan"
            },
            "jpn": {
                "official": "\u30B9\u30FC\u30C0\u30F3\u5171\u548C\u56FD",
                "common": "\u30B9\u30FC\u30C0\u30F3"
            },
            "kor": {
                "official": "\uC218\uB2E8 \uACF5\uD654\uAD6D",
                "common": "\uC218\uB2E8"
            },
            "nld": {
                "official": "Republiek Soedan",
                "common": "Soedan"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u0648\u062F\u0627\u0646",
                "common": "\u0633\u0648\u062F\u0627\u0646"
            },
            "pol": {
                "official": "Republika Sudanu",
                "common": "Sudan"
            },
            "por": {
                "official": "Rep\xfablica do Sud\xe3o",
                "common": "Sud\xe3o"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0443\u0434\u0430\u043D",
                "common": "\u0421\u0443\u0434\u0430\u043D"
            },
            "slk": {
                "official": "Sud\xe1nska republika",
                "common": "Sud\xe1n"
            },
            "spa": {
                "official": "Rep\xfablica de Sud\xe1n",
                "common": "Sud\xe1n"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0443\u0434\u0430\u043D",
                "common": "\u0421\u0443\u0434\u0430\u043D"
            },
            "swe": {
                "official": "Republiken Sudan",
                "common": "Sudan"
            },
            "tur": {
                "official": "Sudan Cumhuriyeti",
                "common": "Sudan"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0648\u062F\u0627\u0646",
                "common": "\u0633\u0648\u062F\u0627\u0646"
            },
            "zho": {
                "official": "\u82CF\u4E39\u5171\u548C\u56FD",
                "common": "\u82CF\u4E39"
            }
        },
        "latlng": [
            15,
            30
        ],
        "landlocked": false,
        "borders": [
            "CAF",
            "TCD",
            "EGY",
            "ERI",
            "ETH",
            "LBY",
            "SSD"
        ],
        "area": 1886068,
        "demonyms": {
            "eng": {
                "f": "Sudanese",
                "m": "Sudanese"
            },
            "fra": {
                "f": "Soudanaise",
                "m": "Soudanais"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDE9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/bNW7YUJCaqR8zcXn7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192789"
        },
        "population": 43849269,
        "gini": {
            "2014": 34.2
        },
        "fifa": "SDN",
        "car": {
            "signs": [
                "SUD"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/sd.png",
            "svg": "https://flagcdn.com/sd.svg",
            "alt": "The flag of Sudan is composed of three equal horizontal bands of red, white and black, with a green isosceles triangle superimposed on the hoist side. The green triangle spans about two-fifth the width of the field with its base on the hoist end."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/sd.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/sd.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                15.6,
                32.53
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Russia",
            "official": "Russian Federation",
            "nativeName": {
                "rus": {
                    "official": "\u0420\u043E\u0441\u0441\u0438\u0439\u0441\u043A\u0430\u044F \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044F",
                    "common": "\u0420\u043E\u0441\u0441\u0438\u044F"
                }
            }
        },
        "tld": [
            ".ru",
            ".su",
            ".\u0440\u0444"
        ],
        "cca2": "RU",
        "ccn3": "643",
        "cca3": "RUS",
        "cioc": "RUS",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "RUB": {
                "name": "Russian ruble",
                "symbol": "\u20BD"
            }
        },
        "idd": {
            "root": "+7",
            "suffixes": [
                "3",
                "4",
                "5",
                "8",
                "9"
            ]
        },
        "capital": [
            "Moscow"
        ],
        "altSpellings": [
            "RU",
            "Russian Federation",
            "\u0420\u043E\u0441\u0441\u0438\u0439\u0441\u043A\u0430\u044F \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044F"
        ],
        "region": "Europe",
        "subregion": "Eastern Europe",
        "languages": {
            "rus": "Russian"
        },
        "translations": {
            "ara": {
                "official": "\u0631\u0648\u0633\u064A\u0627 \u0627\u0644\u0627\u062A\u062D\u0627\u062F\u064A\u0629",
                "common": "\u0631\u0648\u0633\u064A\u0627"
            },
            "bre": {
                "official": "Kevread Rusia",
                "common": "Rusia"
            },
            "ces": {
                "official": "Rusk\xe1 federace",
                "common": "Rusko"
            },
            "cym": {
                "official": "Russian Federation",
                "common": "Russia"
            },
            "deu": {
                "official": "Russische F\xf6deration",
                "common": "Russland"
            },
            "est": {
                "official": "Venemaa F\xf6deratsioon",
                "common": "Venemaa"
            },
            "fin": {
                "official": "Ven\xe4j\xe4n federaatio",
                "common": "Ven\xe4j\xe4"
            },
            "fra": {
                "official": "F\xe9d\xe9ration de Russie",
                "common": "Russie"
            },
            "hrv": {
                "official": "Ruska Federacija",
                "common": "Rusija"
            },
            "hun": {
                "official": "Oroszorsz\xe1gi F\xf6der\xe1ci\xf3",
                "common": "Oroszorsz\xe1g"
            },
            "ita": {
                "official": "Federazione russa",
                "common": "Russia"
            },
            "jpn": {
                "official": "\u30ED\u30B7\u30A2\u9023\u90A6",
                "common": "\u30ED\u30B7\u30A2\u9023\u90A6"
            },
            "kor": {
                "official": "\uB7EC\uC2DC\uC544 \uC5F0\uBC29",
                "common": "\uB7EC\uC2DC\uC544"
            },
            "nld": {
                "official": "Russische Federatie",
                "common": "Rusland"
            },
            "per": {
                "official": "\u0641\u062F\u0631\u0627\u0633\u06CC\u0648\u0646 \u0631\u0648\u0633\u06CC\u0647",
                "common": "\u0631\u0648\u0633\u06CC\u0647"
            },
            "pol": {
                "official": "Federacja Rosyjska",
                "common": "Rosja"
            },
            "por": {
                "official": "Federa\xe7\xe3o Russa",
                "common": "R\xfassia"
            },
            "rus": {
                "official": "\u0420\u043E\u0441\u0441\u0438\u0439\u0441\u043A\u0430\u044F \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044F",
                "common": "\u0420\u043E\u0441\u0441\u0438\u044F"
            },
            "slk": {
                "official": "Rusk\xe1 feder\xe1cia",
                "common": "Rusko"
            },
            "spa": {
                "official": "Federaci\xf3n de Rusia",
                "common": "Rusia"
            },
            "srp": {
                "official": "\u0420\u0443\u0441\u043A\u0430 \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u0458\u0430",
                "common": "\u0420\u0443\u0441\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Ryska federationen",
                "common": "Ryssland"
            },
            "tur": {
                "official": "Rusya Federasyonu",
                "common": "Rusya"
            },
            "urd": {
                "official": "\u0631\u0648\u0633\u06CC \u0648\u0641\u0627\u0642",
                "common": "\u0631\u0648\u0633"
            },
            "zho": {
                "official": "\u4FC4\u7F57\u65AF\u8054\u90A6",
                "common": "\u4FC4\u7F57\u65AF"
            }
        },
        "latlng": [
            60,
            100
        ],
        "landlocked": false,
        "borders": [
            "AZE",
            "BLR",
            "CHN",
            "EST",
            "FIN",
            "GEO",
            "KAZ",
            "PRK",
            "LVA",
            "LTU",
            "MNG",
            "NOR",
            "POL",
            "UKR"
        ],
        "area": 17098242,
        "demonyms": {
            "eng": {
                "f": "Russian",
                "m": "Russian"
            },
            "fra": {
                "f": "Russe",
                "m": "Russe"
            }
        },
        "flag": "\uD83C\uDDF7\uD83C\uDDFA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/4F4PpDhGJgVvLby57",
            "openStreetMaps": "https://www.openstreetmap.org/relation/60189#map=3/65.15/105.29"
        },
        "population": 144104080,
        "gini": {
            "2018": 37.5
        },
        "fifa": "RUS",
        "car": {
            "signs": [
                "RUS"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:00",
            "UTC+04:00",
            "UTC+06:00",
            "UTC+07:00",
            "UTC+08:00",
            "UTC+09:00",
            "UTC+10:00",
            "UTC+11:00",
            "UTC+12:00"
        ],
        "continents": [
            "Europe",
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ru.png",
            "svg": "https://flagcdn.com/ru.svg",
            "alt": "The flag of Russia is composed of three equal horizontal bands of white, blue and red."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ru.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ru.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                55.75,
                37.6
            ]
        },
        "postalCode": {
            "format": "######",
            "regex": "^(\\d{6})$"
        }
    },
    {
        "name": {
            "common": "Mayotte",
            "official": "Department of Mayotte",
            "nativeName": {
                "fra": {
                    "official": "D\xe9partement de Mayotte",
                    "common": "Mayotte"
                }
            }
        },
        "tld": [
            ".yt"
        ],
        "cca2": "YT",
        "ccn3": "175",
        "cca3": "MYT",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "62"
            ]
        },
        "capital": [
            "Mamoudzou"
        ],
        "altSpellings": [
            "YT",
            "Department of Mayotte",
            "D\xe9partement de Mayotte"
        ],
        "region": "Africa",
        "subregion": "Eastern Africa",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0627\u064A\u0648\u062A",
                "common": "\u0645\u0627\u064A\u0648\u062A"
            },
            "bre": {
                "official": "Departamant Mayotte",
                "common": "Mayotte"
            },
            "ces": {
                "official": "Mayotte",
                "common": "Mayotte"
            },
            "cym": {
                "official": "Department of Mayotte",
                "common": "Mayotte"
            },
            "deu": {
                "official": "\xdcbersee-D\xe9partement Mayotte",
                "common": "Mayotte"
            },
            "est": {
                "official": "Mayotte",
                "common": "Mayotte"
            },
            "fin": {
                "official": "Mayotte",
                "common": "Mayotte"
            },
            "fra": {
                "official": "D\xe9partement de Mayotte",
                "common": "Mayotte"
            },
            "hrv": {
                "official": "Odjel Mayotte",
                "common": "Mayotte"
            },
            "hun": {
                "official": "Mayotte",
                "common": "Mayotte"
            },
            "ita": {
                "official": "Dipartimento di Mayotte",
                "common": "Mayotte"
            },
            "jpn": {
                "official": "\u30DE\u30E8\u30C3\u30C8\u79D1",
                "common": "\u30DE\u30E8\u30C3\u30C8"
            },
            "kor": {
                "official": "\uB9C8\uC694\uD2B8",
                "common": "\uB9C8\uC694\uD2B8"
            },
            "nld": {
                "official": "Afdeling Mayotte",
                "common": "Mayotte"
            },
            "per": {
                "official": "\u0645\u062C\u0645\u0648\u0639\u0647 \u0634\u0647\u0631\u0633\u062A\u0627\u0646\u06CC \u0645\u0627\u06CC\u0648\u062A",
                "common": "\u0645\u0627\u06CC\u0648\u062A"
            },
            "pol": {
                "official": "Majotta",
                "common": "Majotta"
            },
            "por": {
                "official": "Departamento de Mayotte",
                "common": "Mayotte"
            },
            "rus": {
                "official": "\u0414\u0435\u043F\u0430\u0440\u0442\u0430\u043C\u0435\u043D\u0442 \u041C\u0430\u0439\u043E\u0442\u0442\u0430",
                "common": "\u041C\u0430\u0439\u043E\u0442\u0442\u0430"
            },
            "slk": {
                "official": "Department Mayotte",
                "common": "Mayotte"
            },
            "spa": {
                "official": "Departamento de Mayotte",
                "common": "Mayotte"
            },
            "srp": {
                "official": "\u041C\u0430\u0458\u043E\u0442",
                "common": "\u041C\u0430\u0458\u043E\u0442"
            },
            "swe": {
                "official": "Departementsomr\xe5det Mayotte",
                "common": "Mayotte"
            },
            "tur": {
                "official": "Mayotte",
                "common": "Mayotte"
            },
            "urd": {
                "official": "\u0645\u0627\u06CC\u0648\u0679",
                "common": "\u0645\u0627\u06CC\u0648\u0679"
            },
            "zho": {
                "official": "\u9A6C\u7EA6\u7279",
                "common": "\u9A6C\u7EA6\u7279"
            }
        },
        "latlng": [
            -12.83333333,
            45.16666666
        ],
        "landlocked": false,
        "area": 374,
        "demonyms": {
            "eng": {
                "f": "Mahoran",
                "m": "Mahoran"
            },
            "fra": {
                "f": "Mahoraise",
                "m": "Mahorais"
            }
        },
        "flag": "\uD83C\uDDFE\uD83C\uDDF9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/1e7MXmfBwQv3TQGF7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1259885"
        },
        "population": 226915,
        "car": {
            "signs": [
                "F"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/yt.png",
            "svg": "https://flagcdn.com/yt.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -12.78,
                45.22
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Australia",
            "official": "Commonwealth of Australia",
            "nativeName": {
                "eng": {
                    "official": "Commonwealth of Australia",
                    "common": "Australia"
                }
            }
        },
        "tld": [
            ".au"
        ],
        "cca2": "AU",
        "ccn3": "036",
        "cca3": "AUS",
        "cioc": "AUS",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "AUD": {
                "name": "Australian dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "1"
            ]
        },
        "capital": [
            "Canberra"
        ],
        "altSpellings": [
            "AU"
        ],
        "region": "Oceania",
        "subregion": "Australia and New Zealand",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u0643\u0648\u0645\u0648\u0646\u0648\u0644\u062B \u0623\u0633\u062A\u0631\u0627\u0644\u064A\u0627",
                "common": "\u0623\u0633\u062A\u0631\u0627\u0644\u064A\u0627"
            },
            "bre": {
                "official": "Kenglad Aostralia",
                "common": "Aostralia"
            },
            "ces": {
                "official": "Australsk\xe9 spole\u010Denstv\xed",
                "common": "Austr\xe1lie"
            },
            "cym": {
                "official": "Cymanwlad Awstralia",
                "common": "Awstralia"
            },
            "deu": {
                "official": "Commonwealth Australien",
                "common": "Australien"
            },
            "est": {
                "official": "Austraalia \xdchendus",
                "common": "Austraalia"
            },
            "fin": {
                "official": "Australian liittovaltio",
                "common": "Australia"
            },
            "fra": {
                "official": "Australie",
                "common": "Australie"
            },
            "hrv": {
                "official": "Commonwealth of Australia",
                "common": "Australija"
            },
            "hun": {
                "official": "Ausztr\xe1l \xc1llamsz\xf6vets\xe9g",
                "common": "Ausztr\xe1lia"
            },
            "ita": {
                "official": "Commonwealth dell'Australia",
                "common": "Australia"
            },
            "jpn": {
                "official": "\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\u9023\u90A6",
                "common": "\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2"
            },
            "kor": {
                "official": "\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544 \uC5F0\uBC29",
                "common": "\uD638\uC8FC"
            },
            "nld": {
                "official": "Gemenebest van Australi\xeb",
                "common": "Australi\xeb"
            },
            "per": {
                "official": "\u0642\u0644\u0645\u0631\u0648 \u0647\u0645\u0633\u0648\u062F \u0627\u0633\u062A\u0631\u0627\u0644\u06CC\u0627",
                "common": "\u0627\u0633\u062A\u0631\u0627\u0644\u06CC\u0627"
            },
            "pol": {
                "official": "Zwi\u0105zek Australijski",
                "common": "Australia"
            },
            "por": {
                "official": "Comunidade da Austr\xe1lia",
                "common": "Austr\xe1lia"
            },
            "rus": {
                "official": "\u0421\u043E\u0434\u0440\u0443\u0436\u0435\u0441\u0442\u0432\u043E \u0410\u0432\u0441\u0442\u0440\u0430\u043B\u0438\u0438",
                "common": "\u0410\u0432\u0441\u0442\u0440\u0430\u043B\u0438\u044F"
            },
            "slk": {
                "official": "Austr\xe1lsky zv\xe4z",
                "common": "Austr\xe1lia"
            },
            "spa": {
                "official": "Mancomunidad de Australia",
                "common": "Australia"
            },
            "srp": {
                "official": "\u041A\u043E\u043C\u043E\u043D\u0432\u0435\u043B\u0442 \u0410\u0443\u0441\u0442\u0440\u0430\u043B\u0438\u0458\u0430",
                "common": "\u0410\u0443\u0441\u0442\u0440\u0430\u043B\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Australiska statsf\xf6rbundet",
                "common": "Australien"
            },
            "tur": {
                "official": "Avustralya Federal Devleti",
                "common": "Avustralya"
            },
            "urd": {
                "official": "\u062F\u0648\u0644\u062A\u0650 \u0645\u0634\u062A\u0631\u06A9\u06C1 \u0622\u0633\u0679\u0631\u06CC\u0644\u06CC\u0627",
                "common": "\u0622\u0633\u0679\u0631\u06CC\u0644\u06CC\u0627"
            },
            "zho": {
                "official": "\u6FB3\u5927\u5229\u4E9A\u8054\u90A6",
                "common": "\u6FB3\u5927\u5229\u4E9A"
            }
        },
        "latlng": [
            -27,
            133
        ],
        "landlocked": false,
        "area": 7692024,
        "demonyms": {
            "eng": {
                "f": "Australian",
                "m": "Australian"
            },
            "fra": {
                "f": "Australienne",
                "m": "Australien"
            }
        },
        "flag": "\uD83C\uDDE6\uD83C\uDDFA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/DcjaDa7UbhnZTndH6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/80500"
        },
        "population": 25687041,
        "gini": {
            "2014": 34.4
        },
        "fifa": "AUS",
        "car": {
            "signs": [
                "AUS"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+05:00",
            "UTC+06:30",
            "UTC+07:00",
            "UTC+08:00",
            "UTC+09:30",
            "UTC+10:00",
            "UTC+10:30",
            "UTC+11:30"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/au.png",
            "svg": "https://flagcdn.com/au.svg",
            "alt": "The flag of Australia has a dark blue field. It features the flag of the United Kingdom \u2014 the Union Jack \u2014 in the canton, beneath which is a large white seven-pointed star. A representation of the Southern Cross constellation, made up of one small five-pointed and four larger seven-pointed white stars, is situated on the fly side of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/au.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/au.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -35.27,
                149.13
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Liberia",
            "official": "Republic of Liberia",
            "nativeName": {
                "eng": {
                    "official": "Republic of Liberia",
                    "common": "Liberia"
                }
            }
        },
        "tld": [
            ".lr"
        ],
        "cca2": "LR",
        "ccn3": "430",
        "cca3": "LBR",
        "cioc": "LBR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "LRD": {
                "name": "Liberian dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "31"
            ]
        },
        "capital": [
            "Monrovia"
        ],
        "altSpellings": [
            "LR",
            "Republic of Liberia"
        ],
        "region": "Africa",
        "subregion": "Western Africa",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0644\u064A\u0628\u064A\u0631\u064A\u0627",
                "common": "\u0644\u064A\u0628\u064A\u0631\u064A\u0627"
            },
            "bre": {
                "official": "Republik Liberia",
                "common": "Liberia"
            },
            "ces": {
                "official": "Liberijsk\xe1 republika",
                "common": "Lib\xe9rie"
            },
            "cym": {
                "official": "Republic of Liberia",
                "common": "Liberia"
            },
            "deu": {
                "official": "Republik Liberia",
                "common": "Liberia"
            },
            "est": {
                "official": "Libeeria Vabariik",
                "common": "Libeeria"
            },
            "fin": {
                "official": "Liberian tasavalta",
                "common": "Liberia"
            },
            "fra": {
                "official": "R\xe9publique du Lib\xe9ria",
                "common": "Liberia"
            },
            "hrv": {
                "official": "Republika Liberija",
                "common": "Liberija"
            },
            "hun": {
                "official": "Lib\xe9riai K\xf6zt\xe1rsas\xe1g",
                "common": "Lib\xe9ria"
            },
            "ita": {
                "official": "Repubblica di Liberia",
                "common": "Liberia"
            },
            "jpn": {
                "official": "\u30EA\u30D9\u30EA\u30A2\u5171\u548C\u56FD",
                "common": "\u30EA\u30D9\u30EA\u30A2"
            },
            "kor": {
                "official": "\uB77C\uC774\uBCA0\uB9AC\uC544 \uACF5\uD654\uAD6D",
                "common": "\uB77C\uC774\uBCA0\uB9AC\uC544"
            },
            "nld": {
                "official": "Republiek Liberia",
                "common": "Liberia"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0644\u06CC\u0628\u0631\u06CC\u0627",
                "common": "\u0644\u06CC\u0628\u0640\u0650\u0631\u06CC\u0627"
            },
            "pol": {
                "official": "Republika Liberii",
                "common": "Liberia"
            },
            "por": {
                "official": "Rep\xfablica da Lib\xe9ria",
                "common": "Lib\xe9ria"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041B\u0438\u0431\u0435\u0440\u0438\u044F",
                "common": "\u041B\u0438\u0431\u0435\u0440\u0438\u044F"
            },
            "slk": {
                "official": "Lib\xe9rijsk\xe1 republika",
                "common": "Lib\xe9ria"
            },
            "spa": {
                "official": "Rep\xfablica de Liberia",
                "common": "Liberia"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041B\u0438\u0431\u0435\u0440\u0438\u0458\u0430",
                "common": "\u041B\u0438\u0431\u0435\u0440\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Liberia",
                "common": "Liberia"
            },
            "tur": {
                "official": "Liberya Cumhuriyeti",
                "common": "Liberya"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0644\u0627\u0626\u0628\u06CC\u0631\u06CC\u0627",
                "common": "\u0644\u0627\u0626\u0628\u06CC\u0631\u06CC\u0627"
            },
            "zho": {
                "official": "\u5229\u6BD4\u91CC\u4E9A\u5171\u548C\u56FD",
                "common": "\u5229\u6BD4\u91CC\u4E9A"
            }
        },
        "latlng": [
            6.5,
            -9.5
        ],
        "landlocked": false,
        "borders": [
            "GIN",
            "CIV",
            "SLE"
        ],
        "area": 111369,
        "demonyms": {
            "eng": {
                "f": "Liberian",
                "m": "Liberian"
            },
            "fra": {
                "f": "Lib\xe9rienne",
                "m": "Lib\xe9rien"
            }
        },
        "flag": "\uD83C\uDDF1\uD83C\uDDF7",
        "maps": {
            "googleMaps": "https://goo.gl/maps/4VsHsc2oeGeRL3wg6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192780"
        },
        "population": 5057677,
        "gini": {
            "2016": 35.3
        },
        "fifa": "LBR",
        "car": {
            "signs": [
                "LB"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/lr.png",
            "svg": "https://flagcdn.com/lr.svg",
            "alt": "The flag of Liberia is composed of eleven equal horizontal bands of red alternating with white. A blue square bearing a five-pointed white star is superimposed in the canton."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/lr.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/lr.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                6.3,
                -10.8
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Mexico",
            "official": "United Mexican States",
            "nativeName": {
                "spa": {
                    "official": "Estados Unidos Mexicanos",
                    "common": "M\xe9xico"
                }
            }
        },
        "tld": [
            ".mx"
        ],
        "cca2": "MX",
        "ccn3": "484",
        "cca3": "MEX",
        "cioc": "MEX",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "MXN": {
                "name": "Mexican peso",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "2"
            ]
        },
        "capital": [
            "Mexico City"
        ],
        "altSpellings": [
            "MX",
            "Mexicanos",
            "United Mexican States",
            "Estados Unidos Mexicanos"
        ],
        "region": "Americas",
        "subregion": "North America",
        "languages": {
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u0648\u0644\u0627\u064A\u0627\u062A \u0627\u0644\u0645\u062A\u062D\u062F\u0629 \u0627\u0644\u0645\u0643\u0633\u064A\u0643\u064A\u0629",
                "common": "\u0627\u0644\u0645\u0633\u0643\u064A\u0643"
            },
            "bre": {
                "official": "Stado\xf9-Unanet Mec'hiko",
                "common": "Mec'hiko"
            },
            "ces": {
                "official": "Spojen\xe9 st\xe1ty mexick\xe9",
                "common": "Mexiko"
            },
            "cym": {
                "official": "United Mexican States",
                "common": "Mexico"
            },
            "deu": {
                "official": "Vereinigte Mexikanische Staaten",
                "common": "Mexiko"
            },
            "est": {
                "official": "Mehhiko \xdchendriigid",
                "common": "Mehhiko"
            },
            "fin": {
                "official": "Meksikon yhdysvallat",
                "common": "Meksiko"
            },
            "fra": {
                "official": "\xc9tats-Unis du Mexique",
                "common": "Mexique"
            },
            "hrv": {
                "official": "Sjedinjene Meksi\u010Dke Dr\u017Eave",
                "common": "Meksiko"
            },
            "hun": {
                "official": "Mexik\xf3i Egyes\xfclt \xc1llamok",
                "common": "Mexik\xf3"
            },
            "ita": {
                "official": "Stati Uniti del Messico",
                "common": "Messico"
            },
            "jpn": {
                "official": "\u30E1\u30AD\u30B7\u30B3\u5408\u8846\u56FD",
                "common": "\u30E1\u30AD\u30B7\u30B3"
            },
            "kor": {
                "official": "\uBA55\uC2DC\uCF54 \uD569\uC911\uAD6D",
                "common": "\uBA55\uC2DC\uCF54"
            },
            "nld": {
                "official": "Verenigde Mexicaanse Staten",
                "common": "Mexico"
            },
            "per": {
                "official": "\u0627\u06CC\u0627\u0644\u0627\u062A \u0645\u062A\u062D\u062F \u0645\u06A9\u0632\u06CC\u06A9",
                "common": "\u0645\u06A9\u0632\u06CC\u06A9"
            },
            "pol": {
                "official": "Meksyka\u0144skie Stany Zjednoczone",
                "common": "Meksyk"
            },
            "por": {
                "official": "Estados Unidos Mexicanos",
                "common": "M\xe9xico"
            },
            "rus": {
                "official": "\u041C\u0435\u043A\u0441\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0435 \u0421\u043E\u0435\u0434\u0438\u043D\u0451\u043D\u043D\u044B\u0435 \u0428\u0442\u0430\u0442\u044B",
                "common": "\u041C\u0435\u043A\u0441\u0438\u043A\u0430"
            },
            "slk": {
                "official": "Spojen\xe9 \u0161t\xe1\u0161y mexick\xe9",
                "common": "Mexiko"
            },
            "spa": {
                "official": "Estados Unidos Mexicanos",
                "common": "M\xe9xico"
            },
            "srp": {
                "official": "\u0421\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u0435 \u041C\u0435\u043A\u0441\u0438\u0447\u043A\u0435 \u0414\u0440\u0436\u0430\u0432\u0435",
                "common": "\u041C\u0435\u043A\u0441\u0438\u043A\u043E"
            },
            "swe": {
                "official": "Mexikos f\xf6renta stater",
                "common": "Mexiko"
            },
            "tur": {
                "official": "Birle\u015Fik Meksika Devletleri",
                "common": "Meksika"
            },
            "urd": {
                "official": "\u0631\u06CC\u0627\u0633\u062A\u06C1\u0627\u0626\u06D2 \u0645\u062A\u062D\u062F\u06C1 \u0645\u06CC\u06A9\u0633\u06CC\u06A9\u0648",
                "common": "\u0645\u06CC\u06A9\u0633\u06CC\u06A9\u0648"
            },
            "zho": {
                "official": "\u58A8\u897F\u54E5\u5408\u4F17\u56FD",
                "common": "\u58A8\u897F\u54E5"
            }
        },
        "latlng": [
            23,
            -102
        ],
        "landlocked": false,
        "borders": [
            "BLZ",
            "GTM",
            "USA"
        ],
        "area": 1964375,
        "demonyms": {
            "eng": {
                "f": "Mexican",
                "m": "Mexican"
            },
            "fra": {
                "f": "Mexicaine",
                "m": "Mexicain"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDFD",
        "maps": {
            "googleMaps": "https://goo.gl/maps/s5g7imNPMDEePxzbA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/114686"
        },
        "population": 128932753,
        "gini": {
            "2018": 45.4
        },
        "fifa": "MEX",
        "car": {
            "signs": [
                "MEX"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-08:00",
            "UTC-07:00",
            "UTC-06:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/mx.png",
            "svg": "https://flagcdn.com/mx.svg",
            "alt": "The flag of Mexico is composed of three equal vertical bands of green, white and red, with the national coat of arms centered in the white band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/mx.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/mx.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                19.43,
                -99.13
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Tunisia",
            "official": "Tunisian Republic",
            "nativeName": {
                "ara": {
                    "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u062A\u0648\u0646\u0633\u064A\u0629",
                    "common": "\u062A\u0648\u0646\u0633"
                }
            }
        },
        "tld": [
            ".tn"
        ],
        "cca2": "TN",
        "ccn3": "788",
        "cca3": "TUN",
        "cioc": "TUN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "TND": {
                "name": "Tunisian dinar",
                "symbol": "\u062F.\u062A"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "16"
            ]
        },
        "capital": [
            "Tunis"
        ],
        "altSpellings": [
            "TN",
            "Republic of Tunisia",
            "al-Jumh\u016Briyyah at-T\u016Bnisiyyah"
        ],
        "region": "Africa",
        "subregion": "Northern Africa",
        "languages": {
            "ara": "Arabic"
        },
        "translations": {
            "ara": {
                "official": "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u062A\u0648\u0646\u0633\u064A\u0629",
                "common": "\u062A\u0648\u0646\u0633"
            },
            "bre": {
                "official": "Republik Tunizian",
                "common": "Tunizia"
            },
            "ces": {
                "official": "Tunisk\xe1 republika",
                "common": "Tunisko"
            },
            "cym": {
                "official": "Tunisian Republic",
                "common": "Tunisia"
            },
            "deu": {
                "official": "Tunesische Republik",
                "common": "Tunesien"
            },
            "est": {
                "official": "Tuneesia Vabariik",
                "common": "Tuneesia"
            },
            "fin": {
                "official": "Tunisian tasavalta",
                "common": "Tunisia"
            },
            "fra": {
                "official": "R\xe9publique tunisienne",
                "common": "Tunisie"
            },
            "hrv": {
                "official": "Tuniski Republika",
                "common": "Tunis"
            },
            "hun": {
                "official": "Tun\xe9ziai K\xf6zt\xe1rsas\xe1g",
                "common": "Tun\xe9zia"
            },
            "ita": {
                "official": "Repubblica tunisina",
                "common": "Tunisia"
            },
            "jpn": {
                "official": "\u30C1\u30E5\u30CB\u30B8\u30A2\u5171\u548C\u56FD",
                "common": "\u30C1\u30E5\u30CB\u30B8\u30A2"
            },
            "kor": {
                "official": "\uD280\uB2C8\uC9C0 \uACF5\uD654\uAD6D",
                "common": "\uD280\uB2C8\uC9C0"
            },
            "nld": {
                "official": "Republiek Tunesi\xeb",
                "common": "Tunesi\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062A\u0648\u0646\u0633",
                "common": "\u062A\u0648\u0646\u0633"
            },
            "pol": {
                "official": "Republika Tunezyjska",
                "common": "Tunezja"
            },
            "por": {
                "official": "Rep\xfablica da Tun\xedsia",
                "common": "Tun\xedsia"
            },
            "rus": {
                "official": "\u0422\u0443\u043D\u0438\u0441\u0441\u043A\u043E\u0439 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0438",
                "common": "\u0422\u0443\u043D\u0438\u0441"
            },
            "slk": {
                "official": "Tunisk\xe1 republika",
                "common": "Tunisko"
            },
            "spa": {
                "official": "Rep\xfablica de T\xfanez",
                "common": "T\xfanez"
            },
            "srp": {
                "official": "\u0422\u0443\u043D\u0438\u0448\u0430\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0422\u0443\u043D\u0438\u0441"
            },
            "swe": {
                "official": "Republiken Tunisien",
                "common": "Tunisien"
            },
            "tur": {
                "official": "Tunus Cumhuriyeti",
                "common": "Tunus"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062A\u0648\u0646\u0633",
                "common": "\u062A\u0648\u0646\u0633"
            },
            "zho": {
                "official": "\u7A81\u5C3C\u65AF\u5171\u548C\u56FD",
                "common": "\u7A81\u5C3C\u65AF"
            }
        },
        "latlng": [
            34,
            9
        ],
        "landlocked": false,
        "borders": [
            "DZA",
            "LBY"
        ],
        "area": 163610,
        "demonyms": {
            "eng": {
                "f": "Tunisian",
                "m": "Tunisian"
            },
            "fra": {
                "f": "Tunisienne",
                "m": "Tunisien"
            }
        },
        "flag": "\uD83C\uDDF9\uD83C\uDDF3",
        "maps": {
            "googleMaps": "https://goo.gl/maps/KgUmpZdUuNRaougs8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192757"
        },
        "population": 11818618,
        "gini": {
            "2015": 32.8
        },
        "fifa": "TUN",
        "car": {
            "signs": [
                "TN"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/tn.png",
            "svg": "https://flagcdn.com/tn.svg",
            "alt": "The flag of Tunisia has a red field. A white circle bearing a five-pointed red star within a fly-side facing red crescent is situated at the center of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/tn.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/tn.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                36.8,
                10.18
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Aruba",
            "official": "Aruba",
            "nativeName": {
                "nld": {
                    "official": "Aruba",
                    "common": "Aruba"
                },
                "pap": {
                    "official": "Aruba",
                    "common": "Aruba"
                }
            }
        },
        "tld": [
            ".aw"
        ],
        "cca2": "AW",
        "ccn3": "533",
        "cca3": "ABW",
        "cioc": "ARU",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "AWG": {
                "name": "Aruban florin",
                "symbol": "\u0192"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "97"
            ]
        },
        "capital": [
            "Oranjestad"
        ],
        "altSpellings": [
            "AW"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "nld": "Dutch",
            "pap": "Papiamento"
        },
        "translations": {
            "ara": {
                "official": "\u0623\u0631\u0648\u0628\u0627",
                "common": "\u0623\u0631\u0648\u0628\u0627"
            },
            "bre": {
                "official": "Aruba",
                "common": "Aruba"
            },
            "ces": {
                "official": "Aruba",
                "common": "Aruba"
            },
            "cym": {
                "official": "Aruba",
                "common": "Aruba"
            },
            "deu": {
                "official": "Aruba",
                "common": "Aruba"
            },
            "est": {
                "official": "Aruba",
                "common": "Aruba"
            },
            "fin": {
                "official": "Aruba",
                "common": "Aruba"
            },
            "fra": {
                "official": "Aruba",
                "common": "Aruba"
            },
            "hrv": {
                "official": "Aruba",
                "common": "Aruba"
            },
            "hun": {
                "official": "Aruba",
                "common": "Aruba"
            },
            "ita": {
                "official": "Aruba",
                "common": "Aruba"
            },
            "jpn": {
                "official": "\u30A2\u30EB\u30D0",
                "common": "\u30A2\u30EB\u30D0"
            },
            "kor": {
                "official": "\uC544\uB8E8\uBC14",
                "common": "\uC544\uB8E8\uBC14"
            },
            "nld": {
                "official": "Aruba",
                "common": "Aruba"
            },
            "per": {
                "official": "\u0622\u0631\u0648\u0628\u0627",
                "common": "\u0622\u0631\u0648\u0628\u0627"
            },
            "pol": {
                "official": "Aruba",
                "common": "Aruba"
            },
            "por": {
                "official": "Aruba",
                "common": "Aruba"
            },
            "rus": {
                "official": "\u0410\u0440\u0443\u0431\u0430",
                "common": "\u0410\u0440\u0443\u0431\u0430"
            },
            "slk": {
                "official": "Aruba",
                "common": "Aruba"
            },
            "spa": {
                "official": "Aruba",
                "common": "Aruba"
            },
            "srp": {
                "official": "\u0410\u0440\u0443\u0431\u0430",
                "common": "\u0410\u0440\u0443\u0431\u0430"
            },
            "swe": {
                "official": "Aruba",
                "common": "Aruba"
            },
            "tur": {
                "official": "Aruba",
                "common": "Aruba"
            },
            "urd": {
                "official": "\u0627\u0631\u0648\u0628\u0627",
                "common": "\u0627\u0631\u0648\u0628\u0627"
            },
            "zho": {
                "official": "\u963F\u9C81\u5DF4",
                "common": "\u963F\u9C81\u5DF4"
            }
        },
        "latlng": [
            12.5,
            -69.96666666
        ],
        "landlocked": false,
        "area": 180,
        "demonyms": {
            "eng": {
                "f": "Aruban",
                "m": "Aruban"
            },
            "fra": {
                "f": "Arubaise",
                "m": "Arubais"
            }
        },
        "flag": "\uD83C\uDDE6\uD83C\uDDFC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/8hopbQqifHAgyZyg8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1231749"
        },
        "population": 106766,
        "fifa": "ARU",
        "car": {
            "side": "right"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/aw.png",
            "svg": "https://flagcdn.com/aw.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/aw.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/aw.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                12.52,
                -70.03
            ]
        }
    },
    {
        "name": {
            "common": "Kazakhstan",
            "official": "Republic of Kazakhstan",
            "nativeName": {
                "kaz": {
                    "official": "\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430\u0441\u044B",
                    "common": "\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D"
                },
                "rus": {
                    "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D",
                    "common": "\u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D"
                }
            }
        },
        "tld": [
            ".kz",
            ".\u049B\u0430\u0437"
        ],
        "cca2": "KZ",
        "ccn3": "398",
        "cca3": "KAZ",
        "cioc": "KAZ",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "KZT": {
                "name": "Kazakhstani tenge",
                "symbol": "\u20B8"
            }
        },
        "idd": {
            "root": "+7",
            "suffixes": [
                "6",
                "7"
            ]
        },
        "capital": [
            "Nur-Sultan"
        ],
        "altSpellings": [
            "KZ",
            "Qazaqstan",
            "\u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D",
            "Republic of Kazakhstan",
            "\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430\u0441\u044B",
            "Qazaqstan Respubl\xefkas\u0131",
            "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D",
            "Respublika Kazakhstan"
        ],
        "region": "Asia",
        "subregion": "Central Asia",
        "languages": {
            "kaz": "Kazakh",
            "rus": "Russian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u0627\u0632\u0627\u062E\u0633\u062A\u0627\u0646",
                "common": "\u0643\u0627\u0632\u0627\u062E\u0633\u062A\u0627\u0646"
            },
            "bre": {
                "official": "Republik Kazakstan",
                "common": "Kazakstan"
            },
            "ces": {
                "official": "Republika Kazachst\xe1n",
                "common": "Kazachst\xe1n"
            },
            "cym": {
                "official": "Republic of Kazakhstan",
                "common": "Kazakhstan"
            },
            "deu": {
                "official": "Republik Kasachstan",
                "common": "Kasachstan"
            },
            "est": {
                "official": "Kasahstani Vabariik",
                "common": "Kasahstan"
            },
            "fin": {
                "official": "Kazakstanin tasavalta",
                "common": "Kazakstan"
            },
            "fra": {
                "official": "R\xe9publique du Kazakhstan",
                "common": "Kazakhstan"
            },
            "hrv": {
                "official": "Republika Kazahstan",
                "common": "Kazahstan"
            },
            "hun": {
                "official": "Kazah K\xf6zt\xe1rsas\xe1g",
                "common": "Kazahszt\xe1n"
            },
            "ita": {
                "official": "Repubblica del Kazakhstan",
                "common": "Kazakistan"
            },
            "jpn": {
                "official": "\u30AB\u30B6\u30D5\u30B9\u30BF\u30F3\u5171\u548C\u56FD",
                "common": "\u30AB\u30B6\u30D5\u30B9\u30BF\u30F3"
            },
            "kor": {
                "official": "\uCE74\uC790\uD750\uC2A4\uD0C4 \uACF5\uD654\uAD6D",
                "common": "\uCE74\uC790\uD750\uC2A4\uD0C4"
            },
            "nld": {
                "official": "Republiek Kazachstan",
                "common": "Kazachstan"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0642\u0632\u0627\u0642\u0633\u062A\u0627\u0646",
                "common": "\u0642\u0632\u0627\u0642\u0633\u062A\u0627\u0646"
            },
            "pol": {
                "official": "Republika Kazachstanu",
                "common": "Kazachstan"
            },
            "por": {
                "official": "Rep\xfablica do Cazaquist\xe3o",
                "common": "Cazaquist\xe3o"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D",
                "common": "\u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D"
            },
            "slk": {
                "official": "Kaza\u0161sk\xe1 republika",
                "common": "Kazachstan"
            },
            "spa": {
                "official": "Rep\xfablica de Kazajst\xe1n",
                "common": "Kazajist\xe1n"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D",
                "common": "\u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D"
            },
            "swe": {
                "official": "Republiken Kazakstan",
                "common": "Kazakstan"
            },
            "tur": {
                "official": "Kazakistan Cumhuriyeti",
                "common": "Kazakistan"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0642\u0627\u0632\u0642\u0633\u062A\u0627\u0646",
                "common": "\u0642\u0627\u0632\u0642\u0633\u062A\u0627\u0646"
            },
            "zho": {
                "official": "\u54C8\u8428\u514B\u65AF\u5766\u5171\u548C\u56FD",
                "common": "\u54C8\u8428\u514B\u65AF\u5766"
            }
        },
        "latlng": [
            48.0196,
            66.9237
        ],
        "landlocked": true,
        "borders": [
            "CHN",
            "KGZ",
            "RUS",
            "TKM",
            "UZB"
        ],
        "area": 2724900,
        "demonyms": {
            "eng": {
                "f": "Kazakhstani",
                "m": "Kazakhstani"
            },
            "fra": {
                "f": "Kazakhstanaise",
                "m": "Kazakhstanais"
            }
        },
        "flag": "\uD83C\uDDF0\uD83C\uDDFF",
        "maps": {
            "googleMaps": "https://goo.gl/maps/8VohJGu7ShuzZYyeA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/214665"
        },
        "population": 18754440,
        "gini": {
            "2018": 27.8
        },
        "fifa": "KAZ",
        "car": {
            "signs": [
                "KZ"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+05:00",
            "UTC+06:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/kz.png",
            "svg": "https://flagcdn.com/kz.svg",
            "alt": "The flag of Kazakhstan has a turquoise field, at the center of which is a gold sun with thirty-two rays above a soaring golden steppe eagle. A thin vertical band displays a national ornamental pattern \u2014 koshkar-muiz \u2014 in gold near the hoist end."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/kz.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/kz.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                51.16,
                71.45
            ]
        },
        "postalCode": {
            "format": "######",
            "regex": "^(\\d{6})$"
        }
    },
    {
        "name": {
            "common": "Oman",
            "official": "Sultanate of Oman",
            "nativeName": {
                "ara": {
                    "official": "\u0633\u0644\u0637\u0646\u0629 \u0639\u0645\u0627\u0646",
                    "common": "\u0639\u0645\u0627\u0646"
                }
            }
        },
        "tld": [
            ".om"
        ],
        "cca2": "OM",
        "ccn3": "512",
        "cca3": "OMN",
        "cioc": "OMA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "OMR": {
                "name": "Omani rial",
                "symbol": "\u0631.\u0639."
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "68"
            ]
        },
        "capital": [
            "Muscat"
        ],
        "altSpellings": [
            "OM",
            "Sultanate of Oman",
            "Sal\u1E6Danat \u02BBUm\u0101n"
        ],
        "region": "Asia",
        "subregion": "Western Asia",
        "languages": {
            "ara": "Arabic"
        },
        "translations": {
            "ara": {
                "official": "\u0633\u0644\u0637\u0646\u0629 \u0639\u0645\u0627\u0646",
                "common": "\u0639\u0645\u0627\u0646"
            },
            "bre": {
                "official": "Sultanelezh Oman",
                "common": "Oman"
            },
            "ces": {
                "official": "Sultan\xe1t Om\xe1n",
                "common": "Om\xe1n"
            },
            "cym": {
                "official": "Sultanate of Oman",
                "common": "Oman"
            },
            "deu": {
                "official": "Sultanat Oman",
                "common": "Oman"
            },
            "est": {
                "official": "Omaani Sultaniriik",
                "common": "Omaan"
            },
            "fin": {
                "official": "Omanin sulttaanikunta",
                "common": "Oman"
            },
            "fra": {
                "official": "Sultanat d'Oman",
                "common": "Oman"
            },
            "hrv": {
                "official": "Sultanat Oman",
                "common": "Oman"
            },
            "hun": {
                "official": "Om\xe1ni Szultan\xe1tus",
                "common": "Om\xe1n"
            },
            "ita": {
                "official": "Sultanato dell'Oman",
                "common": "oman"
            },
            "jpn": {
                "official": "\u30AA\u30DE\u30FC\u30F3\xb7\u30B9\u30EB\u30BF\u30F3\u56FD",
                "common": "\u30AA\u30DE\u30FC\u30F3"
            },
            "kor": {
                "official": "\uC624\uB9CC \uC220\uD0C4\uAD6D",
                "common": "\uC624\uB9CC"
            },
            "nld": {
                "official": "Sultanaat van Oman",
                "common": "Oman"
            },
            "per": {
                "official": "\u0633\u0644\u0637\u0627\u0646\u200C\u0646\u0634\u06CC\u0646 \u0639\u064F\u0645\u0627\u0646",
                "common": "\u0639\u0645\u0627\u0646"
            },
            "pol": {
                "official": "Su\u0142tanat Omanu",
                "common": "Oman"
            },
            "por": {
                "official": "Sultanato de Om\xe3",
                "common": "Om\xe3"
            },
            "rus": {
                "official": "\u0421\u0443\u043B\u0442\u0430\u043D\u0430\u0442 \u041E\u043C\u0430\u043D",
                "common": "\u041E\u043C\u0430\u043D"
            },
            "slk": {
                "official": "Om\xe1nsky sultan\xe1t",
                "common": "Om\xe1n"
            },
            "spa": {
                "official": "Sultanato de Om\xe1n",
                "common": "Om\xe1n"
            },
            "srp": {
                "official": "\u0421\u0443\u043B\u0442\u0430\u043D\u0430\u0442 \u041E\u043C\u0430\u043D",
                "common": "\u041E\u043C\u0430\u043D"
            },
            "swe": {
                "official": "Sultanatet Oman",
                "common": "Oman"
            },
            "tur": {
                "official": "Umman Sultanl\u0131\u011F\u0131",
                "common": "Umman"
            },
            "urd": {
                "official": "\u0633\u0644\u0637\u0646\u062A \u0639\u0645\u0627\u0646",
                "common": "\u0639\u0645\u0627\u0646"
            },
            "zho": {
                "official": "\u963F\u66FC\u82CF\u4E39\u56FD",
                "common": "\u963F\u66FC"
            }
        },
        "latlng": [
            21,
            57
        ],
        "landlocked": false,
        "borders": [
            "SAU",
            "ARE",
            "YEM"
        ],
        "area": 309500,
        "demonyms": {
            "eng": {
                "f": "Omani",
                "m": "Omani"
            },
            "fra": {
                "f": "Omanaise",
                "m": "Omanais"
            }
        },
        "flag": "\uD83C\uDDF4\uD83C\uDDF2",
        "maps": {
            "googleMaps": "https://goo.gl/maps/L2BoXoAwDDwWecnw5",
            "openStreetMaps": "https://www.openstreetmap.org/relation/305138"
        },
        "population": 5106622,
        "fifa": "OMA",
        "car": {
            "signs": [
                "OM"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+04:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/om.png",
            "svg": "https://flagcdn.com/om.svg",
            "alt": "The flag of Oman features a red vertical band on the hoist side that takes up about one-fourth the width of the field, and three equal horizontal bands of white, red and green adjoining the vertical band. At the top of the vertical band is the white emblem of Oman."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/om.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/om.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                23.62,
                58.58
            ]
        },
        "postalCode": {
            "format": "###",
            "regex": "^(\\d{3})$"
        }
    },
    {
        "name": {
            "common": "French Guiana",
            "official": "Guiana",
            "nativeName": {
                "fra": {
                    "official": "Guyane",
                    "common": "Guyane fran\xe7aise"
                }
            }
        },
        "tld": [
            ".gf"
        ],
        "cca2": "GF",
        "ccn3": "254",
        "cca3": "GUF",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "94"
            ]
        },
        "capital": [
            "Cayenne"
        ],
        "altSpellings": [
            "GF",
            "Guiana",
            "Guyane"
        ],
        "region": "Americas",
        "subregion": "South America",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u063A\u0648\u064A\u0627\u0646\u0627 \u0627\u0644\u0641\u0631\u0646\u0633\u064A\u0629",
                "common": "\u063A\u0648\u064A\u0627\u0646\u0627"
            },
            "bre": {
                "official": "Gwiana C'hall",
                "common": "Gwiana C'hall"
            },
            "ces": {
                "official": "Francouzsk\xe1 Guyana",
                "common": "Francouzsk\xe1 Guyana"
            },
            "cym": {
                "official": "Guiana",
                "common": "French Guiana"
            },
            "deu": {
                "official": "Franz\xf6sisch-Guayana",
                "common": "Franz\xf6sisch-Guayana"
            },
            "est": {
                "official": "Guajaana departemang",
                "common": "Prantsuse Guajaana"
            },
            "fin": {
                "official": "Ranskan Guayana",
                "common": "Ranskan Guayana"
            },
            "fra": {
                "official": "Guyane",
                "common": "Guyane"
            },
            "hrv": {
                "official": "Gijana",
                "common": "Francuska Gvajana"
            },
            "hun": {
                "official": "Francia Guyana",
                "common": "Francia Guyana"
            },
            "ita": {
                "official": "Guiana",
                "common": "Guyana francese"
            },
            "jpn": {
                "official": "\u30AE\u30A2\u30CA",
                "common": "\u30D5\u30E9\u30F3\u30B9\u9818\u30AE\u30A2\u30CA"
            },
            "kor": {
                "official": "\uD504\uB791\uC2A4\uB839 \uAE30\uC544\uB098",
                "common": "\uD504\uB791\uC2A4\uB839 \uAE30\uC544\uB098"
            },
            "nld": {
                "official": "Guyana",
                "common": "Frans-Guyana"
            },
            "per": {
                "official": "\u06AF\u0648\u06CC\u0627\u0646 \u0641\u0631\u0627\u0646\u0633\u0647",
                "common": "\u06AF\u0648\u06CC\u0627\u0646 \u0641\u0631\u0627\u0646\u0633\u0647"
            },
            "pol": {
                "official": "Gujana Francuska",
                "common": "Gujana Francuska"
            },
            "por": {
                "official": "Guiana",
                "common": "Guiana Francesa"
            },
            "rus": {
                "official": "\u0413\u0432\u0438\u0430\u043D\u0430",
                "common": "\u0424\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0430\u044F \u0413\u0432\u0438\u0430\u043D\u0430"
            },
            "slk": {
                "official": "Franc\xfazska Guyana",
                "common": "Guyana"
            },
            "spa": {
                "official": "Guayana",
                "common": "Guayana Francesa"
            },
            "srp": {
                "official": "\u0424\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0430 \u0413\u0432\u0430\u0458\u0430\u043D\u0430",
                "common": "\u0424\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0430 \u0413\u0432\u0430\u0458\u0430\u043D\u0430"
            },
            "swe": {
                "official": "Franska Guyana",
                "common": "Franska Guyana"
            },
            "tur": {
                "official": "Frans\u0131z Guyanas\u0131",
                "common": "Frans\u0131z Guyanas\u0131"
            },
            "urd": {
                "official": "\u06AF\u06CC\u0627\u0646\u0627",
                "common": "\u0641\u0631\u0627\u0646\u0633\u06CC\u0633\u06CC \u06AF\u06CC\u0627\u0646\u0627"
            },
            "zho": {
                "official": "\u6CD5\u5C5E\u572D\u4E9A\u90A3",
                "common": "\u6CD5\u5C5E\u572D\u4E9A\u90A3"
            }
        },
        "latlng": [
            4,
            -53
        ],
        "landlocked": false,
        "borders": [
            "BRA",
            "SUR"
        ],
        "area": 83534,
        "demonyms": {
            "eng": {
                "f": "Guianan",
                "m": "Guianan"
            },
            "fra": {
                "f": "Guyanaise",
                "m": "Guyanais"
            }
        },
        "flag": "\uD83C\uDDEC\uD83C\uDDEB",
        "maps": {
            "googleMaps": "https://goo.gl/maps/NJawFwMzG7YtCrVP7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2502058"
        },
        "population": 254541,
        "car": {
            "signs": [
                "F"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-03:00"
        ],
        "continents": [
            "South America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/gf.png",
            "svg": "https://flagcdn.com/gf.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/gf.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/gf.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                4.94,
                -52.33
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^((97|98)3\\d{2})$"
        }
    },
    {
        "name": {
            "common": "Niger",
            "official": "Republic of Niger",
            "nativeName": {
                "fra": {
                    "official": "R\xe9publique du Niger",
                    "common": "Niger"
                }
            }
        },
        "tld": [
            ".ne"
        ],
        "cca2": "NE",
        "ccn3": "562",
        "cca3": "NER",
        "cioc": "NIG",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "XOF": {
                "name": "West African CFA franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "27"
            ]
        },
        "capital": [
            "Niamey"
        ],
        "altSpellings": [
            "NE",
            "Nijar"
        ],
        "region": "Africa",
        "subregion": "Western Africa",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0646\u064A\u062C\u0631",
                "common": "\u0627\u0644\u0646\u064A\u062C\u0631"
            },
            "bre": {
                "official": "Republik Niger",
                "common": "Niger"
            },
            "ces": {
                "official": "Nigersk\xe1 republika",
                "common": "Niger"
            },
            "cym": {
                "official": "Republic of Niger",
                "common": "Niger"
            },
            "deu": {
                "official": "Republik Niger",
                "common": "Niger"
            },
            "est": {
                "official": "Nigeri Vabariik",
                "common": "Niger"
            },
            "fin": {
                "official": "Nigerin tasavalta",
                "common": "Niger"
            },
            "fra": {
                "official": "R\xe9publique du Niger",
                "common": "Niger"
            },
            "hrv": {
                "official": "Republika Niger",
                "common": "Niger"
            },
            "hun": {
                "official": "Nigeri K\xf6zt\xe1rsas\xe1g",
                "common": "Niger"
            },
            "ita": {
                "official": "Repubblica del Niger",
                "common": "Niger"
            },
            "jpn": {
                "official": "\u30CB\u30B8\u30A7\u30FC\u30EB\u5171\u548C\u56FD",
                "common": "\u30CB\u30B8\u30A7\u30FC\u30EB"
            },
            "kor": {
                "official": "\uB2C8\uC81C\uB974 \uACF5\uD654\uAD6D",
                "common": "\uB2C8\uC81C\uB974"
            },
            "nld": {
                "official": "Republiek Niger",
                "common": "Niger"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0646\u06CC\u062C\u0631",
                "common": "\u0646\u06CC\u062C\u0631"
            },
            "pol": {
                "official": "Republika Nigru",
                "common": "Niger"
            },
            "por": {
                "official": "Rep\xfablica do N\xedger",
                "common": "N\xedger"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0438\u0433\u0435\u0440",
                "common": "\u041D\u0438\u0433\u0435\u0440"
            },
            "slk": {
                "official": "Nig\xe9rsk\xe1 republika",
                "common": "Niger"
            },
            "spa": {
                "official": "Rep\xfablica de N\xedger",
                "common": "N\xedger"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0438\u0433\u0435\u0440",
                "common": "\u041D\u0438\u0433\u0435\u0440"
            },
            "swe": {
                "official": "Republiken Niger",
                "common": "Niger"
            },
            "tur": {
                "official": "Nijer Cumhuriyeti",
                "common": "Nijer"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0646\u0627\u0626\u062C\u0631",
                "common": "\u0646\u0627\u0626\u062C\u0631"
            },
            "zho": {
                "official": "\u5C3C\u65E5\u5C14\u5171\u548C\u56FD",
                "common": "\u5C3C\u65E5\u5C14"
            }
        },
        "latlng": [
            16,
            8
        ],
        "landlocked": true,
        "borders": [
            "DZA",
            "BEN",
            "BFA",
            "TCD",
            "LBY",
            "MLI",
            "NGA"
        ],
        "area": 1267000,
        "demonyms": {
            "eng": {
                "f": "Nigerien",
                "m": "Nigerien"
            },
            "fra": {
                "f": "Nig\xe9rienne",
                "m": "Nig\xe9rien"
            }
        },
        "flag": "\uD83C\uDDF3\uD83C\uDDEA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/VKNU2TLsZcgxM49c8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192786"
        },
        "population": 24206636,
        "gini": {
            "2014": 34.3
        },
        "fifa": "NIG",
        "car": {
            "signs": [
                "RN"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ne.png",
            "svg": "https://flagcdn.com/ne.svg",
            "alt": "The flag of Niger features three equal horizontal bands of orange, white and green, with an orange circle centered in the white band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ne.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ne.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                13.52,
                2.12
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Turkmenistan",
            "official": "Turkmenistan",
            "nativeName": {
                "rus": {
                    "official": "\u0422\u0443\u0440\u043A\u043C\u0435\u043D\u0438\u0441\u0442\u0430\u043D",
                    "common": "\u0422\u0443\u0440\u043A\u043C\u0435\u043D\u0438\u044F"
                },
                "tuk": {
                    "official": "T\xfcrkmenistan",
                    "common": "T\xfcrkmenistan"
                }
            }
        },
        "tld": [
            ".tm"
        ],
        "cca2": "TM",
        "ccn3": "795",
        "cca3": "TKM",
        "cioc": "TKM",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "TMT": {
                "name": "Turkmenistan manat",
                "symbol": "m"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "93"
            ]
        },
        "capital": [
            "Ashgabat"
        ],
        "altSpellings": [
            "TM"
        ],
        "region": "Asia",
        "subregion": "Central Asia",
        "languages": {
            "rus": "Russian",
            "tuk": "Turkmen"
        },
        "translations": {
            "ara": {
                "official": "\u062A\u0631\u0643\u0645\u0627\u0646\u0633\u062A\u0627\u0646",
                "common": "\u062A\u0631\u0643\u0645\u0627\u0646\u0633\u062A\u0627\u0646"
            },
            "bre": {
                "official": "Republik Turkmenistan",
                "common": "Turkmenistan"
            },
            "ces": {
                "official": "Turkmenist\xe1n",
                "common": "Turkmenist\xe1n"
            },
            "cym": {
                "official": "Turkmenistan",
                "common": "Turkmenistan"
            },
            "deu": {
                "official": "Turkmenistan",
                "common": "Turkmenistan"
            },
            "est": {
                "official": "T\xfcrkmenistan",
                "common": "T\xfcrkmenistan"
            },
            "fin": {
                "official": "Turkmenistan",
                "common": "Turkmenistan"
            },
            "fra": {
                "official": "Turkm\xe9nistan",
                "common": "Turkm\xe9nistan"
            },
            "hrv": {
                "official": "Turkmenistan",
                "common": "Turkmenistan"
            },
            "hun": {
                "official": "T\xfcrkm\xe9n K\xf6zt\xe1rsas\xe1g",
                "common": "T\xfcrkmeniszt\xe1n"
            },
            "ita": {
                "official": "Turkmenistan",
                "common": "Turkmenistan"
            },
            "jpn": {
                "official": "\u30C8\u30EB\u30AF\u30E1\u30CB\u30B9\u30BF\u30F3",
                "common": "\u30C8\u30EB\u30AF\u30E1\u30CB\u30B9\u30BF\u30F3"
            },
            "kor": {
                "official": "\uD22C\uB974\uD06C\uBA54\uB2C8\uC2A4\uD0C4",
                "common": "\uD22C\uB974\uD06C\uBA54\uB2C8\uC2A4\uD0C4"
            },
            "nld": {
                "official": "Turkmenistan",
                "common": "Turkmenistan"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u062E\u0644\u0642 \u062A\u0631\u06A9\u0645\u0646\u0633\u062A\u0627\u0646",
                "common": "\u062A\u0631\u06A9\u0645\u0646\u0633\u062A\u0627\u0646"
            },
            "pol": {
                "official": "Republika Turkmenistanu",
                "common": "Turkmenistan"
            },
            "por": {
                "official": "Turcomenist\xe3o",
                "common": "Turquemenist\xe3o"
            },
            "rus": {
                "official": "\u0422\u0443\u0440\u043A\u043C\u0435\u043D\u0438\u0441\u0442\u0430\u043D",
                "common": "\u0422\u0443\u0440\u043A\u043C\u0435\u043D\u0438\u044F"
            },
            "slk": {
                "official": "Turkm\xe9nsko",
                "common": "Turkm\xe9nsko"
            },
            "spa": {
                "official": "Turkmenist\xe1n",
                "common": "Turkmenist\xe1n"
            },
            "srp": {
                "official": "\u0422\u0443\u0440\u043A\u043C\u0435\u043D\u0438\u0441\u0442\u0430\u043D",
                "common": "\u0422\u0443\u0440\u043A\u043C\u0435\u043D\u0438\u0441\u0442\u0430\u043D"
            },
            "swe": {
                "official": "Turkmenistan",
                "common": "Turkmenistan"
            },
            "tur": {
                "official": "T\xfcrkmenistan",
                "common": "T\xfcrkmenistan"
            },
            "urd": {
                "official": "\u062A\u0631\u06A9\u0645\u0627\u0646\u0633\u062A\u0627\u0646",
                "common": "\u062A\u0631\u06A9\u0645\u0627\u0646\u0633\u062A\u0627\u0646"
            },
            "zho": {
                "official": "\u571F\u5E93\u66FC\u65AF\u5766",
                "common": "\u571F\u5E93\u66FC\u65AF\u5766"
            }
        },
        "latlng": [
            40,
            60
        ],
        "landlocked": true,
        "borders": [
            "AFG",
            "IRN",
            "KAZ",
            "UZB"
        ],
        "area": 488100,
        "demonyms": {
            "eng": {
                "f": "Turkmen",
                "m": "Turkmen"
            },
            "fra": {
                "f": "Turkm\xe8ne",
                "m": "Turkm\xe8ne"
            }
        },
        "flag": "\uD83C\uDDF9\uD83C\uDDF2",
        "maps": {
            "googleMaps": "https://goo.gl/maps/cgfUcaQHSWKuqeKk9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/223026"
        },
        "population": 6031187,
        "gini": {
            "1998": 40.8
        },
        "fifa": "TKM",
        "car": {
            "signs": [
                "TM"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+05:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/tm.png",
            "svg": "https://flagcdn.com/tm.svg",
            "alt": "The flag of Turkmenistan has a green field. It features a red vertical band, bearing five carpet guls stacked above two crossed olive branches, near the hoist end of the field. Just to the fly side of the vertical band near the top edge of the field is a hoist-side facing white crescent and five small five-pointed white stars placed just outside the crescent opening."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/tm.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/tm.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                37.95,
                58.38
            ]
        },
        "postalCode": {
            "format": "######",
            "regex": "^(\\d{6})$"
        }
    },
    {
        "name": {
            "common": "Sierra Leone",
            "official": "Republic of Sierra Leone",
            "nativeName": {
                "eng": {
                    "official": "Republic of Sierra Leone",
                    "common": "Sierra Leone"
                }
            }
        },
        "tld": [
            ".sl"
        ],
        "cca2": "SL",
        "ccn3": "694",
        "cca3": "SLE",
        "cioc": "SLE",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "SLL": {
                "name": "Sierra Leonean leone",
                "symbol": "Le"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "32"
            ]
        },
        "capital": [
            "Freetown"
        ],
        "altSpellings": [
            "SL",
            "Republic of Sierra Leone"
        ],
        "region": "Africa",
        "subregion": "Western Africa",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u064A\u0631\u0627\u0644\u064A\u0648\u0646",
                "common": "\u0633\u064A\u0631\u0627\u0644\u064A\u0648\u0646"
            },
            "bre": {
                "official": "Republik Sierra Leone",
                "common": "Sierra Leone"
            },
            "ces": {
                "official": "Republika Sierra Leone",
                "common": "Sierra Leone"
            },
            "cym": {
                "official": "Republic of Sierra Leone",
                "common": "Sierra Leone"
            },
            "deu": {
                "official": "Republik Sierra Leone",
                "common": "Sierra Leone"
            },
            "est": {
                "official": "Sierra Leone Vabariik",
                "common": "Sierra Leone"
            },
            "fin": {
                "official": "Sierra Leonen tasavalta",
                "common": "Sierra Leone"
            },
            "fra": {
                "official": "R\xe9publique de Sierra Leone",
                "common": "Sierra Leone"
            },
            "hrv": {
                "official": "Republika Sijera Leone",
                "common": "Sijera Leone"
            },
            "hun": {
                "official": "Sierra Leone K\xf6zt\xe1rsas\xe1g",
                "common": "Sierra Leone"
            },
            "ita": {
                "official": "Repubblica della Sierra Leone",
                "common": "Sierra Leone"
            },
            "jpn": {
                "official": "\u30B7\u30A8\u30E9\u30EC\u30AA\u30CD\u5171\u548C\u56FD",
                "common": "\u30B7\u30A8\u30E9\u30EC\u30AA\u30CD"
            },
            "kor": {
                "official": "\uC2DC\uC5D0\uB77C\uB9AC\uC628 \uACF5\uD654\uAD6D",
                "common": "\uC2DC\uC5D0\uB77C\uB9AC\uC628"
            },
            "nld": {
                "official": "Republiek Sierra Leone",
                "common": "Sierra Leone"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u06CC\u0631\u0627\u0644\u0626\u0648\u0646",
                "common": "\u0633\u06CC\u0631\u0627\u0644\u0626\u0648\u0646"
            },
            "pol": {
                "official": "Sierra Leone",
                "common": "Sierra Leone"
            },
            "por": {
                "official": "Rep\xfablica da Serra Leoa",
                "common": "Serra Leoa"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u044C\u0435\u0440\u0440\u0430-\u041B\u0435\u043E\u043D\u0435",
                "common": "\u0421\u044C\u0435\u0440\u0440\u0430-\u041B\u0435\u043E\u043D\u0435"
            },
            "slk": {
                "official": "Sierraleonsk\xe1 republika",
                "common": "Sierra Leone"
            },
            "spa": {
                "official": "Rep\xfablica de Sierra Leona",
                "common": "Sierra Leone"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0438\u0458\u0435\u0440\u0430 \u041B\u0435\u043E\u043D\u0435",
                "common": "\u0421\u0438\u0458\u0435\u0440\u0430 \u041B\u0435\u043E\u043D\u0435"
            },
            "swe": {
                "official": "Republiken Sierra Leone",
                "common": "Sierra Leone"
            },
            "tur": {
                "official": "Sierra Leone Cumhuriyeti",
                "common": "Sierra Leone"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u06CC\u0631\u0627\u0644\u06CC\u0648\u0646",
                "common": "\u0633\u06CC\u0631\u0627\u0644\u06CC\u0648\u0646"
            },
            "zho": {
                "official": "\u585E\u62C9\u5229\u6602\u5171\u548C\u56FD",
                "common": "\u585E\u62C9\u5229\u6602"
            }
        },
        "latlng": [
            8.5,
            -11.5
        ],
        "landlocked": false,
        "borders": [
            "GIN",
            "LBR"
        ],
        "area": 71740,
        "demonyms": {
            "eng": {
                "f": "Sierra Leonean",
                "m": "Sierra Leonean"
            },
            "fra": {
                "f": "Sierra-leonaise",
                "m": "Sierra-leonais"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDF1",
        "maps": {
            "googleMaps": "https://goo.gl/maps/jhacar85oq9QaeKB7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192777"
        },
        "population": 7976985,
        "gini": {
            "2018": 35.7
        },
        "fifa": "SLE",
        "car": {
            "signs": [
                "WAL"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/sl.png",
            "svg": "https://flagcdn.com/sl.svg",
            "alt": "The flag of Sierra Leone is composed of three equal horizontal bands of green, white and blue."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/sl.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/sl.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                8.48,
                -13.23
            ]
        }
    },
    {
        "name": {
            "common": "Samoa",
            "official": "Independent State of Samoa",
            "nativeName": {
                "eng": {
                    "official": "Independent State of Samoa",
                    "common": "Samoa"
                },
                "smo": {
                    "official": "Malo Sa\u02BBoloto Tuto\u02BBatasi o S\u0101moa",
                    "common": "S\u0101moa"
                }
            }
        },
        "tld": [
            ".ws"
        ],
        "cca2": "WS",
        "ccn3": "882",
        "cca3": "WSM",
        "cioc": "SAM",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "WST": {
                "name": "Samoan t\u0101l\u0101",
                "symbol": "T"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "85"
            ]
        },
        "capital": [
            "Apia"
        ],
        "altSpellings": [
            "WS",
            "Independent State of Samoa",
            "Malo Sa\u02BBoloto Tuto\u02BBatasi o S\u0101moa"
        ],
        "region": "Oceania",
        "subregion": "Polynesia",
        "languages": {
            "eng": "English",
            "smo": "Samoan"
        },
        "translations": {
            "ara": {
                "official": "\u062F\u0648\u0644\u0629 \u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0645\u0633\u062A\u0642\u0644\u0629",
                "common": "\u0633\u0627\u0645\u0648\u0627"
            },
            "bre": {
                "official": "Stad Dizalc'h Samoa",
                "common": "Samoa"
            },
            "ces": {
                "official": "Nez\xe1visl\xfd st\xe1t Samoa",
                "common": "Samoa"
            },
            "cym": {
                "official": "Independent State of Samoa",
                "common": "Samoa"
            },
            "deu": {
                "official": "Unabh\xe4ngige Staat Samoa",
                "common": "Samoa"
            },
            "est": {
                "official": "Samoa Iseseisvusriik",
                "common": "Samoa"
            },
            "fin": {
                "official": "Samoan itsen\xe4inen valtio",
                "common": "Samoa"
            },
            "fra": {
                "official": "Samoa",
                "common": "Samoa"
            },
            "hrv": {
                "official": "Nezavisna Dr\u017Eava Samoa",
                "common": "Samoa"
            },
            "hun": {
                "official": "Szamoai F\xfcggetlen \xc1llam",
                "common": "Szamoa"
            },
            "ita": {
                "official": "Stato indipendente di Samoa",
                "common": "Samoa"
            },
            "jpn": {
                "official": "\u30B5\u30E2\u30A2\u72EC\u7ACB\u56FD",
                "common": "\u30B5\u30E2\u30A2"
            },
            "kor": {
                "official": "\uC0AC\uBAA8\uC544 \uB3C5\uB9BD\uAD6D",
                "common": "\uC0AC\uBAA8\uC544"
            },
            "nld": {
                "official": "Onafhankelijke Staat Samoa",
                "common": "Samoa"
            },
            "per": {
                "official": "\u0627\u06CC\u0627\u0644\u062A \u0645\u0633\u062A\u0642\u0644 \u0633\u0627\u0645\u0648\u0622",
                "common": "\u0633\u0627\u0645\u0648\u0622"
            },
            "pol": {
                "official": "Niezale\u017Cne Pa\u0144stwo Samoa",
                "common": "Samoa"
            },
            "por": {
                "official": "Estado Independente de Samoa",
                "common": "Samoa"
            },
            "rus": {
                "official": "\u041D\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043C\u043E\u0435 \u0413\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u0421\u0430\u043C\u043E\u0430",
                "common": "\u0421\u0430\u043C\u043E\u0430"
            },
            "slk": {
                "official": "Nez\xe1visl\xfd \u0161t\xe1tSamoa",
                "common": "Samoa"
            },
            "spa": {
                "official": "Estado Independiente de Samoa",
                "common": "Samoa"
            },
            "srp": {
                "official": "\u041D\u0435\u0437\u0430\u0432\u0438\u0441\u043D\u0430 \u0414\u0440\u0436\u0430\u0432\u0430 \u0421\u0430\u043C\u043E\u0430",
                "common": "\u0421\u0430\u043C\u043E\u0430"
            },
            "swe": {
                "official": "Sj\xe4lvst\xe4ndiga staten Samoa",
                "common": "Samoa"
            },
            "tur": {
                "official": "Ba\u011F\u0131ms\u0131z Samoa Devleti",
                "common": "Ba\u011F\u0131ms\u0131z Samoa Devleti"
            },
            "urd": {
                "official": "\u0622\u0632\u0627\u062F \u0633\u0644\u0637\u0646\u062A\u0650 \u0633\u0627\u0645\u0648\u0627",
                "common": "\u0633\u0627\u0645\u0648\u0648\u0627"
            },
            "zho": {
                "official": "\u8428\u6469\u4E9A\u72EC\u7ACB\u56FD",
                "common": "\u8428\u6469\u4E9A"
            }
        },
        "latlng": [
            -13.58333333,
            -172.33333333
        ],
        "landlocked": false,
        "area": 2842,
        "demonyms": {
            "eng": {
                "f": "Samoan",
                "m": "Samoan"
            },
            "fra": {
                "f": "Samoane",
                "m": "Samoan"
            }
        },
        "flag": "\uD83C\uDDFC\uD83C\uDDF8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/CFC9fEFP9cfkYUBF9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1872673"
        },
        "population": 198410,
        "gini": {
            "2013": 38.7
        },
        "fifa": "SAM",
        "car": {
            "signs": [
                "WS"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+13:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ws.png",
            "svg": "https://flagcdn.com/ws.svg",
            "alt": "The flag of Samoa has a red field. A blue rectangle, bearing a representation of the Southern Cross made up of five large and one smaller five-pointed white stars, is superimposed in the canton."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ws.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ws.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -13.82,
                -171.77
            ]
        }
    },
    {
        "name": {
            "common": "Senegal",
            "official": "Republic of Senegal",
            "nativeName": {
                "fra": {
                    "official": "R\xe9publique du S\xe9n\xe9gal",
                    "common": "S\xe9n\xe9gal"
                }
            }
        },
        "tld": [
            ".sn"
        ],
        "cca2": "SN",
        "ccn3": "686",
        "cca3": "SEN",
        "cioc": "SEN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "XOF": {
                "name": "West African CFA franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "21"
            ]
        },
        "capital": [
            "Dakar"
        ],
        "altSpellings": [
            "SN",
            "Republic of Senegal",
            "R\xe9publique du S\xe9n\xe9gal"
        ],
        "region": "Africa",
        "subregion": "Western Africa",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0633\u0646\u063A\u0627\u0644",
                "common": "\u0627\u0644\u0633\u0646\u063A\u0627\u0644"
            },
            "bre": {
                "official": "Republik Senegal",
                "common": "Senegal"
            },
            "ces": {
                "official": "Senegalsk\xe1 republika",
                "common": "Senegal"
            },
            "cym": {
                "official": "Republic of Senegal",
                "common": "Senegal"
            },
            "deu": {
                "official": "Republik Senegal",
                "common": "Senegal"
            },
            "est": {
                "official": "Senegali Vabariik",
                "common": "Senegal"
            },
            "fin": {
                "official": "Senegalin tasavalta",
                "common": "Senegal"
            },
            "fra": {
                "official": "R\xe9publique du S\xe9n\xe9gal",
                "common": "S\xe9n\xe9gal"
            },
            "hrv": {
                "official": "Republika Senegal",
                "common": "Senegal"
            },
            "hun": {
                "official": "Szeneg\xe1li K\xf6zt\xe1rsas\xe1g",
                "common": "Szeneg\xe1l"
            },
            "ita": {
                "official": "Repubblica del Senegal",
                "common": "Senegal"
            },
            "jpn": {
                "official": "\u30BB\u30CD\u30AC\u30EB\u5171\u548C\u56FD",
                "common": "\u30BB\u30CD\u30AC\u30EB"
            },
            "kor": {
                "official": "\uC138\uB124\uAC08 \uACF5\uD654\uAD6D",
                "common": "\uC138\uB124\uAC08"
            },
            "nld": {
                "official": "Republiek Senegal",
                "common": "Senegal"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u0646\u06AF\u0627\u0644",
                "common": "\u0633\u0646\u06AF\u0627\u0644"
            },
            "pol": {
                "official": "Senegal",
                "common": "Senegal"
            },
            "por": {
                "official": "Rep\xfablica do Senegal",
                "common": "Senegal"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u043D\u0435\u0433\u0430\u043B",
                "common": "\u0421\u0435\u043D\u0435\u0433\u0430\u043B"
            },
            "slk": {
                "official": "Senegalsk\xe1 republika",
                "common": "Senegal"
            },
            "spa": {
                "official": "Rep\xfablica de Senegal",
                "common": "Senegal"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u043D\u0435\u0433\u0430\u043B",
                "common": "\u0421\u0435\u043D\u0435\u0433\u0430\u043B"
            },
            "swe": {
                "official": "Republiken Senegal",
                "common": "Senegal"
            },
            "tur": {
                "official": "Senegal Cumhuriyeti",
                "common": "Senegal"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u06CC\u0646\u06CC\u06AF\u0627\u0644",
                "common": "\u0633\u06CC\u0646\u06CC\u06AF\u0627\u0644"
            },
            "zho": {
                "official": "\u585E\u5185\u52A0\u5C14\u5171\u548C\u56FD",
                "common": "\u585E\u5185\u52A0\u5C14"
            }
        },
        "latlng": [
            14,
            -14
        ],
        "landlocked": false,
        "borders": [
            "GMB",
            "GIN",
            "GNB",
            "MLI",
            "MRT"
        ],
        "area": 196722,
        "demonyms": {
            "eng": {
                "f": "Senegalese",
                "m": "Senegalese"
            },
            "fra": {
                "f": "S\xe9n\xe9galaise",
                "m": "S\xe9n\xe9galais"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDF3",
        "maps": {
            "googleMaps": "https://goo.gl/maps/o5f1uD5nyihCL3HCA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192775"
        },
        "population": 16743930,
        "gini": {
            "2011": 40.3
        },
        "fifa": "SEN",
        "car": {
            "signs": [
                "SN"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/sn.png",
            "svg": "https://flagcdn.com/sn.svg",
            "alt": "The flag of Senegal is composed of three equal vertical bands of green, golden-yellow and red, with a five-pointed green star centered in the golden-yellow band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/sn.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/sn.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                14.73,
                -17.63
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Georgia",
            "official": "Georgia",
            "nativeName": {
                "kat": {
                    "official": "\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD",
                    "common": "\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD"
                }
            }
        },
        "tld": [
            ".ge"
        ],
        "cca2": "GE",
        "ccn3": "268",
        "cca3": "GEO",
        "cioc": "GEO",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "GEL": {
                "name": "lari",
                "symbol": "\u20BE"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "95"
            ]
        },
        "capital": [
            "Tbilisi"
        ],
        "altSpellings": [
            "GE",
            "Sakartvelo"
        ],
        "region": "Asia",
        "subregion": "Western Asia",
        "languages": {
            "kat": "Georgian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0648\u0631\u062C\u064A\u0627",
                "common": "\u062C\u0648\u0631\u062C\u064A\u0627"
            },
            "bre": {
                "official": "Republik Jorjia",
                "common": "Jorjia"
            },
            "ces": {
                "official": "Gruzie",
                "common": "Gruzie"
            },
            "cym": {
                "official": "Georgia",
                "common": "Georgia"
            },
            "deu": {
                "official": "Georgien",
                "common": "Georgien"
            },
            "est": {
                "official": "Gruusia",
                "common": "Gruusia"
            },
            "fin": {
                "official": "Georgia",
                "common": "Georgia"
            },
            "fra": {
                "official": "R\xe9publique de G\xe9orgie",
                "common": "G\xe9orgie"
            },
            "hrv": {
                "official": "Gruzija",
                "common": "Gruzija"
            },
            "hun": {
                "official": "Gr\xfazia",
                "common": "Gr\xfazia"
            },
            "ita": {
                "official": "Georgia",
                "common": "Georgia"
            },
            "jpn": {
                "official": "\u30B0\u30EB\u30B8\u30A2",
                "common": "\u30B0\u30EB\u30B8\u30A2"
            },
            "kor": {
                "official": "\uC870\uC9C0\uC544",
                "common": "\uC870\uC9C0\uC544"
            },
            "nld": {
                "official": "Georgia",
                "common": "Georgi\xeb"
            },
            "per": {
                "official": "\u06AF\u0631\u062C\u0633\u062A\u0627\u0646",
                "common": "\u06AF\u0631\u062C\u0633\u062A\u0627\u0646"
            },
            "pol": {
                "official": "Gruzja",
                "common": "Gruzja"
            },
            "por": {
                "official": "Georgia",
                "common": "Ge\xf3rgia"
            },
            "rus": {
                "official": "\u0413\u0440\u0443\u0437\u0438\u044F",
                "common": "\u0413\u0440\u0443\u0437\u0438\u044F"
            },
            "slk": {
                "official": "Gruz\xednsko",
                "common": "Gruz\xednsko"
            },
            "spa": {
                "official": "Georgia",
                "common": "Georgia"
            },
            "srp": {
                "official": "\u0413\u0440\u0443\u0437\u0438\u0458\u0430",
                "common": "\u0413\u0440\u0443\u0437\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Georgien",
                "common": "Georgien"
            },
            "tur": {
                "official": "G\xfcrcistan",
                "common": "G\xfcrcistan"
            },
            "urd": {
                "official": "\u062C\u0627\u0631\u062C\u06CC\u0627",
                "common": "\u062C\u0627\u0631\u062C\u06CC\u0627"
            },
            "zho": {
                "official": "\u683C\u9C81\u5409\u4E9A",
                "common": "\u683C\u9C81\u5409\u4E9A"
            }
        },
        "latlng": [
            42,
            43.5
        ],
        "landlocked": false,
        "borders": [
            "ARM",
            "AZE",
            "RUS",
            "TUR"
        ],
        "area": 69700,
        "demonyms": {
            "eng": {
                "f": "Georgian",
                "m": "Georgian"
            },
            "fra": {
                "f": "G\xe9orgienne",
                "m": "G\xe9orgien"
            }
        },
        "flag": "\uD83C\uDDEC\uD83C\uDDEA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/bvCaGBePR1ZEDK5cA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/28699"
        },
        "population": 3714000,
        "gini": {
            "2019": 35.9
        },
        "fifa": "GEO",
        "car": {
            "signs": [
                "GE"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+04:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ge.png",
            "svg": "https://flagcdn.com/ge.svg",
            "alt": "The flag of Georgia has a white field with a large centered red cross that extends to the edges and divides the field into four quarters. A small red Bolnur-Katskhuri cross is centered in each quarter."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ge.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ge.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                41.68,
                44.83
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Namibia",
            "official": "Republic of Namibia",
            "nativeName": {
                "afr": {
                    "official": "Republiek van Namibi\xeb",
                    "common": "Namibi\xeb"
                },
                "deu": {
                    "official": "Republik Namibia",
                    "common": "Namibia"
                },
                "eng": {
                    "official": "Republic of Namibia",
                    "common": "Namibia"
                },
                "her": {
                    "official": "Republic of Namibia",
                    "common": "Namibia"
                },
                "hgm": {
                    "official": "Republic of Namibia",
                    "common": "Namibia"
                },
                "kwn": {
                    "official": "Republic of Namibia",
                    "common": "Namibia"
                },
                "loz": {
                    "official": "Republic of Namibia",
                    "common": "Namibia"
                },
                "ndo": {
                    "official": "Republic of Namibia",
                    "common": "Namibia"
                },
                "tsn": {
                    "official": "Lefatshe la Namibia",
                    "common": "Namibia"
                }
            }
        },
        "tld": [
            ".na"
        ],
        "cca2": "NA",
        "ccn3": "516",
        "cca3": "NAM",
        "cioc": "NAM",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "NAD": {
                "name": "Namibian dollar",
                "symbol": "$"
            },
            "ZAR": {
                "name": "South African rand",
                "symbol": "R"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "64"
            ]
        },
        "capital": [
            "Windhoek"
        ],
        "altSpellings": [
            "NA",
            "Namibi\xeb",
            "Republic of Namibia"
        ],
        "region": "Africa",
        "subregion": "Southern Africa",
        "languages": {
            "afr": "Afrikaans",
            "deu": "German",
            "eng": "English",
            "her": "Herero",
            "hgm": "Khoekhoe",
            "kwn": "Kwangali",
            "loz": "Lozi",
            "ndo": "Ndonga",
            "tsn": "Tswana"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0646\u0627\u0645\u064A\u0628\u064A\u0627",
                "common": "\u0646\u0627\u0645\u064A\u0628\u064A\u0627"
            },
            "bre": {
                "official": "Republik Namibia",
                "common": "Namibia"
            },
            "ces": {
                "official": "Namibijsk\xe1 republika",
                "common": "Namibie"
            },
            "cym": {
                "official": "Republic of Namibia",
                "common": "Namibia"
            },
            "deu": {
                "official": "Republik Namibia",
                "common": "Namibia"
            },
            "est": {
                "official": "Namiibia Vabariik",
                "common": "Namiibia"
            },
            "fin": {
                "official": "Namibian tasavalta",
                "common": "Namibia"
            },
            "fra": {
                "official": "R\xe9publique de Namibie",
                "common": "Namibie"
            },
            "hrv": {
                "official": "Republika Namibija",
                "common": "Namibija"
            },
            "hun": {
                "official": "Nam\xedbiai K\xf6zt\xe1rsas\xe1g",
                "common": "Nam\xedbia"
            },
            "ita": {
                "official": "Repubblica di Namibia",
                "common": "Namibia"
            },
            "jpn": {
                "official": "\u30CA\u30DF\u30D3\u30A2\u5171\u548C\u56FD",
                "common": "\u30CA\u30DF\u30D3\u30A2"
            },
            "kor": {
                "official": "\uB098\uBBF8\uBE44\uC544 \uACF5\uD654\uAD6D",
                "common": "\uB098\uBBF8\uBE44\uC544"
            },
            "nld": {
                "official": "Republiek Namibi\xeb",
                "common": "Namibi\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0646\u0627\u0645\u06CC\u0628\u06CC\u0627",
                "common": "\u0646\u0627\u0645\u06CC\u0628\u06CC\u0627"
            },
            "pol": {
                "official": "Republika Namibii",
                "common": "Namibia"
            },
            "por": {
                "official": "Rep\xfablica da Nam\xedbia",
                "common": "Nam\xedbia"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0430\u043C\u0438\u0431\u0438\u044F",
                "common": "\u041D\u0430\u043C\u0438\u0431\u0438\u044F"
            },
            "slk": {
                "official": "Nam\xedbijsk\xe1 republika",
                "common": "Nam\xedbia"
            },
            "spa": {
                "official": "Rep\xfablica de Namibia",
                "common": "Namibia"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0430\u043C\u0438\u0431\u0438\u0458\u0430",
                "common": "\u041D\u0430\u043C\u0438\u0431\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Namibia",
                "common": "Namibia"
            },
            "tur": {
                "official": "Namibya Cumhuriyeti",
                "common": "Namibya"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0646\u0645\u06CC\u0628\u06CC\u0627",
                "common": "\u0646\u0645\u06CC\u0628\u06CC\u0627"
            },
            "zho": {
                "official": "\u7EB3\u7C73\u6BD4\u4E9A\u5171\u548C\u56FD",
                "common": "\u7EB3\u7C73\u6BD4\u4E9A"
            }
        },
        "latlng": [
            -22,
            17
        ],
        "landlocked": false,
        "borders": [
            "AGO",
            "BWA",
            "ZAF",
            "ZMB"
        ],
        "area": 825615,
        "demonyms": {
            "eng": {
                "f": "Namibian",
                "m": "Namibian"
            },
            "fra": {
                "f": "Namibienne",
                "m": "Namibien"
            }
        },
        "flag": "\uD83C\uDDF3\uD83C\uDDE6",
        "maps": {
            "googleMaps": "https://goo.gl/maps/oR1i8BFEYX3EY83WA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/195266"
        },
        "population": 2540916,
        "gini": {
            "2015": 59.1
        },
        "fifa": "NAM",
        "car": {
            "signs": [
                "NAM"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/na.png",
            "svg": "https://flagcdn.com/na.svg",
            "alt": "The flag of Namibia features a white-edged red diagonal band that extends from the lower hoist-side corner to the upper fly-side corner of the field. Above and beneath this band are a blue and green triangle respectively. A gold sun with twelve triangular rays is situated on the hoist side of the upper triangle."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/na.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/na.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -22.57,
                17.08
            ]
        }
    },
    {
        "name": {
            "common": "South Sudan",
            "official": "Republic of South Sudan",
            "nativeName": {
                "eng": {
                    "official": "Republic of South Sudan",
                    "common": "South Sudan"
                }
            }
        },
        "tld": [
            ".ss"
        ],
        "cca2": "SS",
        "ccn3": "728",
        "cca3": "SSD",
        "cioc": "SSD",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "SSP": {
                "name": "South Sudanese pound",
                "symbol": "\xa3"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "11"
            ]
        },
        "capital": [
            "Juba"
        ],
        "altSpellings": [
            "SS"
        ],
        "region": "Africa",
        "subregion": "Middle Africa",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062C\u0646\u0648\u0628 \u0627\u0644\u0633\u0648\u062F\u0627\u0646",
                "common": "\u062C\u0646\u0648\u0628 \u0627\u0644\u0633\u0648\u062F\u0627\u0646"
            },
            "bre": {
                "official": "Republik Soudan ar Su",
                "common": "Soudan ar Su"
            },
            "ces": {
                "official": "Jihos\xfad\xe1nsk\xe1 republika",
                "common": "Ji\u017En\xed S\xfad\xe1n"
            },
            "cym": {
                "official": "Republic of South Sudan",
                "common": "South Sudan"
            },
            "deu": {
                "official": "Republik S\xfcdsudan",
                "common": "S\xfcdsudan"
            },
            "est": {
                "official": "L\xf5una-Sudaani Vabariik",
                "common": "L\xf5una-Sudaan"
            },
            "fin": {
                "official": "Etel\xe4-Sudanin tasavalta",
                "common": "Etel\xe4-Sudan"
            },
            "fra": {
                "official": "R\xe9publique du Soudan du Sud",
                "common": "Soudan du Sud"
            },
            "hrv": {
                "official": "Republika Ju\u017Eni Sudan",
                "common": "Ju\u017Eni Sudan"
            },
            "hun": {
                "official": "D\xe9l-szud\xe1ni K\xf6zt\xe1rsas\xe1g",
                "common": "D\xe9l-Szud\xe1n"
            },
            "ita": {
                "official": "Repubblica del Sudan del Sud",
                "common": "Sudan del sud"
            },
            "jpn": {
                "official": "\u5357\u30B9\u30FC\u30C0\u30F3\u5171\u548C\u56FD",
                "common": "\u5357\u30B9\u30FC\u30C0\u30F3"
            },
            "kor": {
                "official": "\uB0A8\uC218\uB2E8 \uACF5\uD654\uAD6D",
                "common": "\uB0A8\uC218\uB2E8"
            },
            "nld": {
                "official": "Republiek Zuid-Soedan",
                "common": "Zuid-Soedan"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u0648\u062F\u0627\u0646 \u062C\u0646\u0648\u0628\u06CC",
                "common": "\u0633\u0648\u062F\u0627\u0646 \u062C\u0646\u0648\u0628\u06CC"
            },
            "pol": {
                "official": "Republika Sudanu",
                "common": "Sudan"
            },
            "por": {
                "official": "Rep\xfablica do Sud\xe3o do Sul",
                "common": "Sud\xe3o do Sul"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u042E\u0436\u043D\u044B\u0439 \u0421\u0443\u0434\u0430\u043D",
                "common": "\u042E\u0436\u043D\u044B\u0439 \u0421\u0443\u0434\u0430\u043D"
            },
            "slk": {
                "official": "Juhosud\xe1nska republika",
                "common": "Ju\u017En\xfd Sud\xe1n"
            },
            "spa": {
                "official": "Rep\xfablica de Sud\xe1n del Sur",
                "common": "Sud\xe1n del Sur"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0408\u0443\u0436\u043D\u0438 \u0421\u0443\u0434\u0430\u043D",
                "common": "\u0408\u0443\u0436\u043D\u0438 \u0421\u0443\u0434\u0430\u043D"
            },
            "swe": {
                "official": "Republiken Sydsudan",
                "common": "Sydsudan"
            },
            "tur": {
                "official": "G\xfcney Sudan Cumhuriyeti",
                "common": "G\xfcney Sudan"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062C\u0646\u0648\u0628\u06CC \u0633\u0648\u0688\u0627\u0646",
                "common": "\u062C\u0646\u0648\u0628\u06CC \u0633\u0648\u0688\u0627\u0646"
            },
            "zho": {
                "official": "\u5357\u82CF\u4E39\u5171\u548C\u56FD",
                "common": "\u5357\u82CF\u4E39"
            }
        },
        "latlng": [
            7,
            30
        ],
        "landlocked": true,
        "borders": [
            "CAF",
            "COD",
            "ETH",
            "KEN",
            "SDN",
            "UGA"
        ],
        "area": 619745,
        "demonyms": {
            "eng": {
                "f": "South Sudanese",
                "m": "South Sudanese"
            },
            "fra": {
                "f": "Sud-Soudanaise",
                "m": "Sud-Soudanais"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDF8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/Zm1AYCXb9HSNF1P27",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1656678"
        },
        "population": 11193729,
        "gini": {
            "2016": 44.1
        },
        "fifa": "SSD",
        "car": {
            "signs": [
                ""
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ss.png",
            "svg": "https://flagcdn.com/ss.svg",
            "alt": "The flag of South Sudan is composed of three equal horizontal bands of black, red with white top and bottom edges, and green. A blue equilateral triangle which spans about two-fifth the width of the field is superimposed on the hoist side with its base on the hoist end of the field. At the center of this triangle is a five-pointed yellow star."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ss.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ss.svg"
        },
        "startOfWeek": "sunday",
        "capitalInfo": {
            "latlng": [
                4.85,
                31.62
            ]
        }
    },
    {
        "name": {
            "common": "Thailand",
            "official": "Kingdom of Thailand",
            "nativeName": {
                "tha": {
                    "official": "\u0E23\u0E32\u0E0A\u0E2D\u0E32\u0E13\u0E32\u0E08\u0E31\u0E01\u0E23\u0E44\u0E17\u0E22",
                    "common": "\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22"
                }
            }
        },
        "tld": [
            ".th",
            ".\u0E44\u0E17\u0E22"
        ],
        "cca2": "TH",
        "ccn3": "764",
        "cca3": "THA",
        "cioc": "THA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "THB": {
                "name": "Thai baht",
                "symbol": "\u0E3F"
            }
        },
        "idd": {
            "root": "+6",
            "suffixes": [
                "6"
            ]
        },
        "capital": [
            "Bangkok"
        ],
        "altSpellings": [
            "TH",
            "Prathet",
            "Thai",
            "Kingdom of Thailand",
            "\u0E23\u0E32\u0E0A\u0E2D\u0E32\u0E13\u0E32\u0E08\u0E31\u0E01\u0E23\u0E44\u0E17\u0E22",
            "Ratcha Anachak Thai"
        ],
        "region": "Asia",
        "subregion": "South-Eastern Asia",
        "languages": {
            "tha": "Thai"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0645\u0644\u0643\u0629 \u062A\u0627\u064A\u0644\u0646\u062F",
                "common": "\u062A\u0627\u064A\u0644\u0646\u062F"
            },
            "bre": {
                "official": "Rouantelezh Thailand",
                "common": "Thailand"
            },
            "ces": {
                "official": "Thajsk\xe9 kr\xe1lovstv\xed",
                "common": "Thajsko"
            },
            "cym": {
                "official": "Kingdom of Thailand",
                "common": "Thailand"
            },
            "deu": {
                "official": "K\xf6nigreich Thailand",
                "common": "Thailand"
            },
            "est": {
                "official": "Tai Kuningriik",
                "common": "Tai"
            },
            "fin": {
                "official": "Thaimaan kuningaskunta",
                "common": "Thaimaa"
            },
            "fra": {
                "official": "Royaume de Tha\xeflande",
                "common": "Tha\xeflande"
            },
            "hrv": {
                "official": "Kraljevina Tajland",
                "common": "Tajland"
            },
            "hun": {
                "official": "Thaif\xf6ldi Kir\xe1lys\xe1g",
                "common": "Thaif\xf6ld"
            },
            "ita": {
                "official": "Regno di Thailandia",
                "common": "Tailandia"
            },
            "jpn": {
                "official": "\u30BF\u30A4\u738B\u56FD",
                "common": "\u30BF\u30A4"
            },
            "kor": {
                "official": "\uD0C0\uC774 \uC655\uAD6D",
                "common": "\uD0DC\uAD6D"
            },
            "nld": {
                "official": "Koninkrijk Thailand",
                "common": "Thailand"
            },
            "per": {
                "official": "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u062A\u0627\u06CC\u0644\u0646\u062F",
                "common": "\u062A\u0627\u06CC\u0644\u0646\u062F"
            },
            "pol": {
                "official": "Kr\xf3lestwo Tajlandii",
                "common": "Tajlandia"
            },
            "por": {
                "official": "Reino da Tail\xe2ndia",
                "common": "Tail\xe2ndia"
            },
            "rus": {
                "official": "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0422\u0430\u0438\u043B\u0430\u043D\u0434",
                "common": "\u0422\u0430\u0438\u043B\u0430\u043D\u0434"
            },
            "slk": {
                "official": "Thajsk\xe9 kr\xe1\u013Eovstvo",
                "common": "Thajsko"
            },
            "spa": {
                "official": "Reino de Tailandia",
                "common": "Tailandia"
            },
            "srp": {
                "official": "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0422\u0430\u0458\u043B\u0430\u043D\u0434",
                "common": "\u0422\u0430\u0458\u043B\u0430\u043D\u0434"
            },
            "swe": {
                "official": "Konungariket Thailand",
                "common": "Thailand"
            },
            "tur": {
                "official": "Tayland Krall\u0131\u011F\u0131",
                "common": "Tayland"
            },
            "urd": {
                "official": "\u0645\u0645\u0644\u06A9\u062A\u0650 \u062A\u06BE\u0627\u0626\u06CC \u0644\u06CC\u0646\u0688",
                "common": "\u062A\u06BE\u0627\u0626\u06CC \u0644\u06CC\u0646\u0688"
            },
            "zho": {
                "official": "\u6CF0\u738B\u56FD",
                "common": "\u6CF0\u56FD"
            }
        },
        "latlng": [
            15,
            100
        ],
        "landlocked": false,
        "borders": [
            "MMR",
            "KHM",
            "LAO",
            "MYS"
        ],
        "area": 513120,
        "demonyms": {
            "eng": {
                "f": "Thai",
                "m": "Thai"
            },
            "fra": {
                "f": "Tha\xeflandaise",
                "m": "Tha\xeflandais"
            }
        },
        "flag": "\uD83C\uDDF9\uD83C\uDDED",
        "maps": {
            "googleMaps": "https://goo.gl/maps/qeU6uqsfW4nCCwzw9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2067731"
        },
        "population": 69799978,
        "gini": {
            "2019": 34.9
        },
        "fifa": "THA",
        "car": {
            "signs": [
                "T"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+07:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/th.png",
            "svg": "https://flagcdn.com/th.svg",
            "alt": "The flag of Thailand is composed of five horizontal bands of red, white, blue, white and red, with the central blue band twice the height of the other four bands."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/th.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/th.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                13.75,
                100.52
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Bahrain",
            "official": "Kingdom of Bahrain",
            "nativeName": {
                "ara": {
                    "official": "\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0628\u062D\u0631\u064A\u0646",
                    "common": "\u200F\u0627\u0644\u0628\u062D\u0631\u064A\u0646"
                }
            }
        },
        "tld": [
            ".bh"
        ],
        "cca2": "BH",
        "ccn3": "048",
        "cca3": "BHR",
        "cioc": "BHR",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "BHD": {
                "name": "Bahraini dinar",
                "symbol": ".\u062F.\u0628"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "73"
            ]
        },
        "capital": [
            "Manama"
        ],
        "altSpellings": [
            "BH",
            "Kingdom of Bahrain",
            "Mamlakat al-Ba\u1E25rayn"
        ],
        "region": "Asia",
        "subregion": "Western Asia",
        "languages": {
            "ara": "Arabic"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0628\u062D\u0631\u064A\u0646",
                "common": "\u200F\u0627\u0644\u0628\u062D\u0631\u064A\u0646"
            },
            "bre": {
                "official": "Rouantelezh Bahrein",
                "common": "Bahrein"
            },
            "ces": {
                "official": "Kr\xe1lovstv\xed Bahrajn",
                "common": "Bahrajn"
            },
            "cym": {
                "official": "Teyrnas Bahrein",
                "common": "Bahrain"
            },
            "deu": {
                "official": "K\xf6nigreich Bahrain",
                "common": "Bahrain"
            },
            "est": {
                "official": "Bahreini Kuningriik",
                "common": "Bahrein"
            },
            "fin": {
                "official": "Bahrainin kuningaskunta",
                "common": "Bahrain"
            },
            "fra": {
                "official": "Royaume de Bahre\xefn",
                "common": "Bahre\xefn"
            },
            "hrv": {
                "official": "Kraljevina Bahrein",
                "common": "Bahrein"
            },
            "hun": {
                "official": "Bahreini Kir\xe1lys\xe1g",
                "common": "Bahrein"
            },
            "ita": {
                "official": "Regno del Bahrain",
                "common": "Bahrein"
            },
            "jpn": {
                "official": "\u30D0\u30FC\u30EC\u30FC\u30F3\u738B\u56FD",
                "common": "\u30D0\u30FC\u30EC\u30FC\u30F3"
            },
            "kor": {
                "official": "\uBC14\uB808\uC778 \uC655\uAD6D",
                "common": "\uBC14\uB808\uC778"
            },
            "nld": {
                "official": "Koninkrijk Bahrein",
                "common": "Bahrein"
            },
            "per": {
                "official": "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0628\u062D\u0631\u06CC\u0646",
                "common": "\u0628\u062D\u0631\u06CC\u0646"
            },
            "pol": {
                "official": "Kr\xf3lestwo Bahrajnu",
                "common": "Bahrajn"
            },
            "por": {
                "official": "Reino do Bahrein",
                "common": "Bahrein"
            },
            "rus": {
                "official": "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0411\u0430\u0445\u0440\u0435\u0439\u043D",
                "common": "\u0411\u0430\u0445\u0440\u0435\u0439\u043D"
            },
            "slk": {
                "official": "Bahrajnsk\xe9 kr\xe1\u013Eovstvo",
                "common": "Bahrajn"
            },
            "spa": {
                "official": "Reino de Bahrein",
                "common": "Bahrein"
            },
            "srp": {
                "official": "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0411\u0430\u0445\u0440\u0435\u0438\u043D",
                "common": "\u0411\u0430\u0445\u0440\u0435\u0438\u043D"
            },
            "swe": {
                "official": "Konungariket Bahrain",
                "common": "Bahrain"
            },
            "tur": {
                "official": "Bahreyn Krall\u0131\u011F\u0131",
                "common": "Bahreyn"
            },
            "urd": {
                "official": "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0628\u062D\u0631\u06CC\u0646",
                "common": "\u0628\u062D\u0631\u06CC\u0646"
            },
            "zho": {
                "official": "\u5DF4\u6797\u738B\u56FD",
                "common": "\u5DF4\u6797"
            }
        },
        "latlng": [
            26,
            50.55
        ],
        "landlocked": false,
        "area": 765,
        "demonyms": {
            "eng": {
                "f": "Bahraini",
                "m": "Bahraini"
            },
            "fra": {
                "f": "Bahre\xefnienne",
                "m": "Bahre\xefnien"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDED",
        "maps": {
            "googleMaps": "https://goo.gl/maps/5Zue99Zc6vFBHxzJ7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/378734"
        },
        "population": 1701583,
        "fifa": "BHR",
        "car": {
            "signs": [
                "BRN"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/bh.png",
            "svg": "https://flagcdn.com/bh.svg",
            "alt": "The flag of Bahrain has a red field. On the hoist side, it features a white vertical band that spans about one-third the width of the field and is separated from the rest of the field by five adjoining fly-side pointing white isosceles triangles that serve as a serrated line."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/bh.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/bh.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                26.23,
                50.57
            ]
        },
        "postalCode": {
            "format": "####|###",
            "regex": "^(\\d{3}\\d?)$"
        }
    },
    {
        "name": {
            "common": "Heard Island and McDonald Islands",
            "official": "Heard Island and McDonald Islands",
            "nativeName": {
                "eng": {
                    "official": "Heard Island and McDonald Islands",
                    "common": "Heard Island and McDonald Islands"
                }
            }
        },
        "tld": [
            ".hm",
            ".aq"
        ],
        "cca2": "HM",
        "ccn3": "334",
        "cca3": "HMD",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "idd": {},
        "altSpellings": [
            "HM",
            "Heard Island and McDonald Islands"
        ],
        "region": "Antarctic",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0632\u064A\u0631\u0629 \u0647\u064A\u0631\u062F \u0648\u062C\u0632\u0631 \u0645\u0627\u0643\u062F\u0648\u0646\u0627\u0644\u062F",
                "common": "\u062C\u0632\u064A\u0631\u0629 \u0647\u064A\u0631\u062F \u0648\u062C\u0632\u0631 \u0645\u0627\u0643\u062F\u0648\u0646\u0627\u0644\u062F"
            },
            "bre": {
                "official": "Enez Heard hag Inizi McDonald",
                "common": "Inizi Heard ha McDonald"
            },
            "ces": {
                "official": "Heard\u016Fv ostrov a McDonaldovy ostrovy",
                "common": "Heard\u016Fv ostrov a McDonaldovy ostrovy"
            },
            "cym": {
                "official": "Heard Island and McDonald Islands",
                "common": "Heard Island and McDonald Islands"
            },
            "deu": {
                "official": "Heard und McDonaldinseln",
                "common": "Heard und die McDonaldinseln"
            },
            "est": {
                "official": "Heardi ja McDonaldi saarte ala",
                "common": "Heard ja McDonald"
            },
            "fin": {
                "official": "Heard ja McDonaldinsaaret",
                "common": "Heard ja McDonaldinsaaret"
            },
            "fra": {
                "official": "Des \xeeles Heard et McDonald",
                "common": "\xceles Heard-et-MacDonald"
            },
            "hrv": {
                "official": "Otok Heard i oto\u010Dje McDonald",
                "common": "Otok Heard i oto\u010Dje McDonald"
            },
            "hun": {
                "official": "Heard-sziget \xe9s McDonald-szigetek",
                "common": "Heard-sziget \xe9s McDonald-szigetek"
            },
            "ita": {
                "official": "Isole Heard e McDonald",
                "common": "Isole Heard e McDonald"
            },
            "jpn": {
                "official": "\u30CF\u30FC\u30C9\u5CF6\u3068\u30DE\u30AF\u30C9\u30CA\u30EB\u30C9\u8AF8\u5CF6",
                "common": "\u30CF\u30FC\u30C9\u5CF6\u3068\u30DE\u30AF\u30C9\u30CA\u30EB\u30C9\u8AF8\u5CF6"
            },
            "kor": {
                "official": "\uD5C8\uB4DC \uB9E5\uB3C4\uB110\uB4DC \uC81C\uB3C4",
                "common": "\uD5C8\uB4DC \uB9E5\uB3C4\uB110\uB4DC \uC81C\uB3C4"
            },
            "nld": {
                "official": "Heard en McDonaldeilanden",
                "common": "Heard-en McDonaldeilanden"
            },
            "per": {
                "official": "\u062C\u0632\u06CC\u0631\u0647 \u0647\u0631\u062F \u0648 \u062C\u0632\u0627\u06CC\u0631 \u0645\u06A9\u200C\u062F\u0648\u0646\u0627\u0644\u062F",
                "common": "\u062C\u0632\u06CC\u0631\u0647 \u0647\u0631\u062F \u0648 \u062C\u0632\u0627\u06CC\u0631 \u0645\u06A9\u200C\u062F\u0648\u0646\u0627\u0644\u062F"
            },
            "pol": {
                "official": "Terytorium Wysp Heard i McDonalda",
                "common": "Wyspy Heard i McDonalda"
            },
            "por": {
                "official": "Ilha Heard e Ilhas McDonald",
                "common": "Ilha Heard e Ilhas McDonald"
            },
            "rus": {
                "official": "\u041E\u0441\u0442\u0440\u043E\u0432 \u0425\u0435\u0440\u0434 \u0438 \u043E\u0441\u0442\u0440\u043E\u0432\u0430 \u041C\u0430\u043A\u0434\u043E\u043D\u0430\u043B\u044C\u0434",
                "common": "\u041E\u0441\u0442\u0440\u043E\u0432 \u0425\u0435\u0440\u0434 \u0438 \u043E\u0441\u0442\u0440\u043E\u0432\u0430 \u041C\u0430\u043A\u0434\u043E\u043D\u0430\u043B\u044C\u0434"
            },
            "slk": {
                "official": "Terit\xf3rium Heardovho ostrova a Macdonaldov\xfdch ostrovov",
                "common": "Heardov ostrov"
            },
            "spa": {
                "official": "Islas Heard y McDonald",
                "common": "Islas Heard y McDonald"
            },
            "srp": {
                "official": "\u041E\u0441\u0442\u0440\u0432\u0430 \u0425\u0435\u0440\u0434 \u0438 \u041C\u0430\u043A\u0434\u043E\u043D\u0430\u043B\u0434",
                "common": "\u041E\u0441\u0442\u0440\u0432\u0430 \u0425\u0435\u0440\u0434 \u0438 \u041C\u0430\u043A\u0434\u043E\u043D\u0430\u043B\u0434"
            },
            "swe": {
                "official": "Heard- och McDonald\xf6arna",
                "common": "Heard- och McDonald\xf6arna"
            },
            "tur": {
                "official": "Heard Adas\u0131 ve McDonald Adalar\u0131",
                "common": "Heard Adas\u0131 ve McDonald Adalar\u0131"
            },
            "urd": {
                "official": "\u062C\u0632\u06CC\u0631\u06C1 \u06C1\u0631\u0688 \u0648 \u062C\u0632\u0627\u0626\u0631 \u0645\u06A9\u0688\u0648\u0646\u0644\u0688",
                "common": "\u062C\u0632\u06CC\u0631\u06C1 \u06C1\u0631\u0688 \u0648 \u062C\u0632\u0627\u0626\u0631 \u0645\u06A9\u0688\u0648\u0646\u0644\u0688"
            },
            "zho": {
                "official": "\u8D6B\u5FB7\u5C9B\u548C\u9EA6\u5F53\u52B3\u7FA4\u5C9B",
                "common": "\u8D6B\u5FB7\u5C9B\u548C\u9EA6\u5F53\u52B3\u7FA4\u5C9B"
            }
        },
        "latlng": [
            53.0818,
            73.5042
        ],
        "landlocked": false,
        "area": 412,
        "demonyms": {
            "eng": {
                "f": "Heard and McDonald Islander",
                "m": "Heard and McDonald Islander"
            }
        },
        "flag": "\uD83C\uDDED\uD83C\uDDF2",
        "maps": {
            "googleMaps": "https://goo.gl/maps/k5FBAiVaVyozuYeA7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2177227"
        },
        "population": 0,
        "car": {
            "signs": [
                ""
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+05:00"
        ],
        "continents": [
            "Antarctica"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/hm.png",
            "svg": "https://flagcdn.com/hm.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {}
    },
    {
        "name": {
            "common": "Falkland Islands",
            "official": "Falkland Islands",
            "nativeName": {
                "eng": {
                    "official": "Falkland Islands",
                    "common": "Falkland Islands"
                }
            }
        },
        "tld": [
            ".fk"
        ],
        "cca2": "FK",
        "ccn3": "238",
        "cca3": "FLK",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "FKP": {
                "name": "Falkland Islands pound",
                "symbol": "\xa3"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "00"
            ]
        },
        "capital": [
            "Stanley"
        ],
        "altSpellings": [
            "FK",
            "Islas Malvinas",
            "Falkland Islands (Malvinas)"
        ],
        "region": "Americas",
        "subregion": "South America",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0632\u0631 \u0641\u0648\u0643\u0644\u0627\u0646\u062F",
                "common": "\u062C\u0632\u0631 \u0641\u0648\u0643\u0644\u0627\u0646\u062F"
            },
            "bre": {
                "official": "Inizi Malo\xf9",
                "common": "Inizi Malo\xf9"
            },
            "ces": {
                "official": "Falklandsk\xe9 ostrovy",
                "common": "Falklandy"
            },
            "cym": {
                "official": "Falkland Islands",
                "common": "Falkland Islands"
            },
            "deu": {
                "official": "Falklandinseln",
                "common": "Falklandinseln"
            },
            "est": {
                "official": "Falklandi saared",
                "common": "Falklandi saared"
            },
            "fin": {
                "official": "Falkandinsaaret",
                "common": "Falkandinsaaret"
            },
            "fra": {
                "official": "\xceles Malouines",
                "common": "\xceles Malouines"
            },
            "hrv": {
                "official": "Falklandski otoci",
                "common": "Falklandski Otoci"
            },
            "hun": {
                "official": "Falkland-szigetek",
                "common": "Falkland-szigetek"
            },
            "ita": {
                "official": "Isole Falkland",
                "common": "Isole Falkland o Isole Malvine"
            },
            "jpn": {
                "official": "\u30D5\u30A9\u30FC\u30AF\u30E9\u30F3\u30C9",
                "common": "\u30D5\u30A9\u30FC\u30AF\u30E9\u30F3\u30C9\uFF08\u30DE\u30EB\u30D3\u30CA\u30B9\uFF09\u8AF8\u5CF6"
            },
            "kor": {
                "official": "\uD3EC\uD074\uB79C\uB4DC \uC81C\uB3C4",
                "common": "\uD3EC\uD074\uB79C\uB4DC \uC81C\uB3C4"
            },
            "nld": {
                "official": "Falkland eilanden",
                "common": "Falklandeilanden"
            },
            "per": {
                "official": "\u062C\u0632\u0627\u06CC\u0631 \u0641\u0627\u0644\u06A9\u0644\u0646\u062F",
                "common": "\u062C\u0632\u0627\u06CC\u0631 \u0641\u0627\u0644\u06A9\u0644\u0646\u062F"
            },
            "pol": {
                "official": "Falklandy",
                "common": "Falklandy"
            },
            "por": {
                "official": "Ilhas Malvinas",
                "common": "Ilhas Malvinas"
            },
            "rus": {
                "official": "\u0424\u043E\u043B\u043A\u043B\u0435\u043D\u0434\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                "common": "\u0424\u043E\u043B\u043A\u043B\u0435\u043D\u0434\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            "slk": {
                "official": "Falklandsk\xe9 ostrovy",
                "common": "Falklandy"
            },
            "spa": {
                "official": "islas Malvinas",
                "common": "Islas Malvinas"
            },
            "srp": {
                "official": "\u0424\u043E\u043B\u043A\u043B\u0430\u043D\u0434\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                "common": "\u0424\u043E\u043B\u043A\u043B\u0430\u043D\u0434\u0438"
            },
            "swe": {
                "official": "Falklands\xf6arna",
                "common": "Falklands\xf6arna"
            },
            "tur": {
                "official": "Falkland (Malvina) Adalar\u0131",
                "common": "Falkland (Malvina) Adalar\u0131"
            },
            "urd": {
                "official": "\u062C\u0632\u0627\u0626\u0631 \u0641\u0627\u06A9\u0644\u06CC\u0646\u0688",
                "common": "\u062C\u0632\u0627\u0626\u0631 \u0641\u0627\u06A9\u0644\u06CC\u0646\u0688"
            },
            "zho": {
                "official": "\u798F\u514B\u5170\u7FA4\u5C9B",
                "common": "\u798F\u514B\u5170\u7FA4\u5C9B"
            }
        },
        "latlng": [
            -51.75,
            -59
        ],
        "landlocked": false,
        "area": 12173,
        "demonyms": {
            "eng": {
                "f": "Falkland Islander",
                "m": "Falkland Islander"
            },
            "fra": {
                "f": "Malouinne",
                "m": "Malouin"
            }
        },
        "flag": "\uD83C\uDDEB\uD83C\uDDF0",
        "maps": {
            "googleMaps": "https://goo.gl/maps/TZH1x7AGanQKifNk7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2185374"
        },
        "population": 2563,
        "car": {
            "signs": [
                "GB"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "South America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/fk.png",
            "svg": "https://flagcdn.com/fk.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/fk.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/fk.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -51.7,
                -57.85
            ]
        }
    },
    {
        "name": {
            "common": "Jersey",
            "official": "Bailiwick of Jersey",
            "nativeName": {
                "eng": {
                    "official": "Bailiwick of Jersey",
                    "common": "Jersey"
                },
                "fra": {
                    "official": "Bailliage de Jersey",
                    "common": "Jersey"
                },
                "nrf": {
                    "official": "Bailliage d\xe9 J\xe8rri",
                    "common": "J\xe8rri"
                }
            }
        },
        "tld": [
            ".je"
        ],
        "cca2": "JE",
        "ccn3": "832",
        "cca3": "JEY",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "GBP": {
                "name": "British pound",
                "symbol": "\xa3"
            },
            "JEP": {
                "name": "Jersey pound",
                "symbol": "\xa3"
            }
        },
        "idd": {
            "root": "+4",
            "suffixes": [
                "4"
            ]
        },
        "capital": [
            "Saint Helier"
        ],
        "altSpellings": [
            "JE",
            "Bailiwick of Jersey",
            "Bailliage de Jersey",
            "Bailliage d\xe9 J\xe8rri"
        ],
        "region": "Europe",
        "subregion": "Northern Europe",
        "languages": {
            "eng": "English",
            "fra": "French",
            "nrf": "J\xe8rriais"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u064A\u0631\u0632\u064A",
                "common": "\u062C\u064A\u0631\u0632\u064A"
            },
            "bre": {
                "official": "Jerzenez",
                "common": "Jerzenez"
            },
            "ces": {
                "official": "Rycht\xe1\u0159stv\xed Jersey",
                "common": "Jersey"
            },
            "cym": {
                "official": "Bailiwick of Jersey",
                "common": "Jersey"
            },
            "deu": {
                "official": "Vogtei Jersey",
                "common": "Jersey"
            },
            "est": {
                "official": "Jersey foogtkond",
                "common": "Jersey"
            },
            "fin": {
                "official": "Jersey",
                "common": "Jersey"
            },
            "fra": {
                "official": "Bailliage de Jersey",
                "common": "Jersey"
            },
            "hrv": {
                "official": "Struka od Jersey",
                "common": "Jersey"
            },
            "hun": {
                "official": "Jersey",
                "common": "Jersey"
            },
            "ita": {
                "official": "Baliato di Jersey",
                "common": "Isola di Jersey"
            },
            "jpn": {
                "official": "\u30B8\u30E3\u30FC\u30B8\u306E\u5F97\u610F\u5206\u91CE",
                "common": "\u30B8\u30E3\u30FC\u30B8\u30FC"
            },
            "kor": {
                "official": "\uC800\uC9C0 \uC12C",
                "common": "\uC800\uC9C0 \uC12C"
            },
            "nld": {
                "official": "Baljuwschap Jersey",
                "common": "Jersey"
            },
            "per": {
                "official": "\u062C\u0631\u0632\u06CC",
                "common": "\u062C\u0631\u0632\u06CC"
            },
            "pol": {
                "official": "Jersey",
                "common": "Jersey"
            },
            "por": {
                "official": "Bailiado de Jersey",
                "common": "Jersey"
            },
            "rus": {
                "official": "\u041A\u043E\u0440\u043E\u043D\u043D\u043E\u0435 \u0432\u043B\u0430\u0434\u0435\u043D\u0438\u0435 \u0414\u0436\u0435\u0440\u0441\u0438",
                "common": "\u0414\u0436\u0435\u0440\u0441\u0438"
            },
            "slk": {
                "official": "Bailiwick Jersey",
                "common": "Jersey"
            },
            "spa": {
                "official": "Bail\xeda de Jersey",
                "common": "Jersey"
            },
            "srp": {
                "official": "\u040F\u0435\u0440\u0437\u0438",
                "common": "\u040F\u0435\u0440\u0437\u0438"
            },
            "swe": {
                "official": "Jersey",
                "common": "Jersey"
            },
            "tur": {
                "official": "Jersey",
                "common": "Jersey"
            },
            "urd": {
                "official": "\u062C\u0631\u0632\u06CC",
                "common": "\u062C\u0631\u0632\u06CC"
            },
            "zho": {
                "official": "\u6CFD\u897F\u5C9B",
                "common": "\u6CFD\u897F\u5C9B"
            }
        },
        "latlng": [
            49.25,
            -2.16666666
        ],
        "landlocked": false,
        "area": 116,
        "demonyms": {
            "eng": {
                "f": "Channel Islander",
                "m": "Channel Islander"
            },
            "fra": {
                "f": "Jersiaise",
                "m": "Jersiais"
            }
        },
        "flag": "\uD83C\uDDEF\uD83C\uDDEA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/rXG8GZZtsqK92kTCA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/367988"
        },
        "population": 100800,
        "car": {
            "signs": [
                "GBJ"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/je.png",
            "svg": "https://flagcdn.com/je.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/je.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/je.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                49.18,
                -2.1
            ]
        },
        "postalCode": {
            "format": "@# #@@|@## #@@|@@# #@@|@@## #@@|@#@ #@@|@@#@ #@@|GIR0AA",
            "regex": "^(([A-Z]\\d{2}[A-Z]{2})|([A-Z]\\d{3}[A-Z]{2})|([A-Z]{2}\\d{2}[A-Z]{2})|([A-Z]{2}\\d{3}[A-Z]{2})|([A-Z]\\d[A-Z]\\d[A-Z]{2})|([A-Z]{2}\\d[A-Z]\\d[A-Z]{2})|(GIR0AA))$"
        }
    },
    {
        "name": {
            "common": "Vietnam",
            "official": "Socialist Republic of Vietnam",
            "nativeName": {
                "vie": {
                    "official": "C\u1ED9ng h\xf2a x\xe3 h\u1ED9i ch\u1EE7 ngh\u0129a Vi\u1EC7t Nam",
                    "common": "Vi\u1EC7t Nam"
                }
            }
        },
        "tld": [
            ".vn"
        ],
        "cca2": "VN",
        "ccn3": "704",
        "cca3": "VNM",
        "cioc": "VIE",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "VND": {
                "name": "Vietnamese \u0111\u1ED3ng",
                "symbol": "\u20AB"
            }
        },
        "idd": {
            "root": "+8",
            "suffixes": [
                "4"
            ]
        },
        "capital": [
            "Hanoi"
        ],
        "altSpellings": [
            "VN",
            "Socialist Republic of Vietnam",
            "C\u1ED9ng h\xf2a X\xe3 h\u1ED9i ch\u1EE7 ngh\u0129a Vi\u1EC7t Nam",
            "Viet Nam"
        ],
        "region": "Asia",
        "subregion": "South-Eastern Asia",
        "languages": {
            "vie": "Vietnamese"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0641\u064A\u062A\u0646\u0627\u0645 \u0627\u0644\u0627\u0634\u062A\u0631\u0627\u0643\u064A\u0629",
                "common": "\u0641\u064A\u062A\u0646\u0627\u0645"
            },
            "bre": {
                "official": "Republik Sokialour Vi\xeat Nam",
                "common": "Vi\xeat Nam"
            },
            "ces": {
                "official": "Vietnamsk\xe1 socialistick\xe1 republika",
                "common": "Vietnam"
            },
            "cym": {
                "official": "Socialist Republic of Vietnam",
                "common": "Vietnam"
            },
            "deu": {
                "official": "Sozialistische Republik Vietnam",
                "common": "Vietnam"
            },
            "est": {
                "official": "Vietnami Sotsialistlik Vabariik",
                "common": "Vietnam"
            },
            "fin": {
                "official": "Vietnamin sosialistinen tasavalta",
                "common": "Vietnam"
            },
            "fra": {
                "official": "R\xe9publique socialiste du Vi\xeat Nam",
                "common": "Vi\xeat Nam"
            },
            "hrv": {
                "official": "Socijalisti\u010Dka Republika Vijetnam",
                "common": "Vijetnam"
            },
            "hun": {
                "official": "Vietn\xe1mi Szocialista K\xf6zt\xe1rsas\xe1g",
                "common": "Vietn\xe1m"
            },
            "ita": {
                "official": "Repubblica socialista del Vietnam",
                "common": "Vietnam"
            },
            "jpn": {
                "official": "\u30D9\u30C8\u30CA\u30E0\u793E\u4F1A\u4E3B\u7FA9\u5171\u548C\u56FD",
                "common": "\u30D9\u30C8\u30CA\u30E0"
            },
            "kor": {
                "official": "\uBCA0\uD2B8\uB0A8 \uC0AC\uD68C\uC8FC\uC758 \uACF5\uD654\uAD6D",
                "common": "\uBCA0\uD2B8\uB0A8"
            },
            "nld": {
                "official": "Socialistische Republiek Vietnam",
                "common": "Vietnam"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u0648\u0633\u06CC\u0627\u0644\u06CC\u0633\u062A\u06CC \u0648\u06CC\u062A\u0646\u0627\u0645",
                "common": "\u0648\u06CC\u062A\u0646\u0627\u0645"
            },
            "pol": {
                "official": "Socjalistyczna Republika Wietnamu",
                "common": "Wietnam"
            },
            "por": {
                "official": "Rep\xfablica Socialista do Vietname",
                "common": "Vietname"
            },
            "rus": {
                "official": "\u0421\u043E\u0446\u0438\u0430\u043B\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0412\u044C\u0435\u0442\u043D\u0430\u043C",
                "common": "\u0412\u044C\u0435\u0442\u043D\u0430\u043C"
            },
            "slk": {
                "official": "Vietnamsk\xe1 socialistick\xe1 republika",
                "common": "Vietnam"
            },
            "spa": {
                "official": "Rep\xfablica Socialista de Vietnam",
                "common": "Vietnam"
            },
            "srp": {
                "official": "\u0421\u043E\u0446\u0438\u0458\u0430\u043B\u0438\u0441\u0442\u0438\u0447\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0412\u0438\u0458\u0435\u0442\u043D\u0430\u043C",
                "common": "\u0412\u0438\u0458\u0435\u0442\u043D\u0430\u043C"
            },
            "swe": {
                "official": "Socialistiska republiken Vietnam",
                "common": "Vietnam"
            },
            "tur": {
                "official": "Vietnam Sosyalist Cumhuriyeti",
                "common": "Vietnam"
            },
            "urd": {
                "official": "\u0627\u0634\u062A\u0631\u0627\u06A9\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0648\u06CC\u062A\u0646\u0627\u0645",
                "common": "\u0648\u06CC\u062A\u0646\u0627\u0645"
            },
            "zho": {
                "official": "\u8D8A\u5357\u793E\u4F1A\u4E3B\u4E49\u5171\u548C\u56FD",
                "common": "\u8D8A\u5357"
            }
        },
        "latlng": [
            16.16666666,
            107.83333333
        ],
        "landlocked": false,
        "borders": [
            "KHM",
            "CHN",
            "LAO"
        ],
        "area": 331212,
        "demonyms": {
            "eng": {
                "f": "Vietnamese",
                "m": "Vietnamese"
            },
            "fra": {
                "f": "Vietnamienne",
                "m": "Vietnamien"
            }
        },
        "flag": "\uD83C\uDDFB\uD83C\uDDF3",
        "maps": {
            "googleMaps": "https://goo.gl/maps/PCpVt9WzdJ9A9nEZ9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/49915"
        },
        "population": 97338583,
        "gini": {
            "2018": 35.7
        },
        "fifa": "VIE",
        "car": {
            "signs": [
                "VN"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+07:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/vn.png",
            "svg": "https://flagcdn.com/vn.svg",
            "alt": "The flag of Vietnam features a large five-pointed yellow star on a red field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/vn.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/vn.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                21.03,
                105.85
            ]
        },
        "postalCode": {
            "format": "######",
            "regex": "^(\\d{6})$"
        }
    },
    {
        "name": {
            "common": "Guatemala",
            "official": "Republic of Guatemala",
            "nativeName": {
                "spa": {
                    "official": "Rep\xfablica de Guatemala",
                    "common": "Guatemala"
                }
            }
        },
        "tld": [
            ".gt"
        ],
        "cca2": "GT",
        "ccn3": "320",
        "cca3": "GTM",
        "cioc": "GUA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "GTQ": {
                "name": "Guatemalan quetzal",
                "symbol": "Q"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "02"
            ]
        },
        "capital": [
            "Guatemala City"
        ],
        "altSpellings": [
            "GT"
        ],
        "region": "Americas",
        "subregion": "Central America",
        "languages": {
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u063A\u0648\u0627\u062A\u064A\u0645\u0627\u0644\u0627",
                "common": "\u063A\u0648\u0627\u062A\u064A\u0645\u0627\u0644\u0627"
            },
            "bre": {
                "official": "Republik Guatemala",
                "common": "Guatemala"
            },
            "ces": {
                "official": "Republika Guatemala",
                "common": "Guatemala"
            },
            "cym": {
                "official": "Republic of Guatemala",
                "common": "Guatemala"
            },
            "deu": {
                "official": "Republik Guatemala",
                "common": "Guatemala"
            },
            "est": {
                "official": "Guatemala Vabariik",
                "common": "Guatemala"
            },
            "fin": {
                "official": "Guatemalan tasavalta",
                "common": "Guatemala"
            },
            "fra": {
                "official": "R\xe9publique du Guatemala",
                "common": "Guatemala"
            },
            "hrv": {
                "official": "Republika Gvatemala",
                "common": "Gvatemala"
            },
            "hun": {
                "official": "Guatemalai K\xf6zt\xe1rsas\xe1g",
                "common": "Guatemala"
            },
            "ita": {
                "official": "Repubblica del Guatemala",
                "common": "Guatemala"
            },
            "jpn": {
                "official": "\u30B0\u30A2\u30C6\u30DE\u30E9\u5171\u548C\u56FD",
                "common": "\u30B0\u30A2\u30C6\u30DE\u30E9"
            },
            "kor": {
                "official": "\uACFC\uD14C\uB9D0\uB77C \uACF5\uD654\uAD6D",
                "common": "\uACFC\uD14C\uB9D0\uB77C"
            },
            "nld": {
                "official": "Republiek Guatemala",
                "common": "Guatemala"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u06AF\u0648\u0627\u062A\u0650\u0645\u0627\u0644\u0627",
                "common": "\u06AF\u0648\u0627\u062A\u0650\u0645\u0627\u0644\u0627"
            },
            "pol": {
                "official": "Republika Gwatemali",
                "common": "Gwatemala"
            },
            "por": {
                "official": "Rep\xfablica da Guatemala",
                "common": "Guatemala"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0432\u0430\u0442\u0435\u043C\u0430\u043B\u0430",
                "common": "\u0413\u0432\u0430\u0442\u0435\u043C\u0430\u043B\u0430"
            },
            "slk": {
                "official": "Guatemalsk\xe1 republika",
                "common": "Guatemala"
            },
            "spa": {
                "official": "Rep\xfablica de Guatemala",
                "common": "Guatemala"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0432\u0430\u0442\u0435\u043C\u0430\u043B\u0430",
                "common": "\u0413\u0432\u0430\u0442\u0435\u043C\u0430\u043B\u0430"
            },
            "swe": {
                "official": "Republiken Guatemala",
                "common": "Guatemala"
            },
            "tur": {
                "official": "Guatemala Cumhuriyeti",
                "common": "Guatemala"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06AF\u0648\u0627\u062A\u06CC\u0645\u0627\u0644\u0627",
                "common": "\u06AF\u0648\u0627\u062A\u06CC\u0645\u0627\u0644\u0627"
            },
            "zho": {
                "official": "\u5371\u5730\u9A6C\u62C9\u5171\u548C\u56FD",
                "common": "\u5371\u5730\u9A6C\u62C9"
            }
        },
        "latlng": [
            15.5,
            -90.25
        ],
        "landlocked": false,
        "borders": [
            "BLZ",
            "SLV",
            "HND",
            "MEX"
        ],
        "area": 108889,
        "demonyms": {
            "eng": {
                "f": "Guatemalan",
                "m": "Guatemalan"
            },
            "fra": {
                "f": "Guat\xe9malt\xe8que",
                "m": "Guat\xe9malt\xe8que"
            }
        },
        "flag": "\uD83C\uDDEC\uD83C\uDDF9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/JoRAbem4Hxb9FYbVA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1521463"
        },
        "population": 16858333,
        "gini": {
            "2014": 48.3
        },
        "fifa": "GUA",
        "car": {
            "signs": [
                "GCA"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-06:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/gt.png",
            "svg": "https://flagcdn.com/gt.svg",
            "alt": "The flag of Guatemala is composed of three equal vertical bands of light blue, white and light blue, with the national coat of arms centered in the white band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/gt.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/gt.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                14.62,
                -90.52
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Moldova",
            "official": "Republic of Moldova",
            "nativeName": {
                "ron": {
                    "official": "Republica Moldova",
                    "common": "Moldova"
                }
            }
        },
        "tld": [
            ".md"
        ],
        "cca2": "MD",
        "ccn3": "498",
        "cca3": "MDA",
        "cioc": "MDA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "MDL": {
                "name": "Moldovan leu",
                "symbol": "L"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "73"
            ]
        },
        "capital": [
            "Chi\u0219in\u0103u"
        ],
        "altSpellings": [
            "MD",
            "Moldova, Republic of",
            "Republic of Moldova",
            "Republica Moldova"
        ],
        "region": "Europe",
        "subregion": "Eastern Europe",
        "languages": {
            "ron": "Romanian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u0648\u0644\u062F\u0648\u06A4\u0627",
                "common": "\u0645\u0648\u0644\u062F\u0648\u06A4\u0627"
            },
            "bre": {
                "official": "Republik Moldova",
                "common": "Moldova"
            },
            "ces": {
                "official": "Moldavsk\xe1 republika",
                "common": "Moldavsko"
            },
            "cym": {
                "official": "Republic of Moldova",
                "common": "Moldova"
            },
            "deu": {
                "official": "Republik Moldau",
                "common": "Moldawien"
            },
            "est": {
                "official": "Moldova Vabariik",
                "common": "Moldova"
            },
            "fin": {
                "official": "Moldovan tasavalta",
                "common": "Moldova"
            },
            "fra": {
                "official": "R\xe9publique de Moldavie",
                "common": "Moldavie"
            },
            "hrv": {
                "official": "Moldavija",
                "common": "Moldova"
            },
            "hun": {
                "official": "Moldovai K\xf6zt\xe1rsas\xe1g",
                "common": "Moldova"
            },
            "ita": {
                "official": "Repubblica di Moldova",
                "common": "Moldavia"
            },
            "jpn": {
                "official": "\u30E2\u30EB\u30C9\u30D0\u5171\u548C\u56FD",
                "common": "\u30E2\u30EB\u30C9\u30D0\u5171\u548C\u56FD"
            },
            "kor": {
                "official": "\uBAB0\uB3C4\uBC14 \uACF5\uD654\uAD6D",
                "common": "\uBAB0\uB3C4\uBC14"
            },
            "nld": {
                "official": "Republiek Moldavi\xeb",
                "common": "Moldavi\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u0648\u0644\u062F\u0627\u0648\u06CC",
                "common": "\u0645\u0648\u0644\u062F\u0627\u0648\u06CC"
            },
            "pol": {
                "official": "Republika Mo\u0142dawii",
                "common": "Mo\u0142dawia"
            },
            "por": {
                "official": "Rep\xfablica da Mold\xe1via",
                "common": "Mold\xe1via"
            },
            "rus": {
                "official": "\u041C\u043E\u043B\u0434\u043E\u0432\u0430",
                "common": "\u041C\u043E\u043B\u0434\u0430\u0432\u0438\u044F"
            },
            "slk": {
                "official": "Moldavsk\xe1 republika",
                "common": "Moldavsko"
            },
            "spa": {
                "official": "Rep\xfablica de Moldova",
                "common": "Moldavia"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u043E\u043B\u0434\u0430\u0432\u0438\u0458\u0430",
                "common": "\u041C\u043E\u043B\u0434\u0430\u0432\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Moldavien",
                "common": "Moldavien"
            },
            "tur": {
                "official": "Moldova Cumhuriyeti",
                "common": "Moldova"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0627\u0644\u062F\u0648\u0648\u0627",
                "common": "\u0645\u0627\u0644\u062F\u0648\u0648\u0627"
            },
            "zho": {
                "official": "\u6469\u5C14\u591A\u74E6\u5171\u548C\u56FD",
                "common": "\u6469\u5C14\u591A\u74E6"
            }
        },
        "latlng": [
            47,
            29
        ],
        "landlocked": true,
        "borders": [
            "ROU",
            "UKR"
        ],
        "area": 33846,
        "demonyms": {
            "eng": {
                "f": "Moldovan",
                "m": "Moldovan"
            },
            "fra": {
                "f": "Moldave",
                "m": "Moldave"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDE9",
        "maps": {
            "googleMaps": "https://goo.gl/maps/JjmyUuULujnDeFPf7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/58974"
        },
        "population": 2617820,
        "gini": {
            "2018": 25.7
        },
        "fifa": "MDA",
        "car": {
            "signs": [
                "MD"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/md.png",
            "svg": "https://flagcdn.com/md.svg",
            "alt": "The flag of Moldova is composed of three equal vertical bands of blue, yellow and red, with the national coat of arms centered in the yellow band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/md.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/md.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                47.01,
                28.9
            ]
        },
        "postalCode": {
            "format": "MD-####",
            "regex": "^(?:MD)*(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "North Macedonia",
            "official": "Republic of North Macedonia",
            "nativeName": {
                "mkd": {
                    "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430",
                    "common": "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430"
                }
            }
        },
        "tld": [
            ".mk"
        ],
        "cca2": "MK",
        "ccn3": "807",
        "cca3": "MKD",
        "cioc": "MKD",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "MKD": {
                "name": "denar",
                "symbol": "den"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "89"
            ]
        },
        "capital": [
            "Skopje"
        ],
        "altSpellings": [
            "MK",
            "The former Yugoslav Republic of Macedonia",
            "Republic of North Macedonia",
            "Macedonia, The Former Yugoslav Republic of",
            "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430"
        ],
        "region": "Europe",
        "subregion": "Southeast Europe",
        "languages": {
            "mkd": "Macedonian"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0634\u0645\u0627\u0644 \u0645\u0642\u062F\u0648\u0646\u064A\u0627",
                "common": "\u0634\u0645\u0627\u0644 \u0645\u0642\u062F\u0648\u0646\u064A\u0627"
            },
            "bre": {
                "official": "Republik Makedonia an Norzh",
                "common": "Makedonia an Norzh"
            },
            "ces": {
                "official": "Republika Severn\xed Makedonie",
                "common": "Severn\xed Makedonie"
            },
            "cym": {
                "official": "Republic of North Macedonia",
                "common": "North Macedonia"
            },
            "deu": {
                "official": "Republik Nordmazedonien",
                "common": "Nordmazedonien"
            },
            "est": {
                "official": "P\xf5hja-Makedoonia Vabariik",
                "common": "P\xf5hja-Makedoonia"
            },
            "fin": {
                "official": "Pohjois-Makedonian tasavalta",
                "common": "Pohjois-Makedonia"
            },
            "fra": {
                "official": "R\xe9publique de Mac\xe9doine du Nord",
                "common": "Mac\xe9doine du Nord"
            },
            "hrv": {
                "official": "Republika Sjeverna Makedonija",
                "common": "Sjeverna Makedonija"
            },
            "hun": {
                "official": "\xc9szak-maced\xf3n K\xf6zt\xe1rsas\xe1g",
                "common": "\xc9szak-Maced\xf3nia"
            },
            "ita": {
                "official": "Repubblica di Macedonia del Nord",
                "common": "Macedonia del Nord"
            },
            "jpn": {
                "official": "\u5317\u30DE\u30B1\u30C9\u30CB\u30A2\u5171\u548C\u56FD",
                "common": "\u5317\u30DE\u30B1\u30C9\u30CB\u30A2 "
            },
            "kor": {
                "official": "\uBD81\uB9C8\uCF00\uB3C4\uB2C8\uC544 \uACF5\uD654\uAD6D",
                "common": "\uBD81\uB9C8\uCF00\uB3C4\uB2C8\uC544"
            },
            "nld": {
                "official": "Republiek Noord-Macedoni\xeb",
                "common": "Noord-Macedoni\xeb"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u0642\u062F\u0648\u0646\u06CC\u0647 \u0634\u0645\u0627\u0644\u06CC",
                "common": "\u0645\u0642\u062F\u0648\u0646\u06CC\u0647 \u0634\u0645\u0627\u0644\u06CC"
            },
            "pol": {
                "official": "Republika Macedonii P\xf3\u0142nocnej",
                "common": "Macedonia P\xf3\u0142nocna"
            },
            "por": {
                "official": "Rep\xfablica da Maced\xf4nia do Norte",
                "common": "Maced\xf3nia do Norte"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u044F",
                "common": "\u0421\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u044F"
            },
            "slk": {
                "official": "Severomaced\xf3nska republika",
                "common": "Severn\xe9 Maced\xf3nsko"
            },
            "spa": {
                "official": "Rep\xfablica de Macedonia del Norte",
                "common": "Macedonia del Norte"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430",
                "common": "\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Nordmakedonien",
                "common": "Nordmakedonien"
            },
            "tur": {
                "official": "Kuzey Makedonya Cumhuriyeti",
                "common": "Kuzey Makedonya"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0642\u062F\u0648\u0646\u06CC\u06C1",
                "common": "\u0634\u0645\u0627\u0644\u06CC \u0645\u0642\u062F\u0648\u0646\u06CC\u06C1"
            },
            "zho": {
                "official": "\u5317\u99AC\u5176\u9813\u5171\u548C\u570B",
                "common": "\u5317\u99AC\u5176\u9813"
            }
        },
        "latlng": [
            41.83333333,
            22
        ],
        "landlocked": true,
        "borders": [
            "ALB",
            "BGR",
            "GRC",
            "UNK",
            "SRB"
        ],
        "area": 25713,
        "demonyms": {
            "eng": {
                "f": "Macedonian",
                "m": "Macedonian"
            },
            "fra": {
                "f": "Mac\xe9donienne",
                "m": "Mac\xe9donien"
            }
        },
        "flag": "\uD83C\uDDF2\uD83C\uDDF0",
        "maps": {
            "googleMaps": "https://goo.gl/maps/55Q8MEnF6ACdu3q79",
            "openStreetMaps": "https://www.openstreetmap.org/relation/53293"
        },
        "population": 2077132,
        "gini": {
            "2018": 33
        },
        "fifa": "MKD",
        "car": {
            "signs": [
                "MK"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/mk.png",
            "svg": "https://flagcdn.com/mk.svg",
            "alt": "The flag of North Macedonia has a red field, at the center of which is a golden-yellow sun with eight broadening rays that extend to the edges of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/mk.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/mk.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                42,
                21.43
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Uzbekistan",
            "official": "Republic of Uzbekistan",
            "nativeName": {
                "rus": {
                    "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0423\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u0430\u043D",
                    "common": "\u0423\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u0430\u043D"
                },
                "uzb": {
                    "official": "O'zbekiston Respublikasi",
                    "common": "O\u2018zbekiston"
                }
            }
        },
        "tld": [
            ".uz"
        ],
        "cca2": "UZ",
        "ccn3": "860",
        "cca3": "UZB",
        "cioc": "UZB",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "UZS": {
                "name": "Uzbekistani so\u02BBm",
                "symbol": "so'm"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "98"
            ]
        },
        "capital": [
            "Tashkent"
        ],
        "altSpellings": [
            "UZ",
            "Republic of Uzbekistan",
            "O\u2018zbekiston Respublikasi",
            "\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430\u0441\u0438"
        ],
        "region": "Asia",
        "subregion": "Central Asia",
        "languages": {
            "rus": "Russian",
            "uzb": "Uzbek"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0648\u0632\u0628\u0627\u0643\u0633\u062A\u0627\u0646",
                "common": "\u0623\u0648\u0632\u0628\u0627\u0643\u0633\u062A\u0627\u0646"
            },
            "bre": {
                "official": "Republik Ouzbekistan",
                "common": "Ouzbekistan"
            },
            "ces": {
                "official": "Republika Uzbekist\xe1n",
                "common": "Uzbekist\xe1n"
            },
            "cym": {
                "official": "Republic of Uzbekistan",
                "common": "Uzbekistan"
            },
            "deu": {
                "official": "Republik Usbekistan",
                "common": "Usbekistan"
            },
            "est": {
                "official": "Usbekistani Vabariik",
                "common": "Usbekistan"
            },
            "fin": {
                "official": "Uzbekistanin tasavalta",
                "common": "Uzbekistan"
            },
            "fra": {
                "official": "R\xe9publique d'Ouzb\xe9kistan",
                "common": "Ouzb\xe9kistan"
            },
            "hrv": {
                "official": "Republika Uzbekistan",
                "common": "Uzbekistan"
            },
            "hun": {
                "official": "\xdczb\xe9g K\xf6zt\xe1rsas\xe1g",
                "common": "\xdczbegiszt\xe1n"
            },
            "ita": {
                "official": "Repubblica di Uzbekistan",
                "common": "Uzbekistan"
            },
            "jpn": {
                "official": "\u30A6\u30BA\u30D9\u30AD\u30B9\u30BF\u30F3\u5171\u548C\u56FD",
                "common": "\u30A6\u30BA\u30D9\u30AD\u30B9\u30BF\u30F3"
            },
            "kor": {
                "official": "\uC6B0\uC988\uBCA0\uD0A4\uC2A4\uD0C4 \uACF5\uD654\uAD6D",
                "common": "\uC6B0\uC988\uBCA0\uD0A4\uC2A4\uD0C4"
            },
            "nld": {
                "official": "Republiek Oezbekistan",
                "common": "Oezbekistan"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0632\u0628\u06A9\u0633\u062A\u0627\u0646",
                "common": "\u0627\u0632\u0628\u06A9\u0633\u062A\u0627\u0646"
            },
            "pol": {
                "official": "Republika Uzbekistanu",
                "common": "Uzbekistan"
            },
            "por": {
                "official": "Rep\xfablica do Usbequist\xe3o",
                "common": "Uzbequist\xe3o"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0423\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u0430\u043D",
                "common": "\u0423\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u0430\u043D"
            },
            "slk": {
                "official": "Uzbeck\xe1 republika",
                "common": "Uzbekistan"
            },
            "spa": {
                "official": "Rep\xfablica de Uzbekist\xe1n",
                "common": "Uzbekist\xe1n"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0423\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u0430\u043D",
                "common": "\u0423\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u0430\u043D"
            },
            "swe": {
                "official": "Republiken Uzbekistan",
                "common": "Uzbekistan"
            },
            "tur": {
                "official": "\xd6zbekistan Cumhuriyeti",
                "common": "\xd6zbekistan"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0632\u0628\u06A9\u0633\u062A\u0627\u0646",
                "common": "\u0627\u0632\u0628\u06A9\u0633\u062A\u0627\u0646"
            },
            "zho": {
                "official": "\u4E4C\u5179\u522B\u514B\u65AF\u5766\u5171\u548C\u56FD",
                "common": "\u4E4C\u5179\u522B\u514B\u65AF\u5766"
            }
        },
        "latlng": [
            41,
            64
        ],
        "landlocked": true,
        "borders": [
            "AFG",
            "KAZ",
            "KGZ",
            "TJK",
            "TKM"
        ],
        "area": 447400,
        "demonyms": {
            "eng": {
                "f": "Uzbekistani",
                "m": "Uzbekistani"
            },
            "fra": {
                "f": "Ouzb\xe8ke",
                "m": "Ouzb\xe8ke"
            }
        },
        "flag": "\uD83C\uDDFA\uD83C\uDDFF",
        "maps": {
            "googleMaps": "https://goo.gl/maps/AJpo6MjMx23qSWCz8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/196240"
        },
        "population": 34232050,
        "gini": {
            "2003": 35.3
        },
        "fifa": "UZB",
        "car": {
            "signs": [
                "UZ"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+05:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/uz.png",
            "svg": "https://flagcdn.com/uz.svg",
            "alt": "The flag of Uzbekistan is composed of three equal horizontal bands of turquoise, white with red top and bottom edges, and green. On the hoist side of the turquoise band is a fly-side facing white crescent and twelve five-pointed white stars arranged just outside the crescent opening in three rows comprising three, four and five stars."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/uz.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/uz.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                41.32,
                69.25
            ]
        },
        "postalCode": {
            "format": "######",
            "regex": "^(\\d{6})$"
        }
    },
    {
        "name": {
            "common": "Romania",
            "official": "Romania",
            "nativeName": {
                "ron": {
                    "official": "Rom\xe2nia",
                    "common": "Rom\xe2nia"
                }
            }
        },
        "tld": [
            ".ro"
        ],
        "cca2": "RO",
        "ccn3": "642",
        "cca3": "ROU",
        "cioc": "ROU",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "RON": {
                "name": "Romanian leu",
                "symbol": "lei"
            }
        },
        "idd": {
            "root": "+4",
            "suffixes": [
                "0"
            ]
        },
        "capital": [
            "Bucharest"
        ],
        "altSpellings": [
            "RO",
            "Rumania",
            "Roumania",
            "Rom\xe2nia"
        ],
        "region": "Europe",
        "subregion": "Southeast Europe",
        "languages": {
            "ron": "Romanian"
        },
        "translations": {
            "ara": {
                "official": "\u0631\u0648\u0645\u0627\u0646\u064A\u0627",
                "common": "\u0631\u0648\u0645\u0627\u0646\u064A\u0627"
            },
            "bre": {
                "official": "Roumania",
                "common": "Roumania"
            },
            "ces": {
                "official": "Rumunsko",
                "common": "Rumunsko"
            },
            "cym": {
                "official": "Romania",
                "common": "Romania"
            },
            "deu": {
                "official": "Rum\xe4nien",
                "common": "Rum\xe4nien"
            },
            "est": {
                "official": "Rumeenia",
                "common": "Rumeenia"
            },
            "fin": {
                "official": "Romania",
                "common": "Romania"
            },
            "fra": {
                "official": "Roumanie",
                "common": "Roumanie"
            },
            "hrv": {
                "official": "Rumunija",
                "common": "Rumunjska"
            },
            "hun": {
                "official": "Rom\xe1nia",
                "common": "Rom\xe1nia"
            },
            "ita": {
                "official": "Romania",
                "common": "Romania"
            },
            "jpn": {
                "official": "\u30EB\u30FC\u30DE\u30CB\u30A2",
                "common": "\u30EB\u30FC\u30DE\u30CB\u30A2"
            },
            "kor": {
                "official": "\uB8E8\uB9C8\uB2C8\uC544",
                "common": "\uB8E8\uB9C8\uB2C8\uC544"
            },
            "nld": {
                "official": "Roemeni\xeb",
                "common": "Roemeni\xeb"
            },
            "per": {
                "official": "\u0631\u0648\u0645\u0627\u0646\u06CC",
                "common": "\u0631\u0648\u0645\u0627\u0646\u06CC"
            },
            "pol": {
                "official": "Rumunia",
                "common": "Rumunia"
            },
            "por": {
                "official": "Rom\xeania",
                "common": "Rom\xe9nia"
            },
            "rus": {
                "official": "\u0420\u0443\u043C\u044B\u043D\u0438\u044F",
                "common": "\u0420\u0443\u043C\u044B\u043D\u0438\u044F"
            },
            "slk": {
                "official": "Rumunsko",
                "common": "Rumunsko"
            },
            "spa": {
                "official": "Rumania",
                "common": "Rumania"
            },
            "srp": {
                "official": "\u0420\u0443\u043C\u0443\u043D\u0438\u0458\u0430",
                "common": "\u0420\u0443\u043C\u0443\u043D\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Rum\xe4nien",
                "common": "Rum\xe4nien"
            },
            "tur": {
                "official": "Romanya",
                "common": "Romanya"
            },
            "urd": {
                "official": "\u0631\u0648\u0645\u0627\u0646\u06CC\u06C1",
                "common": "\u0631\u0648\u0645\u0627\u0646\u06CC\u06C1"
            },
            "zho": {
                "official": "\u7F57\u9A6C\u5C3C\u4E9A",
                "common": "\u7F57\u9A6C\u5C3C\u4E9A"
            }
        },
        "latlng": [
            46,
            25
        ],
        "landlocked": false,
        "borders": [
            "BGR",
            "HUN",
            "MDA",
            "SRB",
            "UKR"
        ],
        "area": 238391,
        "demonyms": {
            "eng": {
                "f": "Romanian",
                "m": "Romanian"
            },
            "fra": {
                "f": "Roumaine",
                "m": "Roumain"
            }
        },
        "flag": "\uD83C\uDDF7\uD83C\uDDF4",
        "maps": {
            "googleMaps": "https://goo.gl/maps/845hAgCf1mDkN3vr7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/90689"
        },
        "population": 19286123,
        "gini": {
            "2018": 35.8
        },
        "fifa": "ROU",
        "car": {
            "signs": [
                "RO"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ro.png",
            "svg": "https://flagcdn.com/ro.svg",
            "alt": "The flag of Romania is composed of three equal vertical bands of navy blue, yellow and red."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ro.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ro.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                44.43,
                26.1
            ]
        },
        "postalCode": {
            "format": "######",
            "regex": "^(\\d{6})$"
        }
    },
    {
        "name": {
            "common": "Uganda",
            "official": "Republic of Uganda",
            "nativeName": {
                "eng": {
                    "official": "Republic of Uganda",
                    "common": "Uganda"
                },
                "swa": {
                    "official": "Republic of Uganda",
                    "common": "Uganda"
                }
            }
        },
        "tld": [
            ".ug"
        ],
        "cca2": "UG",
        "ccn3": "800",
        "cca3": "UGA",
        "cioc": "UGA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "UGX": {
                "name": "Ugandan shilling",
                "symbol": "Sh"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "56"
            ]
        },
        "capital": [
            "Kampala"
        ],
        "altSpellings": [
            "UG",
            "Republic of Uganda",
            "Jamhuri ya Uganda"
        ],
        "region": "Africa",
        "subregion": "Eastern Africa",
        "languages": {
            "eng": "English",
            "swa": "Swahili"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0648\u063A\u0646\u062F\u0627",
                "common": "\u0623\u0648\u063A\u0646\u062F\u0627"
            },
            "bre": {
                "official": "Republik Ouganda",
                "common": "Ouganda"
            },
            "ces": {
                "official": "Ugandsk\xe1 republika",
                "common": "Uganda"
            },
            "cym": {
                "official": "Republic of Uganda",
                "common": "Uganda"
            },
            "deu": {
                "official": "Republik Uganda",
                "common": "Uganda"
            },
            "est": {
                "official": "Uganda Vabariik",
                "common": "Uganda"
            },
            "fin": {
                "official": "Ugandan tasavalta",
                "common": "Uganda"
            },
            "fra": {
                "official": "R\xe9publique de l'Ouganda",
                "common": "Ouganda"
            },
            "hrv": {
                "official": "Republika Uganda",
                "common": "Uganda"
            },
            "hun": {
                "official": "Ugandai K\xf6zt\xe1rsas\xe1g",
                "common": "Uganda"
            },
            "ita": {
                "official": "Repubblica di Uganda",
                "common": "Uganda"
            },
            "jpn": {
                "official": "\u30A6\u30AC\u30F3\u30C0\u5171\u548C\u56FD",
                "common": "\u30A6\u30AC\u30F3\u30C0"
            },
            "kor": {
                "official": "\uC6B0\uAC04\uB2E4 \uACF5\uD654\uAD6D",
                "common": "\uC6B0\uAC04\uB2E4"
            },
            "nld": {
                "official": "Republiek Uganda",
                "common": "Oeganda"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0648\u06AF\u0627\u0646\u062F\u0627",
                "common": "\u0627\u0648\u06AF\u0627\u0646\u062F\u0627"
            },
            "pol": {
                "official": "Republika Ugandy",
                "common": "Uganda"
            },
            "por": {
                "official": "Rep\xfablica do Uganda",
                "common": "Uganda"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0423\u0433\u0430\u043D\u0434\u0430",
                "common": "\u0423\u0433\u0430\u043D\u0434\u0430"
            },
            "slk": {
                "official": "Ugandsk\xe1 republika",
                "common": "Uganda"
            },
            "spa": {
                "official": "Rep\xfablica de Uganda",
                "common": "Uganda"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0423\u0433\u0430\u043D\u0434\u0430",
                "common": "\u0423\u0433\u0430\u043D\u0434\u0430"
            },
            "swe": {
                "official": "Republiken Uganda",
                "common": "Uganda"
            },
            "tur": {
                "official": "Uganda Cumhuriyeti",
                "common": "Uganda"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06CC\u0648\u06AF\u0646\u0688\u0627",
                "common": "\u06CC\u0648\u06AF\u0646\u0688\u0627"
            },
            "zho": {
                "official": "\u4E4C\u5E72\u8FBE\u5171\u548C\u56FD",
                "common": "\u4E4C\u5E72\u8FBE"
            }
        },
        "latlng": [
            1,
            32
        ],
        "landlocked": true,
        "borders": [
            "COD",
            "KEN",
            "RWA",
            "SSD",
            "TZA"
        ],
        "area": 241550,
        "demonyms": {
            "eng": {
                "f": "Ugandan",
                "m": "Ugandan"
            },
            "fra": {
                "f": "Ougandaise",
                "m": "Ougandais"
            }
        },
        "flag": "\uD83C\uDDFA\uD83C\uDDEC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/Y7812hFiGa8LD9N68",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192796"
        },
        "population": 45741000,
        "gini": {
            "2016": 42.8
        },
        "fifa": "UGA",
        "car": {
            "signs": [
                "EAU"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+03:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ug.png",
            "svg": "https://flagcdn.com/ug.svg",
            "alt": "The flag of Uganda is composed of six equal horizontal bands of black, yellow, red, black, yellow and red. A white circle bearing a hoist-side facing grey red-crested crane is superimposed in the center of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ug.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ug.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                0.32,
                32.55
            ]
        }
    },
    {
        "name": {
            "common": "El Salvador",
            "official": "Republic of El Salvador",
            "nativeName": {
                "spa": {
                    "official": "Rep\xfablica de El Salvador",
                    "common": "El Salvador"
                }
            }
        },
        "tld": [
            ".sv"
        ],
        "cca2": "SV",
        "ccn3": "222",
        "cca3": "SLV",
        "cioc": "ESA",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "03"
            ]
        },
        "capital": [
            "San Salvador"
        ],
        "altSpellings": [
            "SV",
            "Republic of El Salvador",
            "Rep\xfablica de El Salvador"
        ],
        "region": "Americas",
        "subregion": "Central America",
        "languages": {
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0633\u0644\u0641\u0627\u062F\u0648\u0631",
                "common": "\u0627\u0644\u0633\u0644\u0641\u0627\u062F\u0648\u0631"
            },
            "bre": {
                "official": "Republik El Salvador",
                "common": "El Salvador"
            },
            "ces": {
                "official": "Salvadorsk\xe1 republika",
                "common": "Salvador"
            },
            "cym": {
                "official": "Gweriniaeth El Salfador",
                "common": "El Salfador"
            },
            "deu": {
                "official": "Republik El Salvador",
                "common": "El Salvador"
            },
            "est": {
                "official": "El Salvadori Vabariik",
                "common": "El Salvador"
            },
            "fin": {
                "official": "El Salvadorin tasavalta",
                "common": "El Salvador"
            },
            "fra": {
                "official": "R\xe9publique du Salvador",
                "common": "Salvador"
            },
            "hrv": {
                "official": "Republika El Salvador",
                "common": "Salvador"
            },
            "hun": {
                "official": "Salvadori K\xf6zt\xe1rsas\xe1g",
                "common": "Salvador"
            },
            "ita": {
                "official": "Repubblica di El Salvador",
                "common": "El Salvador"
            },
            "jpn": {
                "official": "\u30A8\u30EB\u30B5\u30EB\u30D0\u30C9\u30EB\u5171\u548C\u56FD",
                "common": "\u30A8\u30EB\u30B5\u30EB\u30D0\u30C9\u30EB"
            },
            "kor": {
                "official": "\uC5D8\uC0B4\uBC14\uB3C4\uB974 \uACF5\uD654\uAD6D",
                "common": "\uC5D8\uC0B4\uBC14\uB3C4\uB974"
            },
            "nld": {
                "official": "Republiek El Salvador",
                "common": "El Salvador"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0644\u0633\u0627\u0644\u0648\u0627\u062F\u0648\u0631",
                "common": "\u0627\u0644\u0633\u0627\u0644\u0648\u0627\u062F\u0648\u0631"
            },
            "pol": {
                "official": "Republika Salwadoru",
                "common": "Salwador"
            },
            "por": {
                "official": "Rep\xfablica de El Salvador",
                "common": "El Salvador"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u042D\u043B\u044C-\u0421\u0430\u043B\u044C\u0432\u0430\u0434\u043E\u0440",
                "common": "\u0421\u0430\u043B\u044C\u0432\u0430\u0434\u043E\u0440"
            },
            "slk": {
                "official": "Salv\xe1dorsk\xe1 republika",
                "common": "Salv\xe1dor"
            },
            "spa": {
                "official": "Rep\xfablica de El Salvador",
                "common": "El Salvador"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0415\u043B \u0421\u0430\u043B\u0432\u0430\u0434\u043E\u0440",
                "common": "\u0421\u0430\u043B\u0432\u0430\u0434\u043E\u0440"
            },
            "swe": {
                "official": "Republiken El Salvador",
                "common": "El Salvador"
            },
            "tur": {
                "official": "El Salvador Cumhuriyeti",
                "common": "El Salvador"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u06CC\u0644 \u0633\u06CC\u0644\u0648\u0627\u0688\u0648\u0631",
                "common": "\u0627\u06CC\u0644 \u0633\u06CC\u0644\u0648\u0627\u0688\u0648\u0631"
            },
            "zho": {
                "official": "\u8428\u5C14\u74E6\u591A\u5171\u548C\u56FD",
                "common": "\u8428\u5C14\u74E6\u591A"
            }
        },
        "latlng": [
            13.83333333,
            -88.91666666
        ],
        "landlocked": false,
        "borders": [
            "GTM",
            "HND"
        ],
        "area": 21041,
        "demonyms": {
            "eng": {
                "f": "Salvadoran",
                "m": "Salvadoran"
            },
            "fra": {
                "f": "Salvadorienne",
                "m": "Salvadorien"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDFB",
        "maps": {
            "googleMaps": "https://goo.gl/maps/cZnCEi5sEMQtKKcB7",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1520612"
        },
        "population": 6486201,
        "gini": {
            "2019": 38.8
        },
        "fifa": "SLV",
        "car": {
            "signs": [
                "ES"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-06:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/sv.png",
            "svg": "https://flagcdn.com/sv.svg",
            "alt": "The flag of El Salvador is composed of three equal horizontal bands of cobalt blue, white and cobalt blue, with the national coat of arms centered in the white band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/sv.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/sv.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                13.7,
                -89.2
            ]
        },
        "postalCode": {
            "format": "CP ####",
            "regex": "^(?:CP)*(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Zambia",
            "official": "Republic of Zambia",
            "nativeName": {
                "eng": {
                    "official": "Republic of Zambia",
                    "common": "Zambia"
                }
            }
        },
        "tld": [
            ".zm"
        ],
        "cca2": "ZM",
        "ccn3": "894",
        "cca3": "ZMB",
        "cioc": "ZAM",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "ZMW": {
                "name": "Zambian kwacha",
                "symbol": "ZK"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "60"
            ]
        },
        "capital": [
            "Lusaka"
        ],
        "altSpellings": [
            "ZM",
            "Republic of Zambia"
        ],
        "region": "Africa",
        "subregion": "Eastern Africa",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0632\u0627\u0645\u0628\u064A\u0627",
                "common": "\u0632\u0627\u0645\u0628\u064A\u0627"
            },
            "bre": {
                "official": "Republik Zambia",
                "common": "Zambia"
            },
            "ces": {
                "official": "Zambijsk\xe1 republika",
                "common": "Zambie"
            },
            "cym": {
                "official": "Republic of Zambia",
                "common": "Zambia"
            },
            "deu": {
                "official": "Republik Sambia",
                "common": "Sambia"
            },
            "est": {
                "official": "Sambia Vabariik",
                "common": "Sambia"
            },
            "fin": {
                "official": "Sambian tasavalta",
                "common": "Sambia"
            },
            "fra": {
                "official": "R\xe9publique de Zambie",
                "common": "Zambie"
            },
            "hrv": {
                "official": "Republika Zambija",
                "common": "Zambija"
            },
            "hun": {
                "official": "Zambiai K\xf6zt\xe1rsas\xe1g",
                "common": "Zambia"
            },
            "ita": {
                "official": "Repubblica di Zambia",
                "common": "Zambia"
            },
            "jpn": {
                "official": "\u30B6\u30F3\u30D3\u30A2\u5171\u548C\u56FD",
                "common": "\u30B6\u30F3\u30D3\u30A2"
            },
            "kor": {
                "official": "\uC7A0\uBE44\uC544 \uACF5\uD654\uAD6D",
                "common": "\uC7A0\uBE44\uC544"
            },
            "nld": {
                "official": "Republiek Zambia",
                "common": "Zambia"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0632\u0627\u0645\u0628\u06CC\u0627",
                "common": "\u0632\u0627\u0645\u0628\u06CC\u0627"
            },
            "pol": {
                "official": "Republika Zambii",
                "common": "Zambia"
            },
            "por": {
                "official": "Rep\xfablica da Z\xe2mbia",
                "common": "Z\xe2mbia"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0417\u0430\u043C\u0431\u0438\u044F",
                "common": "\u0417\u0430\u043C\u0431\u0438\u044F"
            },
            "slk": {
                "official": "Zambijsk\xe1 republika",
                "common": "Zambia"
            },
            "spa": {
                "official": "Rep\xfablica de Zambia",
                "common": "Zambia"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0417\u0430\u043C\u0431\u0438\u0458\u0430",
                "common": "\u0417\u0430\u043C\u0431\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Zambia",
                "common": "Zambia"
            },
            "tur": {
                "official": "Zambiya Cumhuriyeti",
                "common": "Zambiya"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0632\u06CC\u0645\u0628\u06CC\u0627",
                "common": "\u0632\u06CC\u0645\u0628\u06CC\u0627"
            },
            "zho": {
                "official": "\u8D5E\u6BD4\u4E9A\u5171\u548C\u56FD",
                "common": "\u8D5E\u6BD4\u4E9A"
            }
        },
        "latlng": [
            -15,
            30
        ],
        "landlocked": true,
        "borders": [
            "AGO",
            "BWA",
            "COD",
            "MWI",
            "MOZ",
            "NAM",
            "TZA",
            "ZWE"
        ],
        "area": 752612,
        "demonyms": {
            "eng": {
                "f": "Zambian",
                "m": "Zambian"
            },
            "fra": {
                "f": "Zambienne",
                "m": "Zambien"
            }
        },
        "flag": "\uD83C\uDDFF\uD83C\uDDF2",
        "maps": {
            "googleMaps": "https://goo.gl/maps/mweBcqvW8TppZW6q9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/195271"
        },
        "population": 18383956,
        "gini": {
            "2015": 57.1
        },
        "fifa": "ZAM",
        "car": {
            "signs": [
                "RNR"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+02:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/zm.png",
            "svg": "https://flagcdn.com/zm.svg",
            "alt": "The flag of Zambia has a green field, on the fly side of which is a soaring orange African fish eagle above a rectangular area divided into three equal vertical bands of red, black and orange."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/zm.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/zm.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -15.42,
                28.28
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Gabon",
            "official": "Gabonese Republic",
            "nativeName": {
                "fra": {
                    "official": "R\xe9publique gabonaise",
                    "common": "Gabon"
                }
            }
        },
        "tld": [
            ".ga"
        ],
        "cca2": "GA",
        "ccn3": "266",
        "cca3": "GAB",
        "cioc": "GAB",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "XAF": {
                "name": "Central African CFA franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "41"
            ]
        },
        "capital": [
            "Libreville"
        ],
        "altSpellings": [
            "GA",
            "Gabonese Republic",
            "R\xe9publique Gabonaise"
        ],
        "region": "Africa",
        "subregion": "Middle Africa",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u063A\u0627\u0628\u0648\u0646",
                "common": "\u0627\u0644\u063A\u0627\u0628\u0648\u0646"
            },
            "bre": {
                "official": "Republik Gabonat",
                "common": "Gabon"
            },
            "ces": {
                "official": "Gabonsk\xe1 republika",
                "common": "Gabon"
            },
            "cym": {
                "official": "Gabonese Republic",
                "common": "Gabon"
            },
            "deu": {
                "official": "Gabunische Republik",
                "common": "Gabun"
            },
            "est": {
                "official": "Gaboni Vabariik",
                "common": "Gabon"
            },
            "fin": {
                "official": "Gabonin tasavalta",
                "common": "Gabon"
            },
            "fra": {
                "official": "R\xe9publique gabonaise",
                "common": "Gabon"
            },
            "hrv": {
                "official": "Gabon Republika",
                "common": "Gabon"
            },
            "hun": {
                "official": "Gaboni K\xf6zt\xe1rsas\xe1g",
                "common": "Gabon"
            },
            "ita": {
                "official": "Repubblica gabonese",
                "common": "Gabon"
            },
            "jpn": {
                "official": "\u30AC\u30DC\u30F3\u5171\u548C\u56FD",
                "common": "\u30AC\u30DC\u30F3"
            },
            "kor": {
                "official": "\uAC00\uBD09 \uACF5\uD654\uAD6D",
                "common": "\uAC00\uBD09"
            },
            "nld": {
                "official": "Republiek Gabon",
                "common": "Gabon"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u06AF\u0627\u0628\u064F\u0646",
                "common": "\u06AF\u0627\u0628\u0646"
            },
            "pol": {
                "official": "Republika Gabo\u0144ska",
                "common": "Gabon"
            },
            "por": {
                "official": "Rep\xfablica do Gab\xe3o",
                "common": "Gab\xe3o"
            },
            "rus": {
                "official": "\u0413\u0430\u0431\u043E\u043D\u0430 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0413\u0430\u0431\u043E\u043D"
            },
            "slk": {
                "official": "Gabonsk\xe1 republika",
                "common": "Gabon"
            },
            "spa": {
                "official": "Rep\xfablica de Gab\xf3n",
                "common": "Gab\xf3n"
            },
            "srp": {
                "official": "\u0413\u0430\u0431\u043E\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                "common": "\u0413\u0430\u0431\u043E\u043D"
            },
            "swe": {
                "official": "Republiken Gabon",
                "common": "Gabon"
            },
            "tur": {
                "official": "Gabon Cumhuriyeti",
                "common": "Gabon"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06AF\u06CC\u0628\u0648\u0646",
                "common": "\u06AF\u06CC\u0628\u0648\u0646"
            },
            "zho": {
                "official": "\u52A0\u84EC\u5171\u548C\u56FD",
                "common": "\u52A0\u84EC"
            }
        },
        "latlng": [
            -1,
            11.75
        ],
        "landlocked": false,
        "borders": [
            "CMR",
            "COG",
            "GNQ"
        ],
        "area": 267668,
        "demonyms": {
            "eng": {
                "f": "Gabonese",
                "m": "Gabonese"
            },
            "fra": {
                "f": "Gabonaise",
                "m": "Gabonais"
            }
        },
        "flag": "\uD83C\uDDEC\uD83C\uDDE6",
        "maps": {
            "googleMaps": "https://goo.gl/maps/vyRSkqw1H1fnq4ry6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192793"
        },
        "population": 2225728,
        "gini": {
            "2017": 38
        },
        "fifa": "GAB",
        "car": {
            "signs": [
                "G"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ga.png",
            "svg": "https://flagcdn.com/ga.svg",
            "alt": "The flag of Gabon is composed of three equal horizontal bands of green, yellow and blue."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ga.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ga.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                0.38,
                9.45
            ]
        }
    },
    {
        "name": {
            "common": "Equatorial Guinea",
            "official": "Republic of Equatorial Guinea",
            "nativeName": {
                "fra": {
                    "official": "R\xe9publique de la Guin\xe9e \xc9quatoriale",
                    "common": "Guin\xe9e \xe9quatoriale"
                },
                "por": {
                    "official": "Rep\xfablica da Guin\xe9 Equatorial",
                    "common": "Guin\xe9 Equatorial"
                },
                "spa": {
                    "official": "Rep\xfablica de Guinea Ecuatorial",
                    "common": "Guinea Ecuatorial"
                }
            }
        },
        "tld": [
            ".gq"
        ],
        "cca2": "GQ",
        "ccn3": "226",
        "cca3": "GNQ",
        "cioc": "GEQ",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "XAF": {
                "name": "Central African CFA franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "40"
            ]
        },
        "capital": [
            "Malabo"
        ],
        "altSpellings": [
            "GQ",
            "Republic of Equatorial Guinea",
            "Rep\xfablica de Guinea Ecuatorial",
            "R\xe9publique de Guin\xe9e \xe9quatoriale",
            "Rep\xfablica da Guin\xe9 Equatorial"
        ],
        "region": "Africa",
        "subregion": "Middle Africa",
        "languages": {
            "fra": "French",
            "por": "Portuguese",
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u063A\u064A\u0646\u064A\u0627 \u0627\u0644\u0627\u0633\u062A\u0648\u0627\u0626\u064A\u0629",
                "common": "\u063A\u064A\u0646\u064A\u0627 \u0627\u0644\u0627\u0633\u062A\u0648\u0627\u0626\u064A\u0629"
            },
            "bre": {
                "official": "Republik Ginea ar C'heheder",
                "common": "Ginea ar C'heheder"
            },
            "ces": {
                "official": "Republika Rovn\xedkov\xe1 Guinea",
                "common": "Rovn\xedkov\xe1 Guinea"
            },
            "cym": {
                "official": "Gweriniaeth Gini Gyhydeddol",
                "common": "Gini Gyhydeddol"
            },
            "deu": {
                "official": "Republik \xc4quatorialguinea",
                "common": "\xc4quatorialguinea"
            },
            "est": {
                "official": "Ekvatoriaal-Guinea Vabariik",
                "common": "Ekvatoriaal-Guinea"
            },
            "fin": {
                "official": "P\xe4iv\xe4ntasaajan Guinean tasavalta",
                "common": "P\xe4iv\xe4ntasaajan Guinea"
            },
            "fra": {
                "official": "R\xe9publique de Guin\xe9e \xe9quatoriale",
                "common": "Guin\xe9e \xe9quatoriale"
            },
            "hrv": {
                "official": "Republika Ekvatorska Gvineja",
                "common": "Ekvatorijalna Gvineja"
            },
            "hun": {
                "official": "Egyenl\xedt\u0151i-Guinea-i K\xf6zt\xe1rsas\xe1g",
                "common": "Egyenl\xedt\u0151i-Guinea"
            },
            "ita": {
                "official": "Repubblica della Guinea Equatoriale",
                "common": "Guinea Equatoriale"
            },
            "jpn": {
                "official": "\u8D64\u9053\u30AE\u30CB\u30A2\u5171\u548C\u56FD",
                "common": "\u8D64\u9053\u30AE\u30CB\u30A2"
            },
            "kor": {
                "official": "\uC801\uB3C4 \uAE30\uB2C8 \uACF5\uD654\uAD6D",
                "common": "\uC801\uB3C4 \uAE30\uB2C8"
            },
            "nld": {
                "official": "Republiek Equatoriaal-Guinea",
                "common": "Equatoriaal-Guinea"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u06AF\u06CC\u0646\u0647 \u0627\u0633\u062A\u0648\u0627\u06CC\u06CC",
                "common": "\u06AF\u06CC\u0646\u0647 \u0627\u0633\u062A\u0648\u0627\u06CC\u06CC"
            },
            "pol": {
                "official": "Republika Gwinei R\xf3wnikowej",
                "common": "Gwinea R\xf3wnikowa"
            },
            "por": {
                "official": "Rep\xfablica da Guin\xe9 Equatorial",
                "common": "Guin\xe9 Equatorial"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u042D\u043A\u0432\u0430\u0442\u043E\u0440\u0438\u0430\u043B\u044C\u043D\u0430\u044F \u0413\u0432\u0438\u043D\u0435\u044F",
                "common": "\u042D\u043A\u0432\u0430\u0442\u043E\u0440\u0438\u0430\u043B\u044C\u043D\u0430\u044F \u0413\u0432\u0438\u043D\u0435\u044F"
            },
            "slk": {
                "official": "Republika rovn\xedkovej Guiney",
                "common": "Rovn\xedkov\xe1 Guinea"
            },
            "spa": {
                "official": "Rep\xfablica de Guinea Ecuatorial",
                "common": "Guinea Ecuatorial"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0415\u043A\u0432\u0430\u0442\u043E\u0440\u0438\u0458\u0430\u043B\u043D\u0430 \u0413\u0432\u0438\u043D\u0435\u0458\u0430",
                "common": "\u0415\u043A\u0432\u0430\u0442\u043E\u0440\u0438\u0458\u0430\u043B\u043D\u0430 \u0413\u0432\u0438\u043D\u0435\u0458\u0430"
            },
            "swe": {
                "official": "Republiken Ekvatorialguinea",
                "common": "Ekvatorialguinea"
            },
            "tur": {
                "official": "Ekvator Ginesi Cumhuriyeti",
                "common": "Ekvator Ginesi"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0633\u062A\u0648\u0627\u0626\u06CC \u06AF\u0646\u06CC",
                "common": "\u0627\u0633\u062A\u0648\u0627\u0626\u06CC \u06AF\u0646\u06CC"
            },
            "zho": {
                "official": "\u8D64\u9053\u51E0\u5185\u4E9A\u5171\u548C\u56FD",
                "common": "\u8D64\u9053\u51E0\u5185\u4E9A"
            }
        },
        "latlng": [
            2,
            10
        ],
        "landlocked": false,
        "borders": [
            "CMR",
            "GAB"
        ],
        "area": 28051,
        "demonyms": {
            "eng": {
                "f": "Equatorial Guinean",
                "m": "Equatorial Guinean"
            },
            "fra": {
                "f": "\xc9quato-guin\xe9enne",
                "m": "\xc9quato-guin\xe9en"
            }
        },
        "flag": "\uD83C\uDDEC\uD83C\uDDF6",
        "maps": {
            "googleMaps": "https://goo.gl/maps/ucWfFd8aW1FbGMva9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192791"
        },
        "population": 1402985,
        "fifa": "EQG",
        "car": {
            "signs": [
                "GQ"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/gq.png",
            "svg": "https://flagcdn.com/gq.svg",
            "alt": "The flag of Equatorial Guinea is composed of three equal horizontal bands of green, white and red with the national coat of arms centered in the white band and an isosceles triangle superimposed on the hoist side of the field. The triangle is light blue, has its base on the hoist end and spans about one-fifth the width of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/gq.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/gq.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                3.75,
                8.78
            ]
        }
    },
    {
        "name": {
            "common": "Spain",
            "official": "Kingdom of Spain",
            "nativeName": {
                "spa": {
                    "official": "Reino de Espa\xf1a",
                    "common": "Espa\xf1a"
                }
            }
        },
        "tld": [
            ".es"
        ],
        "cca2": "ES",
        "ccn3": "724",
        "cca3": "ESP",
        "cioc": "ESP",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "4"
            ]
        },
        "capital": [
            "Madrid"
        ],
        "altSpellings": [
            "ES",
            "Kingdom of Spain",
            "Reino de Espa\xf1a"
        ],
        "region": "Europe",
        "subregion": "Southern Europe",
        "languages": {
            "spa": "Spanish",
            "cat": "Catalan",
            "eus": "Basque",
            "glc": "Galician"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0645\u0644\u0643\u0629 \u0625\u0633\u0628\u0627\u0646\u064A\u0627",
                "common": "\u0625\u0633\u0628\u0627\u0646\u064A\u0627"
            },
            "bre": {
                "official": "Rouantelezh Spagn",
                "common": "Spagn"
            },
            "ces": {
                "official": "\u0160pan\u011Blsk\xe9 kr\xe1lovstv\xed",
                "common": "\u0160pan\u011Blsko"
            },
            "cym": {
                "official": "Kingdom of Spain",
                "common": "Spain"
            },
            "deu": {
                "official": "K\xf6nigreich Spanien",
                "common": "Spanien"
            },
            "est": {
                "official": "Hispaania Kuningriik",
                "common": "Hispaania"
            },
            "fin": {
                "official": "Espanjan kuningaskunta",
                "common": "Espanja"
            },
            "fra": {
                "official": "Royaume d'Espagne",
                "common": "Espagne"
            },
            "hrv": {
                "official": "Kraljevina \u0160panjolska",
                "common": "\u0160panjolska"
            },
            "hun": {
                "official": "Spanyol Kir\xe1lys\xe1g",
                "common": "Spanyolorsz\xe1g"
            },
            "ita": {
                "official": "Regno di Spagna",
                "common": "Spagna"
            },
            "jpn": {
                "official": "\u30B9\u30DA\u30A4\u30F3\u738B\u56FD",
                "common": "\u30B9\u30DA\u30A4\u30F3"
            },
            "kor": {
                "official": "\uC5D0\uC2A4\uD30C\uB0D0 \uC655\uAD6D",
                "common": "\uC2A4\uD398\uC778"
            },
            "nld": {
                "official": "Koninkrijk Spanje",
                "common": "Spanje"
            },
            "per": {
                "official": "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0627\u0633\u067E\u0627\u0646\u06CC\u0627",
                "common": "\u0627\u0633\u067E\u0627\u0646\u06CC\u0627"
            },
            "pol": {
                "official": "Kr\xf3lestwo Hiszpanii ",
                "common": "Hiszpania"
            },
            "por": {
                "official": "Reino de Espanha",
                "common": "Espanha"
            },
            "rus": {
                "official": "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0418\u0441\u043F\u0430\u043D\u0438\u044F",
                "common": "\u0418\u0441\u043F\u0430\u043D\u0438\u044F"
            },
            "slk": {
                "official": "\u0160panielske kr\xe1\u013Eovstvo",
                "common": "\u0160panielsko"
            },
            "spa": {
                "official": "Reino de Espa\xf1a",
                "common": "Espa\xf1a"
            },
            "srp": {
                "official": "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0428\u043F\u0430\u043D\u0438\u0458\u0430",
                "common": "\u0428\u043F\u0430\u043D\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Konungariket Spanien",
                "common": "Spanien"
            },
            "tur": {
                "official": "\u0130spanya Krall\u0131\u011F\u0131",
                "common": "\u0130spanya"
            },
            "urd": {
                "official": "\u0645\u0645\u0644\u06A9\u062A\u0650 \u06C1\u0633\u067E\u0627\u0646\u06CC\u06C1",
                "common": "\u06C1\u0633\u067E\u0627\u0646\u06CC\u06C1"
            },
            "zho": {
                "official": "\u897F\u73ED\u7259\u738B\u56FD",
                "common": "\u897F\u73ED\u7259"
            }
        },
        "latlng": [
            40,
            -4
        ],
        "landlocked": false,
        "borders": [
            "AND",
            "FRA",
            "GIB",
            "PRT",
            "MAR"
        ],
        "area": 505992,
        "demonyms": {
            "eng": {
                "f": "Spanish",
                "m": "Spanish"
            },
            "fra": {
                "f": "Espagnole",
                "m": "Espagnol"
            }
        },
        "flag": "\uD83C\uDDEA\uD83C\uDDF8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/138JaXW8EZzRVitY9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/1311341"
        },
        "population": 47351567,
        "gini": {
            "2018": 34.7
        },
        "fifa": "ESP",
        "car": {
            "signs": [
                "E"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC",
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/es.png",
            "svg": "https://flagcdn.com/es.svg",
            "alt": "The flag of Spain is composed of three horizontal bands of red, yellow and red, with the yellow band twice the height of the red bands. In the yellow band is the national coat of arms offset slightly towards the hoist side of center."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/es.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/es.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                40.4,
                -3.68
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Netherlands",
            "official": "Kingdom of the Netherlands",
            "nativeName": {
                "nld": {
                    "official": "Koninkrijk der Nederlanden",
                    "common": "Nederland"
                }
            }
        },
        "tld": [
            ".nl"
        ],
        "cca2": "NL",
        "ccn3": "528",
        "cca3": "NLD",
        "cioc": "NED",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "EUR": {
                "name": "Euro",
                "symbol": "\u20AC"
            }
        },
        "idd": {
            "root": "+3",
            "suffixes": [
                "1"
            ]
        },
        "capital": [
            "Amsterdam"
        ],
        "altSpellings": [
            "NL",
            "Holland",
            "Nederland",
            "The Netherlands"
        ],
        "region": "Europe",
        "subregion": "Western Europe",
        "languages": {
            "nld": "Dutch"
        },
        "translations": {
            "ara": {
                "official": "\u0645\u0645\u0644\u0643\u0629 \u0647\u0648\u0644\u0646\u062F\u0627",
                "common": "\u0647\u0648\u0644\u0646\u062F\u0627"
            },
            "bre": {
                "official": "Rouantelezh an Izelvroio\xf9",
                "common": "Izelvroio\xf9"
            },
            "ces": {
                "official": "Nizozemsk\xe9 kr\xe1lovstv\xed",
                "common": "Nizozemsko"
            },
            "cym": {
                "official": "Kingdom of the Netherlands",
                "common": "Netherlands"
            },
            "deu": {
                "official": "Niederlande",
                "common": "Niederlande"
            },
            "est": {
                "official": "Madalmaade Kuningriik",
                "common": "Holland"
            },
            "fin": {
                "official": "Alankomaat",
                "common": "Alankomaat"
            },
            "fra": {
                "official": "Pays-Bas",
                "common": "Pays-Bas"
            },
            "hrv": {
                "official": "Holandija",
                "common": "Nizozemska"
            },
            "hun": {
                "official": "Holland Kir\xe1lys\xe1g",
                "common": "Hollandia"
            },
            "ita": {
                "official": "Paesi Bassi",
                "common": "Paesi Bassi"
            },
            "jpn": {
                "official": "\u30AA\u30E9\u30F3\u30C0",
                "common": "\u30AA\u30E9\u30F3\u30C0"
            },
            "kor": {
                "official": "\uB124\uB35C\uB780\uB4DC \uC655\uAD6D",
                "common": "\uB124\uB35C\uB780\uB4DC"
            },
            "nld": {
                "official": "Nederland",
                "common": "Nederland"
            },
            "per": {
                "official": "\u0647\u0644\u0646\u062F",
                "common": "\u0647\u0644\u0646\u062F"
            },
            "pol": {
                "official": "Kr\xf3lestwo Niderland\xf3w",
                "common": "Holandia"
            },
            "por": {
                "official": "Holanda",
                "common": "Holanda"
            },
            "rus": {
                "official": "\u041D\u0438\u0434\u0435\u0440\u043B\u0430\u043D\u0434\u044B",
                "common": "\u041D\u0438\u0434\u0435\u0440\u043B\u0430\u043D\u0434\u044B"
            },
            "slk": {
                "official": "Holandsk\xe9 kr\xe1\u013Eovstvo",
                "common": "Holansko"
            },
            "spa": {
                "official": "Pa\xedses Bajos",
                "common": "Pa\xedses Bajos"
            },
            "srp": {
                "official": "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0425\u043E\u043B\u0430\u043D\u0434\u0438\u0458\u0430",
                "common": "\u0425\u043E\u043B\u0430\u043D\u0434\u0438\u0458\u0430"
            },
            "swe": {
                "official": "Nederl\xe4nderna",
                "common": "Nederl\xe4nderna"
            },
            "tur": {
                "official": "Hollanda",
                "common": "Hollanda"
            },
            "urd": {
                "official": "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0646\u06CC\u062F\u0631\u0644\u06CC\u0646\u0688\u0632",
                "common": "\u0646\u06CC\u062F\u0631\u0644\u06CC\u0646\u0688\u0632"
            },
            "zho": {
                "official": "\u8377\u5170",
                "common": "\u8377\u5170"
            }
        },
        "latlng": [
            52.5,
            5.75
        ],
        "landlocked": false,
        "borders": [
            "BEL",
            "DEU"
        ],
        "area": 41850,
        "demonyms": {
            "eng": {
                "f": "Dutch",
                "m": "Dutch"
            },
            "fra": {
                "f": "N\xe9erlandaise",
                "m": "N\xe9erlandais"
            }
        },
        "flag": "\uD83C\uDDF3\uD83C\uDDF1",
        "maps": {
            "googleMaps": "https://goo.gl/maps/Hv6zQswGhFxoVVBm6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/47796"
        },
        "population": 16655799,
        "gini": {
            "2018": 28.1
        },
        "fifa": "NED",
        "car": {
            "signs": [
                "NL"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Europe"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/nl.png",
            "svg": "https://flagcdn.com/nl.svg",
            "alt": "The flag of the Netherlands is composed of three equal horizontal bands of red, white and blue."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/nl.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/nl.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                52.35,
                4.92
            ]
        },
        "postalCode": {
            "format": "#### @@",
            "regex": "^(\\d{4}[A-Z]{2})$"
        }
    },
    {
        "name": {
            "common": "British Virgin Islands",
            "official": "Virgin Islands",
            "nativeName": {
                "eng": {
                    "official": "Virgin Islands",
                    "common": "British Virgin Islands"
                }
            }
        },
        "tld": [
            ".vg"
        ],
        "cca2": "VG",
        "ccn3": "092",
        "cca3": "VGB",
        "cioc": "IVB",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "284"
            ]
        },
        "capital": [
            "Road Town"
        ],
        "altSpellings": [
            "VG",
            "Virgin Islands, British"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0632\u0631 \u0627\u0644\u0639\u0630\u0631\u0627\u0621 \u0627\u0644\u0628\u0631\u064A\u0637\u0627\u0646\u064A\u0629",
                "common": "\u062C\u0632\u0631 \u0627\u0644\u0639\u0630\u0631\u0627\u0621"
            },
            "bre": {
                "official": "Inizi Gwerc'h Breizhveurat",
                "common": "Inizi Gwerc'h Breizhveurat"
            },
            "ces": {
                "official": "Britsk\xe9 Panensk\xe9 ostrovy",
                "common": "Britsk\xe9 Panensk\xe9 ostrovy"
            },
            "cym": {
                "official": "Virgin Islands",
                "common": "British Virgin Islands"
            },
            "deu": {
                "official": "Jungferninseln",
                "common": "Britische Jungferninseln"
            },
            "est": {
                "official": "Neitsisaared",
                "common": "Briti Neitsisaared"
            },
            "fin": {
                "official": "Brittil\xe4iset Neitsytsaaret",
                "common": "Neitsytsaaret"
            },
            "fra": {
                "official": "\xeeles Vierges",
                "common": "\xceles Vierges britanniques"
            },
            "hrv": {
                "official": "Djevi\u010Danski Otoci",
                "common": "Britanski Djevi\u010Danski Otoci"
            },
            "hun": {
                "official": "Brit Virgin-szigetek",
                "common": "Brit Virgin-szigetek"
            },
            "ita": {
                "official": "Isole Vergini",
                "common": "Isole Vergini Britanniche"
            },
            "jpn": {
                "official": "\u30D0\u30FC\u30B8\u30F3\u8AF8\u5CF6",
                "common": "\u30A4\u30AE\u30EA\u30B9\u9818\u30F4\u30A1\u30FC\u30B8\u30F3\u8AF8\u5CF6"
            },
            "kor": {
                "official": "\uC601\uAD6D\uB839 \uBC84\uC9C4\uC544\uC77C\uB79C\uB4DC",
                "common": "\uC601\uAD6D\uB839 \uBC84\uC9C4\uC544\uC77C\uB79C\uB4DC"
            },
            "nld": {
                "official": "Maagdeneilanden",
                "common": "Britse Maagdeneilanden"
            },
            "per": {
                "official": "\u062C\u0632\u0627\u06CC\u0631 \u0648\u06CC\u0631\u062C\u06CC\u0646 \u0628\u0631\u06CC\u062A\u0627\u0646\u06CC\u0627",
                "common": "\u062C\u0632\u0627\u06CC\u0631 \u0648\u06CC\u0631\u062C\u06CC\u0646 \u0628\u0631\u06CC\u062A\u0627\u0646\u06CC\u0627"
            },
            "pol": {
                "official": "Brytyjskie Wyspy Dziewicze",
                "common": "Brytyjskie Wyspy Dziewicze"
            },
            "por": {
                "official": "Ilhas Virgens",
                "common": "Ilhas Virgens"
            },
            "rus": {
                "official": "\u0412\u0438\u0440\u0433\u0438\u043D\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                "common": "\u0411\u0440\u0438\u0442\u0430\u043D\u0441\u043A\u0438\u0435 \u0412\u0438\u0440\u0433\u0438\u043D\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            "slk": {
                "official": "Panensk\xe9 ostrovy",
                "common": "Panensk\xe9 ostrovy"
            },
            "spa": {
                "official": "Islas V\xedrgenes",
                "common": "Islas V\xedrgenes del Reino Unido"
            },
            "srp": {
                "official": "\u0411\u0440\u0438\u0442\u0430\u043D\u0441\u043A\u0430 \u0414\u0435\u0432\u0438\u0447\u0430\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                "common": "\u0411\u0440\u0438\u0442\u0430\u043D\u0441\u043A\u0430 \u0414\u0435\u0432\u0438\u0447\u0430\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            "swe": {
                "official": "Brittiska Jungfru\xf6arna",
                "common": "Brittiska Jungfru\xf6arna"
            },
            "tur": {
                "official": "Virjin Adalar\u0131",
                "common": "Virjin Adalar\u0131"
            },
            "urd": {
                "official": "\u0628\u0631\u0637\u0627\u0646\u0648\u06CC \u062C\u0632\u0627\u0626\u0631 \u0648\u0631\u062C\u0646",
                "common": "\u0628\u0631\u0637\u0627\u0646\u0648\u06CC \u062C\u0632\u0627\u0626\u0631 \u0648\u0631\u062C\u0646"
            },
            "zho": {
                "official": "\u82F1\u5C5E\u7EF4\u5C14\u4EAC\u7FA4\u5C9B",
                "common": "\u82F1\u5C5E\u7EF4\u5C14\u4EAC\u7FA4\u5C9B"
            }
        },
        "latlng": [
            18.431383,
            -64.62305
        ],
        "landlocked": false,
        "area": 151,
        "demonyms": {
            "eng": {
                "f": "Virgin Islander",
                "m": "Virgin Islander"
            }
        },
        "flag": "\uD83C\uDDFB\uD83C\uDDEC",
        "maps": {
            "googleMaps": "https://goo.gl/maps/49C9cSesNVAR9DQk8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/285454"
        },
        "population": 30237,
        "fifa": "VGB",
        "car": {
            "signs": [
                "BVI"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/vg.png",
            "svg": "https://flagcdn.com/vg.svg"
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/vg.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/vg.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                18.42,
                -64.62
            ]
        }
    },
    {
        "name": {
            "common": "Benin",
            "official": "Republic of Benin",
            "nativeName": {
                "fra": {
                    "official": "R\xe9publique du B\xe9nin",
                    "common": "B\xe9nin"
                }
            }
        },
        "tld": [
            ".bj"
        ],
        "cca2": "BJ",
        "ccn3": "204",
        "cca3": "BEN",
        "cioc": "BEN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "XOF": {
                "name": "West African CFA franc",
                "symbol": "Fr"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "29"
            ]
        },
        "capital": [
            "Porto-Novo"
        ],
        "altSpellings": [
            "BJ",
            "Republic of Benin",
            "R\xe9publique du B\xe9nin"
        ],
        "region": "Africa",
        "subregion": "Western Africa",
        "languages": {
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u0646\u064A\u0646",
                "common": "\u0628\u0646\u064A\u0646"
            },
            "bre": {
                "official": "Republik Benin",
                "common": "Benin"
            },
            "ces": {
                "official": "Beninsk\xe1 republika",
                "common": "Benin"
            },
            "cym": {
                "official": "Gweriniaeth Benin",
                "common": "Benin"
            },
            "deu": {
                "official": "Republik Benin",
                "common": "Benin"
            },
            "est": {
                "official": "Benini Vabariik",
                "common": "Benin"
            },
            "fin": {
                "official": "Beninin tasavalta",
                "common": "Benin"
            },
            "fra": {
                "official": "R\xe9publique du B\xe9nin",
                "common": "B\xe9nin"
            },
            "hrv": {
                "official": "Republika Benin",
                "common": "Benin"
            },
            "hun": {
                "official": "Benini K\xf6zt\xe1rsas\xe1g",
                "common": "Benin"
            },
            "ita": {
                "official": "Repubblica del Benin",
                "common": "Benin"
            },
            "jpn": {
                "official": "\u30D9\u30CA\u30F3\u5171\u548C\u56FD",
                "common": "\u30D9\u30CA\u30F3"
            },
            "kor": {
                "official": "\uBCA0\uB0C9 \uACF5\uD654\uAD6D",
                "common": "\uBCA0\uB0C9"
            },
            "nld": {
                "official": "Republiek Benin",
                "common": "Benin"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0628\u0646\u06CC\u0646",
                "common": "\u0628\u0646\u06CC\u0646"
            },
            "pol": {
                "official": "Benin",
                "common": "Benin"
            },
            "por": {
                "official": "Rep\xfablica do Benin",
                "common": "Benin"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0435\u043D\u0438\u043D",
                "common": "\u0411\u0435\u043D\u0438\u043D"
            },
            "slk": {
                "official": "Beninsk\xe1 republika",
                "common": "Benin"
            },
            "spa": {
                "official": "Rep\xfablica de Benin",
                "common": "Ben\xedn"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0435\u043D\u0438\u043D",
                "common": "\u0411\u0435\u043D\u0438\u043D"
            },
            "swe": {
                "official": "Republiken Benin",
                "common": "Benin"
            },
            "tur": {
                "official": "Benin Cumhuriyeti",
                "common": "Benin"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0628\u06CC\u0646\u0646",
                "common": "\u0628\u06CC\u0646\u0646"
            },
            "zho": {
                "official": "\u8D1D\u5B81\u5171\u548C\u56FD",
                "common": "\u8D1D\u5B81"
            }
        },
        "latlng": [
            9.5,
            2.25
        ],
        "landlocked": false,
        "borders": [
            "BFA",
            "NER",
            "NGA",
            "TGO"
        ],
        "area": 112622,
        "demonyms": {
            "eng": {
                "f": "Beninese",
                "m": "Beninese"
            },
            "fra": {
                "f": "B\xe9ninoise",
                "m": "B\xe9ninois"
            }
        },
        "flag": "\uD83C\uDDE7\uD83C\uDDEF",
        "maps": {
            "googleMaps": "https://goo.gl/maps/uMw1BsHEXQYgVFFu6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/192784"
        },
        "population": 12123198,
        "gini": {
            "2015": 47.8
        },
        "fifa": "BEN",
        "car": {
            "signs": [
                "DY"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/bj.png",
            "svg": "https://flagcdn.com/bj.svg",
            "alt": "The flag of Benin features a green vertical band on its hoist side that takes up about two-fifth the width of the field and two equal horizontal bands of yellow and red adjoining the vertical band."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/bj.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/bj.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                6.48,
                2.62
            ]
        }
    },
    {
        "name": {
            "common": "Pakistan",
            "official": "Islamic Republic of Pakistan",
            "nativeName": {
                "eng": {
                    "official": "Islamic Republic of Pakistan",
                    "common": "Pakistan"
                },
                "urd": {
                    "official": "\u0627\u0633\u0644\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C2 \u067E\u0627\u0643\u0633\u062A\u0627\u0646",
                    "common": "\u067E\u0627\u0643\u0633\u062A\u0627\u0646"
                }
            }
        },
        "tld": [
            ".pk"
        ],
        "cca2": "PK",
        "ccn3": "586",
        "cca3": "PAK",
        "cioc": "PAK",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "PKR": {
                "name": "Pakistani rupee",
                "symbol": "\u20A8"
            }
        },
        "idd": {
            "root": "+9",
            "suffixes": [
                "2"
            ]
        },
        "capital": [
            "Islamabad"
        ],
        "altSpellings": [
            "PK",
            "P\u0101kist\u0101n",
            "Islamic Republic of Pakistan",
            "Isl\u0101m\u012B Jumh\u016Briya'eh P\u0101kist\u0101n"
        ],
        "region": "Asia",
        "subregion": "Southern Asia",
        "languages": {
            "eng": "English",
            "urd": "Urdu"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u0627\u0643\u0633\u062A\u0627\u0646 \u0627\u0644\u0625\u0633\u0644\u0627\u0645\u064A\u0629",
                "common": "\u0628\u0627\u0643\u0633\u062A\u0627\u0646"
            },
            "bre": {
                "official": "Republik islamek Pakistan",
                "common": "Pakistan"
            },
            "ces": {
                "official": "P\xe1kist\xe1nsk\xe1 isl\xe1msk\xe1 republika",
                "common": "P\xe1kist\xe1n"
            },
            "cym": {
                "official": "Islamic Republic of Pakistan",
                "common": "Pakistan"
            },
            "deu": {
                "official": "Islamische Republik Pakistan",
                "common": "Pakistan"
            },
            "est": {
                "official": "Pakistani Islamivabariik",
                "common": "Pakistan"
            },
            "fin": {
                "official": "Pakistanin islamilainen tasavalta",
                "common": "Pakistan"
            },
            "fra": {
                "official": "R\xe9publique islamique du Pakistan",
                "common": "Pakistan"
            },
            "hrv": {
                "official": "Islamska Republika Pakistan",
                "common": "Pakistan"
            },
            "hun": {
                "official": "Pakiszt\xe1n",
                "common": "Pakiszt\xe1n"
            },
            "ita": {
                "official": "Repubblica islamica del Pakistan",
                "common": "Pakistan"
            },
            "jpn": {
                "official": "\u30D1\u30AD\u30B9\u30BF\u30F3",
                "common": "\u30D1\u30AD\u30B9\u30BF\u30F3"
            },
            "kor": {
                "official": "\uD30C\uD0A4\uC2A4\uD0C4 \uC774\uC2AC\uB78C \uACF5\uD654\uAD6D",
                "common": "\uD30C\uD0A4\uC2A4\uD0C4"
            },
            "nld": {
                "official": "Islamitische Republiek Pakistan",
                "common": "Pakistan"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0627\u0645\u06CC \u067E\u0627\u06A9\u0633\u062A\u0627\u0646",
                "common": "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646"
            },
            "pol": {
                "official": "Islamska Republika Pakistanu",
                "common": "Pakistan"
            },
            "por": {
                "official": "Rep\xfablica Isl\xe2mica do Paquist\xe3o",
                "common": "Paquist\xe3o"
            },
            "rus": {
                "official": "\u0418\u0441\u043B\u0430\u043C\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0430\u043A\u0438\u0441\u0442\u0430\u043D",
                "common": "\u041F\u0430\u043A\u0438\u0441\u0442\u0430\u043D"
            },
            "slk": {
                "official": "Pakistansk\xe1 islamsk\xe1 republika",
                "common": "Pakistan"
            },
            "spa": {
                "official": "Rep\xfablica Isl\xe1mica de Pakist\xe1n",
                "common": "Pakist\xe1n"
            },
            "srp": {
                "official": "\u0418\u0441\u043B\u0430\u043C\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0430\u043A\u0438\u0441\u0442\u0430\u043D",
                "common": "\u041F\u0430\u043A\u0438\u0441\u0442\u0430\u043D"
            },
            "swe": {
                "official": "Islamiska republiken Pakistan",
                "common": "Pakistan"
            },
            "tur": {
                "official": "Pakistan \u0130slam Cumhuriyeti",
                "common": "Pakistan"
            },
            "urd": {
                "official": "\u0627\u0633\u0644\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u067E\u0627\u06A9\u0633\u062A\u0627\u0646",
                "common": "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646"
            },
            "zho": {
                "official": "\u5DF4\u57FA\u65AF\u5766\u4F0A\u65AF\u5170\u5171\u548C\u56FD",
                "common": "\u5DF4\u57FA\u65AF\u5766"
            }
        },
        "latlng": [
            30,
            70
        ],
        "landlocked": false,
        "borders": [
            "AFG",
            "CHN",
            "IND",
            "IRN"
        ],
        "area": 881912,
        "demonyms": {
            "eng": {
                "f": "Pakistani",
                "m": "Pakistani"
            },
            "fra": {
                "f": "Pakistanaise",
                "m": "Pakistanais"
            }
        },
        "flag": "\uD83C\uDDF5\uD83C\uDDF0",
        "maps": {
            "googleMaps": "https://goo.gl/maps/5LYujdfR5yLUXoERA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/307573"
        },
        "population": 220892331,
        "gini": {
            "2018": 31.6
        },
        "fifa": "PAK",
        "car": {
            "signs": [
                "PK"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+05:00"
        ],
        "continents": [
            "Asia"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/pk.png",
            "svg": "https://flagcdn.com/pk.svg",
            "alt": "The flag of Pakistan is composed of a white vertical band on its hoist side that takes up about one-fourth the width of the field and a dark green rectangular area that spans the rest of the field. A white fly-side facing crescent and five-pointed star are centered in the dark green area."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/pk.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/pk.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                33.68,
                73.05
            ]
        },
        "postalCode": {
            "format": "#####",
            "regex": "^(\\d{5})$"
        }
    },
    {
        "name": {
            "common": "Panama",
            "official": "Republic of Panama",
            "nativeName": {
                "spa": {
                    "official": "Rep\xfablica de Panam\xe1",
                    "common": "Panam\xe1"
                }
            }
        },
        "tld": [
            ".pa"
        ],
        "cca2": "PA",
        "ccn3": "591",
        "cca3": "PAN",
        "cioc": "PAN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "PAB": {
                "name": "Panamanian balboa",
                "symbol": "B/."
            },
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "07"
            ]
        },
        "capital": [
            "Panama City"
        ],
        "altSpellings": [
            "PA",
            "Republic of Panama",
            "Rep\xfablica de Panam\xe1"
        ],
        "region": "Americas",
        "subregion": "Central America",
        "languages": {
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u0646\u0645\u0627",
                "common": "\u0628\u0646\u0645\u0627"
            },
            "bre": {
                "official": "Republik Panama",
                "common": "Panama"
            },
            "ces": {
                "official": "Panamsk\xe1 republika",
                "common": "Panama"
            },
            "cym": {
                "official": "Republic of Panama",
                "common": "Panama"
            },
            "deu": {
                "official": "Republik Panama",
                "common": "Panama"
            },
            "est": {
                "official": "Panama Vabariik",
                "common": "Panama"
            },
            "fin": {
                "official": "Panaman tasavalta",
                "common": "Panama"
            },
            "fra": {
                "official": "R\xe9publique du Panama",
                "common": "Panama"
            },
            "hrv": {
                "official": "Republika Panama",
                "common": "Panama"
            },
            "hun": {
                "official": "Panamai K\xf6zt\xe1rsas\xe1g",
                "common": "Panama"
            },
            "ita": {
                "official": "Repubblica di Panama",
                "common": "Panama"
            },
            "jpn": {
                "official": "\u30D1\u30CA\u30DE\u5171\u548C\u56FD",
                "common": "\u30D1\u30CA\u30DE"
            },
            "kor": {
                "official": "\uD30C\uB098\uB9C8 \uACF5\uD654\uAD6D",
                "common": "\uD30C\uB098\uB9C8"
            },
            "nld": {
                "official": "Republiek Panama",
                "common": "Panama"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u067E\u0627\u0646\u0627\u0645\u0627",
                "common": "\u067E\u0627\u0646\u0627\u0645\u0627"
            },
            "pol": {
                "official": "Republika Panamy",
                "common": "Panama"
            },
            "por": {
                "official": "Rep\xfablica do Panam\xe1",
                "common": "Panam\xe1"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0430\u043D\u0430\u043C\u0430",
                "common": "\u041F\u0430\u043D\u0430\u043C\u0430"
            },
            "slk": {
                "official": "Panamsk\xe1 republika",
                "common": "Panama"
            },
            "spa": {
                "official": "Rep\xfablica de Panam\xe1",
                "common": "Panam\xe1"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0430\u043D\u0430\u043C\u0430",
                "common": "\u041F\u0430\u043D\u0430\u043C\u0430"
            },
            "swe": {
                "official": "Republiken Panama",
                "common": "Panama"
            },
            "tur": {
                "official": "Panama Cumhuriyeti",
                "common": "Panama"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u067E\u0627\u0646\u0627\u0645\u0627",
                "common": "\u067E\u0627\u0646\u0627\u0645\u0627"
            },
            "zho": {
                "official": "\u5DF4\u62FF\u9A6C\u5171\u548C\u56FD",
                "common": "\u5DF4\u62FF\u9A6C"
            }
        },
        "latlng": [
            9,
            -80
        ],
        "landlocked": false,
        "borders": [
            "COL",
            "CRI"
        ],
        "area": 75417,
        "demonyms": {
            "eng": {
                "f": "Panamanian",
                "m": "Panamanian"
            },
            "fra": {
                "f": "Panam\xe9enne",
                "m": "Panam\xe9en"
            }
        },
        "flag": "\uD83C\uDDF5\uD83C\uDDE6",
        "maps": {
            "googleMaps": "https://goo.gl/maps/sEN7sKqeawa5oPNLA",
            "openStreetMaps": "https://www.openstreetmap.org/relation/287668"
        },
        "population": 4314768,
        "gini": {
            "2019": 49.8
        },
        "fifa": "PAN",
        "car": {
            "signs": [
                "PA"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-05:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/pa.png",
            "svg": "https://flagcdn.com/pa.svg",
            "alt": "The flag of Panama is composed of four equal rectangular areas \u2014 a white rectangular area with a blue five-pointed star at its center, a red rectangular area, a white rectangular area with a red five-pointed star at its center, and a blue rectangular area \u2014 in the upper hoist side, upper fly side, lower fly side and lower hoist side respectively."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/pa.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/pa.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                8.97,
                -79.53
            ]
        }
    },
    {
        "name": {
            "common": "Turks and Caicos Islands",
            "official": "Turks and Caicos Islands",
            "nativeName": {
                "eng": {
                    "official": "Turks and Caicos Islands",
                    "common": "Turks and Caicos Islands"
                }
            }
        },
        "tld": [
            ".tc"
        ],
        "cca2": "TC",
        "ccn3": "796",
        "cca3": "TCA",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "649"
            ]
        },
        "capital": [
            "Cockburn Town"
        ],
        "altSpellings": [
            "TC"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0632\u0631 \u062A\u0648\u0631\u0643\u0633 \u0648\u0643\u0627\u064A\u0643\u0648\u0633",
                "common": "\u062C\u0632\u0631 \u062A\u0648\u0631\u0643\u0633 \u0648\u0643\u0627\u064A\u0643\u0648\u0633"
            },
            "bre": {
                "official": "Inizi Turks ha Caicos",
                "common": "Inizi Turks ha Caicos"
            },
            "ces": {
                "official": "Turks a Caicos",
                "common": "Turks a Caicos"
            },
            "cym": {
                "official": "Turks and Caicos Islands",
                "common": "Turks and Caicos Islands"
            },
            "deu": {
                "official": "Turks und Caicos Inseln",
                "common": "Turks-und Caicosinseln"
            },
            "est": {
                "official": "Turksi ja Caicose saared",
                "common": "Turks ja Caicos"
            },
            "fin": {
                "official": "Turks-ja Caicossaaret",
                "common": "Turks-ja Caicossaaret"
            },
            "fra": {
                "official": "\xceles Turques et Ca\xefques",
                "common": "\xceles Turques-et-Ca\xefques"
            },
            "hrv": {
                "official": "Otoci Turks i Caicos",
                "common": "Otoci Turks i Caicos"
            },
            "hun": {
                "official": "Turks- \xe9s Caicos-szigetek",
                "common": "Turks- \xe9s Caicos-szigetek"
            },
            "ita": {
                "official": "Turks e Caicos",
                "common": "Isole Turks e Caicos"
            },
            "jpn": {
                "official": "\u30BF\u30FC\u30AF\u30B9\xb7\u30AB\u30A4\u30B3\u30B9\u8AF8\u5CF6",
                "common": "\u30BF\u30FC\u30AF\u30B9\u30FB\u30AB\u30A4\u30B3\u30B9\u8AF8\u5CF6"
            },
            "kor": {
                "official": "\uD130\uD06C\uC2A4 \uCF00\uC774\uCEE4\uC2A4 \uC81C\uB3C4",
                "common": "\uD130\uD06C\uC2A4 \uCF00\uC774\uCEE4\uC2A4 \uC81C\uB3C4"
            },
            "nld": {
                "official": "Turks-en Caicoseilanden",
                "common": "Turks-en Caicoseilanden"
            },
            "per": {
                "official": "\u062C\u0632\u0627\u06CC\u0631 \u062A\u0648\u0631\u06A9\u0633 \u0648 \u06A9\u0627\u06CC\u06A9\u0648\u0633",
                "common": "\u062C\u0632\u0627\u06CC\u0631 \u062A\u0648\u0631\u06A9\u0633 \u0648 \u06A9\u0627\u06CC\u06A9\u0648\u0633"
            },
            "pol": {
                "official": "Turks i Caicos",
                "common": "Turks i Caicos"
            },
            "por": {
                "official": "Ilhas Turks e Caicos",
                "common": "Ilhas Turks e Caicos"
            },
            "rus": {
                "official": "\u0422\u0435\u0440\u043A\u0441 \u0438 \u041A\u0430\u0439\u043A\u043E\u0441 \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                "common": "\u0422\u0435\u0440\u043A\u0441 \u0438 \u041A\u0430\u0439\u043A\u043E\u0441"
            },
            "slk": {
                "official": "Ostrovy Turks a Caicos",
                "common": "Turks a Caicos"
            },
            "spa": {
                "official": "Islas Turcas y Caicos",
                "common": "Islas Turks y Caicos"
            },
            "srp": {
                "official": "\u041E\u0441\u0442\u0440\u0432\u0430 \u0422\u0435\u0440\u043A\u0441 \u0438 \u041A\u0435\u0458\u043A\u043E\u0441",
                "common": "\u0422\u0435\u0440\u043A\u0441 \u0438 \u041A\u0435\u0458\u043A\u043E\u0441"
            },
            "swe": {
                "official": "Turks- och Caicos\xf6arna",
                "common": "Turks- och Caicos\xf6arna"
            },
            "tur": {
                "official": "Turks ve Caicos Adalar\u0131",
                "common": "Turks ve Caicos Adalar\u0131"
            },
            "urd": {
                "official": "\u062C\u0632\u0627\u0626\u0631 \u06A9\u06CC\u06A9\u0633 \u0648 \u062A\u0631\u06A9\u06CC\u06C1",
                "common": "\u062C\u0632\u0627\u0626\u0631 \u06A9\u06CC\u06A9\u0633 \u0648 \u062A\u0631\u06A9\u06CC\u06C1"
            },
            "zho": {
                "official": "\u7279\u514B\u65AF\u548C\u51EF\u79D1\u65AF\u7FA4\u5C9B",
                "common": "\u7279\u514B\u65AF\u548C\u51EF\u79D1\u65AF\u7FA4\u5C9B"
            }
        },
        "latlng": [
            21.75,
            -71.58333333
        ],
        "landlocked": false,
        "area": 948,
        "demonyms": {
            "eng": {
                "f": "Turks and Caicos Islander",
                "m": "Turks and Caicos Islander"
            }
        },
        "flag": "\uD83C\uDDF9\uD83C\uDDE8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/R8VUDQfwZiFtvmyn8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/547479"
        },
        "population": 38718,
        "fifa": "TCA",
        "car": {
            "signs": [
                "GB"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/tc.png",
            "svg": "https://flagcdn.com/tc.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                21.46,
                -71.14
            ]
        },
        "postalCode": {
            "format": "TKCA 1ZZ",
            "regex": "^(TKCA 1ZZ)$"
        }
    },
    {
        "name": {
            "common": "Angola",
            "official": "Republic of Angola",
            "nativeName": {
                "por": {
                    "official": "Rep\xfablica de Angola",
                    "common": "Angola"
                }
            }
        },
        "tld": [
            ".ao"
        ],
        "cca2": "AO",
        "ccn3": "024",
        "cca3": "AGO",
        "cioc": "ANG",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "AOA": {
                "name": "Angolan kwanza",
                "symbol": "Kz"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "44"
            ]
        },
        "capital": [
            "Luanda"
        ],
        "altSpellings": [
            "AO",
            "Rep\xfablica de Angola",
            "\u0281\u025Bpublika de an'\u0261\u0254la"
        ],
        "region": "Africa",
        "subregion": "Middle Africa",
        "languages": {
            "por": "Portuguese"
        },
        "translations": {
            "ara": {
                "official": "\u0623\u0646\u063A\u0648\u0644\u0627",
                "common": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0646\u063A\u0648\u0644\u0627"
            },
            "bre": {
                "official": "Republik Angola",
                "common": "Angola"
            },
            "ces": {
                "official": "Angolsk\xe1 republika",
                "common": "Angola"
            },
            "cym": {
                "official": "Gweriniaeth Angola",
                "common": "Angola"
            },
            "deu": {
                "official": "Republik Angola",
                "common": "Angola"
            },
            "est": {
                "official": "Angola Vabariik",
                "common": "Angola"
            },
            "fin": {
                "official": "Angolan tasavalta",
                "common": "Angola"
            },
            "fra": {
                "official": "R\xe9publique d'Angola",
                "common": "Angola"
            },
            "hrv": {
                "official": "Republika Angola",
                "common": "Angola"
            },
            "hun": {
                "official": "Angola",
                "common": "Angola"
            },
            "ita": {
                "official": "Repubblica dell'Angola",
                "common": "Angola"
            },
            "jpn": {
                "official": "\u30A2\u30F3\u30B4\u30E9\u5171\u548C\u56FD",
                "common": "\u30A2\u30F3\u30B4\u30E9"
            },
            "kor": {
                "official": "\uC559\uACE8\uB77C \uACF5\uD654\uAD6D",
                "common": "\uC559\uACE8\uB77C"
            },
            "nld": {
                "official": "Republiek Angola",
                "common": "Angola"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0622\u0646\u06AF\u0648\u0644\u0627",
                "common": "\u0622\u0646\u06AF\u0648\u0644\u0627"
            },
            "pol": {
                "official": "Republika Angoli",
                "common": "Angola"
            },
            "por": {
                "official": "Rep\xfablica de Angola",
                "common": "Angola"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u043D\u0433\u043E\u043B\u0430",
                "common": "\u0410\u043D\u0433\u043E\u043B\u0430"
            },
            "slk": {
                "official": "Angolsk\xe1 republika",
                "common": "Angola"
            },
            "spa": {
                "official": "Rep\xfablica de Angola",
                "common": "Angola"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u043D\u0433\u043E\u043B\u0430",
                "common": "\u0410\u043D\u0433\u043E\u043B\u0430"
            },
            "swe": {
                "official": "Republiken Angola",
                "common": "Angola"
            },
            "tur": {
                "official": "Angola Cumhuriyeti",
                "common": "Angola"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0646\u06AF\u0648\u0644\u06C1",
                "common": "\u0627\u0646\u06AF\u0648\u0644\u06C1"
            },
            "zho": {
                "official": "\u5B89\u54E5\u62C9\u5171\u548C\u56FD",
                "common": "\u5B89\u54E5\u62C9"
            }
        },
        "latlng": [
            -12.5,
            18.5
        ],
        "landlocked": false,
        "borders": [
            "COG",
            "COD",
            "ZMB",
            "NAM"
        ],
        "area": 1246700,
        "demonyms": {
            "eng": {
                "f": "Angolan",
                "m": "Angolan"
            },
            "fra": {
                "f": "Angolaise",
                "m": "Angolais"
            }
        },
        "flag": "\uD83C\uDDE6\uD83C\uDDF4",
        "maps": {
            "googleMaps": "https://goo.gl/maps/q42Qbf1BmQL3fuZg9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/195267"
        },
        "population": 32866268,
        "gini": {
            "2018": 51.3
        },
        "fifa": "ANG",
        "car": {
            "signs": [
                "ANG"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC+01:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ao.png",
            "svg": "https://flagcdn.com/ao.svg",
            "alt": "The flag of Angola features two equal horizontal bands of red and black, with a yellow emblem at its centre. This emblem consists of a five-pointed star within the hoist-side facing half of a cogwheel that is crossed on its lower end by a machete."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ao.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ao.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -8.83,
                13.22
            ]
        }
    },
    {
        "name": {
            "common": "American Samoa",
            "official": "American Samoa",
            "nativeName": {
                "eng": {
                    "official": "American Samoa",
                    "common": "American Samoa"
                },
                "smo": {
                    "official": "S\u0101moa Amelika",
                    "common": "S\u0101moa Amelika"
                }
            }
        },
        "tld": [
            ".as"
        ],
        "cca2": "AS",
        "ccn3": "016",
        "cca3": "ASM",
        "cioc": "ASA",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "684"
            ]
        },
        "capital": [
            "Pago Pago"
        ],
        "altSpellings": [
            "AS",
            "Amerika S\u0101moa",
            "Amelika S\u0101moa",
            "S\u0101moa Amelika"
        ],
        "region": "Oceania",
        "subregion": "Polynesia",
        "languages": {
            "eng": "English",
            "smo": "Samoan"
        },
        "translations": {
            "ara": {
                "official": "\u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629",
                "common": "\u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629"
            },
            "bre": {
                "official": "Samoa Amerikan",
                "common": "Samoa Amerikan"
            },
            "ces": {
                "official": "Americk\xe1 Samoa",
                "common": "Americk\xe1 Samoa"
            },
            "cym": {
                "official": "American Samoa",
                "common": "American Samoa"
            },
            "deu": {
                "official": "Amerikanisch-Samoa",
                "common": "Amerikanisch-Samoa"
            },
            "est": {
                "official": "Ameerika Samoa",
                "common": "Ameerika Samoa"
            },
            "fin": {
                "official": "Amerikan Samoa",
                "common": "Amerikan Samoa"
            },
            "fra": {
                "official": "Samoa am\xe9ricaines",
                "common": "Samoa am\xe9ricaines"
            },
            "hrv": {
                "official": "ameri\u010Dka Samoa",
                "common": "Ameri\u010Dka Samoa"
            },
            "hun": {
                "official": "Szamoa",
                "common": "Szamoa"
            },
            "ita": {
                "official": "Samoa americane",
                "common": "Samoa Americane"
            },
            "jpn": {
                "official": "\u7C73\u30B5\u30E2\u30A2",
                "common": "\u30A2\u30E1\u30EA\u30AB\u9818\u30B5\u30E2\u30A2"
            },
            "kor": {
                "official": "\uC544\uBA54\uB9AC\uCE78\uC0AC\uBAA8\uC544",
                "common": "\uC544\uBA54\uB9AC\uCE78\uC0AC\uBAA8\uC544"
            },
            "nld": {
                "official": "Amerikaans Samoa",
                "common": "Amerikaans Samoa"
            },
            "per": {
                "official": "\u0633\u0627\u0645\u0648\u0622\u06CC \u0622\u0645\u0631\u06CC\u06A9\u0627",
                "common": "\u0633\u0627\u0645\u0648\u0622\u06CC \u0622\u0645\u0631\u06CC\u06A9\u0627"
            },
            "pol": {
                "official": "Samoa Ameryka\u0144skie",
                "common": "Samoa Ameryka\u0144skie"
            },
            "por": {
                "official": "Samoa americana",
                "common": "Samoa Americana"
            },
            "rus": {
                "official": "\u0430\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u043E\u0435 \u0421\u0430\u043C\u043E\u0430",
                "common": "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u043E\u0435 \u0421\u0430\u043C\u043E\u0430"
            },
            "slk": {
                "official": "Americk\xe1 Samoa",
                "common": "Americk\xe1 Samoa"
            },
            "spa": {
                "official": "Samoa Americana",
                "common": "Samoa Americana"
            },
            "srp": {
                "official": "\u0410\u043C\u0435\u0440\u0438\u0447\u043A\u0430 \u0421\u0430\u043C\u043E\u0430",
                "common": "\u0410\u043C\u0435\u0440\u0438\u0447\u043A\u0430 \u0421\u0430\u043C\u043E\u0430"
            },
            "swe": {
                "official": "Amerikanska Samoa",
                "common": "Amerikanska Samoa"
            },
            "tur": {
                "official": "Amerikan Samoas\u0131",
                "common": "Amerikan Samoas\u0131"
            },
            "urd": {
                "official": "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0633\u0645\u0648\u0648\u0627",
                "common": "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0633\u0645\u0648\u0648\u0627"
            },
            "zho": {
                "official": "\u7F8E\u5C5E\u8428\u6469\u4E9A",
                "common": "\u7F8E\u5C5E\u8428\u6469\u4E9A"
            }
        },
        "latlng": [
            -14.33333333,
            -170
        ],
        "landlocked": false,
        "area": 199,
        "demonyms": {
            "eng": {
                "f": "American Samoan",
                "m": "American Samoan"
            },
            "fra": {
                "f": "Samoane",
                "m": "Samoan"
            }
        },
        "flag": "\uD83C\uDDE6\uD83C\uDDF8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/Re9ePMjwP1sFCBFA6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/2177187"
        },
        "population": 55197,
        "fifa": "ASA",
        "car": {
            "signs": [
                "USA"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-11:00"
        ],
        "continents": [
            "Oceania"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/as.png",
            "svg": "https://flagcdn.com/as.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -14.27,
                -170.7
            ]
        }
    },
    {
        "name": {
            "common": "Venezuela",
            "official": "Bolivarian Republic of Venezuela",
            "nativeName": {
                "spa": {
                    "official": "Rep\xfablica Bolivariana de Venezuela",
                    "common": "Venezuela"
                }
            }
        },
        "tld": [
            ".ve"
        ],
        "cca2": "VE",
        "ccn3": "862",
        "cca3": "VEN",
        "cioc": "VEN",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "VES": {
                "name": "Venezuelan bol\xedvar soberano",
                "symbol": "Bs.S."
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "8"
            ]
        },
        "capital": [
            "Caracas"
        ],
        "altSpellings": [
            "VE",
            "Bolivarian Republic of Venezuela",
            "Venezuela, Bolivarian Republic of",
            "Rep\xfablica Bolivariana de Venezuela"
        ],
        "region": "Americas",
        "subregion": "South America",
        "languages": {
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0641\u0646\u0632\u0648\u064A\u0644\u0627 \u0627\u0644\u0628\u0648\u0644\u064A\u0641\u0627\u0631\u064A\u0629",
                "common": "\u0641\u0646\u0632\u0648\u064A\u0644\u0627"
            },
            "bre": {
                "official": "Republik Volivarian Venezuela",
                "common": "Venezuela"
            },
            "ces": {
                "official": "Bol\xedvarsk\xe1 republika Venezuela",
                "common": "Venezuela"
            },
            "cym": {
                "official": "Bolivarian Republic of Venezuela",
                "common": "Venezuela"
            },
            "deu": {
                "official": "Bolivarische Republik Venezuela",
                "common": "Venezuela"
            },
            "est": {
                "official": "Venezuela Bol\xedvari Vabariik",
                "common": "Venezuela"
            },
            "fin": {
                "official": "Venezuelan bolivariaainen tasavalta",
                "common": "Venezuela"
            },
            "fra": {
                "official": "R\xe9publique bolivarienne du Venezuela",
                "common": "Venezuela"
            },
            "hrv": {
                "official": "BOLIVARIJANSKA Republika Venezuela",
                "common": "Venezuela"
            },
            "hun": {
                "official": "Venezuelai Boliv\xe1ri K\xf6zt\xe1rsas\xe1g",
                "common": "Venezuela"
            },
            "ita": {
                "official": "Repubblica Bolivariana del Venezuela",
                "common": "Venezuela"
            },
            "jpn": {
                "official": "\u30D9\u30CD\u30BA\u30A8\u30E9\xb7\u30DC\u30EA\u30D0\u30EB\u5171\u548C\u56FD",
                "common": "\u30D9\u30CD\u30BA\u30A8\u30E9\u30FB\u30DC\u30EA\u30D0\u30EB\u5171\u548C\u56FD"
            },
            "kor": {
                "official": "\uBCA0\uB124\uC218\uC5D8\uB77C \uBCFC\uB9AC\uBC14\uB974 \uACF5\uD654\uAD6D",
                "common": "\uBCA0\uB124\uC218\uC5D8\uB77C"
            },
            "nld": {
                "official": "Bolivariaanse Republiek Venezuela",
                "common": "Venezuela"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0628\u0648\u0644\u06CC\u0648\u0627\u0631\u06CC \u0648\u0646\u0632\u0648\u0626\u0644\u0627",
                "common": "\u0648\u0646\u0632\u0648\u0626\u0644\u0627"
            },
            "pol": {
                "official": "Boliwaria\u0144ska Republika Wenezueli",
                "common": "Wenezuela"
            },
            "por": {
                "official": "Rep\xfablica Bolivariana da Venezuela",
                "common": "Venezuela"
            },
            "rus": {
                "official": "\u0411\u043E\u043B\u0438\u0432\u0430\u0440\u0438\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0412\u0435\u043D\u0435\u0441\u0443\u044D\u043B\u0430",
                "common": "\u0412\u0435\u043D\u0435\u0441\u0443\u044D\u043B\u0430"
            },
            "slk": {
                "official": "Venezuelsk\xe1 bol\xedvarovsk\xe1 republika",
                "common": "Venezuela"
            },
            "spa": {
                "official": "Rep\xfablica Bolivariana de Venezuela",
                "common": "Venezuela"
            },
            "srp": {
                "official": "\u0411\u043E\u043B\u0438\u0432\u0430\u0440\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0412\u0435\u043D\u0435\u0446\u0443\u0435\u043B\u0430",
                "common": "\u0412\u0435\u043D\u0435\u0446\u0443\u0435\u043B\u0430"
            },
            "swe": {
                "official": "Bolivarianska republiken Venezuela",
                "common": "Venezuela"
            },
            "tur": {
                "official": "Bolivarc\u0131 Venezuela Cumhuriyeti",
                "common": "Venezuela"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0648\u06CC\u0646\u06CC\u0632\u0648\u06CC\u0644\u0627",
                "common": "\u0648\u06CC\u0646\u06CC\u0632\u0648\u06CC\u0644\u0627"
            },
            "zho": {
                "official": "\u59D4\u5185\u745E\u62C9\u73BB\u5229\u74E6\u5C14\u5171\u548C\u56FD",
                "common": "\u59D4\u5185\u745E\u62C9"
            }
        },
        "latlng": [
            8,
            -66
        ],
        "landlocked": false,
        "borders": [
            "BRA",
            "COL",
            "GUY"
        ],
        "area": 916445,
        "demonyms": {
            "eng": {
                "f": "Venezuelan",
                "m": "Venezuelan"
            },
            "fra": {
                "f": "V\xe9n\xe9zu\xe9lienne",
                "m": "V\xe9n\xe9zu\xe9lien"
            }
        },
        "flag": "\uD83C\uDDFB\uD83C\uDDEA",
        "maps": {
            "googleMaps": "https://goo.gl/maps/KLCwDN8sec7z2kse9",
            "openStreetMaps": "https://www.openstreetmap.org/relation/272644"
        },
        "population": 28435943,
        "gini": {
            "2006": 44.8
        },
        "fifa": "VEN",
        "car": {
            "signs": [
                "YV"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "South America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/ve.png",
            "svg": "https://flagcdn.com/ve.svg",
            "alt": "The flag of Venezuela is composed of three equal horizontal bands of yellow, blue and red. At the center of the blue band are eight five-pointed white stars arranged in a horizontal arc."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/ve.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/ve.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                10.48,
                -66.87
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Costa Rica",
            "official": "Republic of Costa Rica",
            "nativeName": {
                "spa": {
                    "official": "Rep\xfablica de Costa Rica",
                    "common": "Costa Rica"
                }
            }
        },
        "tld": [
            ".cr"
        ],
        "cca2": "CR",
        "ccn3": "188",
        "cca3": "CRI",
        "cioc": "CRC",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "CRC": {
                "name": "Costa Rican col\xf3n",
                "symbol": "\u20A1"
            }
        },
        "idd": {
            "root": "+5",
            "suffixes": [
                "06"
            ]
        },
        "capital": [
            "San Jos\xe9"
        ],
        "altSpellings": [
            "CR",
            "Republic of Costa Rica",
            "Rep\xfablica de Costa Rica"
        ],
        "region": "Americas",
        "subregion": "Central America",
        "languages": {
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u0648\u0633\u062A\u0627\u0631\u064A\u0643\u0627",
                "common": "\u0643\u0648\u0633\u062A\u0627\u0631\u064A\u0643\u0627"
            },
            "bre": {
                "official": "Republik Costa Rica",
                "common": "Costa Rica"
            },
            "ces": {
                "official": "Kostarick\xe1 republika",
                "common": "Kostarika"
            },
            "cym": {
                "official": "Gweriniaeth Costa Rica",
                "common": "Costa Rica"
            },
            "deu": {
                "official": "Republik Costa Rica",
                "common": "Costa Rica"
            },
            "est": {
                "official": "Costa Rica Vabariik",
                "common": "Costa Rica"
            },
            "fin": {
                "official": "Costa Rican tasavalta",
                "common": "Costa Rica"
            },
            "fra": {
                "official": "R\xe9publique du Costa Rica",
                "common": "Costa Rica"
            },
            "hrv": {
                "official": "Republika Kostarika",
                "common": "Kostarika"
            },
            "hun": {
                "official": "Costa Rica-i K\xf6zt\xe1rsas\xe1g",
                "common": "Costa Rica"
            },
            "ita": {
                "official": "Repubblica di Costa Rica",
                "common": "Costa Rica"
            },
            "jpn": {
                "official": "\u30B3\u30B9\u30BF\u30EA\u30AB\u5171\u548C\u56FD",
                "common": "\u30B3\u30B9\u30BF\u30EA\u30AB"
            },
            "kor": {
                "official": "\uCF54\uC2A4\uD0C0\uB9AC\uCE74 \uACF5\uD654\uAD6D",
                "common": "\uCF54\uC2A4\uD0C0\uB9AC\uCE74"
            },
            "nld": {
                "official": "Republiek Costa Rica",
                "common": "Costa Rica"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u0627\u0633\u062A\u0627\u0631\u06CC\u06A9\u0627",
                "common": "\u06A9\u0627\u0633\u062A\u0627\u0631\u06CC\u06A9\u0627"
            },
            "pol": {
                "official": "Republika Kostaryki",
                "common": "Kostaryka"
            },
            "por": {
                "official": "Rep\xfablica da Costa Rica",
                "common": "Costa Rica"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0441\u0442\u0430-\u0420\u0438\u043A\u0430",
                "common": "\u041A\u043E\u0441\u0442\u0430-\u0420\u0438\u043A\u0430"
            },
            "slk": {
                "official": "Kostarick\xe1 republika",
                "common": "Kostarika"
            },
            "spa": {
                "official": "Rep\xfablica de Costa Rica",
                "common": "Costa Rica"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0441\u0442\u0430\u0440\u0438\u043A\u0430",
                "common": "\u041A\u043E\u0441\u0442\u0430\u0440\u0438\u043A\u0430"
            },
            "swe": {
                "official": "Republiken Costa Rica",
                "common": "Costa Rica"
            },
            "tur": {
                "official": "Kosta Rika Cumhuriyeti",
                "common": "Kosta Rika"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0648\u0633\u0679\u0627\u0631\u06CC\u06A9\u0627",
                "common": "\u06A9\u0648\u0633\u0679\u0627\u0631\u06CC\u06A9\u0627"
            },
            "zho": {
                "official": "\u54E5\u65AF\u8FBE\u9ECE\u52A0\u5171\u548C\u56FD",
                "common": "\u54E5\u65AF\u8FBE\u9ECE\u52A0"
            }
        },
        "latlng": [
            10,
            -84
        ],
        "landlocked": false,
        "borders": [
            "NIC",
            "PAN"
        ],
        "area": 51100,
        "demonyms": {
            "eng": {
                "f": "Costa Rican",
                "m": "Costa Rican"
            },
            "fra": {
                "f": "Costaricaine",
                "m": "Costaricain"
            }
        },
        "flag": "\uD83C\uDDE8\uD83C\uDDF7",
        "maps": {
            "googleMaps": "https://goo.gl/maps/RFiwytjvNrpfKN7k6",
            "openStreetMaps": "https://www.openstreetmap.org/relation/287667"
        },
        "population": 5094114,
        "gini": {
            "2019": 48.2
        },
        "fifa": "CRC",
        "car": {
            "signs": [
                "CR"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-06:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/cr.png",
            "svg": "https://flagcdn.com/cr.svg",
            "alt": "The flag of Costa Rica is composed of five horizontal bands of blue, white, red, white and blue. The central red band is twice the height of the other four bands."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/cr.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/cr.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                9.93,
                -84.09
            ]
        },
        "postalCode": {
            "format": "####",
            "regex": "^(\\d{4})$"
        }
    },
    {
        "name": {
            "common": "Puerto Rico",
            "official": "Commonwealth of Puerto Rico",
            "nativeName": {
                "eng": {
                    "official": "Commonwealth of Puerto Rico",
                    "common": "Puerto Rico"
                },
                "spa": {
                    "official": "Estado Libre Asociado de Puerto Rico",
                    "common": "Puerto Rico"
                }
            }
        },
        "tld": [
            ".pr"
        ],
        "cca2": "PR",
        "ccn3": "630",
        "cca3": "PRI",
        "cioc": "PUR",
        "independent": false,
        "status": "officially-assigned",
        "unMember": false,
        "currencies": {
            "USD": {
                "name": "United States dollar",
                "symbol": "$"
            }
        },
        "idd": {
            "root": "+1",
            "suffixes": [
                "787",
                "939"
            ]
        },
        "capital": [
            "San Juan"
        ],
        "altSpellings": [
            "PR",
            "Commonwealth of Puerto Rico",
            "Estado Libre Asociado de Puerto Rico"
        ],
        "region": "Americas",
        "subregion": "Caribbean",
        "languages": {
            "eng": "English",
            "spa": "Spanish"
        },
        "translations": {
            "ara": {
                "official": "\u0643\u0648\u0645\u0646\u0648\u0644\u062B \u0628\u0648\u064A\u0631\u062A\u0648\u0631\u064A\u0643\u0648",
                "common": "\u0628\u0648\u064A\u0631\u062A\u0648\u0631\u064A\u0643\u0648"
            },
            "bre": {
                "official": "Kenglad Puerto Rico",
                "common": "Puerto Rico"
            },
            "ces": {
                "official": "Portoriko",
                "common": "Portoriko"
            },
            "cym": {
                "official": "Commonwealth of Puerto Rico",
                "common": "Puerto Rico"
            },
            "deu": {
                "official": "Freistaat Puerto Rico",
                "common": "Puerto Rico"
            },
            "est": {
                "official": "Puerto Rico \xdchendus",
                "common": "Puerto Rico"
            },
            "fin": {
                "official": "Puerto Rico",
                "common": "Puerto Rico"
            },
            "fra": {
                "official": "Porto Rico",
                "common": "Porto Rico"
            },
            "hrv": {
                "official": "Zajednica Puerto Rico",
                "common": "Portoriko"
            },
            "hun": {
                "official": "Puerto Rico",
                "common": "Puerto Rico"
            },
            "ita": {
                "official": "Commonwealth di Porto Rico",
                "common": "Porto Rico"
            },
            "jpn": {
                "official": "\u30D7\u30A8\u30EB\u30C8\u30EA\u30B3\u306E\u30B3\u30E2\u30F3\u30A6\u30A7\u30EB\u30B9",
                "common": "\u30D7\u30A8\u30EB\u30C8\u30EA\u30B3"
            },
            "kor": {
                "official": "\uD478\uC5D0\uB974\uD1A0\uB9AC\uCF54",
                "common": "\uD478\uC5D0\uB974\uD1A0\uB9AC\uCF54"
            },
            "nld": {
                "official": "Gemenebest van Puerto Rico",
                "common": "Puerto Rico"
            },
            "per": {
                "official": "\u0642\u0644\u0645\u0631\u0648 \u0647\u0645\u0633\u0648\u062F \u067E\u0648\u0631\u062A\u0648\u0631\u06CC\u06A9\u0648",
                "common": "\u067E\u0648\u0631\u062A\u0648\u0631\u06CC\u06A9\u0648"
            },
            "pol": {
                "official": "Wolne Stowarzyszone Pa\u0144stwo Portoryko",
                "common": "Portoryko"
            },
            "por": {
                "official": "Commonwealth of Puerto Rico",
                "common": "Porto Rico"
            },
            "rus": {
                "official": "\u0421\u043E\u0434\u0440\u0443\u0436\u0435\u0441\u0442\u0432\u043E \u041F\u0443\u044D\u0440\u0442\u043E-\u0420\u0438\u043A\u043E",
                "common": "\u041F\u0443\u044D\u0440\u0442\u043E-\u0420\u0438\u043A\u043E"
            },
            "slk": {
                "official": "Portorick\xe9 spolo\u010Denstvo",
                "common": "Portoriko"
            },
            "spa": {
                "official": "Asociado de Puerto Rico",
                "common": "Puerto Rico"
            },
            "srp": {
                "official": "\u041A\u043E\u043C\u043E\u043D\u0432\u0435\u043B\u0442 \u041F\u043E\u0440\u0442\u043E\u0440\u0438\u043A\u043E",
                "common": "\u041F\u043E\u0440\u0442\u043E\u0440\u0438\u043A\u043E"
            },
            "swe": {
                "official": "Puerto Rico",
                "common": "Puerto Rico"
            },
            "tur": {
                "official": "Porto Riko Toplulu\u011Fu",
                "common": "Porto Riko"
            },
            "urd": {
                "official": " \u062F\u0648\u0644\u062A\u0650 \u0645\u0634\u062A\u0631\u06A9\u06C1 \u067E\u0648\u0631\u0679\u0648 \u0631\u06CC\u06A9\u0648",
                "common": "\u067E\u0648\u0631\u0679\u0648 \u0631\u06CC\u06A9\u0648"
            },
            "zho": {
                "official": "\u6CE2\u591A\u9ECE\u5404\u8054\u90A6",
                "common": "\u6CE2\u591A\u9ECE\u5404"
            }
        },
        "latlng": [
            18.25,
            -66.5
        ],
        "landlocked": false,
        "area": 8870,
        "demonyms": {
            "eng": {
                "f": "Puerto Rican",
                "m": "Puerto Rican"
            },
            "fra": {
                "f": "Portoricaine",
                "m": "Portoricain"
            }
        },
        "flag": "\uD83C\uDDF5\uD83C\uDDF7",
        "maps": {
            "googleMaps": "https://goo.gl/maps/sygfDbtwn389wu8x5",
            "openStreetMaps": "https://www.openstreetmap.org/relation/4422604"
        },
        "population": 3194034,
        "fifa": "PUR",
        "car": {
            "signs": [
                "USA"
            ],
            "side": "right"
        },
        "timezones": [
            "UTC-04:00"
        ],
        "continents": [
            "North America"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/pr.png",
            "svg": "https://flagcdn.com/pr.svg"
        },
        "coatOfArms": {},
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                18.47,
                -66.12
            ]
        },
        "postalCode": {
            "format": "#####-####",
            "regex": "^(\\d{9})$"
        }
    },
    {
        "name": {
            "common": "Seychelles",
            "official": "Republic of Seychelles",
            "nativeName": {
                "crs": {
                    "official": "Repiblik Sesel",
                    "common": "Sesel"
                },
                "eng": {
                    "official": "Republic of Seychelles",
                    "common": "Seychelles"
                },
                "fra": {
                    "official": "R\xe9publique des Seychelles",
                    "common": "Seychelles"
                }
            }
        },
        "tld": [
            ".sc"
        ],
        "cca2": "SC",
        "ccn3": "690",
        "cca3": "SYC",
        "cioc": "SEY",
        "independent": true,
        "status": "officially-assigned",
        "unMember": true,
        "currencies": {
            "SCR": {
                "name": "Seychellois rupee",
                "symbol": "\u20A8"
            }
        },
        "idd": {
            "root": "+2",
            "suffixes": [
                "48"
            ]
        },
        "capital": [
            "Victoria"
        ],
        "altSpellings": [
            "SC",
            "Republic of Seychelles",
            "Repiblik Sesel",
            "R\xe9publique des Seychelles"
        ],
        "region": "Africa",
        "subregion": "Eastern Africa",
        "languages": {
            "crs": "Seychellois Creole",
            "eng": "English",
            "fra": "French"
        },
        "translations": {
            "ara": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u064A\u0634\u0644",
                "common": "\u0633\u064A\u0634\u0644"
            },
            "bre": {
                "official": "Republik Sechelez",
                "common": "Sechelez"
            },
            "ces": {
                "official": "Seychelsk\xe1 republika",
                "common": "Seychely"
            },
            "cym": {
                "official": "Republic of Seychelles",
                "common": "Seychelles"
            },
            "deu": {
                "official": "Republik der Seychellen",
                "common": "Seychellen"
            },
            "est": {
                "official": "Sei\u0161elli Vabariik",
                "common": "Sei\u0161ellid"
            },
            "fin": {
                "official": "Seychellien tasavalta",
                "common": "Seychellit"
            },
            "fra": {
                "official": "R\xe9publique des Seychelles",
                "common": "Seychelles"
            },
            "hrv": {
                "official": "Republika Sej\u0161eli",
                "common": "Sej\u0161eli"
            },
            "hun": {
                "official": "Seychelle K\xf6zt\xe1rsas\xe1g",
                "common": "Seychelle-szigetek"
            },
            "ita": {
                "official": "Repubblica delle Seychelles",
                "common": "Seychelles"
            },
            "jpn": {
                "official": "\u30BB\u30A4\u30B7\u30A7\u30EB\u5171\u548C\u56FD",
                "common": "\u30BB\u30FC\u30B7\u30A7\u30EB"
            },
            "kor": {
                "official": "\uC138\uC774\uC178 \uACF5\uD654\uAD6D",
                "common": "\uC138\uC774\uC178"
            },
            "nld": {
                "official": "Republiek der Seychellen",
                "common": "Seychellen"
            },
            "per": {
                "official": "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u06CC\u0634\u0644",
                "common": "\u0633\u06CC\u0634\u0644"
            },
            "pol": {
                "official": "Republika Seszeli",
                "common": "Seszele"
            },
            "por": {
                "official": "Rep\xfablica das Seychelles",
                "common": "Seicheles"
            },
            "rus": {
                "official": "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u0439\u0448\u0435\u043B\u044C\u0441\u043A\u0438\u0435 \u041E\u0441\u0442\u0440\u043E\u0432\u0430",
                "common": "\u0421\u0435\u0439\u0448\u0435\u043B\u044C\u0441\u043A\u0438\u0435 \u041E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            "slk": {
                "official": "Seychelsk\xe1 republika",
                "common": "Seychely"
            },
            "spa": {
                "official": "Rep\xfablica de las Seychelles",
                "common": "Seychelles"
            },
            "srp": {
                "official": "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u0458\u0448\u0435\u043B\u0438",
                "common": "\u0421\u0435\u0458\u0448\u0435\u043B\u0438"
            },
            "swe": {
                "official": "Republiken Seychellerna",
                "common": "Seychellerna"
            },
            "tur": {
                "official": "Sey\u015Feller Cumhuriyeti",
                "common": "Sey\u015Feller"
            },
            "urd": {
                "official": "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u06CC\u0686\u06CC\u0644\u06CC\u0633",
                "common": "\u0633\u06CC\u0686\u06CC\u0644\u06CC\u0633"
            },
            "zho": {
                "official": "\u585E\u820C\u5C14\u5171\u548C\u56FD",
                "common": "\u585E\u820C\u5C14"
            }
        },
        "latlng": [
            -4.58333333,
            55.66666666
        ],
        "landlocked": false,
        "area": 452,
        "demonyms": {
            "eng": {
                "f": "Seychellois",
                "m": "Seychellois"
            },
            "fra": {
                "f": "Seychelloise",
                "m": "Seychellois"
            }
        },
        "flag": "\uD83C\uDDF8\uD83C\uDDE8",
        "maps": {
            "googleMaps": "https://goo.gl/maps/aqCcy2TKh5TV5MAX8",
            "openStreetMaps": "https://www.openstreetmap.org/relation/536765"
        },
        "population": 98462,
        "gini": {
            "2018": 32.1
        },
        "fifa": "SEY",
        "car": {
            "signs": [
                "SY"
            ],
            "side": "left"
        },
        "timezones": [
            "UTC+04:00"
        ],
        "continents": [
            "Africa"
        ],
        "flags": {
            "png": "https://flagcdn.com/w320/sc.png",
            "svg": "https://flagcdn.com/sc.svg",
            "alt": "The flag of Seychelles is composed of five broadening oblique bands of blue, yellow, red, white and green, which extend from the hoist side of the bottom edge to the top and fly edges of the field."
        },
        "coatOfArms": {
            "png": "https://mainfacts.com/media/images/coats_of_arms/sc.png",
            "svg": "https://mainfacts.com/media/images/coats_of_arms/sc.svg"
        },
        "startOfWeek": "monday",
        "capitalInfo": {
            "latlng": [
                -4.62,
                55.45
            ]
        }
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["hbj89","igcvL"], "igcvL", "parcelRequire2013")

//# sourceMappingURL=index.5baa4167.js.map
